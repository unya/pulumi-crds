// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Backup is the Schema for the backups API. It is used to define backup jobs and its storage.
type BackupPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     BackupSpecPatchPtrOutput        `pulumi:"spec"`
	Status   BackupStatusPatchPtrOutput      `pulumi:"status"`
}

// NewBackupPatch registers a new resource with the given unique name, arguments, and options.
func NewBackupPatch(ctx *pulumi.Context,
	name string, args *BackupPatchArgs, opts ...pulumi.ResourceOption) (*BackupPatch, error) {
	if args == nil {
		args = &BackupPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("Backup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BackupPatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:BackupPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPatch gets an existing BackupPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPatchState, opts ...pulumi.ResourceOption) (*BackupPatch, error) {
	var resource BackupPatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:BackupPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPatch resources.
type backupPatchState struct {
}

type BackupPatchState struct {
}

func (BackupPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPatchState)(nil)).Elem()
}

type backupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *BackupSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a BackupPatch resource.
type BackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     BackupSpecPatchPtrInput
}

func (BackupPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPatchArgs)(nil)).Elem()
}

type BackupPatchInput interface {
	pulumi.Input

	ToBackupPatchOutput() BackupPatchOutput
	ToBackupPatchOutputWithContext(ctx context.Context) BackupPatchOutput
}

func (*BackupPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPatch)(nil)).Elem()
}

func (i *BackupPatch) ToBackupPatchOutput() BackupPatchOutput {
	return i.ToBackupPatchOutputWithContext(context.Background())
}

func (i *BackupPatch) ToBackupPatchOutputWithContext(ctx context.Context) BackupPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPatchOutput)
}

// BackupPatchArrayInput is an input type that accepts BackupPatchArray and BackupPatchArrayOutput values.
// You can construct a concrete instance of `BackupPatchArrayInput` via:
//
//	BackupPatchArray{ BackupPatchArgs{...} }
type BackupPatchArrayInput interface {
	pulumi.Input

	ToBackupPatchArrayOutput() BackupPatchArrayOutput
	ToBackupPatchArrayOutputWithContext(context.Context) BackupPatchArrayOutput
}

type BackupPatchArray []BackupPatchInput

func (BackupPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPatch)(nil)).Elem()
}

func (i BackupPatchArray) ToBackupPatchArrayOutput() BackupPatchArrayOutput {
	return i.ToBackupPatchArrayOutputWithContext(context.Background())
}

func (i BackupPatchArray) ToBackupPatchArrayOutputWithContext(ctx context.Context) BackupPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPatchArrayOutput)
}

// BackupPatchMapInput is an input type that accepts BackupPatchMap and BackupPatchMapOutput values.
// You can construct a concrete instance of `BackupPatchMapInput` via:
//
//	BackupPatchMap{ "key": BackupPatchArgs{...} }
type BackupPatchMapInput interface {
	pulumi.Input

	ToBackupPatchMapOutput() BackupPatchMapOutput
	ToBackupPatchMapOutputWithContext(context.Context) BackupPatchMapOutput
}

type BackupPatchMap map[string]BackupPatchInput

func (BackupPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPatch)(nil)).Elem()
}

func (i BackupPatchMap) ToBackupPatchMapOutput() BackupPatchMapOutput {
	return i.ToBackupPatchMapOutputWithContext(context.Background())
}

func (i BackupPatchMap) ToBackupPatchMapOutputWithContext(ctx context.Context) BackupPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPatchMapOutput)
}

type BackupPatchOutput struct{ *pulumi.OutputState }

func (BackupPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPatch)(nil)).Elem()
}

func (o BackupPatchOutput) ToBackupPatchOutput() BackupPatchOutput {
	return o
}

func (o BackupPatchOutput) ToBackupPatchOutputWithContext(ctx context.Context) BackupPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BackupPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BackupPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BackupPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *BackupPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o BackupPatchOutput) Spec() BackupSpecPatchPtrOutput {
	return o.ApplyT(func(v *BackupPatch) BackupSpecPatchPtrOutput { return v.Spec }).(BackupSpecPatchPtrOutput)
}

func (o BackupPatchOutput) Status() BackupStatusPatchPtrOutput {
	return o.ApplyT(func(v *BackupPatch) BackupStatusPatchPtrOutput { return v.Status }).(BackupStatusPatchPtrOutput)
}

type BackupPatchArrayOutput struct{ *pulumi.OutputState }

func (BackupPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPatch)(nil)).Elem()
}

func (o BackupPatchArrayOutput) ToBackupPatchArrayOutput() BackupPatchArrayOutput {
	return o
}

func (o BackupPatchArrayOutput) ToBackupPatchArrayOutputWithContext(ctx context.Context) BackupPatchArrayOutput {
	return o
}

func (o BackupPatchArrayOutput) Index(i pulumi.IntInput) BackupPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPatch {
		return vs[0].([]*BackupPatch)[vs[1].(int)]
	}).(BackupPatchOutput)
}

type BackupPatchMapOutput struct{ *pulumi.OutputState }

func (BackupPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPatch)(nil)).Elem()
}

func (o BackupPatchMapOutput) ToBackupPatchMapOutput() BackupPatchMapOutput {
	return o
}

func (o BackupPatchMapOutput) ToBackupPatchMapOutputWithContext(ctx context.Context) BackupPatchMapOutput {
	return o
}

func (o BackupPatchMapOutput) MapIndex(k pulumi.StringInput) BackupPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPatch {
		return vs[0].(map[string]*BackupPatch)[vs[1].(string)]
	}).(BackupPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPatchInput)(nil)).Elem(), &BackupPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPatchArrayInput)(nil)).Elem(), BackupPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPatchMapInput)(nil)).Elem(), BackupPatchMap{})
	pulumi.RegisterOutputType(BackupPatchOutput{})
	pulumi.RegisterOutputType(BackupPatchArrayOutput{})
	pulumi.RegisterOutputType(BackupPatchMapOutput{})
}
