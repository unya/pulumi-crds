// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// SqlJob is the Schema for the sqljobs API. It is used to run sql scripts as jobs.
type SqlJobPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     SqlJobSpecPatchPtrOutput        `pulumi:"spec"`
	Status   SqlJobStatusPatchPtrOutput      `pulumi:"status"`
}

// NewSqlJobPatch registers a new resource with the given unique name, arguments, and options.
func NewSqlJobPatch(ctx *pulumi.Context,
	name string, args *SqlJobPatchArgs, opts ...pulumi.ResourceOption) (*SqlJobPatch, error) {
	if args == nil {
		args = &SqlJobPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("SqlJob")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SqlJobPatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:SqlJobPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlJobPatch gets an existing SqlJobPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlJobPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlJobPatchState, opts ...pulumi.ResourceOption) (*SqlJobPatch, error) {
	var resource SqlJobPatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:SqlJobPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlJobPatch resources.
type sqlJobPatchState struct {
}

type SqlJobPatchState struct {
}

func (SqlJobPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlJobPatchState)(nil)).Elem()
}

type sqlJobPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *SqlJobSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a SqlJobPatch resource.
type SqlJobPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     SqlJobSpecPatchPtrInput
}

func (SqlJobPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlJobPatchArgs)(nil)).Elem()
}

type SqlJobPatchInput interface {
	pulumi.Input

	ToSqlJobPatchOutput() SqlJobPatchOutput
	ToSqlJobPatchOutputWithContext(ctx context.Context) SqlJobPatchOutput
}

func (*SqlJobPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlJobPatch)(nil)).Elem()
}

func (i *SqlJobPatch) ToSqlJobPatchOutput() SqlJobPatchOutput {
	return i.ToSqlJobPatchOutputWithContext(context.Background())
}

func (i *SqlJobPatch) ToSqlJobPatchOutputWithContext(ctx context.Context) SqlJobPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobPatchOutput)
}

// SqlJobPatchArrayInput is an input type that accepts SqlJobPatchArray and SqlJobPatchArrayOutput values.
// You can construct a concrete instance of `SqlJobPatchArrayInput` via:
//
//	SqlJobPatchArray{ SqlJobPatchArgs{...} }
type SqlJobPatchArrayInput interface {
	pulumi.Input

	ToSqlJobPatchArrayOutput() SqlJobPatchArrayOutput
	ToSqlJobPatchArrayOutputWithContext(context.Context) SqlJobPatchArrayOutput
}

type SqlJobPatchArray []SqlJobPatchInput

func (SqlJobPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlJobPatch)(nil)).Elem()
}

func (i SqlJobPatchArray) ToSqlJobPatchArrayOutput() SqlJobPatchArrayOutput {
	return i.ToSqlJobPatchArrayOutputWithContext(context.Background())
}

func (i SqlJobPatchArray) ToSqlJobPatchArrayOutputWithContext(ctx context.Context) SqlJobPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobPatchArrayOutput)
}

// SqlJobPatchMapInput is an input type that accepts SqlJobPatchMap and SqlJobPatchMapOutput values.
// You can construct a concrete instance of `SqlJobPatchMapInput` via:
//
//	SqlJobPatchMap{ "key": SqlJobPatchArgs{...} }
type SqlJobPatchMapInput interface {
	pulumi.Input

	ToSqlJobPatchMapOutput() SqlJobPatchMapOutput
	ToSqlJobPatchMapOutputWithContext(context.Context) SqlJobPatchMapOutput
}

type SqlJobPatchMap map[string]SqlJobPatchInput

func (SqlJobPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlJobPatch)(nil)).Elem()
}

func (i SqlJobPatchMap) ToSqlJobPatchMapOutput() SqlJobPatchMapOutput {
	return i.ToSqlJobPatchMapOutputWithContext(context.Background())
}

func (i SqlJobPatchMap) ToSqlJobPatchMapOutputWithContext(ctx context.Context) SqlJobPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobPatchMapOutput)
}

type SqlJobPatchOutput struct{ *pulumi.OutputState }

func (SqlJobPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlJobPatch)(nil)).Elem()
}

func (o SqlJobPatchOutput) ToSqlJobPatchOutput() SqlJobPatchOutput {
	return o
}

func (o SqlJobPatchOutput) ToSqlJobPatchOutputWithContext(ctx context.Context) SqlJobPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SqlJobPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlJobPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SqlJobPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlJobPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SqlJobPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SqlJobPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SqlJobPatchOutput) Spec() SqlJobSpecPatchPtrOutput {
	return o.ApplyT(func(v *SqlJobPatch) SqlJobSpecPatchPtrOutput { return v.Spec }).(SqlJobSpecPatchPtrOutput)
}

func (o SqlJobPatchOutput) Status() SqlJobStatusPatchPtrOutput {
	return o.ApplyT(func(v *SqlJobPatch) SqlJobStatusPatchPtrOutput { return v.Status }).(SqlJobStatusPatchPtrOutput)
}

type SqlJobPatchArrayOutput struct{ *pulumi.OutputState }

func (SqlJobPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlJobPatch)(nil)).Elem()
}

func (o SqlJobPatchArrayOutput) ToSqlJobPatchArrayOutput() SqlJobPatchArrayOutput {
	return o
}

func (o SqlJobPatchArrayOutput) ToSqlJobPatchArrayOutputWithContext(ctx context.Context) SqlJobPatchArrayOutput {
	return o
}

func (o SqlJobPatchArrayOutput) Index(i pulumi.IntInput) SqlJobPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlJobPatch {
		return vs[0].([]*SqlJobPatch)[vs[1].(int)]
	}).(SqlJobPatchOutput)
}

type SqlJobPatchMapOutput struct{ *pulumi.OutputState }

func (SqlJobPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlJobPatch)(nil)).Elem()
}

func (o SqlJobPatchMapOutput) ToSqlJobPatchMapOutput() SqlJobPatchMapOutput {
	return o
}

func (o SqlJobPatchMapOutput) ToSqlJobPatchMapOutputWithContext(ctx context.Context) SqlJobPatchMapOutput {
	return o
}

func (o SqlJobPatchMapOutput) MapIndex(k pulumi.StringInput) SqlJobPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlJobPatch {
		return vs[0].(map[string]*SqlJobPatch)[vs[1].(string)]
	}).(SqlJobPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobPatchInput)(nil)).Elem(), &SqlJobPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobPatchArrayInput)(nil)).Elem(), SqlJobPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobPatchMapInput)(nil)).Elem(), SqlJobPatchMap{})
	pulumi.RegisterOutputType(SqlJobPatchOutput{})
	pulumi.RegisterOutputType(SqlJobPatchArrayOutput{})
	pulumi.RegisterOutputType(SqlJobPatchMapOutput{})
}
