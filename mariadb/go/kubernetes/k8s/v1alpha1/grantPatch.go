// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Grant is the Schema for the grants API. It is used to define grants as if you were running a 'GRANT' statement.
type GrantPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     GrantSpecPatchPtrOutput         `pulumi:"spec"`
	Status   GrantStatusPatchPtrOutput       `pulumi:"status"`
}

// NewGrantPatch registers a new resource with the given unique name, arguments, and options.
func NewGrantPatch(ctx *pulumi.Context,
	name string, args *GrantPatchArgs, opts ...pulumi.ResourceOption) (*GrantPatch, error) {
	if args == nil {
		args = &GrantPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("Grant")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GrantPatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:GrantPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrantPatch gets an existing GrantPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrantPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantPatchState, opts ...pulumi.ResourceOption) (*GrantPatch, error) {
	var resource GrantPatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:GrantPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrantPatch resources.
type grantPatchState struct {
}

type GrantPatchState struct {
}

func (GrantPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantPatchState)(nil)).Elem()
}

type grantPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *GrantSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a GrantPatch resource.
type GrantPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     GrantSpecPatchPtrInput
}

func (GrantPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantPatchArgs)(nil)).Elem()
}

type GrantPatchInput interface {
	pulumi.Input

	ToGrantPatchOutput() GrantPatchOutput
	ToGrantPatchOutputWithContext(ctx context.Context) GrantPatchOutput
}

func (*GrantPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPatch)(nil)).Elem()
}

func (i *GrantPatch) ToGrantPatchOutput() GrantPatchOutput {
	return i.ToGrantPatchOutputWithContext(context.Background())
}

func (i *GrantPatch) ToGrantPatchOutputWithContext(ctx context.Context) GrantPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPatchOutput)
}

// GrantPatchArrayInput is an input type that accepts GrantPatchArray and GrantPatchArrayOutput values.
// You can construct a concrete instance of `GrantPatchArrayInput` via:
//
//	GrantPatchArray{ GrantPatchArgs{...} }
type GrantPatchArrayInput interface {
	pulumi.Input

	ToGrantPatchArrayOutput() GrantPatchArrayOutput
	ToGrantPatchArrayOutputWithContext(context.Context) GrantPatchArrayOutput
}

type GrantPatchArray []GrantPatchInput

func (GrantPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantPatch)(nil)).Elem()
}

func (i GrantPatchArray) ToGrantPatchArrayOutput() GrantPatchArrayOutput {
	return i.ToGrantPatchArrayOutputWithContext(context.Background())
}

func (i GrantPatchArray) ToGrantPatchArrayOutputWithContext(ctx context.Context) GrantPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPatchArrayOutput)
}

// GrantPatchMapInput is an input type that accepts GrantPatchMap and GrantPatchMapOutput values.
// You can construct a concrete instance of `GrantPatchMapInput` via:
//
//	GrantPatchMap{ "key": GrantPatchArgs{...} }
type GrantPatchMapInput interface {
	pulumi.Input

	ToGrantPatchMapOutput() GrantPatchMapOutput
	ToGrantPatchMapOutputWithContext(context.Context) GrantPatchMapOutput
}

type GrantPatchMap map[string]GrantPatchInput

func (GrantPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantPatch)(nil)).Elem()
}

func (i GrantPatchMap) ToGrantPatchMapOutput() GrantPatchMapOutput {
	return i.ToGrantPatchMapOutputWithContext(context.Background())
}

func (i GrantPatchMap) ToGrantPatchMapOutputWithContext(ctx context.Context) GrantPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrantPatchMapOutput)
}

type GrantPatchOutput struct{ *pulumi.OutputState }

func (GrantPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrantPatch)(nil)).Elem()
}

func (o GrantPatchOutput) ToGrantPatchOutput() GrantPatchOutput {
	return o
}

func (o GrantPatchOutput) ToGrantPatchOutputWithContext(ctx context.Context) GrantPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GrantPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GrantPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrantPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GrantPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *GrantPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GrantPatchOutput) Spec() GrantSpecPatchPtrOutput {
	return o.ApplyT(func(v *GrantPatch) GrantSpecPatchPtrOutput { return v.Spec }).(GrantSpecPatchPtrOutput)
}

func (o GrantPatchOutput) Status() GrantStatusPatchPtrOutput {
	return o.ApplyT(func(v *GrantPatch) GrantStatusPatchPtrOutput { return v.Status }).(GrantStatusPatchPtrOutput)
}

type GrantPatchArrayOutput struct{ *pulumi.OutputState }

func (GrantPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrantPatch)(nil)).Elem()
}

func (o GrantPatchArrayOutput) ToGrantPatchArrayOutput() GrantPatchArrayOutput {
	return o
}

func (o GrantPatchArrayOutput) ToGrantPatchArrayOutputWithContext(ctx context.Context) GrantPatchArrayOutput {
	return o
}

func (o GrantPatchArrayOutput) Index(i pulumi.IntInput) GrantPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrantPatch {
		return vs[0].([]*GrantPatch)[vs[1].(int)]
	}).(GrantPatchOutput)
}

type GrantPatchMapOutput struct{ *pulumi.OutputState }

func (GrantPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrantPatch)(nil)).Elem()
}

func (o GrantPatchMapOutput) ToGrantPatchMapOutput() GrantPatchMapOutput {
	return o
}

func (o GrantPatchMapOutput) ToGrantPatchMapOutputWithContext(ctx context.Context) GrantPatchMapOutput {
	return o
}

func (o GrantPatchMapOutput) MapIndex(k pulumi.StringInput) GrantPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrantPatch {
		return vs[0].(map[string]*GrantPatch)[vs[1].(string)]
	}).(GrantPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPatchInput)(nil)).Elem(), &GrantPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPatchArrayInput)(nil)).Elem(), GrantPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrantPatchMapInput)(nil)).Elem(), GrantPatchMap{})
	pulumi.RegisterOutputType(GrantPatchOutput{})
	pulumi.RegisterOutputType(GrantPatchArrayOutput{})
	pulumi.RegisterOutputType(GrantPatchMapOutput{})
}
