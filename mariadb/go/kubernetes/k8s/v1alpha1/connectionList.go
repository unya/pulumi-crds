// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ConnectionList is a list of Connection
type ConnectionList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of connections. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ConnectionTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewConnectionList registers a new resource with the given unique name, arguments, and options.
func NewConnectionList(ctx *pulumi.Context,
	name string, args *ConnectionListArgs, opts ...pulumi.ResourceOption) (*ConnectionList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("ConnectionList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ConnectionList
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:ConnectionList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionList gets an existing ConnectionList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionListState, opts ...pulumi.ResourceOption) (*ConnectionList, error) {
	var resource ConnectionList
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:ConnectionList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionList resources.
type connectionListState struct {
}

type ConnectionListState struct {
}

func (ConnectionListState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionListState)(nil)).Elem()
}

type connectionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of connections. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ConnectionType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ConnectionList resource.
type ConnectionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of connections. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ConnectionTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ConnectionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionListArgs)(nil)).Elem()
}

type ConnectionListInput interface {
	pulumi.Input

	ToConnectionListOutput() ConnectionListOutput
	ToConnectionListOutputWithContext(ctx context.Context) ConnectionListOutput
}

func (*ConnectionList) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionList)(nil)).Elem()
}

func (i *ConnectionList) ToConnectionListOutput() ConnectionListOutput {
	return i.ToConnectionListOutputWithContext(context.Background())
}

func (i *ConnectionList) ToConnectionListOutputWithContext(ctx context.Context) ConnectionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionListOutput)
}

// ConnectionListArrayInput is an input type that accepts ConnectionListArray and ConnectionListArrayOutput values.
// You can construct a concrete instance of `ConnectionListArrayInput` via:
//
//	ConnectionListArray{ ConnectionListArgs{...} }
type ConnectionListArrayInput interface {
	pulumi.Input

	ToConnectionListArrayOutput() ConnectionListArrayOutput
	ToConnectionListArrayOutputWithContext(context.Context) ConnectionListArrayOutput
}

type ConnectionListArray []ConnectionListInput

func (ConnectionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionList)(nil)).Elem()
}

func (i ConnectionListArray) ToConnectionListArrayOutput() ConnectionListArrayOutput {
	return i.ToConnectionListArrayOutputWithContext(context.Background())
}

func (i ConnectionListArray) ToConnectionListArrayOutputWithContext(ctx context.Context) ConnectionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionListArrayOutput)
}

// ConnectionListMapInput is an input type that accepts ConnectionListMap and ConnectionListMapOutput values.
// You can construct a concrete instance of `ConnectionListMapInput` via:
//
//	ConnectionListMap{ "key": ConnectionListArgs{...} }
type ConnectionListMapInput interface {
	pulumi.Input

	ToConnectionListMapOutput() ConnectionListMapOutput
	ToConnectionListMapOutputWithContext(context.Context) ConnectionListMapOutput
}

type ConnectionListMap map[string]ConnectionListInput

func (ConnectionListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionList)(nil)).Elem()
}

func (i ConnectionListMap) ToConnectionListMapOutput() ConnectionListMapOutput {
	return i.ToConnectionListMapOutputWithContext(context.Background())
}

func (i ConnectionListMap) ToConnectionListMapOutputWithContext(ctx context.Context) ConnectionListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionListMapOutput)
}

type ConnectionListOutput struct{ *pulumi.OutputState }

func (ConnectionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionList)(nil)).Elem()
}

func (o ConnectionListOutput) ToConnectionListOutput() ConnectionListOutput {
	return o
}

func (o ConnectionListOutput) ToConnectionListOutputWithContext(ctx context.Context) ConnectionListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ConnectionListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of connections. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ConnectionListOutput) Items() ConnectionTypeArrayOutput {
	return o.ApplyT(func(v *ConnectionList) ConnectionTypeArrayOutput { return v.Items }).(ConnectionTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConnectionListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConnectionListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ConnectionList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ConnectionListArrayOutput struct{ *pulumi.OutputState }

func (ConnectionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionList)(nil)).Elem()
}

func (o ConnectionListArrayOutput) ToConnectionListArrayOutput() ConnectionListArrayOutput {
	return o
}

func (o ConnectionListArrayOutput) ToConnectionListArrayOutputWithContext(ctx context.Context) ConnectionListArrayOutput {
	return o
}

func (o ConnectionListArrayOutput) Index(i pulumi.IntInput) ConnectionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionList {
		return vs[0].([]*ConnectionList)[vs[1].(int)]
	}).(ConnectionListOutput)
}

type ConnectionListMapOutput struct{ *pulumi.OutputState }

func (ConnectionListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionList)(nil)).Elem()
}

func (o ConnectionListMapOutput) ToConnectionListMapOutput() ConnectionListMapOutput {
	return o
}

func (o ConnectionListMapOutput) ToConnectionListMapOutputWithContext(ctx context.Context) ConnectionListMapOutput {
	return o
}

func (o ConnectionListMapOutput) MapIndex(k pulumi.StringInput) ConnectionListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionList {
		return vs[0].(map[string]*ConnectionList)[vs[1].(string)]
	}).(ConnectionListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionListInput)(nil)).Elem(), &ConnectionList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionListArrayInput)(nil)).Elem(), ConnectionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionListMapInput)(nil)).Elem(), ConnectionListMap{})
	pulumi.RegisterOutputType(ConnectionListOutput{})
	pulumi.RegisterOutputType(ConnectionListArrayOutput{})
	pulumi.RegisterOutputType(ConnectionListMapOutput{})
}
