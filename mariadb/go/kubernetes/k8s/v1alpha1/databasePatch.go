// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Database is the Schema for the databases API. It is used to define a logical database as if you were running a 'CREATE DATABASE' statement.
type DatabasePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     DatabaseSpecPatchPtrOutput      `pulumi:"spec"`
	Status   DatabaseStatusPatchPtrOutput    `pulumi:"status"`
}

// NewDatabasePatch registers a new resource with the given unique name, arguments, and options.
func NewDatabasePatch(ctx *pulumi.Context,
	name string, args *DatabasePatchArgs, opts ...pulumi.ResourceOption) (*DatabasePatch, error) {
	if args == nil {
		args = &DatabasePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("Database")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DatabasePatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:DatabasePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasePatch gets an existing DatabasePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasePatchState, opts ...pulumi.ResourceOption) (*DatabasePatch, error) {
	var resource DatabasePatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:DatabasePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasePatch resources.
type databasePatchState struct {
}

type DatabasePatchState struct {
}

func (DatabasePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePatchState)(nil)).Elem()
}

type databasePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *DatabaseSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a DatabasePatch resource.
type DatabasePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     DatabaseSpecPatchPtrInput
}

func (DatabasePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePatchArgs)(nil)).Elem()
}

type DatabasePatchInput interface {
	pulumi.Input

	ToDatabasePatchOutput() DatabasePatchOutput
	ToDatabasePatchOutputWithContext(ctx context.Context) DatabasePatchOutput
}

func (*DatabasePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePatch)(nil)).Elem()
}

func (i *DatabasePatch) ToDatabasePatchOutput() DatabasePatchOutput {
	return i.ToDatabasePatchOutputWithContext(context.Background())
}

func (i *DatabasePatch) ToDatabasePatchOutputWithContext(ctx context.Context) DatabasePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePatchOutput)
}

// DatabasePatchArrayInput is an input type that accepts DatabasePatchArray and DatabasePatchArrayOutput values.
// You can construct a concrete instance of `DatabasePatchArrayInput` via:
//
//	DatabasePatchArray{ DatabasePatchArgs{...} }
type DatabasePatchArrayInput interface {
	pulumi.Input

	ToDatabasePatchArrayOutput() DatabasePatchArrayOutput
	ToDatabasePatchArrayOutputWithContext(context.Context) DatabasePatchArrayOutput
}

type DatabasePatchArray []DatabasePatchInput

func (DatabasePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePatch)(nil)).Elem()
}

func (i DatabasePatchArray) ToDatabasePatchArrayOutput() DatabasePatchArrayOutput {
	return i.ToDatabasePatchArrayOutputWithContext(context.Background())
}

func (i DatabasePatchArray) ToDatabasePatchArrayOutputWithContext(ctx context.Context) DatabasePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePatchArrayOutput)
}

// DatabasePatchMapInput is an input type that accepts DatabasePatchMap and DatabasePatchMapOutput values.
// You can construct a concrete instance of `DatabasePatchMapInput` via:
//
//	DatabasePatchMap{ "key": DatabasePatchArgs{...} }
type DatabasePatchMapInput interface {
	pulumi.Input

	ToDatabasePatchMapOutput() DatabasePatchMapOutput
	ToDatabasePatchMapOutputWithContext(context.Context) DatabasePatchMapOutput
}

type DatabasePatchMap map[string]DatabasePatchInput

func (DatabasePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePatch)(nil)).Elem()
}

func (i DatabasePatchMap) ToDatabasePatchMapOutput() DatabasePatchMapOutput {
	return i.ToDatabasePatchMapOutputWithContext(context.Background())
}

func (i DatabasePatchMap) ToDatabasePatchMapOutputWithContext(ctx context.Context) DatabasePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePatchMapOutput)
}

type DatabasePatchOutput struct{ *pulumi.OutputState }

func (DatabasePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePatch)(nil)).Elem()
}

func (o DatabasePatchOutput) ToDatabasePatchOutput() DatabasePatchOutput {
	return o
}

func (o DatabasePatchOutput) ToDatabasePatchOutputWithContext(ctx context.Context) DatabasePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DatabasePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DatabasePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabasePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DatabasePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *DatabasePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o DatabasePatchOutput) Spec() DatabaseSpecPatchPtrOutput {
	return o.ApplyT(func(v *DatabasePatch) DatabaseSpecPatchPtrOutput { return v.Spec }).(DatabaseSpecPatchPtrOutput)
}

func (o DatabasePatchOutput) Status() DatabaseStatusPatchPtrOutput {
	return o.ApplyT(func(v *DatabasePatch) DatabaseStatusPatchPtrOutput { return v.Status }).(DatabaseStatusPatchPtrOutput)
}

type DatabasePatchArrayOutput struct{ *pulumi.OutputState }

func (DatabasePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePatch)(nil)).Elem()
}

func (o DatabasePatchArrayOutput) ToDatabasePatchArrayOutput() DatabasePatchArrayOutput {
	return o
}

func (o DatabasePatchArrayOutput) ToDatabasePatchArrayOutputWithContext(ctx context.Context) DatabasePatchArrayOutput {
	return o
}

func (o DatabasePatchArrayOutput) Index(i pulumi.IntInput) DatabasePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabasePatch {
		return vs[0].([]*DatabasePatch)[vs[1].(int)]
	}).(DatabasePatchOutput)
}

type DatabasePatchMapOutput struct{ *pulumi.OutputState }

func (DatabasePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePatch)(nil)).Elem()
}

func (o DatabasePatchMapOutput) ToDatabasePatchMapOutput() DatabasePatchMapOutput {
	return o
}

func (o DatabasePatchMapOutput) ToDatabasePatchMapOutputWithContext(ctx context.Context) DatabasePatchMapOutput {
	return o
}

func (o DatabasePatchMapOutput) MapIndex(k pulumi.StringInput) DatabasePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabasePatch {
		return vs[0].(map[string]*DatabasePatch)[vs[1].(string)]
	}).(DatabasePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePatchInput)(nil)).Elem(), &DatabasePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePatchArrayInput)(nil)).Elem(), DatabasePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePatchMapInput)(nil)).Elem(), DatabasePatchMap{})
	pulumi.RegisterOutputType(DatabasePatchOutput{})
	pulumi.RegisterOutputType(DatabasePatchArrayOutput{})
	pulumi.RegisterOutputType(DatabasePatchMapOutput{})
}
