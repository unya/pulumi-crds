// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// MariaDB is the Schema for the mariadbs API. It is used to define MariaDB clusters.
type MariaDBPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     MariaDBSpecPatchPtrOutput       `pulumi:"spec"`
	Status   MariaDBStatusPatchPtrOutput     `pulumi:"status"`
}

// NewMariaDBPatch registers a new resource with the given unique name, arguments, and options.
func NewMariaDBPatch(ctx *pulumi.Context,
	name string, args *MariaDBPatchArgs, opts ...pulumi.ResourceOption) (*MariaDBPatch, error) {
	if args == nil {
		args = &MariaDBPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("MariaDB")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MariaDBPatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:MariaDBPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMariaDBPatch gets an existing MariaDBPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMariaDBPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MariaDBPatchState, opts ...pulumi.ResourceOption) (*MariaDBPatch, error) {
	var resource MariaDBPatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:MariaDBPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MariaDBPatch resources.
type mariaDBPatchState struct {
}

type MariaDBPatchState struct {
}

func (MariaDBPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*mariaDBPatchState)(nil)).Elem()
}

type mariaDBPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *MariaDBSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a MariaDBPatch resource.
type MariaDBPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     MariaDBSpecPatchPtrInput
}

func (MariaDBPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mariaDBPatchArgs)(nil)).Elem()
}

type MariaDBPatchInput interface {
	pulumi.Input

	ToMariaDBPatchOutput() MariaDBPatchOutput
	ToMariaDBPatchOutputWithContext(ctx context.Context) MariaDBPatchOutput
}

func (*MariaDBPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**MariaDBPatch)(nil)).Elem()
}

func (i *MariaDBPatch) ToMariaDBPatchOutput() MariaDBPatchOutput {
	return i.ToMariaDBPatchOutputWithContext(context.Background())
}

func (i *MariaDBPatch) ToMariaDBPatchOutputWithContext(ctx context.Context) MariaDBPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBPatchOutput)
}

// MariaDBPatchArrayInput is an input type that accepts MariaDBPatchArray and MariaDBPatchArrayOutput values.
// You can construct a concrete instance of `MariaDBPatchArrayInput` via:
//
//	MariaDBPatchArray{ MariaDBPatchArgs{...} }
type MariaDBPatchArrayInput interface {
	pulumi.Input

	ToMariaDBPatchArrayOutput() MariaDBPatchArrayOutput
	ToMariaDBPatchArrayOutputWithContext(context.Context) MariaDBPatchArrayOutput
}

type MariaDBPatchArray []MariaDBPatchInput

func (MariaDBPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariaDBPatch)(nil)).Elem()
}

func (i MariaDBPatchArray) ToMariaDBPatchArrayOutput() MariaDBPatchArrayOutput {
	return i.ToMariaDBPatchArrayOutputWithContext(context.Background())
}

func (i MariaDBPatchArray) ToMariaDBPatchArrayOutputWithContext(ctx context.Context) MariaDBPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBPatchArrayOutput)
}

// MariaDBPatchMapInput is an input type that accepts MariaDBPatchMap and MariaDBPatchMapOutput values.
// You can construct a concrete instance of `MariaDBPatchMapInput` via:
//
//	MariaDBPatchMap{ "key": MariaDBPatchArgs{...} }
type MariaDBPatchMapInput interface {
	pulumi.Input

	ToMariaDBPatchMapOutput() MariaDBPatchMapOutput
	ToMariaDBPatchMapOutputWithContext(context.Context) MariaDBPatchMapOutput
}

type MariaDBPatchMap map[string]MariaDBPatchInput

func (MariaDBPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariaDBPatch)(nil)).Elem()
}

func (i MariaDBPatchMap) ToMariaDBPatchMapOutput() MariaDBPatchMapOutput {
	return i.ToMariaDBPatchMapOutputWithContext(context.Background())
}

func (i MariaDBPatchMap) ToMariaDBPatchMapOutputWithContext(ctx context.Context) MariaDBPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBPatchMapOutput)
}

type MariaDBPatchOutput struct{ *pulumi.OutputState }

func (MariaDBPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MariaDBPatch)(nil)).Elem()
}

func (o MariaDBPatchOutput) ToMariaDBPatchOutput() MariaDBPatchOutput {
	return o
}

func (o MariaDBPatchOutput) ToMariaDBPatchOutputWithContext(ctx context.Context) MariaDBPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o MariaDBPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariaDBPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MariaDBPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MariaDBPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MariaDBPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *MariaDBPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o MariaDBPatchOutput) Spec() MariaDBSpecPatchPtrOutput {
	return o.ApplyT(func(v *MariaDBPatch) MariaDBSpecPatchPtrOutput { return v.Spec }).(MariaDBSpecPatchPtrOutput)
}

func (o MariaDBPatchOutput) Status() MariaDBStatusPatchPtrOutput {
	return o.ApplyT(func(v *MariaDBPatch) MariaDBStatusPatchPtrOutput { return v.Status }).(MariaDBStatusPatchPtrOutput)
}

type MariaDBPatchArrayOutput struct{ *pulumi.OutputState }

func (MariaDBPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariaDBPatch)(nil)).Elem()
}

func (o MariaDBPatchArrayOutput) ToMariaDBPatchArrayOutput() MariaDBPatchArrayOutput {
	return o
}

func (o MariaDBPatchArrayOutput) ToMariaDBPatchArrayOutputWithContext(ctx context.Context) MariaDBPatchArrayOutput {
	return o
}

func (o MariaDBPatchArrayOutput) Index(i pulumi.IntInput) MariaDBPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MariaDBPatch {
		return vs[0].([]*MariaDBPatch)[vs[1].(int)]
	}).(MariaDBPatchOutput)
}

type MariaDBPatchMapOutput struct{ *pulumi.OutputState }

func (MariaDBPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariaDBPatch)(nil)).Elem()
}

func (o MariaDBPatchMapOutput) ToMariaDBPatchMapOutput() MariaDBPatchMapOutput {
	return o
}

func (o MariaDBPatchMapOutput) ToMariaDBPatchMapOutputWithContext(ctx context.Context) MariaDBPatchMapOutput {
	return o
}

func (o MariaDBPatchMapOutput) MapIndex(k pulumi.StringInput) MariaDBPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MariaDBPatch {
		return vs[0].(map[string]*MariaDBPatch)[vs[1].(string)]
	}).(MariaDBPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBPatchInput)(nil)).Elem(), &MariaDBPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBPatchArrayInput)(nil)).Elem(), MariaDBPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBPatchMapInput)(nil)).Elem(), MariaDBPatchMap{})
	pulumi.RegisterOutputType(MariaDBPatchOutput{})
	pulumi.RegisterOutputType(MariaDBPatchArrayOutput{})
	pulumi.RegisterOutputType(MariaDBPatchMapOutput{})
}
