// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MariaDB is the Schema for the mariadbs API. It is used to define MariaDB clusters.
type MariaDB struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     MariaDBSpecOutput       `pulumi:"spec"`
	Status   MariaDBStatusPtrOutput  `pulumi:"status"`
}

// NewMariaDB registers a new resource with the given unique name, arguments, and options.
func NewMariaDB(ctx *pulumi.Context,
	name string, args *MariaDBArgs, opts ...pulumi.ResourceOption) (*MariaDB, error) {
	if args == nil {
		args = &MariaDBArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("MariaDB")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MariaDB
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:MariaDB", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMariaDB gets an existing MariaDB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMariaDB(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MariaDBState, opts ...pulumi.ResourceOption) (*MariaDB, error) {
	var resource MariaDB
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:MariaDB", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MariaDB resources.
type mariaDBState struct {
}

type MariaDBState struct {
}

func (MariaDBState) ElementType() reflect.Type {
	return reflect.TypeOf((*mariaDBState)(nil)).Elem()
}

type mariaDBArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *MariaDBSpec       `pulumi:"spec"`
}

// The set of arguments for constructing a MariaDB resource.
type MariaDBArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     MariaDBSpecPtrInput
}

func (MariaDBArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mariaDBArgs)(nil)).Elem()
}

type MariaDBInput interface {
	pulumi.Input

	ToMariaDBOutput() MariaDBOutput
	ToMariaDBOutputWithContext(ctx context.Context) MariaDBOutput
}

func (*MariaDB) ElementType() reflect.Type {
	return reflect.TypeOf((**MariaDB)(nil)).Elem()
}

func (i *MariaDB) ToMariaDBOutput() MariaDBOutput {
	return i.ToMariaDBOutputWithContext(context.Background())
}

func (i *MariaDB) ToMariaDBOutputWithContext(ctx context.Context) MariaDBOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBOutput)
}

// MariaDBArrayInput is an input type that accepts MariaDBArray and MariaDBArrayOutput values.
// You can construct a concrete instance of `MariaDBArrayInput` via:
//
//	MariaDBArray{ MariaDBArgs{...} }
type MariaDBArrayInput interface {
	pulumi.Input

	ToMariaDBArrayOutput() MariaDBArrayOutput
	ToMariaDBArrayOutputWithContext(context.Context) MariaDBArrayOutput
}

type MariaDBArray []MariaDBInput

func (MariaDBArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariaDB)(nil)).Elem()
}

func (i MariaDBArray) ToMariaDBArrayOutput() MariaDBArrayOutput {
	return i.ToMariaDBArrayOutputWithContext(context.Background())
}

func (i MariaDBArray) ToMariaDBArrayOutputWithContext(ctx context.Context) MariaDBArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBArrayOutput)
}

// MariaDBMapInput is an input type that accepts MariaDBMap and MariaDBMapOutput values.
// You can construct a concrete instance of `MariaDBMapInput` via:
//
//	MariaDBMap{ "key": MariaDBArgs{...} }
type MariaDBMapInput interface {
	pulumi.Input

	ToMariaDBMapOutput() MariaDBMapOutput
	ToMariaDBMapOutputWithContext(context.Context) MariaDBMapOutput
}

type MariaDBMap map[string]MariaDBInput

func (MariaDBMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariaDB)(nil)).Elem()
}

func (i MariaDBMap) ToMariaDBMapOutput() MariaDBMapOutput {
	return i.ToMariaDBMapOutputWithContext(context.Background())
}

func (i MariaDBMap) ToMariaDBMapOutputWithContext(ctx context.Context) MariaDBMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MariaDBMapOutput)
}

type MariaDBOutput struct{ *pulumi.OutputState }

func (MariaDBOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MariaDB)(nil)).Elem()
}

func (o MariaDBOutput) ToMariaDBOutput() MariaDBOutput {
	return o
}

func (o MariaDBOutput) ToMariaDBOutputWithContext(ctx context.Context) MariaDBOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o MariaDBOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *MariaDB) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MariaDBOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *MariaDB) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MariaDBOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *MariaDB) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o MariaDBOutput) Spec() MariaDBSpecOutput {
	return o.ApplyT(func(v *MariaDB) MariaDBSpecOutput { return v.Spec }).(MariaDBSpecOutput)
}

func (o MariaDBOutput) Status() MariaDBStatusPtrOutput {
	return o.ApplyT(func(v *MariaDB) MariaDBStatusPtrOutput { return v.Status }).(MariaDBStatusPtrOutput)
}

type MariaDBArrayOutput struct{ *pulumi.OutputState }

func (MariaDBArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MariaDB)(nil)).Elem()
}

func (o MariaDBArrayOutput) ToMariaDBArrayOutput() MariaDBArrayOutput {
	return o
}

func (o MariaDBArrayOutput) ToMariaDBArrayOutputWithContext(ctx context.Context) MariaDBArrayOutput {
	return o
}

func (o MariaDBArrayOutput) Index(i pulumi.IntInput) MariaDBOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MariaDB {
		return vs[0].([]*MariaDB)[vs[1].(int)]
	}).(MariaDBOutput)
}

type MariaDBMapOutput struct{ *pulumi.OutputState }

func (MariaDBMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MariaDB)(nil)).Elem()
}

func (o MariaDBMapOutput) ToMariaDBMapOutput() MariaDBMapOutput {
	return o
}

func (o MariaDBMapOutput) ToMariaDBMapOutputWithContext(ctx context.Context) MariaDBMapOutput {
	return o
}

func (o MariaDBMapOutput) MapIndex(k pulumi.StringInput) MariaDBOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MariaDB {
		return vs[0].(map[string]*MariaDB)[vs[1].(string)]
	}).(MariaDBOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBInput)(nil)).Elem(), &MariaDB{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBArrayInput)(nil)).Elem(), MariaDBArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MariaDBMapInput)(nil)).Elem(), MariaDBMap{})
	pulumi.RegisterOutputType(MariaDBOutput{})
	pulumi.RegisterOutputType(MariaDBArrayOutput{})
	pulumi.RegisterOutputType(MariaDBMapOutput{})
}
