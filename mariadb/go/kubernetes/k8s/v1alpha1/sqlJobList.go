// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SqlJobList is a list of SqlJob
type SqlJobList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of sqljobs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SqlJobTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSqlJobList registers a new resource with the given unique name, arguments, and options.
func NewSqlJobList(ctx *pulumi.Context,
	name string, args *SqlJobListArgs, opts ...pulumi.ResourceOption) (*SqlJobList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("SqlJobList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SqlJobList
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:SqlJobList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlJobList gets an existing SqlJobList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlJobList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlJobListState, opts ...pulumi.ResourceOption) (*SqlJobList, error) {
	var resource SqlJobList
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:SqlJobList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlJobList resources.
type sqlJobListState struct {
}

type SqlJobListState struct {
}

func (SqlJobListState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlJobListState)(nil)).Elem()
}

type sqlJobListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of sqljobs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SqlJobType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SqlJobList resource.
type SqlJobListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of sqljobs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SqlJobTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SqlJobListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlJobListArgs)(nil)).Elem()
}

type SqlJobListInput interface {
	pulumi.Input

	ToSqlJobListOutput() SqlJobListOutput
	ToSqlJobListOutputWithContext(ctx context.Context) SqlJobListOutput
}

func (*SqlJobList) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlJobList)(nil)).Elem()
}

func (i *SqlJobList) ToSqlJobListOutput() SqlJobListOutput {
	return i.ToSqlJobListOutputWithContext(context.Background())
}

func (i *SqlJobList) ToSqlJobListOutputWithContext(ctx context.Context) SqlJobListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobListOutput)
}

// SqlJobListArrayInput is an input type that accepts SqlJobListArray and SqlJobListArrayOutput values.
// You can construct a concrete instance of `SqlJobListArrayInput` via:
//
//	SqlJobListArray{ SqlJobListArgs{...} }
type SqlJobListArrayInput interface {
	pulumi.Input

	ToSqlJobListArrayOutput() SqlJobListArrayOutput
	ToSqlJobListArrayOutputWithContext(context.Context) SqlJobListArrayOutput
}

type SqlJobListArray []SqlJobListInput

func (SqlJobListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlJobList)(nil)).Elem()
}

func (i SqlJobListArray) ToSqlJobListArrayOutput() SqlJobListArrayOutput {
	return i.ToSqlJobListArrayOutputWithContext(context.Background())
}

func (i SqlJobListArray) ToSqlJobListArrayOutputWithContext(ctx context.Context) SqlJobListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobListArrayOutput)
}

// SqlJobListMapInput is an input type that accepts SqlJobListMap and SqlJobListMapOutput values.
// You can construct a concrete instance of `SqlJobListMapInput` via:
//
//	SqlJobListMap{ "key": SqlJobListArgs{...} }
type SqlJobListMapInput interface {
	pulumi.Input

	ToSqlJobListMapOutput() SqlJobListMapOutput
	ToSqlJobListMapOutputWithContext(context.Context) SqlJobListMapOutput
}

type SqlJobListMap map[string]SqlJobListInput

func (SqlJobListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlJobList)(nil)).Elem()
}

func (i SqlJobListMap) ToSqlJobListMapOutput() SqlJobListMapOutput {
	return i.ToSqlJobListMapOutputWithContext(context.Background())
}

func (i SqlJobListMap) ToSqlJobListMapOutputWithContext(ctx context.Context) SqlJobListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobListMapOutput)
}

type SqlJobListOutput struct{ *pulumi.OutputState }

func (SqlJobListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlJobList)(nil)).Elem()
}

func (o SqlJobListOutput) ToSqlJobListOutput() SqlJobListOutput {
	return o
}

func (o SqlJobListOutput) ToSqlJobListOutputWithContext(ctx context.Context) SqlJobListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SqlJobListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlJobList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of sqljobs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SqlJobListOutput) Items() SqlJobTypeArrayOutput {
	return o.ApplyT(func(v *SqlJobList) SqlJobTypeArrayOutput { return v.Items }).(SqlJobTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SqlJobListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlJobList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SqlJobListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SqlJobList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SqlJobListArrayOutput struct{ *pulumi.OutputState }

func (SqlJobListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlJobList)(nil)).Elem()
}

func (o SqlJobListArrayOutput) ToSqlJobListArrayOutput() SqlJobListArrayOutput {
	return o
}

func (o SqlJobListArrayOutput) ToSqlJobListArrayOutputWithContext(ctx context.Context) SqlJobListArrayOutput {
	return o
}

func (o SqlJobListArrayOutput) Index(i pulumi.IntInput) SqlJobListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlJobList {
		return vs[0].([]*SqlJobList)[vs[1].(int)]
	}).(SqlJobListOutput)
}

type SqlJobListMapOutput struct{ *pulumi.OutputState }

func (SqlJobListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlJobList)(nil)).Elem()
}

func (o SqlJobListMapOutput) ToSqlJobListMapOutput() SqlJobListMapOutput {
	return o
}

func (o SqlJobListMapOutput) ToSqlJobListMapOutputWithContext(ctx context.Context) SqlJobListMapOutput {
	return o
}

func (o SqlJobListMapOutput) MapIndex(k pulumi.StringInput) SqlJobListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlJobList {
		return vs[0].(map[string]*SqlJobList)[vs[1].(string)]
	}).(SqlJobListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobListInput)(nil)).Elem(), &SqlJobList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobListArrayInput)(nil)).Elem(), SqlJobListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobListMapInput)(nil)).Elem(), SqlJobListMap{})
	pulumi.RegisterOutputType(SqlJobListOutput{})
	pulumi.RegisterOutputType(SqlJobListArrayOutput{})
	pulumi.RegisterOutputType(SqlJobListMapOutput{})
}
