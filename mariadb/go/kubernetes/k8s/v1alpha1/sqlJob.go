// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SqlJob is the Schema for the sqljobs API. It is used to run sql scripts as jobs.
type SqlJob struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     SqlJobSpecOutput        `pulumi:"spec"`
	Status   SqlJobStatusPtrOutput   `pulumi:"status"`
}

// NewSqlJob registers a new resource with the given unique name, arguments, and options.
func NewSqlJob(ctx *pulumi.Context,
	name string, args *SqlJobArgs, opts ...pulumi.ResourceOption) (*SqlJob, error) {
	if args == nil {
		args = &SqlJobArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("SqlJob")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SqlJob
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:SqlJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlJob gets an existing SqlJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlJobState, opts ...pulumi.ResourceOption) (*SqlJob, error) {
	var resource SqlJob
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:SqlJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlJob resources.
type sqlJobState struct {
}

type SqlJobState struct {
}

func (SqlJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlJobState)(nil)).Elem()
}

type sqlJobArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SqlJobSpec        `pulumi:"spec"`
}

// The set of arguments for constructing a SqlJob resource.
type SqlJobArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SqlJobSpecPtrInput
}

func (SqlJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlJobArgs)(nil)).Elem()
}

type SqlJobInput interface {
	pulumi.Input

	ToSqlJobOutput() SqlJobOutput
	ToSqlJobOutputWithContext(ctx context.Context) SqlJobOutput
}

func (*SqlJob) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlJob)(nil)).Elem()
}

func (i *SqlJob) ToSqlJobOutput() SqlJobOutput {
	return i.ToSqlJobOutputWithContext(context.Background())
}

func (i *SqlJob) ToSqlJobOutputWithContext(ctx context.Context) SqlJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobOutput)
}

// SqlJobArrayInput is an input type that accepts SqlJobArray and SqlJobArrayOutput values.
// You can construct a concrete instance of `SqlJobArrayInput` via:
//
//	SqlJobArray{ SqlJobArgs{...} }
type SqlJobArrayInput interface {
	pulumi.Input

	ToSqlJobArrayOutput() SqlJobArrayOutput
	ToSqlJobArrayOutputWithContext(context.Context) SqlJobArrayOutput
}

type SqlJobArray []SqlJobInput

func (SqlJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlJob)(nil)).Elem()
}

func (i SqlJobArray) ToSqlJobArrayOutput() SqlJobArrayOutput {
	return i.ToSqlJobArrayOutputWithContext(context.Background())
}

func (i SqlJobArray) ToSqlJobArrayOutputWithContext(ctx context.Context) SqlJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobArrayOutput)
}

// SqlJobMapInput is an input type that accepts SqlJobMap and SqlJobMapOutput values.
// You can construct a concrete instance of `SqlJobMapInput` via:
//
//	SqlJobMap{ "key": SqlJobArgs{...} }
type SqlJobMapInput interface {
	pulumi.Input

	ToSqlJobMapOutput() SqlJobMapOutput
	ToSqlJobMapOutputWithContext(context.Context) SqlJobMapOutput
}

type SqlJobMap map[string]SqlJobInput

func (SqlJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlJob)(nil)).Elem()
}

func (i SqlJobMap) ToSqlJobMapOutput() SqlJobMapOutput {
	return i.ToSqlJobMapOutputWithContext(context.Background())
}

func (i SqlJobMap) ToSqlJobMapOutputWithContext(ctx context.Context) SqlJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlJobMapOutput)
}

type SqlJobOutput struct{ *pulumi.OutputState }

func (SqlJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlJob)(nil)).Elem()
}

func (o SqlJobOutput) ToSqlJobOutput() SqlJobOutput {
	return o
}

func (o SqlJobOutput) ToSqlJobOutputWithContext(ctx context.Context) SqlJobOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SqlJobOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlJob) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SqlJobOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlJob) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SqlJobOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *SqlJob) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SqlJobOutput) Spec() SqlJobSpecOutput {
	return o.ApplyT(func(v *SqlJob) SqlJobSpecOutput { return v.Spec }).(SqlJobSpecOutput)
}

func (o SqlJobOutput) Status() SqlJobStatusPtrOutput {
	return o.ApplyT(func(v *SqlJob) SqlJobStatusPtrOutput { return v.Status }).(SqlJobStatusPtrOutput)
}

type SqlJobArrayOutput struct{ *pulumi.OutputState }

func (SqlJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlJob)(nil)).Elem()
}

func (o SqlJobArrayOutput) ToSqlJobArrayOutput() SqlJobArrayOutput {
	return o
}

func (o SqlJobArrayOutput) ToSqlJobArrayOutputWithContext(ctx context.Context) SqlJobArrayOutput {
	return o
}

func (o SqlJobArrayOutput) Index(i pulumi.IntInput) SqlJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlJob {
		return vs[0].([]*SqlJob)[vs[1].(int)]
	}).(SqlJobOutput)
}

type SqlJobMapOutput struct{ *pulumi.OutputState }

func (SqlJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlJob)(nil)).Elem()
}

func (o SqlJobMapOutput) ToSqlJobMapOutput() SqlJobMapOutput {
	return o
}

func (o SqlJobMapOutput) ToSqlJobMapOutputWithContext(ctx context.Context) SqlJobMapOutput {
	return o
}

func (o SqlJobMapOutput) MapIndex(k pulumi.StringInput) SqlJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlJob {
		return vs[0].(map[string]*SqlJob)[vs[1].(string)]
	}).(SqlJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobInput)(nil)).Elem(), &SqlJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobArrayInput)(nil)).Elem(), SqlJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlJobMapInput)(nil)).Elem(), SqlJobMap{})
	pulumi.RegisterOutputType(SqlJobOutput{})
	pulumi.RegisterOutputType(SqlJobArrayOutput{})
	pulumi.RegisterOutputType(SqlJobMapOutput{})
}
