// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// UserList is a list of User
type UserList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of users. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items UserTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewUserList registers a new resource with the given unique name, arguments, and options.
func NewUserList(ctx *pulumi.Context,
	name string, args *UserListArgs, opts ...pulumi.ResourceOption) (*UserList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("UserList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource UserList
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:UserList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserList gets an existing UserList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserListState, opts ...pulumi.ResourceOption) (*UserList, error) {
	var resource UserList
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:UserList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserList resources.
type userListState struct {
}

type UserListState struct {
}

func (UserListState) ElementType() reflect.Type {
	return reflect.TypeOf((*userListState)(nil)).Elem()
}

type userListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of users. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []UserType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a UserList resource.
type UserListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of users. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items UserTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (UserListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userListArgs)(nil)).Elem()
}

type UserListInput interface {
	pulumi.Input

	ToUserListOutput() UserListOutput
	ToUserListOutputWithContext(ctx context.Context) UserListOutput
}

func (*UserList) ElementType() reflect.Type {
	return reflect.TypeOf((**UserList)(nil)).Elem()
}

func (i *UserList) ToUserListOutput() UserListOutput {
	return i.ToUserListOutputWithContext(context.Background())
}

func (i *UserList) ToUserListOutputWithContext(ctx context.Context) UserListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserListOutput)
}

// UserListArrayInput is an input type that accepts UserListArray and UserListArrayOutput values.
// You can construct a concrete instance of `UserListArrayInput` via:
//
//	UserListArray{ UserListArgs{...} }
type UserListArrayInput interface {
	pulumi.Input

	ToUserListArrayOutput() UserListArrayOutput
	ToUserListArrayOutputWithContext(context.Context) UserListArrayOutput
}

type UserListArray []UserListInput

func (UserListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserList)(nil)).Elem()
}

func (i UserListArray) ToUserListArrayOutput() UserListArrayOutput {
	return i.ToUserListArrayOutputWithContext(context.Background())
}

func (i UserListArray) ToUserListArrayOutputWithContext(ctx context.Context) UserListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserListArrayOutput)
}

// UserListMapInput is an input type that accepts UserListMap and UserListMapOutput values.
// You can construct a concrete instance of `UserListMapInput` via:
//
//	UserListMap{ "key": UserListArgs{...} }
type UserListMapInput interface {
	pulumi.Input

	ToUserListMapOutput() UserListMapOutput
	ToUserListMapOutputWithContext(context.Context) UserListMapOutput
}

type UserListMap map[string]UserListInput

func (UserListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserList)(nil)).Elem()
}

func (i UserListMap) ToUserListMapOutput() UserListMapOutput {
	return i.ToUserListMapOutputWithContext(context.Background())
}

func (i UserListMap) ToUserListMapOutputWithContext(ctx context.Context) UserListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserListMapOutput)
}

type UserListOutput struct{ *pulumi.OutputState }

func (UserListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserList)(nil)).Elem()
}

func (o UserListOutput) ToUserListOutput() UserListOutput {
	return o
}

func (o UserListOutput) ToUserListOutputWithContext(ctx context.Context) UserListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o UserListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *UserList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of users. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o UserListOutput) Items() UserTypeArrayOutput {
	return o.ApplyT(func(v *UserList) UserTypeArrayOutput { return v.Items }).(UserTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o UserListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *UserList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o UserListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *UserList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type UserListArrayOutput struct{ *pulumi.OutputState }

func (UserListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserList)(nil)).Elem()
}

func (o UserListArrayOutput) ToUserListArrayOutput() UserListArrayOutput {
	return o
}

func (o UserListArrayOutput) ToUserListArrayOutputWithContext(ctx context.Context) UserListArrayOutput {
	return o
}

func (o UserListArrayOutput) Index(i pulumi.IntInput) UserListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserList {
		return vs[0].([]*UserList)[vs[1].(int)]
	}).(UserListOutput)
}

type UserListMapOutput struct{ *pulumi.OutputState }

func (UserListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserList)(nil)).Elem()
}

func (o UserListMapOutput) ToUserListMapOutput() UserListMapOutput {
	return o
}

func (o UserListMapOutput) ToUserListMapOutputWithContext(ctx context.Context) UserListMapOutput {
	return o
}

func (o UserListMapOutput) MapIndex(k pulumi.StringInput) UserListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserList {
		return vs[0].(map[string]*UserList)[vs[1].(string)]
	}).(UserListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserListInput)(nil)).Elem(), &UserList{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserListArrayInput)(nil)).Elem(), UserListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserListMapInput)(nil)).Elem(), UserListMap{})
	pulumi.RegisterOutputType(UserListOutput{})
	pulumi.RegisterOutputType(UserListArrayOutput{})
	pulumi.RegisterOutputType(UserListMapOutput{})
}
