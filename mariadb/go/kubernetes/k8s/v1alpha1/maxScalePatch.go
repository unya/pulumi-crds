// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// MaxScale is the Schema for the maxscales API. It is used to define MaxScale clusters.
type MaxScalePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     MaxScaleSpecPatchPtrOutput      `pulumi:"spec"`
	Status   MaxScaleStatusPatchPtrOutput    `pulumi:"status"`
}

// NewMaxScalePatch registers a new resource with the given unique name, arguments, and options.
func NewMaxScalePatch(ctx *pulumi.Context,
	name string, args *MaxScalePatchArgs, opts ...pulumi.ResourceOption) (*MaxScalePatch, error) {
	if args == nil {
		args = &MaxScalePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("MaxScale")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MaxScalePatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:MaxScalePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaxScalePatch gets an existing MaxScalePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaxScalePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaxScalePatchState, opts ...pulumi.ResourceOption) (*MaxScalePatch, error) {
	var resource MaxScalePatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:MaxScalePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MaxScalePatch resources.
type maxScalePatchState struct {
}

type MaxScalePatchState struct {
}

func (MaxScalePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*maxScalePatchState)(nil)).Elem()
}

type maxScalePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *MaxScaleSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a MaxScalePatch resource.
type MaxScalePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     MaxScaleSpecPatchPtrInput
}

func (MaxScalePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maxScalePatchArgs)(nil)).Elem()
}

type MaxScalePatchInput interface {
	pulumi.Input

	ToMaxScalePatchOutput() MaxScalePatchOutput
	ToMaxScalePatchOutputWithContext(ctx context.Context) MaxScalePatchOutput
}

func (*MaxScalePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxScalePatch)(nil)).Elem()
}

func (i *MaxScalePatch) ToMaxScalePatchOutput() MaxScalePatchOutput {
	return i.ToMaxScalePatchOutputWithContext(context.Background())
}

func (i *MaxScalePatch) ToMaxScalePatchOutputWithContext(ctx context.Context) MaxScalePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxScalePatchOutput)
}

// MaxScalePatchArrayInput is an input type that accepts MaxScalePatchArray and MaxScalePatchArrayOutput values.
// You can construct a concrete instance of `MaxScalePatchArrayInput` via:
//
//	MaxScalePatchArray{ MaxScalePatchArgs{...} }
type MaxScalePatchArrayInput interface {
	pulumi.Input

	ToMaxScalePatchArrayOutput() MaxScalePatchArrayOutput
	ToMaxScalePatchArrayOutputWithContext(context.Context) MaxScalePatchArrayOutput
}

type MaxScalePatchArray []MaxScalePatchInput

func (MaxScalePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaxScalePatch)(nil)).Elem()
}

func (i MaxScalePatchArray) ToMaxScalePatchArrayOutput() MaxScalePatchArrayOutput {
	return i.ToMaxScalePatchArrayOutputWithContext(context.Background())
}

func (i MaxScalePatchArray) ToMaxScalePatchArrayOutputWithContext(ctx context.Context) MaxScalePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxScalePatchArrayOutput)
}

// MaxScalePatchMapInput is an input type that accepts MaxScalePatchMap and MaxScalePatchMapOutput values.
// You can construct a concrete instance of `MaxScalePatchMapInput` via:
//
//	MaxScalePatchMap{ "key": MaxScalePatchArgs{...} }
type MaxScalePatchMapInput interface {
	pulumi.Input

	ToMaxScalePatchMapOutput() MaxScalePatchMapOutput
	ToMaxScalePatchMapOutputWithContext(context.Context) MaxScalePatchMapOutput
}

type MaxScalePatchMap map[string]MaxScalePatchInput

func (MaxScalePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaxScalePatch)(nil)).Elem()
}

func (i MaxScalePatchMap) ToMaxScalePatchMapOutput() MaxScalePatchMapOutput {
	return i.ToMaxScalePatchMapOutputWithContext(context.Background())
}

func (i MaxScalePatchMap) ToMaxScalePatchMapOutputWithContext(ctx context.Context) MaxScalePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaxScalePatchMapOutput)
}

type MaxScalePatchOutput struct{ *pulumi.OutputState }

func (MaxScalePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaxScalePatch)(nil)).Elem()
}

func (o MaxScalePatchOutput) ToMaxScalePatchOutput() MaxScalePatchOutput {
	return o
}

func (o MaxScalePatchOutput) ToMaxScalePatchOutputWithContext(ctx context.Context) MaxScalePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o MaxScalePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaxScalePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o MaxScalePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaxScalePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o MaxScalePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *MaxScalePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o MaxScalePatchOutput) Spec() MaxScaleSpecPatchPtrOutput {
	return o.ApplyT(func(v *MaxScalePatch) MaxScaleSpecPatchPtrOutput { return v.Spec }).(MaxScaleSpecPatchPtrOutput)
}

func (o MaxScalePatchOutput) Status() MaxScaleStatusPatchPtrOutput {
	return o.ApplyT(func(v *MaxScalePatch) MaxScaleStatusPatchPtrOutput { return v.Status }).(MaxScaleStatusPatchPtrOutput)
}

type MaxScalePatchArrayOutput struct{ *pulumi.OutputState }

func (MaxScalePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MaxScalePatch)(nil)).Elem()
}

func (o MaxScalePatchArrayOutput) ToMaxScalePatchArrayOutput() MaxScalePatchArrayOutput {
	return o
}

func (o MaxScalePatchArrayOutput) ToMaxScalePatchArrayOutputWithContext(ctx context.Context) MaxScalePatchArrayOutput {
	return o
}

func (o MaxScalePatchArrayOutput) Index(i pulumi.IntInput) MaxScalePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MaxScalePatch {
		return vs[0].([]*MaxScalePatch)[vs[1].(int)]
	}).(MaxScalePatchOutput)
}

type MaxScalePatchMapOutput struct{ *pulumi.OutputState }

func (MaxScalePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MaxScalePatch)(nil)).Elem()
}

func (o MaxScalePatchMapOutput) ToMaxScalePatchMapOutput() MaxScalePatchMapOutput {
	return o
}

func (o MaxScalePatchMapOutput) ToMaxScalePatchMapOutputWithContext(ctx context.Context) MaxScalePatchMapOutput {
	return o
}

func (o MaxScalePatchMapOutput) MapIndex(k pulumi.StringInput) MaxScalePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MaxScalePatch {
		return vs[0].(map[string]*MaxScalePatch)[vs[1].(string)]
	}).(MaxScalePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaxScalePatchInput)(nil)).Elem(), &MaxScalePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaxScalePatchArrayInput)(nil)).Elem(), MaxScalePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaxScalePatchMapInput)(nil)).Elem(), MaxScalePatchMap{})
	pulumi.RegisterOutputType(MaxScalePatchOutput{})
	pulumi.RegisterOutputType(MaxScalePatchArrayOutput{})
	pulumi.RegisterOutputType(MaxScalePatchMapOutput{})
}
