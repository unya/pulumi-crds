// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Connection is the Schema for the connections API. It is used to configure connection strings for the applications connecting to MariaDB.
type ConnectionPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ConnectionSpecPatchPtrOutput    `pulumi:"spec"`
	Status   ConnectionStatusPatchPtrOutput  `pulumi:"status"`
}

// NewConnectionPatch registers a new resource with the given unique name, arguments, and options.
func NewConnectionPatch(ctx *pulumi.Context,
	name string, args *ConnectionPatchArgs, opts ...pulumi.ResourceOption) (*ConnectionPatch, error) {
	if args == nil {
		args = &ConnectionPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("Connection")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ConnectionPatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:ConnectionPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionPatch gets an existing ConnectionPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionPatchState, opts ...pulumi.ResourceOption) (*ConnectionPatch, error) {
	var resource ConnectionPatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:ConnectionPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionPatch resources.
type connectionPatchState struct {
}

type ConnectionPatchState struct {
}

func (ConnectionPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPatchState)(nil)).Elem()
}

type connectionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ConnectionSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a ConnectionPatch resource.
type ConnectionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ConnectionSpecPatchPtrInput
}

func (ConnectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionPatchArgs)(nil)).Elem()
}

type ConnectionPatchInput interface {
	pulumi.Input

	ToConnectionPatchOutput() ConnectionPatchOutput
	ToConnectionPatchOutputWithContext(ctx context.Context) ConnectionPatchOutput
}

func (*ConnectionPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPatch)(nil)).Elem()
}

func (i *ConnectionPatch) ToConnectionPatchOutput() ConnectionPatchOutput {
	return i.ToConnectionPatchOutputWithContext(context.Background())
}

func (i *ConnectionPatch) ToConnectionPatchOutputWithContext(ctx context.Context) ConnectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPatchOutput)
}

// ConnectionPatchArrayInput is an input type that accepts ConnectionPatchArray and ConnectionPatchArrayOutput values.
// You can construct a concrete instance of `ConnectionPatchArrayInput` via:
//
//	ConnectionPatchArray{ ConnectionPatchArgs{...} }
type ConnectionPatchArrayInput interface {
	pulumi.Input

	ToConnectionPatchArrayOutput() ConnectionPatchArrayOutput
	ToConnectionPatchArrayOutputWithContext(context.Context) ConnectionPatchArrayOutput
}

type ConnectionPatchArray []ConnectionPatchInput

func (ConnectionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionPatch)(nil)).Elem()
}

func (i ConnectionPatchArray) ToConnectionPatchArrayOutput() ConnectionPatchArrayOutput {
	return i.ToConnectionPatchArrayOutputWithContext(context.Background())
}

func (i ConnectionPatchArray) ToConnectionPatchArrayOutputWithContext(ctx context.Context) ConnectionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPatchArrayOutput)
}

// ConnectionPatchMapInput is an input type that accepts ConnectionPatchMap and ConnectionPatchMapOutput values.
// You can construct a concrete instance of `ConnectionPatchMapInput` via:
//
//	ConnectionPatchMap{ "key": ConnectionPatchArgs{...} }
type ConnectionPatchMapInput interface {
	pulumi.Input

	ToConnectionPatchMapOutput() ConnectionPatchMapOutput
	ToConnectionPatchMapOutputWithContext(context.Context) ConnectionPatchMapOutput
}

type ConnectionPatchMap map[string]ConnectionPatchInput

func (ConnectionPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionPatch)(nil)).Elem()
}

func (i ConnectionPatchMap) ToConnectionPatchMapOutput() ConnectionPatchMapOutput {
	return i.ToConnectionPatchMapOutputWithContext(context.Background())
}

func (i ConnectionPatchMap) ToConnectionPatchMapOutputWithContext(ctx context.Context) ConnectionPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPatchMapOutput)
}

type ConnectionPatchOutput struct{ *pulumi.OutputState }

func (ConnectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionPatch)(nil)).Elem()
}

func (o ConnectionPatchOutput) ToConnectionPatchOutput() ConnectionPatchOutput {
	return o
}

func (o ConnectionPatchOutput) ToConnectionPatchOutputWithContext(ctx context.Context) ConnectionPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ConnectionPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ConnectionPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ConnectionPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ConnectionPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ConnectionPatchOutput) Spec() ConnectionSpecPatchPtrOutput {
	return o.ApplyT(func(v *ConnectionPatch) ConnectionSpecPatchPtrOutput { return v.Spec }).(ConnectionSpecPatchPtrOutput)
}

func (o ConnectionPatchOutput) Status() ConnectionStatusPatchPtrOutput {
	return o.ApplyT(func(v *ConnectionPatch) ConnectionStatusPatchPtrOutput { return v.Status }).(ConnectionStatusPatchPtrOutput)
}

type ConnectionPatchArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionPatch)(nil)).Elem()
}

func (o ConnectionPatchArrayOutput) ToConnectionPatchArrayOutput() ConnectionPatchArrayOutput {
	return o
}

func (o ConnectionPatchArrayOutput) ToConnectionPatchArrayOutputWithContext(ctx context.Context) ConnectionPatchArrayOutput {
	return o
}

func (o ConnectionPatchArrayOutput) Index(i pulumi.IntInput) ConnectionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionPatch {
		return vs[0].([]*ConnectionPatch)[vs[1].(int)]
	}).(ConnectionPatchOutput)
}

type ConnectionPatchMapOutput struct{ *pulumi.OutputState }

func (ConnectionPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionPatch)(nil)).Elem()
}

func (o ConnectionPatchMapOutput) ToConnectionPatchMapOutput() ConnectionPatchMapOutput {
	return o
}

func (o ConnectionPatchMapOutput) ToConnectionPatchMapOutputWithContext(ctx context.Context) ConnectionPatchMapOutput {
	return o
}

func (o ConnectionPatchMapOutput) MapIndex(k pulumi.StringInput) ConnectionPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionPatch {
		return vs[0].(map[string]*ConnectionPatch)[vs[1].(string)]
	}).(ConnectionPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPatchInput)(nil)).Elem(), &ConnectionPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPatchArrayInput)(nil)).Elem(), ConnectionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPatchMapInput)(nil)).Elem(), ConnectionPatchMap{})
	pulumi.RegisterOutputType(ConnectionPatchOutput{})
	pulumi.RegisterOutputType(ConnectionPatchArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPatchMapOutput{})
}
