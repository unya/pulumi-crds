// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Restore is the Schema for the restores API. It is used to define restore jobs and its restoration source.
type RestorePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     RestoreSpecPatchPtrOutput       `pulumi:"spec"`
	Status   RestoreStatusPatchPtrOutput     `pulumi:"status"`
}

// NewRestorePatch registers a new resource with the given unique name, arguments, and options.
func NewRestorePatch(ctx *pulumi.Context,
	name string, args *RestorePatchArgs, opts ...pulumi.ResourceOption) (*RestorePatch, error) {
	if args == nil {
		args = &RestorePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.mariadb.com/v1alpha1")
	args.Kind = pulumi.StringPtr("Restore")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RestorePatch
	err := ctx.RegisterResource("kubernetes:k8s.mariadb.com/v1alpha1:RestorePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestorePatch gets an existing RestorePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestorePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestorePatchState, opts ...pulumi.ResourceOption) (*RestorePatch, error) {
	var resource RestorePatch
	err := ctx.ReadResource("kubernetes:k8s.mariadb.com/v1alpha1:RestorePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestorePatch resources.
type restorePatchState struct {
}

type RestorePatchState struct {
}

func (RestorePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*restorePatchState)(nil)).Elem()
}

type restorePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *RestoreSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a RestorePatch resource.
type RestorePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     RestoreSpecPatchPtrInput
}

func (RestorePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restorePatchArgs)(nil)).Elem()
}

type RestorePatchInput interface {
	pulumi.Input

	ToRestorePatchOutput() RestorePatchOutput
	ToRestorePatchOutputWithContext(ctx context.Context) RestorePatchOutput
}

func (*RestorePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePatch)(nil)).Elem()
}

func (i *RestorePatch) ToRestorePatchOutput() RestorePatchOutput {
	return i.ToRestorePatchOutputWithContext(context.Background())
}

func (i *RestorePatch) ToRestorePatchOutputWithContext(ctx context.Context) RestorePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePatchOutput)
}

// RestorePatchArrayInput is an input type that accepts RestorePatchArray and RestorePatchArrayOutput values.
// You can construct a concrete instance of `RestorePatchArrayInput` via:
//
//	RestorePatchArray{ RestorePatchArgs{...} }
type RestorePatchArrayInput interface {
	pulumi.Input

	ToRestorePatchArrayOutput() RestorePatchArrayOutput
	ToRestorePatchArrayOutputWithContext(context.Context) RestorePatchArrayOutput
}

type RestorePatchArray []RestorePatchInput

func (RestorePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestorePatch)(nil)).Elem()
}

func (i RestorePatchArray) ToRestorePatchArrayOutput() RestorePatchArrayOutput {
	return i.ToRestorePatchArrayOutputWithContext(context.Background())
}

func (i RestorePatchArray) ToRestorePatchArrayOutputWithContext(ctx context.Context) RestorePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePatchArrayOutput)
}

// RestorePatchMapInput is an input type that accepts RestorePatchMap and RestorePatchMapOutput values.
// You can construct a concrete instance of `RestorePatchMapInput` via:
//
//	RestorePatchMap{ "key": RestorePatchArgs{...} }
type RestorePatchMapInput interface {
	pulumi.Input

	ToRestorePatchMapOutput() RestorePatchMapOutput
	ToRestorePatchMapOutputWithContext(context.Context) RestorePatchMapOutput
}

type RestorePatchMap map[string]RestorePatchInput

func (RestorePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestorePatch)(nil)).Elem()
}

func (i RestorePatchMap) ToRestorePatchMapOutput() RestorePatchMapOutput {
	return i.ToRestorePatchMapOutputWithContext(context.Background())
}

func (i RestorePatchMap) ToRestorePatchMapOutputWithContext(ctx context.Context) RestorePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestorePatchMapOutput)
}

type RestorePatchOutput struct{ *pulumi.OutputState }

func (RestorePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestorePatch)(nil)).Elem()
}

func (o RestorePatchOutput) ToRestorePatchOutput() RestorePatchOutput {
	return o
}

func (o RestorePatchOutput) ToRestorePatchOutputWithContext(ctx context.Context) RestorePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RestorePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RestorePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestorePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RestorePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *RestorePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o RestorePatchOutput) Spec() RestoreSpecPatchPtrOutput {
	return o.ApplyT(func(v *RestorePatch) RestoreSpecPatchPtrOutput { return v.Spec }).(RestoreSpecPatchPtrOutput)
}

func (o RestorePatchOutput) Status() RestoreStatusPatchPtrOutput {
	return o.ApplyT(func(v *RestorePatch) RestoreStatusPatchPtrOutput { return v.Status }).(RestoreStatusPatchPtrOutput)
}

type RestorePatchArrayOutput struct{ *pulumi.OutputState }

func (RestorePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestorePatch)(nil)).Elem()
}

func (o RestorePatchArrayOutput) ToRestorePatchArrayOutput() RestorePatchArrayOutput {
	return o
}

func (o RestorePatchArrayOutput) ToRestorePatchArrayOutputWithContext(ctx context.Context) RestorePatchArrayOutput {
	return o
}

func (o RestorePatchArrayOutput) Index(i pulumi.IntInput) RestorePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestorePatch {
		return vs[0].([]*RestorePatch)[vs[1].(int)]
	}).(RestorePatchOutput)
}

type RestorePatchMapOutput struct{ *pulumi.OutputState }

func (RestorePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestorePatch)(nil)).Elem()
}

func (o RestorePatchMapOutput) ToRestorePatchMapOutput() RestorePatchMapOutput {
	return o
}

func (o RestorePatchMapOutput) ToRestorePatchMapOutputWithContext(ctx context.Context) RestorePatchMapOutput {
	return o
}

func (o RestorePatchMapOutput) MapIndex(k pulumi.StringInput) RestorePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestorePatch {
		return vs[0].(map[string]*RestorePatch)[vs[1].(string)]
	}).(RestorePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestorePatchInput)(nil)).Elem(), &RestorePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestorePatchArrayInput)(nil)).Elem(), RestorePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestorePatchMapInput)(nil)).Elem(), RestorePatchMap{})
	pulumi.RegisterOutputType(RestorePatchOutput{})
	pulumi.RegisterOutputType(RestorePatchArrayOutput{})
	pulumi.RegisterOutputType(RestorePatchMapOutput{})
}
