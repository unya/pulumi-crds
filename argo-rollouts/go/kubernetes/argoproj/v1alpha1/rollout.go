// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Rollout struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     RolloutSpecOutput       `pulumi:"spec"`
	Status   RolloutStatusPtrOutput  `pulumi:"status"`
}

// NewRollout registers a new resource with the given unique name, arguments, and options.
func NewRollout(ctx *pulumi.Context,
	name string, args *RolloutArgs, opts ...pulumi.ResourceOption) (*Rollout, error) {
	if args == nil {
		args = &RolloutArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Rollout")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Rollout
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:Rollout", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRollout gets an existing Rollout resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRollout(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolloutState, opts ...pulumi.ResourceOption) (*Rollout, error) {
	var resource Rollout
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:Rollout", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rollout resources.
type rolloutState struct {
}

type RolloutState struct {
}

func (RolloutState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutState)(nil)).Elem()
}

type rolloutArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *RolloutSpec       `pulumi:"spec"`
}

// The set of arguments for constructing a Rollout resource.
type RolloutArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     RolloutSpecPtrInput
}

func (RolloutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutArgs)(nil)).Elem()
}

type RolloutInput interface {
	pulumi.Input

	ToRolloutOutput() RolloutOutput
	ToRolloutOutputWithContext(ctx context.Context) RolloutOutput
}

func (*Rollout) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollout)(nil)).Elem()
}

func (i *Rollout) ToRolloutOutput() RolloutOutput {
	return i.ToRolloutOutputWithContext(context.Background())
}

func (i *Rollout) ToRolloutOutputWithContext(ctx context.Context) RolloutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutOutput)
}

// RolloutArrayInput is an input type that accepts RolloutArray and RolloutArrayOutput values.
// You can construct a concrete instance of `RolloutArrayInput` via:
//
//	RolloutArray{ RolloutArgs{...} }
type RolloutArrayInput interface {
	pulumi.Input

	ToRolloutArrayOutput() RolloutArrayOutput
	ToRolloutArrayOutputWithContext(context.Context) RolloutArrayOutput
}

type RolloutArray []RolloutInput

func (RolloutArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rollout)(nil)).Elem()
}

func (i RolloutArray) ToRolloutArrayOutput() RolloutArrayOutput {
	return i.ToRolloutArrayOutputWithContext(context.Background())
}

func (i RolloutArray) ToRolloutArrayOutputWithContext(ctx context.Context) RolloutArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutArrayOutput)
}

// RolloutMapInput is an input type that accepts RolloutMap and RolloutMapOutput values.
// You can construct a concrete instance of `RolloutMapInput` via:
//
//	RolloutMap{ "key": RolloutArgs{...} }
type RolloutMapInput interface {
	pulumi.Input

	ToRolloutMapOutput() RolloutMapOutput
	ToRolloutMapOutputWithContext(context.Context) RolloutMapOutput
}

type RolloutMap map[string]RolloutInput

func (RolloutMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rollout)(nil)).Elem()
}

func (i RolloutMap) ToRolloutMapOutput() RolloutMapOutput {
	return i.ToRolloutMapOutputWithContext(context.Background())
}

func (i RolloutMap) ToRolloutMapOutputWithContext(ctx context.Context) RolloutMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutMapOutput)
}

type RolloutOutput struct{ *pulumi.OutputState }

func (RolloutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollout)(nil)).Elem()
}

func (o RolloutOutput) ToRolloutOutput() RolloutOutput {
	return o
}

func (o RolloutOutput) ToRolloutOutputWithContext(ctx context.Context) RolloutOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RolloutOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RolloutOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollout) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RolloutOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Rollout) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o RolloutOutput) Spec() RolloutSpecOutput {
	return o.ApplyT(func(v *Rollout) RolloutSpecOutput { return v.Spec }).(RolloutSpecOutput)
}

func (o RolloutOutput) Status() RolloutStatusPtrOutput {
	return o.ApplyT(func(v *Rollout) RolloutStatusPtrOutput { return v.Status }).(RolloutStatusPtrOutput)
}

type RolloutArrayOutput struct{ *pulumi.OutputState }

func (RolloutArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rollout)(nil)).Elem()
}

func (o RolloutArrayOutput) ToRolloutArrayOutput() RolloutArrayOutput {
	return o
}

func (o RolloutArrayOutput) ToRolloutArrayOutputWithContext(ctx context.Context) RolloutArrayOutput {
	return o
}

func (o RolloutArrayOutput) Index(i pulumi.IntInput) RolloutOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rollout {
		return vs[0].([]*Rollout)[vs[1].(int)]
	}).(RolloutOutput)
}

type RolloutMapOutput struct{ *pulumi.OutputState }

func (RolloutMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rollout)(nil)).Elem()
}

func (o RolloutMapOutput) ToRolloutMapOutput() RolloutMapOutput {
	return o
}

func (o RolloutMapOutput) ToRolloutMapOutputWithContext(ctx context.Context) RolloutMapOutput {
	return o
}

func (o RolloutMapOutput) MapIndex(k pulumi.StringInput) RolloutOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rollout {
		return vs[0].(map[string]*Rollout)[vs[1].(string)]
	}).(RolloutOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutInput)(nil)).Elem(), &Rollout{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutArrayInput)(nil)).Elem(), RolloutArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutMapInput)(nil)).Elem(), RolloutMap{})
	pulumi.RegisterOutputType(RolloutOutput{})
	pulumi.RegisterOutputType(RolloutArrayOutput{})
	pulumi.RegisterOutputType(RolloutMapOutput{})
}
