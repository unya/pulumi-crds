// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Experiment struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput   `pulumi:"metadata"`
	Spec     ExperimentSpecOutput      `pulumi:"spec"`
	Status   ExperimentStatusPtrOutput `pulumi:"status"`
}

// NewExperiment registers a new resource with the given unique name, arguments, and options.
func NewExperiment(ctx *pulumi.Context,
	name string, args *ExperimentArgs, opts ...pulumi.ResourceOption) (*Experiment, error) {
	if args == nil {
		args = &ExperimentArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Experiment")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Experiment
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:Experiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperiment gets an existing Experiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentState, opts ...pulumi.ResourceOption) (*Experiment, error) {
	var resource Experiment
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:Experiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experiment resources.
type experimentState struct {
}

type ExperimentState struct {
}

func (ExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentState)(nil)).Elem()
}

type experimentArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ExperimentSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a Experiment resource.
type ExperimentArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ExperimentSpecPtrInput
}

func (ExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentArgs)(nil)).Elem()
}

type ExperimentInput interface {
	pulumi.Input

	ToExperimentOutput() ExperimentOutput
	ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput
}

func (*Experiment) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (i *Experiment) ToExperimentOutput() ExperimentOutput {
	return i.ToExperimentOutputWithContext(context.Background())
}

func (i *Experiment) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOutput)
}

// ExperimentArrayInput is an input type that accepts ExperimentArray and ExperimentArrayOutput values.
// You can construct a concrete instance of `ExperimentArrayInput` via:
//
//	ExperimentArray{ ExperimentArgs{...} }
type ExperimentArrayInput interface {
	pulumi.Input

	ToExperimentArrayOutput() ExperimentArrayOutput
	ToExperimentArrayOutputWithContext(context.Context) ExperimentArrayOutput
}

type ExperimentArray []ExperimentInput

func (ExperimentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experiment)(nil)).Elem()
}

func (i ExperimentArray) ToExperimentArrayOutput() ExperimentArrayOutput {
	return i.ToExperimentArrayOutputWithContext(context.Background())
}

func (i ExperimentArray) ToExperimentArrayOutputWithContext(ctx context.Context) ExperimentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentArrayOutput)
}

// ExperimentMapInput is an input type that accepts ExperimentMap and ExperimentMapOutput values.
// You can construct a concrete instance of `ExperimentMapInput` via:
//
//	ExperimentMap{ "key": ExperimentArgs{...} }
type ExperimentMapInput interface {
	pulumi.Input

	ToExperimentMapOutput() ExperimentMapOutput
	ToExperimentMapOutputWithContext(context.Context) ExperimentMapOutput
}

type ExperimentMap map[string]ExperimentInput

func (ExperimentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experiment)(nil)).Elem()
}

func (i ExperimentMap) ToExperimentMapOutput() ExperimentMapOutput {
	return i.ToExperimentMapOutputWithContext(context.Background())
}

func (i ExperimentMap) ToExperimentMapOutputWithContext(ctx context.Context) ExperimentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentMapOutput)
}

type ExperimentOutput struct{ *pulumi.OutputState }

func (ExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (o ExperimentOutput) ToExperimentOutput() ExperimentOutput {
	return o
}

func (o ExperimentOutput) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ExperimentOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExperimentOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ExperimentOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Experiment) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ExperimentOutput) Spec() ExperimentSpecOutput {
	return o.ApplyT(func(v *Experiment) ExperimentSpecOutput { return v.Spec }).(ExperimentSpecOutput)
}

func (o ExperimentOutput) Status() ExperimentStatusPtrOutput {
	return o.ApplyT(func(v *Experiment) ExperimentStatusPtrOutput { return v.Status }).(ExperimentStatusPtrOutput)
}

type ExperimentArrayOutput struct{ *pulumi.OutputState }

func (ExperimentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Experiment)(nil)).Elem()
}

func (o ExperimentArrayOutput) ToExperimentArrayOutput() ExperimentArrayOutput {
	return o
}

func (o ExperimentArrayOutput) ToExperimentArrayOutputWithContext(ctx context.Context) ExperimentArrayOutput {
	return o
}

func (o ExperimentArrayOutput) Index(i pulumi.IntInput) ExperimentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Experiment {
		return vs[0].([]*Experiment)[vs[1].(int)]
	}).(ExperimentOutput)
}

type ExperimentMapOutput struct{ *pulumi.OutputState }

func (ExperimentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Experiment)(nil)).Elem()
}

func (o ExperimentMapOutput) ToExperimentMapOutput() ExperimentMapOutput {
	return o
}

func (o ExperimentMapOutput) ToExperimentMapOutputWithContext(ctx context.Context) ExperimentMapOutput {
	return o
}

func (o ExperimentMapOutput) MapIndex(k pulumi.StringInput) ExperimentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Experiment {
		return vs[0].(map[string]*Experiment)[vs[1].(string)]
	}).(ExperimentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentInput)(nil)).Elem(), &Experiment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentArrayInput)(nil)).Elem(), ExperimentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentMapInput)(nil)).Elem(), ExperimentMap{})
	pulumi.RegisterOutputType(ExperimentOutput{})
	pulumi.RegisterOutputType(ExperimentArrayOutput{})
	pulumi.RegisterOutputType(ExperimentMapOutput{})
}
