// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type AnalysisRunPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     AnalysisRunSpecPatchPtrOutput   `pulumi:"spec"`
	Status   AnalysisRunStatusPatchPtrOutput `pulumi:"status"`
}

// NewAnalysisRunPatch registers a new resource with the given unique name, arguments, and options.
func NewAnalysisRunPatch(ctx *pulumi.Context,
	name string, args *AnalysisRunPatchArgs, opts ...pulumi.ResourceOption) (*AnalysisRunPatch, error) {
	if args == nil {
		args = &AnalysisRunPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AnalysisRun")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AnalysisRunPatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:AnalysisRunPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalysisRunPatch gets an existing AnalysisRunPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalysisRunPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalysisRunPatchState, opts ...pulumi.ResourceOption) (*AnalysisRunPatch, error) {
	var resource AnalysisRunPatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:AnalysisRunPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalysisRunPatch resources.
type analysisRunPatchState struct {
}

type AnalysisRunPatchState struct {
}

func (AnalysisRunPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisRunPatchState)(nil)).Elem()
}

type analysisRunPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *AnalysisRunSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a AnalysisRunPatch resource.
type AnalysisRunPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     AnalysisRunSpecPatchPtrInput
}

func (AnalysisRunPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisRunPatchArgs)(nil)).Elem()
}

type AnalysisRunPatchInput interface {
	pulumi.Input

	ToAnalysisRunPatchOutput() AnalysisRunPatchOutput
	ToAnalysisRunPatchOutputWithContext(ctx context.Context) AnalysisRunPatchOutput
}

func (*AnalysisRunPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRunPatch)(nil)).Elem()
}

func (i *AnalysisRunPatch) ToAnalysisRunPatchOutput() AnalysisRunPatchOutput {
	return i.ToAnalysisRunPatchOutputWithContext(context.Background())
}

func (i *AnalysisRunPatch) ToAnalysisRunPatchOutputWithContext(ctx context.Context) AnalysisRunPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRunPatchOutput)
}

// AnalysisRunPatchArrayInput is an input type that accepts AnalysisRunPatchArray and AnalysisRunPatchArrayOutput values.
// You can construct a concrete instance of `AnalysisRunPatchArrayInput` via:
//
//	AnalysisRunPatchArray{ AnalysisRunPatchArgs{...} }
type AnalysisRunPatchArrayInput interface {
	pulumi.Input

	ToAnalysisRunPatchArrayOutput() AnalysisRunPatchArrayOutput
	ToAnalysisRunPatchArrayOutputWithContext(context.Context) AnalysisRunPatchArrayOutput
}

type AnalysisRunPatchArray []AnalysisRunPatchInput

func (AnalysisRunPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalysisRunPatch)(nil)).Elem()
}

func (i AnalysisRunPatchArray) ToAnalysisRunPatchArrayOutput() AnalysisRunPatchArrayOutput {
	return i.ToAnalysisRunPatchArrayOutputWithContext(context.Background())
}

func (i AnalysisRunPatchArray) ToAnalysisRunPatchArrayOutputWithContext(ctx context.Context) AnalysisRunPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRunPatchArrayOutput)
}

// AnalysisRunPatchMapInput is an input type that accepts AnalysisRunPatchMap and AnalysisRunPatchMapOutput values.
// You can construct a concrete instance of `AnalysisRunPatchMapInput` via:
//
//	AnalysisRunPatchMap{ "key": AnalysisRunPatchArgs{...} }
type AnalysisRunPatchMapInput interface {
	pulumi.Input

	ToAnalysisRunPatchMapOutput() AnalysisRunPatchMapOutput
	ToAnalysisRunPatchMapOutputWithContext(context.Context) AnalysisRunPatchMapOutput
}

type AnalysisRunPatchMap map[string]AnalysisRunPatchInput

func (AnalysisRunPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalysisRunPatch)(nil)).Elem()
}

func (i AnalysisRunPatchMap) ToAnalysisRunPatchMapOutput() AnalysisRunPatchMapOutput {
	return i.ToAnalysisRunPatchMapOutputWithContext(context.Background())
}

func (i AnalysisRunPatchMap) ToAnalysisRunPatchMapOutputWithContext(ctx context.Context) AnalysisRunPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRunPatchMapOutput)
}

type AnalysisRunPatchOutput struct{ *pulumi.OutputState }

func (AnalysisRunPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRunPatch)(nil)).Elem()
}

func (o AnalysisRunPatchOutput) ToAnalysisRunPatchOutput() AnalysisRunPatchOutput {
	return o
}

func (o AnalysisRunPatchOutput) ToAnalysisRunPatchOutputWithContext(ctx context.Context) AnalysisRunPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AnalysisRunPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisRunPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AnalysisRunPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnalysisRunPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AnalysisRunPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AnalysisRunPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AnalysisRunPatchOutput) Spec() AnalysisRunSpecPatchPtrOutput {
	return o.ApplyT(func(v *AnalysisRunPatch) AnalysisRunSpecPatchPtrOutput { return v.Spec }).(AnalysisRunSpecPatchPtrOutput)
}

func (o AnalysisRunPatchOutput) Status() AnalysisRunStatusPatchPtrOutput {
	return o.ApplyT(func(v *AnalysisRunPatch) AnalysisRunStatusPatchPtrOutput { return v.Status }).(AnalysisRunStatusPatchPtrOutput)
}

type AnalysisRunPatchArrayOutput struct{ *pulumi.OutputState }

func (AnalysisRunPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalysisRunPatch)(nil)).Elem()
}

func (o AnalysisRunPatchArrayOutput) ToAnalysisRunPatchArrayOutput() AnalysisRunPatchArrayOutput {
	return o
}

func (o AnalysisRunPatchArrayOutput) ToAnalysisRunPatchArrayOutputWithContext(ctx context.Context) AnalysisRunPatchArrayOutput {
	return o
}

func (o AnalysisRunPatchArrayOutput) Index(i pulumi.IntInput) AnalysisRunPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnalysisRunPatch {
		return vs[0].([]*AnalysisRunPatch)[vs[1].(int)]
	}).(AnalysisRunPatchOutput)
}

type AnalysisRunPatchMapOutput struct{ *pulumi.OutputState }

func (AnalysisRunPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalysisRunPatch)(nil)).Elem()
}

func (o AnalysisRunPatchMapOutput) ToAnalysisRunPatchMapOutput() AnalysisRunPatchMapOutput {
	return o
}

func (o AnalysisRunPatchMapOutput) ToAnalysisRunPatchMapOutputWithContext(ctx context.Context) AnalysisRunPatchMapOutput {
	return o
}

func (o AnalysisRunPatchMapOutput) MapIndex(k pulumi.StringInput) AnalysisRunPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnalysisRunPatch {
		return vs[0].(map[string]*AnalysisRunPatch)[vs[1].(string)]
	}).(AnalysisRunPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRunPatchInput)(nil)).Elem(), &AnalysisRunPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRunPatchArrayInput)(nil)).Elem(), AnalysisRunPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRunPatchMapInput)(nil)).Elem(), AnalysisRunPatchMap{})
	pulumi.RegisterOutputType(AnalysisRunPatchOutput{})
	pulumi.RegisterOutputType(AnalysisRunPatchArrayOutput{})
	pulumi.RegisterOutputType(AnalysisRunPatchMapOutput{})
}
