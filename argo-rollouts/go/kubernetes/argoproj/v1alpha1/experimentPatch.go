// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type ExperimentPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ExperimentSpecPatchPtrOutput    `pulumi:"spec"`
	Status   ExperimentStatusPatchPtrOutput  `pulumi:"status"`
}

// NewExperimentPatch registers a new resource with the given unique name, arguments, and options.
func NewExperimentPatch(ctx *pulumi.Context,
	name string, args *ExperimentPatchArgs, opts ...pulumi.ResourceOption) (*ExperimentPatch, error) {
	if args == nil {
		args = &ExperimentPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Experiment")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ExperimentPatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:ExperimentPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentPatch gets an existing ExperimentPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentPatchState, opts ...pulumi.ResourceOption) (*ExperimentPatch, error) {
	var resource ExperimentPatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:ExperimentPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentPatch resources.
type experimentPatchState struct {
}

type ExperimentPatchState struct {
}

func (ExperimentPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentPatchState)(nil)).Elem()
}

type experimentPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ExperimentSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a ExperimentPatch resource.
type ExperimentPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ExperimentSpecPatchPtrInput
}

func (ExperimentPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentPatchArgs)(nil)).Elem()
}

type ExperimentPatchInput interface {
	pulumi.Input

	ToExperimentPatchOutput() ExperimentPatchOutput
	ToExperimentPatchOutputWithContext(ctx context.Context) ExperimentPatchOutput
}

func (*ExperimentPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentPatch)(nil)).Elem()
}

func (i *ExperimentPatch) ToExperimentPatchOutput() ExperimentPatchOutput {
	return i.ToExperimentPatchOutputWithContext(context.Background())
}

func (i *ExperimentPatch) ToExperimentPatchOutputWithContext(ctx context.Context) ExperimentPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPatchOutput)
}

// ExperimentPatchArrayInput is an input type that accepts ExperimentPatchArray and ExperimentPatchArrayOutput values.
// You can construct a concrete instance of `ExperimentPatchArrayInput` via:
//
//	ExperimentPatchArray{ ExperimentPatchArgs{...} }
type ExperimentPatchArrayInput interface {
	pulumi.Input

	ToExperimentPatchArrayOutput() ExperimentPatchArrayOutput
	ToExperimentPatchArrayOutputWithContext(context.Context) ExperimentPatchArrayOutput
}

type ExperimentPatchArray []ExperimentPatchInput

func (ExperimentPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentPatch)(nil)).Elem()
}

func (i ExperimentPatchArray) ToExperimentPatchArrayOutput() ExperimentPatchArrayOutput {
	return i.ToExperimentPatchArrayOutputWithContext(context.Background())
}

func (i ExperimentPatchArray) ToExperimentPatchArrayOutputWithContext(ctx context.Context) ExperimentPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPatchArrayOutput)
}

// ExperimentPatchMapInput is an input type that accepts ExperimentPatchMap and ExperimentPatchMapOutput values.
// You can construct a concrete instance of `ExperimentPatchMapInput` via:
//
//	ExperimentPatchMap{ "key": ExperimentPatchArgs{...} }
type ExperimentPatchMapInput interface {
	pulumi.Input

	ToExperimentPatchMapOutput() ExperimentPatchMapOutput
	ToExperimentPatchMapOutputWithContext(context.Context) ExperimentPatchMapOutput
}

type ExperimentPatchMap map[string]ExperimentPatchInput

func (ExperimentPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentPatch)(nil)).Elem()
}

func (i ExperimentPatchMap) ToExperimentPatchMapOutput() ExperimentPatchMapOutput {
	return i.ToExperimentPatchMapOutputWithContext(context.Background())
}

func (i ExperimentPatchMap) ToExperimentPatchMapOutputWithContext(ctx context.Context) ExperimentPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPatchMapOutput)
}

type ExperimentPatchOutput struct{ *pulumi.OutputState }

func (ExperimentPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentPatch)(nil)).Elem()
}

func (o ExperimentPatchOutput) ToExperimentPatchOutput() ExperimentPatchOutput {
	return o
}

func (o ExperimentPatchOutput) ToExperimentPatchOutputWithContext(ctx context.Context) ExperimentPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ExperimentPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExperimentPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExperimentPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ExperimentPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ExperimentPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ExperimentPatchOutput) Spec() ExperimentSpecPatchPtrOutput {
	return o.ApplyT(func(v *ExperimentPatch) ExperimentSpecPatchPtrOutput { return v.Spec }).(ExperimentSpecPatchPtrOutput)
}

func (o ExperimentPatchOutput) Status() ExperimentStatusPatchPtrOutput {
	return o.ApplyT(func(v *ExperimentPatch) ExperimentStatusPatchPtrOutput { return v.Status }).(ExperimentStatusPatchPtrOutput)
}

type ExperimentPatchArrayOutput struct{ *pulumi.OutputState }

func (ExperimentPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentPatch)(nil)).Elem()
}

func (o ExperimentPatchArrayOutput) ToExperimentPatchArrayOutput() ExperimentPatchArrayOutput {
	return o
}

func (o ExperimentPatchArrayOutput) ToExperimentPatchArrayOutputWithContext(ctx context.Context) ExperimentPatchArrayOutput {
	return o
}

func (o ExperimentPatchArrayOutput) Index(i pulumi.IntInput) ExperimentPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExperimentPatch {
		return vs[0].([]*ExperimentPatch)[vs[1].(int)]
	}).(ExperimentPatchOutput)
}

type ExperimentPatchMapOutput struct{ *pulumi.OutputState }

func (ExperimentPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentPatch)(nil)).Elem()
}

func (o ExperimentPatchMapOutput) ToExperimentPatchMapOutput() ExperimentPatchMapOutput {
	return o
}

func (o ExperimentPatchMapOutput) ToExperimentPatchMapOutputWithContext(ctx context.Context) ExperimentPatchMapOutput {
	return o
}

func (o ExperimentPatchMapOutput) MapIndex(k pulumi.StringInput) ExperimentPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExperimentPatch {
		return vs[0].(map[string]*ExperimentPatch)[vs[1].(string)]
	}).(ExperimentPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPatchInput)(nil)).Elem(), &ExperimentPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPatchArrayInput)(nil)).Elem(), ExperimentPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentPatchMapInput)(nil)).Elem(), ExperimentPatchMap{})
	pulumi.RegisterOutputType(ExperimentPatchOutput{})
	pulumi.RegisterOutputType(ExperimentPatchArrayOutput{})
	pulumi.RegisterOutputType(ExperimentPatchMapOutput{})
}
