// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AnalysisRunList is a list of AnalysisRun
type AnalysisRunList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of analysisruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items AnalysisRunTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewAnalysisRunList registers a new resource with the given unique name, arguments, and options.
func NewAnalysisRunList(ctx *pulumi.Context,
	name string, args *AnalysisRunListArgs, opts ...pulumi.ResourceOption) (*AnalysisRunList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AnalysisRunList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AnalysisRunList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:AnalysisRunList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalysisRunList gets an existing AnalysisRunList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalysisRunList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalysisRunListState, opts ...pulumi.ResourceOption) (*AnalysisRunList, error) {
	var resource AnalysisRunList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:AnalysisRunList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalysisRunList resources.
type analysisRunListState struct {
}

type AnalysisRunListState struct {
}

func (AnalysisRunListState) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisRunListState)(nil)).Elem()
}

type analysisRunListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of analysisruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []AnalysisRunType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a AnalysisRunList resource.
type AnalysisRunListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of analysisruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items AnalysisRunTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (AnalysisRunListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisRunListArgs)(nil)).Elem()
}

type AnalysisRunListInput interface {
	pulumi.Input

	ToAnalysisRunListOutput() AnalysisRunListOutput
	ToAnalysisRunListOutputWithContext(ctx context.Context) AnalysisRunListOutput
}

func (*AnalysisRunList) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRunList)(nil)).Elem()
}

func (i *AnalysisRunList) ToAnalysisRunListOutput() AnalysisRunListOutput {
	return i.ToAnalysisRunListOutputWithContext(context.Background())
}

func (i *AnalysisRunList) ToAnalysisRunListOutputWithContext(ctx context.Context) AnalysisRunListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRunListOutput)
}

// AnalysisRunListArrayInput is an input type that accepts AnalysisRunListArray and AnalysisRunListArrayOutput values.
// You can construct a concrete instance of `AnalysisRunListArrayInput` via:
//
//	AnalysisRunListArray{ AnalysisRunListArgs{...} }
type AnalysisRunListArrayInput interface {
	pulumi.Input

	ToAnalysisRunListArrayOutput() AnalysisRunListArrayOutput
	ToAnalysisRunListArrayOutputWithContext(context.Context) AnalysisRunListArrayOutput
}

type AnalysisRunListArray []AnalysisRunListInput

func (AnalysisRunListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalysisRunList)(nil)).Elem()
}

func (i AnalysisRunListArray) ToAnalysisRunListArrayOutput() AnalysisRunListArrayOutput {
	return i.ToAnalysisRunListArrayOutputWithContext(context.Background())
}

func (i AnalysisRunListArray) ToAnalysisRunListArrayOutputWithContext(ctx context.Context) AnalysisRunListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRunListArrayOutput)
}

// AnalysisRunListMapInput is an input type that accepts AnalysisRunListMap and AnalysisRunListMapOutput values.
// You can construct a concrete instance of `AnalysisRunListMapInput` via:
//
//	AnalysisRunListMap{ "key": AnalysisRunListArgs{...} }
type AnalysisRunListMapInput interface {
	pulumi.Input

	ToAnalysisRunListMapOutput() AnalysisRunListMapOutput
	ToAnalysisRunListMapOutputWithContext(context.Context) AnalysisRunListMapOutput
}

type AnalysisRunListMap map[string]AnalysisRunListInput

func (AnalysisRunListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalysisRunList)(nil)).Elem()
}

func (i AnalysisRunListMap) ToAnalysisRunListMapOutput() AnalysisRunListMapOutput {
	return i.ToAnalysisRunListMapOutputWithContext(context.Background())
}

func (i AnalysisRunListMap) ToAnalysisRunListMapOutputWithContext(ctx context.Context) AnalysisRunListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisRunListMapOutput)
}

type AnalysisRunListOutput struct{ *pulumi.OutputState }

func (AnalysisRunListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalysisRunList)(nil)).Elem()
}

func (o AnalysisRunListOutput) ToAnalysisRunListOutput() AnalysisRunListOutput {
	return o
}

func (o AnalysisRunListOutput) ToAnalysisRunListOutputWithContext(ctx context.Context) AnalysisRunListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AnalysisRunListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRunList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of analysisruns. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o AnalysisRunListOutput) Items() AnalysisRunTypeArrayOutput {
	return o.ApplyT(func(v *AnalysisRunList) AnalysisRunTypeArrayOutput { return v.Items }).(AnalysisRunTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AnalysisRunListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *AnalysisRunList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AnalysisRunListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *AnalysisRunList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type AnalysisRunListArrayOutput struct{ *pulumi.OutputState }

func (AnalysisRunListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalysisRunList)(nil)).Elem()
}

func (o AnalysisRunListArrayOutput) ToAnalysisRunListArrayOutput() AnalysisRunListArrayOutput {
	return o
}

func (o AnalysisRunListArrayOutput) ToAnalysisRunListArrayOutputWithContext(ctx context.Context) AnalysisRunListArrayOutput {
	return o
}

func (o AnalysisRunListArrayOutput) Index(i pulumi.IntInput) AnalysisRunListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnalysisRunList {
		return vs[0].([]*AnalysisRunList)[vs[1].(int)]
	}).(AnalysisRunListOutput)
}

type AnalysisRunListMapOutput struct{ *pulumi.OutputState }

func (AnalysisRunListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalysisRunList)(nil)).Elem()
}

func (o AnalysisRunListMapOutput) ToAnalysisRunListMapOutput() AnalysisRunListMapOutput {
	return o
}

func (o AnalysisRunListMapOutput) ToAnalysisRunListMapOutputWithContext(ctx context.Context) AnalysisRunListMapOutput {
	return o
}

func (o AnalysisRunListMapOutput) MapIndex(k pulumi.StringInput) AnalysisRunListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnalysisRunList {
		return vs[0].(map[string]*AnalysisRunList)[vs[1].(string)]
	}).(AnalysisRunListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRunListInput)(nil)).Elem(), &AnalysisRunList{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRunListArrayInput)(nil)).Elem(), AnalysisRunListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisRunListMapInput)(nil)).Elem(), AnalysisRunListMap{})
	pulumi.RegisterOutputType(AnalysisRunListOutput{})
	pulumi.RegisterOutputType(AnalysisRunListArrayOutput{})
	pulumi.RegisterOutputType(AnalysisRunListMapOutput{})
}
