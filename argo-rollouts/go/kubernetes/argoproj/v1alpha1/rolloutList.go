// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RolloutList is a list of Rollout
type RolloutList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of rollouts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items RolloutTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewRolloutList registers a new resource with the given unique name, arguments, and options.
func NewRolloutList(ctx *pulumi.Context,
	name string, args *RolloutListArgs, opts ...pulumi.ResourceOption) (*RolloutList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("RolloutList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RolloutList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:RolloutList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolloutList gets an existing RolloutList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolloutList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolloutListState, opts ...pulumi.ResourceOption) (*RolloutList, error) {
	var resource RolloutList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:RolloutList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolloutList resources.
type rolloutListState struct {
}

type RolloutListState struct {
}

func (RolloutListState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutListState)(nil)).Elem()
}

type rolloutListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of rollouts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []RolloutType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a RolloutList resource.
type RolloutListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of rollouts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items RolloutTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (RolloutListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutListArgs)(nil)).Elem()
}

type RolloutListInput interface {
	pulumi.Input

	ToRolloutListOutput() RolloutListOutput
	ToRolloutListOutputWithContext(ctx context.Context) RolloutListOutput
}

func (*RolloutList) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutList)(nil)).Elem()
}

func (i *RolloutList) ToRolloutListOutput() RolloutListOutput {
	return i.ToRolloutListOutputWithContext(context.Background())
}

func (i *RolloutList) ToRolloutListOutputWithContext(ctx context.Context) RolloutListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutListOutput)
}

// RolloutListArrayInput is an input type that accepts RolloutListArray and RolloutListArrayOutput values.
// You can construct a concrete instance of `RolloutListArrayInput` via:
//
//	RolloutListArray{ RolloutListArgs{...} }
type RolloutListArrayInput interface {
	pulumi.Input

	ToRolloutListArrayOutput() RolloutListArrayOutput
	ToRolloutListArrayOutputWithContext(context.Context) RolloutListArrayOutput
}

type RolloutListArray []RolloutListInput

func (RolloutListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutList)(nil)).Elem()
}

func (i RolloutListArray) ToRolloutListArrayOutput() RolloutListArrayOutput {
	return i.ToRolloutListArrayOutputWithContext(context.Background())
}

func (i RolloutListArray) ToRolloutListArrayOutputWithContext(ctx context.Context) RolloutListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutListArrayOutput)
}

// RolloutListMapInput is an input type that accepts RolloutListMap and RolloutListMapOutput values.
// You can construct a concrete instance of `RolloutListMapInput` via:
//
//	RolloutListMap{ "key": RolloutListArgs{...} }
type RolloutListMapInput interface {
	pulumi.Input

	ToRolloutListMapOutput() RolloutListMapOutput
	ToRolloutListMapOutputWithContext(context.Context) RolloutListMapOutput
}

type RolloutListMap map[string]RolloutListInput

func (RolloutListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutList)(nil)).Elem()
}

func (i RolloutListMap) ToRolloutListMapOutput() RolloutListMapOutput {
	return i.ToRolloutListMapOutputWithContext(context.Background())
}

func (i RolloutListMap) ToRolloutListMapOutputWithContext(ctx context.Context) RolloutListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutListMapOutput)
}

type RolloutListOutput struct{ *pulumi.OutputState }

func (RolloutListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutList)(nil)).Elem()
}

func (o RolloutListOutput) ToRolloutListOutput() RolloutListOutput {
	return o
}

func (o RolloutListOutput) ToRolloutListOutputWithContext(ctx context.Context) RolloutListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RolloutListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of rollouts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o RolloutListOutput) Items() RolloutTypeArrayOutput {
	return o.ApplyT(func(v *RolloutList) RolloutTypeArrayOutput { return v.Items }).(RolloutTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RolloutListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RolloutList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RolloutListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *RolloutList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type RolloutListArrayOutput struct{ *pulumi.OutputState }

func (RolloutListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutList)(nil)).Elem()
}

func (o RolloutListArrayOutput) ToRolloutListArrayOutput() RolloutListArrayOutput {
	return o
}

func (o RolloutListArrayOutput) ToRolloutListArrayOutputWithContext(ctx context.Context) RolloutListArrayOutput {
	return o
}

func (o RolloutListArrayOutput) Index(i pulumi.IntInput) RolloutListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolloutList {
		return vs[0].([]*RolloutList)[vs[1].(int)]
	}).(RolloutListOutput)
}

type RolloutListMapOutput struct{ *pulumi.OutputState }

func (RolloutListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutList)(nil)).Elem()
}

func (o RolloutListMapOutput) ToRolloutListMapOutput() RolloutListMapOutput {
	return o
}

func (o RolloutListMapOutput) ToRolloutListMapOutputWithContext(ctx context.Context) RolloutListMapOutput {
	return o
}

func (o RolloutListMapOutput) MapIndex(k pulumi.StringInput) RolloutListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolloutList {
		return vs[0].(map[string]*RolloutList)[vs[1].(string)]
	}).(RolloutListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutListInput)(nil)).Elem(), &RolloutList{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutListArrayInput)(nil)).Elem(), RolloutListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutListMapInput)(nil)).Elem(), RolloutListMap{})
	pulumi.RegisterOutputType(RolloutListOutput{})
	pulumi.RegisterOutputType(RolloutListArrayOutput{})
	pulumi.RegisterOutputType(RolloutListMapOutput{})
}
