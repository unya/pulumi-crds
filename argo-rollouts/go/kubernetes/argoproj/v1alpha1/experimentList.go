// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ExperimentList is a list of Experiment
type ExperimentList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of experiments. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ExperimentTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewExperimentList registers a new resource with the given unique name, arguments, and options.
func NewExperimentList(ctx *pulumi.Context,
	name string, args *ExperimentListArgs, opts ...pulumi.ResourceOption) (*ExperimentList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ExperimentList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ExperimentList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:ExperimentList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperimentList gets an existing ExperimentList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperimentList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentListState, opts ...pulumi.ResourceOption) (*ExperimentList, error) {
	var resource ExperimentList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:ExperimentList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExperimentList resources.
type experimentListState struct {
}

type ExperimentListState struct {
}

func (ExperimentListState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentListState)(nil)).Elem()
}

type experimentListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of experiments. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ExperimentType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ExperimentList resource.
type ExperimentListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of experiments. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ExperimentTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ExperimentListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentListArgs)(nil)).Elem()
}

type ExperimentListInput interface {
	pulumi.Input

	ToExperimentListOutput() ExperimentListOutput
	ToExperimentListOutputWithContext(ctx context.Context) ExperimentListOutput
}

func (*ExperimentList) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentList)(nil)).Elem()
}

func (i *ExperimentList) ToExperimentListOutput() ExperimentListOutput {
	return i.ToExperimentListOutputWithContext(context.Background())
}

func (i *ExperimentList) ToExperimentListOutputWithContext(ctx context.Context) ExperimentListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentListOutput)
}

// ExperimentListArrayInput is an input type that accepts ExperimentListArray and ExperimentListArrayOutput values.
// You can construct a concrete instance of `ExperimentListArrayInput` via:
//
//	ExperimentListArray{ ExperimentListArgs{...} }
type ExperimentListArrayInput interface {
	pulumi.Input

	ToExperimentListArrayOutput() ExperimentListArrayOutput
	ToExperimentListArrayOutputWithContext(context.Context) ExperimentListArrayOutput
}

type ExperimentListArray []ExperimentListInput

func (ExperimentListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentList)(nil)).Elem()
}

func (i ExperimentListArray) ToExperimentListArrayOutput() ExperimentListArrayOutput {
	return i.ToExperimentListArrayOutputWithContext(context.Background())
}

func (i ExperimentListArray) ToExperimentListArrayOutputWithContext(ctx context.Context) ExperimentListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentListArrayOutput)
}

// ExperimentListMapInput is an input type that accepts ExperimentListMap and ExperimentListMapOutput values.
// You can construct a concrete instance of `ExperimentListMapInput` via:
//
//	ExperimentListMap{ "key": ExperimentListArgs{...} }
type ExperimentListMapInput interface {
	pulumi.Input

	ToExperimentListMapOutput() ExperimentListMapOutput
	ToExperimentListMapOutputWithContext(context.Context) ExperimentListMapOutput
}

type ExperimentListMap map[string]ExperimentListInput

func (ExperimentListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentList)(nil)).Elem()
}

func (i ExperimentListMap) ToExperimentListMapOutput() ExperimentListMapOutput {
	return i.ToExperimentListMapOutputWithContext(context.Background())
}

func (i ExperimentListMap) ToExperimentListMapOutputWithContext(ctx context.Context) ExperimentListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentListMapOutput)
}

type ExperimentListOutput struct{ *pulumi.OutputState }

func (ExperimentListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExperimentList)(nil)).Elem()
}

func (o ExperimentListOutput) ToExperimentListOutput() ExperimentListOutput {
	return o
}

func (o ExperimentListOutput) ToExperimentListOutputWithContext(ctx context.Context) ExperimentListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ExperimentListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of experiments. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ExperimentListOutput) Items() ExperimentTypeArrayOutput {
	return o.ApplyT(func(v *ExperimentList) ExperimentTypeArrayOutput { return v.Items }).(ExperimentTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExperimentListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ExperimentList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExperimentListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ExperimentList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ExperimentListArrayOutput struct{ *pulumi.OutputState }

func (ExperimentListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExperimentList)(nil)).Elem()
}

func (o ExperimentListArrayOutput) ToExperimentListArrayOutput() ExperimentListArrayOutput {
	return o
}

func (o ExperimentListArrayOutput) ToExperimentListArrayOutputWithContext(ctx context.Context) ExperimentListArrayOutput {
	return o
}

func (o ExperimentListArrayOutput) Index(i pulumi.IntInput) ExperimentListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExperimentList {
		return vs[0].([]*ExperimentList)[vs[1].(int)]
	}).(ExperimentListOutput)
}

type ExperimentListMapOutput struct{ *pulumi.OutputState }

func (ExperimentListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExperimentList)(nil)).Elem()
}

func (o ExperimentListMapOutput) ToExperimentListMapOutput() ExperimentListMapOutput {
	return o
}

func (o ExperimentListMapOutput) ToExperimentListMapOutputWithContext(ctx context.Context) ExperimentListMapOutput {
	return o
}

func (o ExperimentListMapOutput) MapIndex(k pulumi.StringInput) ExperimentListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExperimentList {
		return vs[0].(map[string]*ExperimentList)[vs[1].(string)]
	}).(ExperimentListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentListInput)(nil)).Elem(), &ExperimentList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentListArrayInput)(nil)).Elem(), ExperimentListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExperimentListMapInput)(nil)).Elem(), ExperimentListMap{})
	pulumi.RegisterOutputType(ExperimentListOutput{})
	pulumi.RegisterOutputType(ExperimentListArrayOutput{})
	pulumi.RegisterOutputType(ExperimentListMapOutput{})
}
