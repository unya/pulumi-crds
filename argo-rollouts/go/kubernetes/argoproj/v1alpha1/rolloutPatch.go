// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type RolloutPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     RolloutSpecPatchPtrOutput       `pulumi:"spec"`
	Status   RolloutStatusPatchPtrOutput     `pulumi:"status"`
}

// NewRolloutPatch registers a new resource with the given unique name, arguments, and options.
func NewRolloutPatch(ctx *pulumi.Context,
	name string, args *RolloutPatchArgs, opts ...pulumi.ResourceOption) (*RolloutPatch, error) {
	if args == nil {
		args = &RolloutPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Rollout")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RolloutPatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:RolloutPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolloutPatch gets an existing RolloutPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolloutPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolloutPatchState, opts ...pulumi.ResourceOption) (*RolloutPatch, error) {
	var resource RolloutPatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:RolloutPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolloutPatch resources.
type rolloutPatchState struct {
}

type RolloutPatchState struct {
}

func (RolloutPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutPatchState)(nil)).Elem()
}

type rolloutPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *RolloutSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a RolloutPatch resource.
type RolloutPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     RolloutSpecPatchPtrInput
}

func (RolloutPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolloutPatchArgs)(nil)).Elem()
}

type RolloutPatchInput interface {
	pulumi.Input

	ToRolloutPatchOutput() RolloutPatchOutput
	ToRolloutPatchOutputWithContext(ctx context.Context) RolloutPatchOutput
}

func (*RolloutPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutPatch)(nil)).Elem()
}

func (i *RolloutPatch) ToRolloutPatchOutput() RolloutPatchOutput {
	return i.ToRolloutPatchOutputWithContext(context.Background())
}

func (i *RolloutPatch) ToRolloutPatchOutputWithContext(ctx context.Context) RolloutPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutPatchOutput)
}

// RolloutPatchArrayInput is an input type that accepts RolloutPatchArray and RolloutPatchArrayOutput values.
// You can construct a concrete instance of `RolloutPatchArrayInput` via:
//
//	RolloutPatchArray{ RolloutPatchArgs{...} }
type RolloutPatchArrayInput interface {
	pulumi.Input

	ToRolloutPatchArrayOutput() RolloutPatchArrayOutput
	ToRolloutPatchArrayOutputWithContext(context.Context) RolloutPatchArrayOutput
}

type RolloutPatchArray []RolloutPatchInput

func (RolloutPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutPatch)(nil)).Elem()
}

func (i RolloutPatchArray) ToRolloutPatchArrayOutput() RolloutPatchArrayOutput {
	return i.ToRolloutPatchArrayOutputWithContext(context.Background())
}

func (i RolloutPatchArray) ToRolloutPatchArrayOutputWithContext(ctx context.Context) RolloutPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutPatchArrayOutput)
}

// RolloutPatchMapInput is an input type that accepts RolloutPatchMap and RolloutPatchMapOutput values.
// You can construct a concrete instance of `RolloutPatchMapInput` via:
//
//	RolloutPatchMap{ "key": RolloutPatchArgs{...} }
type RolloutPatchMapInput interface {
	pulumi.Input

	ToRolloutPatchMapOutput() RolloutPatchMapOutput
	ToRolloutPatchMapOutputWithContext(context.Context) RolloutPatchMapOutput
}

type RolloutPatchMap map[string]RolloutPatchInput

func (RolloutPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutPatch)(nil)).Elem()
}

func (i RolloutPatchMap) ToRolloutPatchMapOutput() RolloutPatchMapOutput {
	return i.ToRolloutPatchMapOutputWithContext(context.Background())
}

func (i RolloutPatchMap) ToRolloutPatchMapOutputWithContext(ctx context.Context) RolloutPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolloutPatchMapOutput)
}

type RolloutPatchOutput struct{ *pulumi.OutputState }

func (RolloutPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolloutPatch)(nil)).Elem()
}

func (o RolloutPatchOutput) ToRolloutPatchOutput() RolloutPatchOutput {
	return o
}

func (o RolloutPatchOutput) ToRolloutPatchOutputWithContext(ctx context.Context) RolloutPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RolloutPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RolloutPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RolloutPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RolloutPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RolloutPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *RolloutPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o RolloutPatchOutput) Spec() RolloutSpecPatchPtrOutput {
	return o.ApplyT(func(v *RolloutPatch) RolloutSpecPatchPtrOutput { return v.Spec }).(RolloutSpecPatchPtrOutput)
}

func (o RolloutPatchOutput) Status() RolloutStatusPatchPtrOutput {
	return o.ApplyT(func(v *RolloutPatch) RolloutStatusPatchPtrOutput { return v.Status }).(RolloutStatusPatchPtrOutput)
}

type RolloutPatchArrayOutput struct{ *pulumi.OutputState }

func (RolloutPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolloutPatch)(nil)).Elem()
}

func (o RolloutPatchArrayOutput) ToRolloutPatchArrayOutput() RolloutPatchArrayOutput {
	return o
}

func (o RolloutPatchArrayOutput) ToRolloutPatchArrayOutputWithContext(ctx context.Context) RolloutPatchArrayOutput {
	return o
}

func (o RolloutPatchArrayOutput) Index(i pulumi.IntInput) RolloutPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolloutPatch {
		return vs[0].([]*RolloutPatch)[vs[1].(int)]
	}).(RolloutPatchOutput)
}

type RolloutPatchMapOutput struct{ *pulumi.OutputState }

func (RolloutPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolloutPatch)(nil)).Elem()
}

func (o RolloutPatchMapOutput) ToRolloutPatchMapOutput() RolloutPatchMapOutput {
	return o
}

func (o RolloutPatchMapOutput) ToRolloutPatchMapOutputWithContext(ctx context.Context) RolloutPatchMapOutput {
	return o
}

func (o RolloutPatchMapOutput) MapIndex(k pulumi.StringInput) RolloutPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolloutPatch {
		return vs[0].(map[string]*RolloutPatch)[vs[1].(string)]
	}).(RolloutPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutPatchInput)(nil)).Elem(), &RolloutPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutPatchArrayInput)(nil)).Elem(), RolloutPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolloutPatchMapInput)(nil)).Elem(), RolloutPatchMap{})
	pulumi.RegisterOutputType(RolloutPatchOutput{})
	pulumi.RegisterOutputType(RolloutPatchArrayOutput{})
	pulumi.RegisterOutputType(RolloutPatchMapOutput{})
}
