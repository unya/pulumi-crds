// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Freight represents a collection of versioned artifacts.
type Freight struct {
	pulumi.CustomResourceState

	// Alias is a human-friendly alias for a piece of Freight. This is an optional
	// field. A defaulting webhook will sync this field with the value of the
	// kargo.akuity.io/alias label. When the alias label is not present or differs
	// from the value of this field, the defaulting webhook will set the label to
	// the value of this field. If the alias label is present and this field is
	// empty, the defaulting webhook will set the value of this field to the value
	// of the alias label. If this field is empty and the alias label is not
	// present, the defaulting webhook will choose an available alias and assign
	// it to both the field and label.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Charts describes specific versions of specific Helm charts.
	Charts FreightChartsArrayOutput `pulumi:"charts"`
	// Commits describes specific Git repository commits.
	Commits FreightCommitsArrayOutput `pulumi:"commits"`
	// Images describes specific versions of specific container images.
	Images FreightImagesArrayOutput `pulumi:"images"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Origin   FreightOriginOutput     `pulumi:"origin"`
	Status   FreightStatusPtrOutput  `pulumi:"status"`
}

// NewFreight registers a new resource with the given unique name, arguments, and options.
func NewFreight(ctx *pulumi.Context,
	name string, args *FreightArgs, opts ...pulumi.ResourceOption) (*Freight, error) {
	if args == nil {
		args = &FreightArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Freight")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Freight
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:Freight", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFreight gets an existing Freight resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFreight(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FreightState, opts ...pulumi.ResourceOption) (*Freight, error) {
	var resource Freight
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:Freight", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Freight resources.
type freightState struct {
}

type FreightState struct {
}

func (FreightState) ElementType() reflect.Type {
	return reflect.TypeOf((*freightState)(nil)).Elem()
}

type freightArgs struct {
	// Alias is a human-friendly alias for a piece of Freight. This is an optional
	// field. A defaulting webhook will sync this field with the value of the
	// kargo.akuity.io/alias label. When the alias label is not present or differs
	// from the value of this field, the defaulting webhook will set the label to
	// the value of this field. If the alias label is present and this field is
	// empty, the defaulting webhook will set the value of this field to the value
	// of the alias label. If this field is empty and the alias label is not
	// present, the defaulting webhook will choose an available alias and assign
	// it to both the field and label.
	Alias *string `pulumi:"alias"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Charts describes specific versions of specific Helm charts.
	Charts []FreightCharts `pulumi:"charts"`
	// Commits describes specific Git repository commits.
	Commits []FreightCommits `pulumi:"commits"`
	// Images describes specific versions of specific container images.
	Images []FreightImages `pulumi:"images"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Origin   *FreightOrigin     `pulumi:"origin"`
}

// The set of arguments for constructing a Freight resource.
type FreightArgs struct {
	// Alias is a human-friendly alias for a piece of Freight. This is an optional
	// field. A defaulting webhook will sync this field with the value of the
	// kargo.akuity.io/alias label. When the alias label is not present or differs
	// from the value of this field, the defaulting webhook will set the label to
	// the value of this field. If the alias label is present and this field is
	// empty, the defaulting webhook will set the value of this field to the value
	// of the alias label. If this field is empty and the alias label is not
	// present, the defaulting webhook will choose an available alias and assign
	// it to both the field and label.
	Alias pulumi.StringPtrInput
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Charts describes specific versions of specific Helm charts.
	Charts FreightChartsArrayInput
	// Commits describes specific Git repository commits.
	Commits FreightCommitsArrayInput
	// Images describes specific versions of specific container images.
	Images FreightImagesArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Origin   FreightOriginPtrInput
}

func (FreightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*freightArgs)(nil)).Elem()
}

type FreightInput interface {
	pulumi.Input

	ToFreightOutput() FreightOutput
	ToFreightOutputWithContext(ctx context.Context) FreightOutput
}

func (*Freight) ElementType() reflect.Type {
	return reflect.TypeOf((**Freight)(nil)).Elem()
}

func (i *Freight) ToFreightOutput() FreightOutput {
	return i.ToFreightOutputWithContext(context.Background())
}

func (i *Freight) ToFreightOutputWithContext(ctx context.Context) FreightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightOutput)
}

// FreightArrayInput is an input type that accepts FreightArray and FreightArrayOutput values.
// You can construct a concrete instance of `FreightArrayInput` via:
//
//	FreightArray{ FreightArgs{...} }
type FreightArrayInput interface {
	pulumi.Input

	ToFreightArrayOutput() FreightArrayOutput
	ToFreightArrayOutputWithContext(context.Context) FreightArrayOutput
}

type FreightArray []FreightInput

func (FreightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Freight)(nil)).Elem()
}

func (i FreightArray) ToFreightArrayOutput() FreightArrayOutput {
	return i.ToFreightArrayOutputWithContext(context.Background())
}

func (i FreightArray) ToFreightArrayOutputWithContext(ctx context.Context) FreightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightArrayOutput)
}

// FreightMapInput is an input type that accepts FreightMap and FreightMapOutput values.
// You can construct a concrete instance of `FreightMapInput` via:
//
//	FreightMap{ "key": FreightArgs{...} }
type FreightMapInput interface {
	pulumi.Input

	ToFreightMapOutput() FreightMapOutput
	ToFreightMapOutputWithContext(context.Context) FreightMapOutput
}

type FreightMap map[string]FreightInput

func (FreightMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Freight)(nil)).Elem()
}

func (i FreightMap) ToFreightMapOutput() FreightMapOutput {
	return i.ToFreightMapOutputWithContext(context.Background())
}

func (i FreightMap) ToFreightMapOutputWithContext(ctx context.Context) FreightMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightMapOutput)
}

type FreightOutput struct{ *pulumi.OutputState }

func (FreightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Freight)(nil)).Elem()
}

func (o FreightOutput) ToFreightOutput() FreightOutput {
	return o
}

func (o FreightOutput) ToFreightOutputWithContext(ctx context.Context) FreightOutput {
	return o
}

// Alias is a human-friendly alias for a piece of Freight. This is an optional
// field. A defaulting webhook will sync this field with the value of the
// kargo.akuity.io/alias label. When the alias label is not present or differs
// from the value of this field, the defaulting webhook will set the label to
// the value of this field. If the alias label is present and this field is
// empty, the defaulting webhook will set the value of this field to the value
// of the alias label. If this field is empty and the alias label is not
// present, the defaulting webhook will choose an available alias and assign
// it to both the field and label.
func (o FreightOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Freight) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FreightOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Freight) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Charts describes specific versions of specific Helm charts.
func (o FreightOutput) Charts() FreightChartsArrayOutput {
	return o.ApplyT(func(v *Freight) FreightChartsArrayOutput { return v.Charts }).(FreightChartsArrayOutput)
}

// Commits describes specific Git repository commits.
func (o FreightOutput) Commits() FreightCommitsArrayOutput {
	return o.ApplyT(func(v *Freight) FreightCommitsArrayOutput { return v.Commits }).(FreightCommitsArrayOutput)
}

// Images describes specific versions of specific container images.
func (o FreightOutput) Images() FreightImagesArrayOutput {
	return o.ApplyT(func(v *Freight) FreightImagesArrayOutput { return v.Images }).(FreightImagesArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FreightOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Freight) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FreightOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Freight) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o FreightOutput) Origin() FreightOriginOutput {
	return o.ApplyT(func(v *Freight) FreightOriginOutput { return v.Origin }).(FreightOriginOutput)
}

func (o FreightOutput) Status() FreightStatusPtrOutput {
	return o.ApplyT(func(v *Freight) FreightStatusPtrOutput { return v.Status }).(FreightStatusPtrOutput)
}

type FreightArrayOutput struct{ *pulumi.OutputState }

func (FreightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Freight)(nil)).Elem()
}

func (o FreightArrayOutput) ToFreightArrayOutput() FreightArrayOutput {
	return o
}

func (o FreightArrayOutput) ToFreightArrayOutputWithContext(ctx context.Context) FreightArrayOutput {
	return o
}

func (o FreightArrayOutput) Index(i pulumi.IntInput) FreightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Freight {
		return vs[0].([]*Freight)[vs[1].(int)]
	}).(FreightOutput)
}

type FreightMapOutput struct{ *pulumi.OutputState }

func (FreightMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Freight)(nil)).Elem()
}

func (o FreightMapOutput) ToFreightMapOutput() FreightMapOutput {
	return o
}

func (o FreightMapOutput) ToFreightMapOutputWithContext(ctx context.Context) FreightMapOutput {
	return o
}

func (o FreightMapOutput) MapIndex(k pulumi.StringInput) FreightOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Freight {
		return vs[0].(map[string]*Freight)[vs[1].(string)]
	}).(FreightOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FreightInput)(nil)).Elem(), &Freight{})
	pulumi.RegisterInputType(reflect.TypeOf((*FreightArrayInput)(nil)).Elem(), FreightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FreightMapInput)(nil)).Elem(), FreightMap{})
	pulumi.RegisterOutputType(FreightOutput{})
	pulumi.RegisterOutputType(FreightArrayOutput{})
	pulumi.RegisterOutputType(FreightMapOutput{})
}
