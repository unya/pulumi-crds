// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Promotion represents a request to transition a particular Stage into a
// particular Freight.
type PromotionPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PromotionSpecPatchPtrOutput     `pulumi:"spec"`
	Status   PromotionStatusPatchPtrOutput   `pulumi:"status"`
}

// NewPromotionPatch registers a new resource with the given unique name, arguments, and options.
func NewPromotionPatch(ctx *pulumi.Context,
	name string, args *PromotionPatchArgs, opts ...pulumi.ResourceOption) (*PromotionPatch, error) {
	if args == nil {
		args = &PromotionPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Promotion")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PromotionPatch
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:PromotionPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPromotionPatch gets an existing PromotionPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPromotionPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PromotionPatchState, opts ...pulumi.ResourceOption) (*PromotionPatch, error) {
	var resource PromotionPatch
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:PromotionPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PromotionPatch resources.
type promotionPatchState struct {
}

type PromotionPatchState struct {
}

func (PromotionPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*promotionPatchState)(nil)).Elem()
}

type promotionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PromotionSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a PromotionPatch resource.
type PromotionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PromotionSpecPatchPtrInput
}

func (PromotionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*promotionPatchArgs)(nil)).Elem()
}

type PromotionPatchInput interface {
	pulumi.Input

	ToPromotionPatchOutput() PromotionPatchOutput
	ToPromotionPatchOutputWithContext(ctx context.Context) PromotionPatchOutput
}

func (*PromotionPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PromotionPatch)(nil)).Elem()
}

func (i *PromotionPatch) ToPromotionPatchOutput() PromotionPatchOutput {
	return i.ToPromotionPatchOutputWithContext(context.Background())
}

func (i *PromotionPatch) ToPromotionPatchOutputWithContext(ctx context.Context) PromotionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromotionPatchOutput)
}

// PromotionPatchArrayInput is an input type that accepts PromotionPatchArray and PromotionPatchArrayOutput values.
// You can construct a concrete instance of `PromotionPatchArrayInput` via:
//
//	PromotionPatchArray{ PromotionPatchArgs{...} }
type PromotionPatchArrayInput interface {
	pulumi.Input

	ToPromotionPatchArrayOutput() PromotionPatchArrayOutput
	ToPromotionPatchArrayOutputWithContext(context.Context) PromotionPatchArrayOutput
}

type PromotionPatchArray []PromotionPatchInput

func (PromotionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PromotionPatch)(nil)).Elem()
}

func (i PromotionPatchArray) ToPromotionPatchArrayOutput() PromotionPatchArrayOutput {
	return i.ToPromotionPatchArrayOutputWithContext(context.Background())
}

func (i PromotionPatchArray) ToPromotionPatchArrayOutputWithContext(ctx context.Context) PromotionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromotionPatchArrayOutput)
}

// PromotionPatchMapInput is an input type that accepts PromotionPatchMap and PromotionPatchMapOutput values.
// You can construct a concrete instance of `PromotionPatchMapInput` via:
//
//	PromotionPatchMap{ "key": PromotionPatchArgs{...} }
type PromotionPatchMapInput interface {
	pulumi.Input

	ToPromotionPatchMapOutput() PromotionPatchMapOutput
	ToPromotionPatchMapOutputWithContext(context.Context) PromotionPatchMapOutput
}

type PromotionPatchMap map[string]PromotionPatchInput

func (PromotionPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PromotionPatch)(nil)).Elem()
}

func (i PromotionPatchMap) ToPromotionPatchMapOutput() PromotionPatchMapOutput {
	return i.ToPromotionPatchMapOutputWithContext(context.Background())
}

func (i PromotionPatchMap) ToPromotionPatchMapOutputWithContext(ctx context.Context) PromotionPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PromotionPatchMapOutput)
}

type PromotionPatchOutput struct{ *pulumi.OutputState }

func (PromotionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PromotionPatch)(nil)).Elem()
}

func (o PromotionPatchOutput) ToPromotionPatchOutput() PromotionPatchOutput {
	return o
}

func (o PromotionPatchOutput) ToPromotionPatchOutputWithContext(ctx context.Context) PromotionPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PromotionPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PromotionPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PromotionPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PromotionPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PromotionPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PromotionPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PromotionPatchOutput) Spec() PromotionSpecPatchPtrOutput {
	return o.ApplyT(func(v *PromotionPatch) PromotionSpecPatchPtrOutput { return v.Spec }).(PromotionSpecPatchPtrOutput)
}

func (o PromotionPatchOutput) Status() PromotionStatusPatchPtrOutput {
	return o.ApplyT(func(v *PromotionPatch) PromotionStatusPatchPtrOutput { return v.Status }).(PromotionStatusPatchPtrOutput)
}

type PromotionPatchArrayOutput struct{ *pulumi.OutputState }

func (PromotionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PromotionPatch)(nil)).Elem()
}

func (o PromotionPatchArrayOutput) ToPromotionPatchArrayOutput() PromotionPatchArrayOutput {
	return o
}

func (o PromotionPatchArrayOutput) ToPromotionPatchArrayOutputWithContext(ctx context.Context) PromotionPatchArrayOutput {
	return o
}

func (o PromotionPatchArrayOutput) Index(i pulumi.IntInput) PromotionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PromotionPatch {
		return vs[0].([]*PromotionPatch)[vs[1].(int)]
	}).(PromotionPatchOutput)
}

type PromotionPatchMapOutput struct{ *pulumi.OutputState }

func (PromotionPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PromotionPatch)(nil)).Elem()
}

func (o PromotionPatchMapOutput) ToPromotionPatchMapOutput() PromotionPatchMapOutput {
	return o
}

func (o PromotionPatchMapOutput) ToPromotionPatchMapOutputWithContext(ctx context.Context) PromotionPatchMapOutput {
	return o
}

func (o PromotionPatchMapOutput) MapIndex(k pulumi.StringInput) PromotionPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PromotionPatch {
		return vs[0].(map[string]*PromotionPatch)[vs[1].(string)]
	}).(PromotionPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PromotionPatchInput)(nil)).Elem(), &PromotionPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromotionPatchArrayInput)(nil)).Elem(), PromotionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PromotionPatchMapInput)(nil)).Elem(), PromotionPatchMap{})
	pulumi.RegisterOutputType(PromotionPatchOutput{})
	pulumi.RegisterOutputType(PromotionPatchArrayOutput{})
	pulumi.RegisterOutputType(PromotionPatchMapOutput{})
}
