// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Warehouse is a source of Freight.
type WarehousePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     WarehouseSpecPatchPtrOutput     `pulumi:"spec"`
	Status   WarehouseStatusPatchPtrOutput   `pulumi:"status"`
}

// NewWarehousePatch registers a new resource with the given unique name, arguments, and options.
func NewWarehousePatch(ctx *pulumi.Context,
	name string, args *WarehousePatchArgs, opts ...pulumi.ResourceOption) (*WarehousePatch, error) {
	if args == nil {
		args = &WarehousePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Warehouse")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WarehousePatch
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:WarehousePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWarehousePatch gets an existing WarehousePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWarehousePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WarehousePatchState, opts ...pulumi.ResourceOption) (*WarehousePatch, error) {
	var resource WarehousePatch
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:WarehousePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WarehousePatch resources.
type warehousePatchState struct {
}

type WarehousePatchState struct {
}

func (WarehousePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*warehousePatchState)(nil)).Elem()
}

type warehousePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *WarehouseSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a WarehousePatch resource.
type WarehousePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     WarehouseSpecPatchPtrInput
}

func (WarehousePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*warehousePatchArgs)(nil)).Elem()
}

type WarehousePatchInput interface {
	pulumi.Input

	ToWarehousePatchOutput() WarehousePatchOutput
	ToWarehousePatchOutputWithContext(ctx context.Context) WarehousePatchOutput
}

func (*WarehousePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**WarehousePatch)(nil)).Elem()
}

func (i *WarehousePatch) ToWarehousePatchOutput() WarehousePatchOutput {
	return i.ToWarehousePatchOutputWithContext(context.Background())
}

func (i *WarehousePatch) ToWarehousePatchOutputWithContext(ctx context.Context) WarehousePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehousePatchOutput)
}

// WarehousePatchArrayInput is an input type that accepts WarehousePatchArray and WarehousePatchArrayOutput values.
// You can construct a concrete instance of `WarehousePatchArrayInput` via:
//
//	WarehousePatchArray{ WarehousePatchArgs{...} }
type WarehousePatchArrayInput interface {
	pulumi.Input

	ToWarehousePatchArrayOutput() WarehousePatchArrayOutput
	ToWarehousePatchArrayOutputWithContext(context.Context) WarehousePatchArrayOutput
}

type WarehousePatchArray []WarehousePatchInput

func (WarehousePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WarehousePatch)(nil)).Elem()
}

func (i WarehousePatchArray) ToWarehousePatchArrayOutput() WarehousePatchArrayOutput {
	return i.ToWarehousePatchArrayOutputWithContext(context.Background())
}

func (i WarehousePatchArray) ToWarehousePatchArrayOutputWithContext(ctx context.Context) WarehousePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehousePatchArrayOutput)
}

// WarehousePatchMapInput is an input type that accepts WarehousePatchMap and WarehousePatchMapOutput values.
// You can construct a concrete instance of `WarehousePatchMapInput` via:
//
//	WarehousePatchMap{ "key": WarehousePatchArgs{...} }
type WarehousePatchMapInput interface {
	pulumi.Input

	ToWarehousePatchMapOutput() WarehousePatchMapOutput
	ToWarehousePatchMapOutputWithContext(context.Context) WarehousePatchMapOutput
}

type WarehousePatchMap map[string]WarehousePatchInput

func (WarehousePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WarehousePatch)(nil)).Elem()
}

func (i WarehousePatchMap) ToWarehousePatchMapOutput() WarehousePatchMapOutput {
	return i.ToWarehousePatchMapOutputWithContext(context.Background())
}

func (i WarehousePatchMap) ToWarehousePatchMapOutputWithContext(ctx context.Context) WarehousePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehousePatchMapOutput)
}

type WarehousePatchOutput struct{ *pulumi.OutputState }

func (WarehousePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WarehousePatch)(nil)).Elem()
}

func (o WarehousePatchOutput) ToWarehousePatchOutput() WarehousePatchOutput {
	return o
}

func (o WarehousePatchOutput) ToWarehousePatchOutputWithContext(ctx context.Context) WarehousePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WarehousePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WarehousePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WarehousePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WarehousePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WarehousePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *WarehousePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o WarehousePatchOutput) Spec() WarehouseSpecPatchPtrOutput {
	return o.ApplyT(func(v *WarehousePatch) WarehouseSpecPatchPtrOutput { return v.Spec }).(WarehouseSpecPatchPtrOutput)
}

func (o WarehousePatchOutput) Status() WarehouseStatusPatchPtrOutput {
	return o.ApplyT(func(v *WarehousePatch) WarehouseStatusPatchPtrOutput { return v.Status }).(WarehouseStatusPatchPtrOutput)
}

type WarehousePatchArrayOutput struct{ *pulumi.OutputState }

func (WarehousePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WarehousePatch)(nil)).Elem()
}

func (o WarehousePatchArrayOutput) ToWarehousePatchArrayOutput() WarehousePatchArrayOutput {
	return o
}

func (o WarehousePatchArrayOutput) ToWarehousePatchArrayOutputWithContext(ctx context.Context) WarehousePatchArrayOutput {
	return o
}

func (o WarehousePatchArrayOutput) Index(i pulumi.IntInput) WarehousePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WarehousePatch {
		return vs[0].([]*WarehousePatch)[vs[1].(int)]
	}).(WarehousePatchOutput)
}

type WarehousePatchMapOutput struct{ *pulumi.OutputState }

func (WarehousePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WarehousePatch)(nil)).Elem()
}

func (o WarehousePatchMapOutput) ToWarehousePatchMapOutput() WarehousePatchMapOutput {
	return o
}

func (o WarehousePatchMapOutput) ToWarehousePatchMapOutputWithContext(ctx context.Context) WarehousePatchMapOutput {
	return o
}

func (o WarehousePatchMapOutput) MapIndex(k pulumi.StringInput) WarehousePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WarehousePatch {
		return vs[0].(map[string]*WarehousePatch)[vs[1].(string)]
	}).(WarehousePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WarehousePatchInput)(nil)).Elem(), &WarehousePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*WarehousePatchArrayInput)(nil)).Elem(), WarehousePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WarehousePatchMapInput)(nil)).Elem(), WarehousePatchMap{})
	pulumi.RegisterOutputType(WarehousePatchOutput{})
	pulumi.RegisterOutputType(WarehousePatchArrayOutput{})
	pulumi.RegisterOutputType(WarehousePatchMapOutput{})
}
