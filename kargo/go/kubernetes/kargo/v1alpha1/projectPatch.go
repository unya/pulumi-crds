// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Project is a resource type that reconciles to a specially labeled namespace
// and other TODO: TBD project-level resources.
type ProjectPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ProjectSpecPatchPtrOutput       `pulumi:"spec"`
	Status   ProjectStatusPatchPtrOutput     `pulumi:"status"`
}

// NewProjectPatch registers a new resource with the given unique name, arguments, and options.
func NewProjectPatch(ctx *pulumi.Context,
	name string, args *ProjectPatchArgs, opts ...pulumi.ResourceOption) (*ProjectPatch, error) {
	if args == nil {
		args = &ProjectPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Project")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProjectPatch
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectPatch gets an existing ProjectPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectPatchState, opts ...pulumi.ResourceOption) (*ProjectPatch, error) {
	var resource ProjectPatch
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectPatch resources.
type projectPatchState struct {
}

type ProjectPatchState struct {
}

func (ProjectPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPatchState)(nil)).Elem()
}

type projectPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ProjectSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a ProjectPatch resource.
type ProjectPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ProjectSpecPatchPtrInput
}

func (ProjectPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectPatchArgs)(nil)).Elem()
}

type ProjectPatchInput interface {
	pulumi.Input

	ToProjectPatchOutput() ProjectPatchOutput
	ToProjectPatchOutputWithContext(ctx context.Context) ProjectPatchOutput
}

func (*ProjectPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPatch)(nil)).Elem()
}

func (i *ProjectPatch) ToProjectPatchOutput() ProjectPatchOutput {
	return i.ToProjectPatchOutputWithContext(context.Background())
}

func (i *ProjectPatch) ToProjectPatchOutputWithContext(ctx context.Context) ProjectPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPatchOutput)
}

// ProjectPatchArrayInput is an input type that accepts ProjectPatchArray and ProjectPatchArrayOutput values.
// You can construct a concrete instance of `ProjectPatchArrayInput` via:
//
//	ProjectPatchArray{ ProjectPatchArgs{...} }
type ProjectPatchArrayInput interface {
	pulumi.Input

	ToProjectPatchArrayOutput() ProjectPatchArrayOutput
	ToProjectPatchArrayOutputWithContext(context.Context) ProjectPatchArrayOutput
}

type ProjectPatchArray []ProjectPatchInput

func (ProjectPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectPatch)(nil)).Elem()
}

func (i ProjectPatchArray) ToProjectPatchArrayOutput() ProjectPatchArrayOutput {
	return i.ToProjectPatchArrayOutputWithContext(context.Background())
}

func (i ProjectPatchArray) ToProjectPatchArrayOutputWithContext(ctx context.Context) ProjectPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPatchArrayOutput)
}

// ProjectPatchMapInput is an input type that accepts ProjectPatchMap and ProjectPatchMapOutput values.
// You can construct a concrete instance of `ProjectPatchMapInput` via:
//
//	ProjectPatchMap{ "key": ProjectPatchArgs{...} }
type ProjectPatchMapInput interface {
	pulumi.Input

	ToProjectPatchMapOutput() ProjectPatchMapOutput
	ToProjectPatchMapOutputWithContext(context.Context) ProjectPatchMapOutput
}

type ProjectPatchMap map[string]ProjectPatchInput

func (ProjectPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectPatch)(nil)).Elem()
}

func (i ProjectPatchMap) ToProjectPatchMapOutput() ProjectPatchMapOutput {
	return i.ToProjectPatchMapOutputWithContext(context.Background())
}

func (i ProjectPatchMap) ToProjectPatchMapOutputWithContext(ctx context.Context) ProjectPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectPatchMapOutput)
}

type ProjectPatchOutput struct{ *pulumi.OutputState }

func (ProjectPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectPatch)(nil)).Elem()
}

func (o ProjectPatchOutput) ToProjectPatchOutput() ProjectPatchOutput {
	return o
}

func (o ProjectPatchOutput) ToProjectPatchOutputWithContext(ctx context.Context) ProjectPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProjectPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProjectPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ProjectPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ProjectPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ProjectPatchOutput) Spec() ProjectSpecPatchPtrOutput {
	return o.ApplyT(func(v *ProjectPatch) ProjectSpecPatchPtrOutput { return v.Spec }).(ProjectSpecPatchPtrOutput)
}

func (o ProjectPatchOutput) Status() ProjectStatusPatchPtrOutput {
	return o.ApplyT(func(v *ProjectPatch) ProjectStatusPatchPtrOutput { return v.Status }).(ProjectStatusPatchPtrOutput)
}

type ProjectPatchArrayOutput struct{ *pulumi.OutputState }

func (ProjectPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectPatch)(nil)).Elem()
}

func (o ProjectPatchArrayOutput) ToProjectPatchArrayOutput() ProjectPatchArrayOutput {
	return o
}

func (o ProjectPatchArrayOutput) ToProjectPatchArrayOutputWithContext(ctx context.Context) ProjectPatchArrayOutput {
	return o
}

func (o ProjectPatchArrayOutput) Index(i pulumi.IntInput) ProjectPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectPatch {
		return vs[0].([]*ProjectPatch)[vs[1].(int)]
	}).(ProjectPatchOutput)
}

type ProjectPatchMapOutput struct{ *pulumi.OutputState }

func (ProjectPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectPatch)(nil)).Elem()
}

func (o ProjectPatchMapOutput) ToProjectPatchMapOutput() ProjectPatchMapOutput {
	return o
}

func (o ProjectPatchMapOutput) ToProjectPatchMapOutputWithContext(ctx context.Context) ProjectPatchMapOutput {
	return o
}

func (o ProjectPatchMapOutput) MapIndex(k pulumi.StringInput) ProjectPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectPatch {
		return vs[0].(map[string]*ProjectPatch)[vs[1].(string)]
	}).(ProjectPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPatchInput)(nil)).Elem(), &ProjectPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPatchArrayInput)(nil)).Elem(), ProjectPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectPatchMapInput)(nil)).Elem(), ProjectPatchMap{})
	pulumi.RegisterOutputType(ProjectPatchOutput{})
	pulumi.RegisterOutputType(ProjectPatchArrayOutput{})
	pulumi.RegisterOutputType(ProjectPatchMapOutput{})
}
