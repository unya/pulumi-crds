// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// FreightList is a list of Freight
type FreightList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of freights. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FreightTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewFreightList registers a new resource with the given unique name, arguments, and options.
func NewFreightList(ctx *pulumi.Context,
	name string, args *FreightListArgs, opts ...pulumi.ResourceOption) (*FreightList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("FreightList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FreightList
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:FreightList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFreightList gets an existing FreightList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFreightList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FreightListState, opts ...pulumi.ResourceOption) (*FreightList, error) {
	var resource FreightList
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:FreightList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FreightList resources.
type freightListState struct {
}

type FreightListState struct {
}

func (FreightListState) ElementType() reflect.Type {
	return reflect.TypeOf((*freightListState)(nil)).Elem()
}

type freightListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of freights. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []FreightType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a FreightList resource.
type FreightListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of freights. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FreightTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (FreightListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*freightListArgs)(nil)).Elem()
}

type FreightListInput interface {
	pulumi.Input

	ToFreightListOutput() FreightListOutput
	ToFreightListOutputWithContext(ctx context.Context) FreightListOutput
}

func (*FreightList) ElementType() reflect.Type {
	return reflect.TypeOf((**FreightList)(nil)).Elem()
}

func (i *FreightList) ToFreightListOutput() FreightListOutput {
	return i.ToFreightListOutputWithContext(context.Background())
}

func (i *FreightList) ToFreightListOutputWithContext(ctx context.Context) FreightListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightListOutput)
}

// FreightListArrayInput is an input type that accepts FreightListArray and FreightListArrayOutput values.
// You can construct a concrete instance of `FreightListArrayInput` via:
//
//	FreightListArray{ FreightListArgs{...} }
type FreightListArrayInput interface {
	pulumi.Input

	ToFreightListArrayOutput() FreightListArrayOutput
	ToFreightListArrayOutputWithContext(context.Context) FreightListArrayOutput
}

type FreightListArray []FreightListInput

func (FreightListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FreightList)(nil)).Elem()
}

func (i FreightListArray) ToFreightListArrayOutput() FreightListArrayOutput {
	return i.ToFreightListArrayOutputWithContext(context.Background())
}

func (i FreightListArray) ToFreightListArrayOutputWithContext(ctx context.Context) FreightListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightListArrayOutput)
}

// FreightListMapInput is an input type that accepts FreightListMap and FreightListMapOutput values.
// You can construct a concrete instance of `FreightListMapInput` via:
//
//	FreightListMap{ "key": FreightListArgs{...} }
type FreightListMapInput interface {
	pulumi.Input

	ToFreightListMapOutput() FreightListMapOutput
	ToFreightListMapOutputWithContext(context.Context) FreightListMapOutput
}

type FreightListMap map[string]FreightListInput

func (FreightListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FreightList)(nil)).Elem()
}

func (i FreightListMap) ToFreightListMapOutput() FreightListMapOutput {
	return i.ToFreightListMapOutputWithContext(context.Background())
}

func (i FreightListMap) ToFreightListMapOutputWithContext(ctx context.Context) FreightListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightListMapOutput)
}

type FreightListOutput struct{ *pulumi.OutputState }

func (FreightListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FreightList)(nil)).Elem()
}

func (o FreightListOutput) ToFreightListOutput() FreightListOutput {
	return o
}

func (o FreightListOutput) ToFreightListOutputWithContext(ctx context.Context) FreightListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FreightListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FreightList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of freights. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o FreightListOutput) Items() FreightTypeArrayOutput {
	return o.ApplyT(func(v *FreightList) FreightTypeArrayOutput { return v.Items }).(FreightTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FreightListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *FreightList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FreightListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *FreightList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type FreightListArrayOutput struct{ *pulumi.OutputState }

func (FreightListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FreightList)(nil)).Elem()
}

func (o FreightListArrayOutput) ToFreightListArrayOutput() FreightListArrayOutput {
	return o
}

func (o FreightListArrayOutput) ToFreightListArrayOutputWithContext(ctx context.Context) FreightListArrayOutput {
	return o
}

func (o FreightListArrayOutput) Index(i pulumi.IntInput) FreightListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FreightList {
		return vs[0].([]*FreightList)[vs[1].(int)]
	}).(FreightListOutput)
}

type FreightListMapOutput struct{ *pulumi.OutputState }

func (FreightListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FreightList)(nil)).Elem()
}

func (o FreightListMapOutput) ToFreightListMapOutput() FreightListMapOutput {
	return o
}

func (o FreightListMapOutput) ToFreightListMapOutputWithContext(ctx context.Context) FreightListMapOutput {
	return o
}

func (o FreightListMapOutput) MapIndex(k pulumi.StringInput) FreightListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FreightList {
		return vs[0].(map[string]*FreightList)[vs[1].(string)]
	}).(FreightListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FreightListInput)(nil)).Elem(), &FreightList{})
	pulumi.RegisterInputType(reflect.TypeOf((*FreightListArrayInput)(nil)).Elem(), FreightListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FreightListMapInput)(nil)).Elem(), FreightListMap{})
	pulumi.RegisterOutputType(FreightListOutput{})
	pulumi.RegisterOutputType(FreightListArrayOutput{})
	pulumi.RegisterOutputType(FreightListMapOutput{})
}
