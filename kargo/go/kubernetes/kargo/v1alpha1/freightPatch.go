// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Freight represents a collection of versioned artifacts.
type FreightPatch struct {
	pulumi.CustomResourceState

	// Alias is a human-friendly alias for a piece of Freight. This is an optional
	// field. A defaulting webhook will sync this field with the value of the
	// kargo.akuity.io/alias label. When the alias label is not present or differs
	// from the value of this field, the defaulting webhook will set the label to
	// the value of this field. If the alias label is present and this field is
	// empty, the defaulting webhook will set the value of this field to the value
	// of the alias label. If this field is empty and the alias label is not
	// present, the defaulting webhook will choose an available alias and assign
	// it to both the field and label.
	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Charts describes specific versions of specific Helm charts.
	Charts FreightChartsPatchArrayOutput `pulumi:"charts"`
	// Commits describes specific Git repository commits.
	Commits FreightCommitsPatchArrayOutput `pulumi:"commits"`
	// Images describes specific versions of specific container images.
	Images FreightImagesPatchArrayOutput `pulumi:"images"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Origin   FreightOriginPatchPtrOutput     `pulumi:"origin"`
	Status   FreightStatusPatchPtrOutput     `pulumi:"status"`
}

// NewFreightPatch registers a new resource with the given unique name, arguments, and options.
func NewFreightPatch(ctx *pulumi.Context,
	name string, args *FreightPatchArgs, opts ...pulumi.ResourceOption) (*FreightPatch, error) {
	if args == nil {
		args = &FreightPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Freight")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FreightPatch
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:FreightPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFreightPatch gets an existing FreightPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFreightPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FreightPatchState, opts ...pulumi.ResourceOption) (*FreightPatch, error) {
	var resource FreightPatch
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:FreightPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FreightPatch resources.
type freightPatchState struct {
}

type FreightPatchState struct {
}

func (FreightPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*freightPatchState)(nil)).Elem()
}

type freightPatchArgs struct {
	// Alias is a human-friendly alias for a piece of Freight. This is an optional
	// field. A defaulting webhook will sync this field with the value of the
	// kargo.akuity.io/alias label. When the alias label is not present or differs
	// from the value of this field, the defaulting webhook will set the label to
	// the value of this field. If the alias label is present and this field is
	// empty, the defaulting webhook will set the value of this field to the value
	// of the alias label. If this field is empty and the alias label is not
	// present, the defaulting webhook will choose an available alias and assign
	// it to both the field and label.
	Alias *string `pulumi:"alias"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Charts describes specific versions of specific Helm charts.
	Charts []FreightChartsPatch `pulumi:"charts"`
	// Commits describes specific Git repository commits.
	Commits []FreightCommitsPatch `pulumi:"commits"`
	// Images describes specific versions of specific container images.
	Images []FreightImagesPatch `pulumi:"images"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Origin   *FreightOriginPatch     `pulumi:"origin"`
}

// The set of arguments for constructing a FreightPatch resource.
type FreightPatchArgs struct {
	// Alias is a human-friendly alias for a piece of Freight. This is an optional
	// field. A defaulting webhook will sync this field with the value of the
	// kargo.akuity.io/alias label. When the alias label is not present or differs
	// from the value of this field, the defaulting webhook will set the label to
	// the value of this field. If the alias label is present and this field is
	// empty, the defaulting webhook will set the value of this field to the value
	// of the alias label. If this field is empty and the alias label is not
	// present, the defaulting webhook will choose an available alias and assign
	// it to both the field and label.
	Alias pulumi.StringPtrInput
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Charts describes specific versions of specific Helm charts.
	Charts FreightChartsPatchArrayInput
	// Commits describes specific Git repository commits.
	Commits FreightCommitsPatchArrayInput
	// Images describes specific versions of specific container images.
	Images FreightImagesPatchArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Origin   FreightOriginPatchPtrInput
}

func (FreightPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*freightPatchArgs)(nil)).Elem()
}

type FreightPatchInput interface {
	pulumi.Input

	ToFreightPatchOutput() FreightPatchOutput
	ToFreightPatchOutputWithContext(ctx context.Context) FreightPatchOutput
}

func (*FreightPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**FreightPatch)(nil)).Elem()
}

func (i *FreightPatch) ToFreightPatchOutput() FreightPatchOutput {
	return i.ToFreightPatchOutputWithContext(context.Background())
}

func (i *FreightPatch) ToFreightPatchOutputWithContext(ctx context.Context) FreightPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightPatchOutput)
}

// FreightPatchArrayInput is an input type that accepts FreightPatchArray and FreightPatchArrayOutput values.
// You can construct a concrete instance of `FreightPatchArrayInput` via:
//
//	FreightPatchArray{ FreightPatchArgs{...} }
type FreightPatchArrayInput interface {
	pulumi.Input

	ToFreightPatchArrayOutput() FreightPatchArrayOutput
	ToFreightPatchArrayOutputWithContext(context.Context) FreightPatchArrayOutput
}

type FreightPatchArray []FreightPatchInput

func (FreightPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FreightPatch)(nil)).Elem()
}

func (i FreightPatchArray) ToFreightPatchArrayOutput() FreightPatchArrayOutput {
	return i.ToFreightPatchArrayOutputWithContext(context.Background())
}

func (i FreightPatchArray) ToFreightPatchArrayOutputWithContext(ctx context.Context) FreightPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightPatchArrayOutput)
}

// FreightPatchMapInput is an input type that accepts FreightPatchMap and FreightPatchMapOutput values.
// You can construct a concrete instance of `FreightPatchMapInput` via:
//
//	FreightPatchMap{ "key": FreightPatchArgs{...} }
type FreightPatchMapInput interface {
	pulumi.Input

	ToFreightPatchMapOutput() FreightPatchMapOutput
	ToFreightPatchMapOutputWithContext(context.Context) FreightPatchMapOutput
}

type FreightPatchMap map[string]FreightPatchInput

func (FreightPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FreightPatch)(nil)).Elem()
}

func (i FreightPatchMap) ToFreightPatchMapOutput() FreightPatchMapOutput {
	return i.ToFreightPatchMapOutputWithContext(context.Background())
}

func (i FreightPatchMap) ToFreightPatchMapOutputWithContext(ctx context.Context) FreightPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FreightPatchMapOutput)
}

type FreightPatchOutput struct{ *pulumi.OutputState }

func (FreightPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FreightPatch)(nil)).Elem()
}

func (o FreightPatchOutput) ToFreightPatchOutput() FreightPatchOutput {
	return o
}

func (o FreightPatchOutput) ToFreightPatchOutputWithContext(ctx context.Context) FreightPatchOutput {
	return o
}

// Alias is a human-friendly alias for a piece of Freight. This is an optional
// field. A defaulting webhook will sync this field with the value of the
// kargo.akuity.io/alias label. When the alias label is not present or differs
// from the value of this field, the defaulting webhook will set the label to
// the value of this field. If the alias label is present and this field is
// empty, the defaulting webhook will set the value of this field to the value
// of the alias label. If this field is empty and the alias label is not
// present, the defaulting webhook will choose an available alias and assign
// it to both the field and label.
func (o FreightPatchOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FreightPatch) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FreightPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FreightPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Charts describes specific versions of specific Helm charts.
func (o FreightPatchOutput) Charts() FreightChartsPatchArrayOutput {
	return o.ApplyT(func(v *FreightPatch) FreightChartsPatchArrayOutput { return v.Charts }).(FreightChartsPatchArrayOutput)
}

// Commits describes specific Git repository commits.
func (o FreightPatchOutput) Commits() FreightCommitsPatchArrayOutput {
	return o.ApplyT(func(v *FreightPatch) FreightCommitsPatchArrayOutput { return v.Commits }).(FreightCommitsPatchArrayOutput)
}

// Images describes specific versions of specific container images.
func (o FreightPatchOutput) Images() FreightImagesPatchArrayOutput {
	return o.ApplyT(func(v *FreightPatch) FreightImagesPatchArrayOutput { return v.Images }).(FreightImagesPatchArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FreightPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FreightPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FreightPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *FreightPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o FreightPatchOutput) Origin() FreightOriginPatchPtrOutput {
	return o.ApplyT(func(v *FreightPatch) FreightOriginPatchPtrOutput { return v.Origin }).(FreightOriginPatchPtrOutput)
}

func (o FreightPatchOutput) Status() FreightStatusPatchPtrOutput {
	return o.ApplyT(func(v *FreightPatch) FreightStatusPatchPtrOutput { return v.Status }).(FreightStatusPatchPtrOutput)
}

type FreightPatchArrayOutput struct{ *pulumi.OutputState }

func (FreightPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FreightPatch)(nil)).Elem()
}

func (o FreightPatchArrayOutput) ToFreightPatchArrayOutput() FreightPatchArrayOutput {
	return o
}

func (o FreightPatchArrayOutput) ToFreightPatchArrayOutputWithContext(ctx context.Context) FreightPatchArrayOutput {
	return o
}

func (o FreightPatchArrayOutput) Index(i pulumi.IntInput) FreightPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FreightPatch {
		return vs[0].([]*FreightPatch)[vs[1].(int)]
	}).(FreightPatchOutput)
}

type FreightPatchMapOutput struct{ *pulumi.OutputState }

func (FreightPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FreightPatch)(nil)).Elem()
}

func (o FreightPatchMapOutput) ToFreightPatchMapOutput() FreightPatchMapOutput {
	return o
}

func (o FreightPatchMapOutput) ToFreightPatchMapOutputWithContext(ctx context.Context) FreightPatchMapOutput {
	return o
}

func (o FreightPatchMapOutput) MapIndex(k pulumi.StringInput) FreightPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FreightPatch {
		return vs[0].(map[string]*FreightPatch)[vs[1].(string)]
	}).(FreightPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FreightPatchInput)(nil)).Elem(), &FreightPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*FreightPatchArrayInput)(nil)).Elem(), FreightPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FreightPatchMapInput)(nil)).Elem(), FreightPatchMap{})
	pulumi.RegisterOutputType(FreightPatchOutput{})
	pulumi.RegisterOutputType(FreightPatchArrayOutput{})
	pulumi.RegisterOutputType(FreightPatchMapOutput{})
}
