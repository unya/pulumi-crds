// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ProjectConfigList is a list of ProjectConfig
type ProjectConfigList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of projectconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProjectConfigTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewProjectConfigList registers a new resource with the given unique name, arguments, and options.
func NewProjectConfigList(ctx *pulumi.Context,
	name string, args *ProjectConfigListArgs, opts ...pulumi.ResourceOption) (*ProjectConfigList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ProjectConfigList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProjectConfigList
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectConfigList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectConfigList gets an existing ProjectConfigList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectConfigList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectConfigListState, opts ...pulumi.ResourceOption) (*ProjectConfigList, error) {
	var resource ProjectConfigList
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectConfigList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectConfigList resources.
type projectConfigListState struct {
}

type ProjectConfigListState struct {
}

func (ProjectConfigListState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectConfigListState)(nil)).Elem()
}

type projectConfigListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of projectconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ProjectConfigType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ProjectConfigList resource.
type ProjectConfigListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of projectconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProjectConfigTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ProjectConfigListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectConfigListArgs)(nil)).Elem()
}

type ProjectConfigListInput interface {
	pulumi.Input

	ToProjectConfigListOutput() ProjectConfigListOutput
	ToProjectConfigListOutputWithContext(ctx context.Context) ProjectConfigListOutput
}

func (*ProjectConfigList) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConfigList)(nil)).Elem()
}

func (i *ProjectConfigList) ToProjectConfigListOutput() ProjectConfigListOutput {
	return i.ToProjectConfigListOutputWithContext(context.Background())
}

func (i *ProjectConfigList) ToProjectConfigListOutputWithContext(ctx context.Context) ProjectConfigListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConfigListOutput)
}

// ProjectConfigListArrayInput is an input type that accepts ProjectConfigListArray and ProjectConfigListArrayOutput values.
// You can construct a concrete instance of `ProjectConfigListArrayInput` via:
//
//	ProjectConfigListArray{ ProjectConfigListArgs{...} }
type ProjectConfigListArrayInput interface {
	pulumi.Input

	ToProjectConfigListArrayOutput() ProjectConfigListArrayOutput
	ToProjectConfigListArrayOutputWithContext(context.Context) ProjectConfigListArrayOutput
}

type ProjectConfigListArray []ProjectConfigListInput

func (ProjectConfigListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectConfigList)(nil)).Elem()
}

func (i ProjectConfigListArray) ToProjectConfigListArrayOutput() ProjectConfigListArrayOutput {
	return i.ToProjectConfigListArrayOutputWithContext(context.Background())
}

func (i ProjectConfigListArray) ToProjectConfigListArrayOutputWithContext(ctx context.Context) ProjectConfigListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConfigListArrayOutput)
}

// ProjectConfigListMapInput is an input type that accepts ProjectConfigListMap and ProjectConfigListMapOutput values.
// You can construct a concrete instance of `ProjectConfigListMapInput` via:
//
//	ProjectConfigListMap{ "key": ProjectConfigListArgs{...} }
type ProjectConfigListMapInput interface {
	pulumi.Input

	ToProjectConfigListMapOutput() ProjectConfigListMapOutput
	ToProjectConfigListMapOutputWithContext(context.Context) ProjectConfigListMapOutput
}

type ProjectConfigListMap map[string]ProjectConfigListInput

func (ProjectConfigListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectConfigList)(nil)).Elem()
}

func (i ProjectConfigListMap) ToProjectConfigListMapOutput() ProjectConfigListMapOutput {
	return i.ToProjectConfigListMapOutputWithContext(context.Background())
}

func (i ProjectConfigListMap) ToProjectConfigListMapOutputWithContext(ctx context.Context) ProjectConfigListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConfigListMapOutput)
}

type ProjectConfigListOutput struct{ *pulumi.OutputState }

func (ProjectConfigListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConfigList)(nil)).Elem()
}

func (o ProjectConfigListOutput) ToProjectConfigListOutput() ProjectConfigListOutput {
	return o
}

func (o ProjectConfigListOutput) ToProjectConfigListOutputWithContext(ctx context.Context) ProjectConfigListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProjectConfigListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectConfigList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of projectconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ProjectConfigListOutput) Items() ProjectConfigTypeArrayOutput {
	return o.ApplyT(func(v *ProjectConfigList) ProjectConfigTypeArrayOutput { return v.Items }).(ProjectConfigTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProjectConfigListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectConfigList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProjectConfigListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ProjectConfigList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ProjectConfigListArrayOutput struct{ *pulumi.OutputState }

func (ProjectConfigListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectConfigList)(nil)).Elem()
}

func (o ProjectConfigListArrayOutput) ToProjectConfigListArrayOutput() ProjectConfigListArrayOutput {
	return o
}

func (o ProjectConfigListArrayOutput) ToProjectConfigListArrayOutputWithContext(ctx context.Context) ProjectConfigListArrayOutput {
	return o
}

func (o ProjectConfigListArrayOutput) Index(i pulumi.IntInput) ProjectConfigListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectConfigList {
		return vs[0].([]*ProjectConfigList)[vs[1].(int)]
	}).(ProjectConfigListOutput)
}

type ProjectConfigListMapOutput struct{ *pulumi.OutputState }

func (ProjectConfigListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectConfigList)(nil)).Elem()
}

func (o ProjectConfigListMapOutput) ToProjectConfigListMapOutput() ProjectConfigListMapOutput {
	return o
}

func (o ProjectConfigListMapOutput) ToProjectConfigListMapOutputWithContext(ctx context.Context) ProjectConfigListMapOutput {
	return o
}

func (o ProjectConfigListMapOutput) MapIndex(k pulumi.StringInput) ProjectConfigListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectConfigList {
		return vs[0].(map[string]*ProjectConfigList)[vs[1].(string)]
	}).(ProjectConfigListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConfigListInput)(nil)).Elem(), &ProjectConfigList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConfigListArrayInput)(nil)).Elem(), ProjectConfigListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConfigListMapInput)(nil)).Elem(), ProjectConfigListMap{})
	pulumi.RegisterOutputType(ProjectConfigListOutput{})
	pulumi.RegisterOutputType(ProjectConfigListArrayOutput{})
	pulumi.RegisterOutputType(ProjectConfigListMapOutput{})
}
