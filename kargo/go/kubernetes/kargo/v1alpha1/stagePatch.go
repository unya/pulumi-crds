// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Stage is the Kargo API's main type.
type StagePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     StageSpecPatchPtrOutput         `pulumi:"spec"`
	Status   StageStatusPatchPtrOutput       `pulumi:"status"`
}

// NewStagePatch registers a new resource with the given unique name, arguments, and options.
func NewStagePatch(ctx *pulumi.Context,
	name string, args *StagePatchArgs, opts ...pulumi.ResourceOption) (*StagePatch, error) {
	if args == nil {
		args = &StagePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Stage")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StagePatch
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:StagePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStagePatch gets an existing StagePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStagePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StagePatchState, opts ...pulumi.ResourceOption) (*StagePatch, error) {
	var resource StagePatch
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:StagePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StagePatch resources.
type stagePatchState struct {
}

type StagePatchState struct {
}

func (StagePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*stagePatchState)(nil)).Elem()
}

type stagePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *StageSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a StagePatch resource.
type StagePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     StageSpecPatchPtrInput
}

func (StagePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stagePatchArgs)(nil)).Elem()
}

type StagePatchInput interface {
	pulumi.Input

	ToStagePatchOutput() StagePatchOutput
	ToStagePatchOutputWithContext(ctx context.Context) StagePatchOutput
}

func (*StagePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**StagePatch)(nil)).Elem()
}

func (i *StagePatch) ToStagePatchOutput() StagePatchOutput {
	return i.ToStagePatchOutputWithContext(context.Background())
}

func (i *StagePatch) ToStagePatchOutputWithContext(ctx context.Context) StagePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagePatchOutput)
}

// StagePatchArrayInput is an input type that accepts StagePatchArray and StagePatchArrayOutput values.
// You can construct a concrete instance of `StagePatchArrayInput` via:
//
//	StagePatchArray{ StagePatchArgs{...} }
type StagePatchArrayInput interface {
	pulumi.Input

	ToStagePatchArrayOutput() StagePatchArrayOutput
	ToStagePatchArrayOutputWithContext(context.Context) StagePatchArrayOutput
}

type StagePatchArray []StagePatchInput

func (StagePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StagePatch)(nil)).Elem()
}

func (i StagePatchArray) ToStagePatchArrayOutput() StagePatchArrayOutput {
	return i.ToStagePatchArrayOutputWithContext(context.Background())
}

func (i StagePatchArray) ToStagePatchArrayOutputWithContext(ctx context.Context) StagePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagePatchArrayOutput)
}

// StagePatchMapInput is an input type that accepts StagePatchMap and StagePatchMapOutput values.
// You can construct a concrete instance of `StagePatchMapInput` via:
//
//	StagePatchMap{ "key": StagePatchArgs{...} }
type StagePatchMapInput interface {
	pulumi.Input

	ToStagePatchMapOutput() StagePatchMapOutput
	ToStagePatchMapOutputWithContext(context.Context) StagePatchMapOutput
}

type StagePatchMap map[string]StagePatchInput

func (StagePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StagePatch)(nil)).Elem()
}

func (i StagePatchMap) ToStagePatchMapOutput() StagePatchMapOutput {
	return i.ToStagePatchMapOutputWithContext(context.Background())
}

func (i StagePatchMap) ToStagePatchMapOutputWithContext(ctx context.Context) StagePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StagePatchMapOutput)
}

type StagePatchOutput struct{ *pulumi.OutputState }

func (StagePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StagePatch)(nil)).Elem()
}

func (o StagePatchOutput) ToStagePatchOutput() StagePatchOutput {
	return o
}

func (o StagePatchOutput) ToStagePatchOutputWithContext(ctx context.Context) StagePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StagePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StagePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StagePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StagePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StagePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *StagePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o StagePatchOutput) Spec() StageSpecPatchPtrOutput {
	return o.ApplyT(func(v *StagePatch) StageSpecPatchPtrOutput { return v.Spec }).(StageSpecPatchPtrOutput)
}

func (o StagePatchOutput) Status() StageStatusPatchPtrOutput {
	return o.ApplyT(func(v *StagePatch) StageStatusPatchPtrOutput { return v.Status }).(StageStatusPatchPtrOutput)
}

type StagePatchArrayOutput struct{ *pulumi.OutputState }

func (StagePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StagePatch)(nil)).Elem()
}

func (o StagePatchArrayOutput) ToStagePatchArrayOutput() StagePatchArrayOutput {
	return o
}

func (o StagePatchArrayOutput) ToStagePatchArrayOutputWithContext(ctx context.Context) StagePatchArrayOutput {
	return o
}

func (o StagePatchArrayOutput) Index(i pulumi.IntInput) StagePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StagePatch {
		return vs[0].([]*StagePatch)[vs[1].(int)]
	}).(StagePatchOutput)
}

type StagePatchMapOutput struct{ *pulumi.OutputState }

func (StagePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StagePatch)(nil)).Elem()
}

func (o StagePatchMapOutput) ToStagePatchMapOutput() StagePatchMapOutput {
	return o
}

func (o StagePatchMapOutput) ToStagePatchMapOutputWithContext(ctx context.Context) StagePatchMapOutput {
	return o
}

func (o StagePatchMapOutput) MapIndex(k pulumi.StringInput) StagePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StagePatch {
		return vs[0].(map[string]*StagePatch)[vs[1].(string)]
	}).(StagePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StagePatchInput)(nil)).Elem(), &StagePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*StagePatchArrayInput)(nil)).Elem(), StagePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StagePatchMapInput)(nil)).Elem(), StagePatchMap{})
	pulumi.RegisterOutputType(StagePatchOutput{})
	pulumi.RegisterOutputType(StagePatchArrayOutput{})
	pulumi.RegisterOutputType(StagePatchMapOutput{})
}
