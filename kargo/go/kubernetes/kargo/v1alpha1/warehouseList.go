// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// WarehouseList is a list of Warehouse
type WarehouseList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of warehouses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items WarehouseTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewWarehouseList registers a new resource with the given unique name, arguments, and options.
func NewWarehouseList(ctx *pulumi.Context,
	name string, args *WarehouseListArgs, opts ...pulumi.ResourceOption) (*WarehouseList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("WarehouseList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WarehouseList
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:WarehouseList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWarehouseList gets an existing WarehouseList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWarehouseList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WarehouseListState, opts ...pulumi.ResourceOption) (*WarehouseList, error) {
	var resource WarehouseList
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:WarehouseList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WarehouseList resources.
type warehouseListState struct {
}

type WarehouseListState struct {
}

func (WarehouseListState) ElementType() reflect.Type {
	return reflect.TypeOf((*warehouseListState)(nil)).Elem()
}

type warehouseListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of warehouses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []WarehouseType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a WarehouseList resource.
type WarehouseListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of warehouses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items WarehouseTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (WarehouseListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*warehouseListArgs)(nil)).Elem()
}

type WarehouseListInput interface {
	pulumi.Input

	ToWarehouseListOutput() WarehouseListOutput
	ToWarehouseListOutputWithContext(ctx context.Context) WarehouseListOutput
}

func (*WarehouseList) ElementType() reflect.Type {
	return reflect.TypeOf((**WarehouseList)(nil)).Elem()
}

func (i *WarehouseList) ToWarehouseListOutput() WarehouseListOutput {
	return i.ToWarehouseListOutputWithContext(context.Background())
}

func (i *WarehouseList) ToWarehouseListOutputWithContext(ctx context.Context) WarehouseListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseListOutput)
}

// WarehouseListArrayInput is an input type that accepts WarehouseListArray and WarehouseListArrayOutput values.
// You can construct a concrete instance of `WarehouseListArrayInput` via:
//
//	WarehouseListArray{ WarehouseListArgs{...} }
type WarehouseListArrayInput interface {
	pulumi.Input

	ToWarehouseListArrayOutput() WarehouseListArrayOutput
	ToWarehouseListArrayOutputWithContext(context.Context) WarehouseListArrayOutput
}

type WarehouseListArray []WarehouseListInput

func (WarehouseListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WarehouseList)(nil)).Elem()
}

func (i WarehouseListArray) ToWarehouseListArrayOutput() WarehouseListArrayOutput {
	return i.ToWarehouseListArrayOutputWithContext(context.Background())
}

func (i WarehouseListArray) ToWarehouseListArrayOutputWithContext(ctx context.Context) WarehouseListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseListArrayOutput)
}

// WarehouseListMapInput is an input type that accepts WarehouseListMap and WarehouseListMapOutput values.
// You can construct a concrete instance of `WarehouseListMapInput` via:
//
//	WarehouseListMap{ "key": WarehouseListArgs{...} }
type WarehouseListMapInput interface {
	pulumi.Input

	ToWarehouseListMapOutput() WarehouseListMapOutput
	ToWarehouseListMapOutputWithContext(context.Context) WarehouseListMapOutput
}

type WarehouseListMap map[string]WarehouseListInput

func (WarehouseListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WarehouseList)(nil)).Elem()
}

func (i WarehouseListMap) ToWarehouseListMapOutput() WarehouseListMapOutput {
	return i.ToWarehouseListMapOutputWithContext(context.Background())
}

func (i WarehouseListMap) ToWarehouseListMapOutputWithContext(ctx context.Context) WarehouseListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WarehouseListMapOutput)
}

type WarehouseListOutput struct{ *pulumi.OutputState }

func (WarehouseListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WarehouseList)(nil)).Elem()
}

func (o WarehouseListOutput) ToWarehouseListOutput() WarehouseListOutput {
	return o
}

func (o WarehouseListOutput) ToWarehouseListOutputWithContext(ctx context.Context) WarehouseListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WarehouseListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *WarehouseList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of warehouses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o WarehouseListOutput) Items() WarehouseTypeArrayOutput {
	return o.ApplyT(func(v *WarehouseList) WarehouseTypeArrayOutput { return v.Items }).(WarehouseTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WarehouseListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *WarehouseList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WarehouseListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *WarehouseList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type WarehouseListArrayOutput struct{ *pulumi.OutputState }

func (WarehouseListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WarehouseList)(nil)).Elem()
}

func (o WarehouseListArrayOutput) ToWarehouseListArrayOutput() WarehouseListArrayOutput {
	return o
}

func (o WarehouseListArrayOutput) ToWarehouseListArrayOutputWithContext(ctx context.Context) WarehouseListArrayOutput {
	return o
}

func (o WarehouseListArrayOutput) Index(i pulumi.IntInput) WarehouseListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WarehouseList {
		return vs[0].([]*WarehouseList)[vs[1].(int)]
	}).(WarehouseListOutput)
}

type WarehouseListMapOutput struct{ *pulumi.OutputState }

func (WarehouseListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WarehouseList)(nil)).Elem()
}

func (o WarehouseListMapOutput) ToWarehouseListMapOutput() WarehouseListMapOutput {
	return o
}

func (o WarehouseListMapOutput) ToWarehouseListMapOutputWithContext(ctx context.Context) WarehouseListMapOutput {
	return o
}

func (o WarehouseListMapOutput) MapIndex(k pulumi.StringInput) WarehouseListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WarehouseList {
		return vs[0].(map[string]*WarehouseList)[vs[1].(string)]
	}).(WarehouseListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WarehouseListInput)(nil)).Elem(), &WarehouseList{})
	pulumi.RegisterInputType(reflect.TypeOf((*WarehouseListArrayInput)(nil)).Elem(), WarehouseListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WarehouseListMapInput)(nil)).Elem(), WarehouseListMap{})
	pulumi.RegisterOutputType(WarehouseListOutput{})
	pulumi.RegisterOutputType(WarehouseListArrayOutput{})
	pulumi.RegisterOutputType(WarehouseListMapOutput{})
}
