// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ProjectList is a list of Project
type ProjectList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of projects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProjectTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewProjectList registers a new resource with the given unique name, arguments, and options.
func NewProjectList(ctx *pulumi.Context,
	name string, args *ProjectListArgs, opts ...pulumi.ResourceOption) (*ProjectList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ProjectList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProjectList
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectList gets an existing ProjectList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectListState, opts ...pulumi.ResourceOption) (*ProjectList, error) {
	var resource ProjectList
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectList resources.
type projectListState struct {
}

type ProjectListState struct {
}

func (ProjectListState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectListState)(nil)).Elem()
}

type projectListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of projects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ProjectType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ProjectList resource.
type ProjectListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of projects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProjectTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ProjectListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectListArgs)(nil)).Elem()
}

type ProjectListInput interface {
	pulumi.Input

	ToProjectListOutput() ProjectListOutput
	ToProjectListOutputWithContext(ctx context.Context) ProjectListOutput
}

func (*ProjectList) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectList)(nil)).Elem()
}

func (i *ProjectList) ToProjectListOutput() ProjectListOutput {
	return i.ToProjectListOutputWithContext(context.Background())
}

func (i *ProjectList) ToProjectListOutputWithContext(ctx context.Context) ProjectListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectListOutput)
}

// ProjectListArrayInput is an input type that accepts ProjectListArray and ProjectListArrayOutput values.
// You can construct a concrete instance of `ProjectListArrayInput` via:
//
//	ProjectListArray{ ProjectListArgs{...} }
type ProjectListArrayInput interface {
	pulumi.Input

	ToProjectListArrayOutput() ProjectListArrayOutput
	ToProjectListArrayOutputWithContext(context.Context) ProjectListArrayOutput
}

type ProjectListArray []ProjectListInput

func (ProjectListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectList)(nil)).Elem()
}

func (i ProjectListArray) ToProjectListArrayOutput() ProjectListArrayOutput {
	return i.ToProjectListArrayOutputWithContext(context.Background())
}

func (i ProjectListArray) ToProjectListArrayOutputWithContext(ctx context.Context) ProjectListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectListArrayOutput)
}

// ProjectListMapInput is an input type that accepts ProjectListMap and ProjectListMapOutput values.
// You can construct a concrete instance of `ProjectListMapInput` via:
//
//	ProjectListMap{ "key": ProjectListArgs{...} }
type ProjectListMapInput interface {
	pulumi.Input

	ToProjectListMapOutput() ProjectListMapOutput
	ToProjectListMapOutputWithContext(context.Context) ProjectListMapOutput
}

type ProjectListMap map[string]ProjectListInput

func (ProjectListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectList)(nil)).Elem()
}

func (i ProjectListMap) ToProjectListMapOutput() ProjectListMapOutput {
	return i.ToProjectListMapOutputWithContext(context.Background())
}

func (i ProjectListMap) ToProjectListMapOutputWithContext(ctx context.Context) ProjectListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectListMapOutput)
}

type ProjectListOutput struct{ *pulumi.OutputState }

func (ProjectListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectList)(nil)).Elem()
}

func (o ProjectListOutput) ToProjectListOutput() ProjectListOutput {
	return o
}

func (o ProjectListOutput) ToProjectListOutputWithContext(ctx context.Context) ProjectListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProjectListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of projects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ProjectListOutput) Items() ProjectTypeArrayOutput {
	return o.ApplyT(func(v *ProjectList) ProjectTypeArrayOutput { return v.Items }).(ProjectTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProjectListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProjectListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ProjectList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ProjectListArrayOutput struct{ *pulumi.OutputState }

func (ProjectListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectList)(nil)).Elem()
}

func (o ProjectListArrayOutput) ToProjectListArrayOutput() ProjectListArrayOutput {
	return o
}

func (o ProjectListArrayOutput) ToProjectListArrayOutputWithContext(ctx context.Context) ProjectListArrayOutput {
	return o
}

func (o ProjectListArrayOutput) Index(i pulumi.IntInput) ProjectListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectList {
		return vs[0].([]*ProjectList)[vs[1].(int)]
	}).(ProjectListOutput)
}

type ProjectListMapOutput struct{ *pulumi.OutputState }

func (ProjectListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectList)(nil)).Elem()
}

func (o ProjectListMapOutput) ToProjectListMapOutput() ProjectListMapOutput {
	return o
}

func (o ProjectListMapOutput) ToProjectListMapOutputWithContext(ctx context.Context) ProjectListMapOutput {
	return o
}

func (o ProjectListMapOutput) MapIndex(k pulumi.StringInput) ProjectListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectList {
		return vs[0].(map[string]*ProjectList)[vs[1].(string)]
	}).(ProjectListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectListInput)(nil)).Elem(), &ProjectList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectListArrayInput)(nil)).Elem(), ProjectListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectListMapInput)(nil)).Elem(), ProjectListMap{})
	pulumi.RegisterOutputType(ProjectListOutput{})
	pulumi.RegisterOutputType(ProjectListArrayOutput{})
	pulumi.RegisterOutputType(ProjectListMapOutput{})
}
