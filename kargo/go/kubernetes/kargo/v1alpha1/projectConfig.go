// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ProjectConfig is a resource type that describes the configuration of a
// Project.
type ProjectConfig struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput      `pulumi:"metadata"`
	Spec     ProjectConfigSpecOutput      `pulumi:"spec"`
	Status   ProjectConfigStatusPtrOutput `pulumi:"status"`
}

// NewProjectConfig registers a new resource with the given unique name, arguments, and options.
func NewProjectConfig(ctx *pulumi.Context,
	name string, args *ProjectConfigArgs, opts ...pulumi.ResourceOption) (*ProjectConfig, error) {
	if args == nil {
		args = &ProjectConfigArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ProjectConfig")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProjectConfig
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectConfig gets an existing ProjectConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectConfigState, opts ...pulumi.ResourceOption) (*ProjectConfig, error) {
	var resource ProjectConfig
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:ProjectConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectConfig resources.
type projectConfigState struct {
}

type ProjectConfigState struct {
}

func (ProjectConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectConfigState)(nil)).Elem()
}

type projectConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ProjectConfigSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ProjectConfig resource.
type ProjectConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ProjectConfigSpecPtrInput
}

func (ProjectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectConfigArgs)(nil)).Elem()
}

type ProjectConfigInput interface {
	pulumi.Input

	ToProjectConfigOutput() ProjectConfigOutput
	ToProjectConfigOutputWithContext(ctx context.Context) ProjectConfigOutput
}

func (*ProjectConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConfig)(nil)).Elem()
}

func (i *ProjectConfig) ToProjectConfigOutput() ProjectConfigOutput {
	return i.ToProjectConfigOutputWithContext(context.Background())
}

func (i *ProjectConfig) ToProjectConfigOutputWithContext(ctx context.Context) ProjectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConfigOutput)
}

// ProjectConfigArrayInput is an input type that accepts ProjectConfigArray and ProjectConfigArrayOutput values.
// You can construct a concrete instance of `ProjectConfigArrayInput` via:
//
//	ProjectConfigArray{ ProjectConfigArgs{...} }
type ProjectConfigArrayInput interface {
	pulumi.Input

	ToProjectConfigArrayOutput() ProjectConfigArrayOutput
	ToProjectConfigArrayOutputWithContext(context.Context) ProjectConfigArrayOutput
}

type ProjectConfigArray []ProjectConfigInput

func (ProjectConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectConfig)(nil)).Elem()
}

func (i ProjectConfigArray) ToProjectConfigArrayOutput() ProjectConfigArrayOutput {
	return i.ToProjectConfigArrayOutputWithContext(context.Background())
}

func (i ProjectConfigArray) ToProjectConfigArrayOutputWithContext(ctx context.Context) ProjectConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConfigArrayOutput)
}

// ProjectConfigMapInput is an input type that accepts ProjectConfigMap and ProjectConfigMapOutput values.
// You can construct a concrete instance of `ProjectConfigMapInput` via:
//
//	ProjectConfigMap{ "key": ProjectConfigArgs{...} }
type ProjectConfigMapInput interface {
	pulumi.Input

	ToProjectConfigMapOutput() ProjectConfigMapOutput
	ToProjectConfigMapOutputWithContext(context.Context) ProjectConfigMapOutput
}

type ProjectConfigMap map[string]ProjectConfigInput

func (ProjectConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectConfig)(nil)).Elem()
}

func (i ProjectConfigMap) ToProjectConfigMapOutput() ProjectConfigMapOutput {
	return i.ToProjectConfigMapOutputWithContext(context.Background())
}

func (i ProjectConfigMap) ToProjectConfigMapOutputWithContext(ctx context.Context) ProjectConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectConfigMapOutput)
}

type ProjectConfigOutput struct{ *pulumi.OutputState }

func (ProjectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectConfig)(nil)).Elem()
}

func (o ProjectConfigOutput) ToProjectConfigOutput() ProjectConfigOutput {
	return o
}

func (o ProjectConfigOutput) ToProjectConfigOutputWithContext(ctx context.Context) ProjectConfigOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProjectConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectConfig) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProjectConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectConfig) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ProjectConfigOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ProjectConfig) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ProjectConfigOutput) Spec() ProjectConfigSpecOutput {
	return o.ApplyT(func(v *ProjectConfig) ProjectConfigSpecOutput { return v.Spec }).(ProjectConfigSpecOutput)
}

func (o ProjectConfigOutput) Status() ProjectConfigStatusPtrOutput {
	return o.ApplyT(func(v *ProjectConfig) ProjectConfigStatusPtrOutput { return v.Status }).(ProjectConfigStatusPtrOutput)
}

type ProjectConfigArrayOutput struct{ *pulumi.OutputState }

func (ProjectConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectConfig)(nil)).Elem()
}

func (o ProjectConfigArrayOutput) ToProjectConfigArrayOutput() ProjectConfigArrayOutput {
	return o
}

func (o ProjectConfigArrayOutput) ToProjectConfigArrayOutputWithContext(ctx context.Context) ProjectConfigArrayOutput {
	return o
}

func (o ProjectConfigArrayOutput) Index(i pulumi.IntInput) ProjectConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectConfig {
		return vs[0].([]*ProjectConfig)[vs[1].(int)]
	}).(ProjectConfigOutput)
}

type ProjectConfigMapOutput struct{ *pulumi.OutputState }

func (ProjectConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectConfig)(nil)).Elem()
}

func (o ProjectConfigMapOutput) ToProjectConfigMapOutput() ProjectConfigMapOutput {
	return o
}

func (o ProjectConfigMapOutput) ToProjectConfigMapOutputWithContext(ctx context.Context) ProjectConfigMapOutput {
	return o
}

func (o ProjectConfigMapOutput) MapIndex(k pulumi.StringInput) ProjectConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectConfig {
		return vs[0].(map[string]*ProjectConfig)[vs[1].(string)]
	}).(ProjectConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConfigInput)(nil)).Elem(), &ProjectConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConfigArrayInput)(nil)).Elem(), ProjectConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectConfigMapInput)(nil)).Elem(), ProjectConfigMap{})
	pulumi.RegisterOutputType(ProjectConfigOutput{})
	pulumi.RegisterOutputType(ProjectConfigArrayOutput{})
	pulumi.RegisterOutputType(ProjectConfigMapOutput{})
}
