// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// StageList is a list of Stage
type StageList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of stages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items StageTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewStageList registers a new resource with the given unique name, arguments, and options.
func NewStageList(ctx *pulumi.Context,
	name string, args *StageListArgs, opts ...pulumi.ResourceOption) (*StageList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kargo.akuity.io/v1alpha1")
	args.Kind = pulumi.StringPtr("StageList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StageList
	err := ctx.RegisterResource("kubernetes:kargo.akuity.io/v1alpha1:StageList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStageList gets an existing StageList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStageList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StageListState, opts ...pulumi.ResourceOption) (*StageList, error) {
	var resource StageList
	err := ctx.ReadResource("kubernetes:kargo.akuity.io/v1alpha1:StageList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StageList resources.
type stageListState struct {
}

type StageListState struct {
}

func (StageListState) ElementType() reflect.Type {
	return reflect.TypeOf((*stageListState)(nil)).Elem()
}

type stageListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of stages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []StageType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a StageList resource.
type StageListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of stages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items StageTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (StageListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stageListArgs)(nil)).Elem()
}

type StageListInput interface {
	pulumi.Input

	ToStageListOutput() StageListOutput
	ToStageListOutputWithContext(ctx context.Context) StageListOutput
}

func (*StageList) ElementType() reflect.Type {
	return reflect.TypeOf((**StageList)(nil)).Elem()
}

func (i *StageList) ToStageListOutput() StageListOutput {
	return i.ToStageListOutputWithContext(context.Background())
}

func (i *StageList) ToStageListOutputWithContext(ctx context.Context) StageListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageListOutput)
}

// StageListArrayInput is an input type that accepts StageListArray and StageListArrayOutput values.
// You can construct a concrete instance of `StageListArrayInput` via:
//
//	StageListArray{ StageListArgs{...} }
type StageListArrayInput interface {
	pulumi.Input

	ToStageListArrayOutput() StageListArrayOutput
	ToStageListArrayOutputWithContext(context.Context) StageListArrayOutput
}

type StageListArray []StageListInput

func (StageListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageList)(nil)).Elem()
}

func (i StageListArray) ToStageListArrayOutput() StageListArrayOutput {
	return i.ToStageListArrayOutputWithContext(context.Background())
}

func (i StageListArray) ToStageListArrayOutputWithContext(ctx context.Context) StageListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageListArrayOutput)
}

// StageListMapInput is an input type that accepts StageListMap and StageListMapOutput values.
// You can construct a concrete instance of `StageListMapInput` via:
//
//	StageListMap{ "key": StageListArgs{...} }
type StageListMapInput interface {
	pulumi.Input

	ToStageListMapOutput() StageListMapOutput
	ToStageListMapOutputWithContext(context.Context) StageListMapOutput
}

type StageListMap map[string]StageListInput

func (StageListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageList)(nil)).Elem()
}

func (i StageListMap) ToStageListMapOutput() StageListMapOutput {
	return i.ToStageListMapOutputWithContext(context.Background())
}

func (i StageListMap) ToStageListMapOutputWithContext(ctx context.Context) StageListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageListMapOutput)
}

type StageListOutput struct{ *pulumi.OutputState }

func (StageListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StageList)(nil)).Elem()
}

func (o StageListOutput) ToStageListOutput() StageListOutput {
	return o
}

func (o StageListOutput) ToStageListOutputWithContext(ctx context.Context) StageListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StageListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *StageList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of stages. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o StageListOutput) Items() StageTypeArrayOutput {
	return o.ApplyT(func(v *StageList) StageTypeArrayOutput { return v.Items }).(StageTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StageListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *StageList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StageListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *StageList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type StageListArrayOutput struct{ *pulumi.OutputState }

func (StageListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StageList)(nil)).Elem()
}

func (o StageListArrayOutput) ToStageListArrayOutput() StageListArrayOutput {
	return o
}

func (o StageListArrayOutput) ToStageListArrayOutputWithContext(ctx context.Context) StageListArrayOutput {
	return o
}

func (o StageListArrayOutput) Index(i pulumi.IntInput) StageListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StageList {
		return vs[0].([]*StageList)[vs[1].(int)]
	}).(StageListOutput)
}

type StageListMapOutput struct{ *pulumi.OutputState }

func (StageListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StageList)(nil)).Elem()
}

func (o StageListMapOutput) ToStageListMapOutput() StageListMapOutput {
	return o
}

func (o StageListMapOutput) ToStageListMapOutputWithContext(ctx context.Context) StageListMapOutput {
	return o
}

func (o StageListMapOutput) MapIndex(k pulumi.StringInput) StageListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StageList {
		return vs[0].(map[string]*StageList)[vs[1].(string)]
	}).(StageListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StageListInput)(nil)).Elem(), &StageList{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageListArrayInput)(nil)).Elem(), StageListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageListMapInput)(nil)).Elem(), StageListMap{})
	pulumi.RegisterOutputType(StageListOutput{})
	pulumi.RegisterOutputType(StageListArrayOutput{})
	pulumi.RegisterOutputType(StageListMapOutput{})
}
