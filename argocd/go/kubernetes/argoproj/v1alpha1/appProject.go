// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AppProject provides a logical grouping of applications, providing controls for:
// * where the apps may deploy to (cluster whitelist)
// * what may be deployed (repository whitelist, resource whitelist/blacklist)
// * who can access these applications (roles, OIDC group claims bindings)
// * and what they can do (RBAC policies)
// * automation access to these roles (JWT tokens)
type AppProject struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput   `pulumi:"metadata"`
	Spec     AppProjectSpecOutput      `pulumi:"spec"`
	Status   AppProjectStatusPtrOutput `pulumi:"status"`
}

// NewAppProject registers a new resource with the given unique name, arguments, and options.
func NewAppProject(ctx *pulumi.Context,
	name string, args *AppProjectArgs, opts ...pulumi.ResourceOption) (*AppProject, error) {
	if args == nil {
		args = &AppProjectArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AppProject")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AppProject
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:AppProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppProject gets an existing AppProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppProjectState, opts ...pulumi.ResourceOption) (*AppProject, error) {
	var resource AppProject
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:AppProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppProject resources.
type appProjectState struct {
}

type AppProjectState struct {
}

func (AppProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectState)(nil)).Elem()
}

type appProjectArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *AppProjectSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a AppProject resource.
type AppProjectArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     AppProjectSpecPtrInput
}

func (AppProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectArgs)(nil)).Elem()
}

type AppProjectInput interface {
	pulumi.Input

	ToAppProjectOutput() AppProjectOutput
	ToAppProjectOutputWithContext(ctx context.Context) AppProjectOutput
}

func (*AppProject) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProject)(nil)).Elem()
}

func (i *AppProject) ToAppProjectOutput() AppProjectOutput {
	return i.ToAppProjectOutputWithContext(context.Background())
}

func (i *AppProject) ToAppProjectOutputWithContext(ctx context.Context) AppProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectOutput)
}

// AppProjectArrayInput is an input type that accepts AppProjectArray and AppProjectArrayOutput values.
// You can construct a concrete instance of `AppProjectArrayInput` via:
//
//	AppProjectArray{ AppProjectArgs{...} }
type AppProjectArrayInput interface {
	pulumi.Input

	ToAppProjectArrayOutput() AppProjectArrayOutput
	ToAppProjectArrayOutputWithContext(context.Context) AppProjectArrayOutput
}

type AppProjectArray []AppProjectInput

func (AppProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProject)(nil)).Elem()
}

func (i AppProjectArray) ToAppProjectArrayOutput() AppProjectArrayOutput {
	return i.ToAppProjectArrayOutputWithContext(context.Background())
}

func (i AppProjectArray) ToAppProjectArrayOutputWithContext(ctx context.Context) AppProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectArrayOutput)
}

// AppProjectMapInput is an input type that accepts AppProjectMap and AppProjectMapOutput values.
// You can construct a concrete instance of `AppProjectMapInput` via:
//
//	AppProjectMap{ "key": AppProjectArgs{...} }
type AppProjectMapInput interface {
	pulumi.Input

	ToAppProjectMapOutput() AppProjectMapOutput
	ToAppProjectMapOutputWithContext(context.Context) AppProjectMapOutput
}

type AppProjectMap map[string]AppProjectInput

func (AppProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProject)(nil)).Elem()
}

func (i AppProjectMap) ToAppProjectMapOutput() AppProjectMapOutput {
	return i.ToAppProjectMapOutputWithContext(context.Background())
}

func (i AppProjectMap) ToAppProjectMapOutputWithContext(ctx context.Context) AppProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectMapOutput)
}

type AppProjectOutput struct{ *pulumi.OutputState }

func (AppProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProject)(nil)).Elem()
}

func (o AppProjectOutput) ToAppProjectOutput() AppProjectOutput {
	return o
}

func (o AppProjectOutput) ToAppProjectOutputWithContext(ctx context.Context) AppProjectOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AppProjectOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AppProject) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AppProjectOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *AppProject) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AppProjectOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *AppProject) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o AppProjectOutput) Spec() AppProjectSpecOutput {
	return o.ApplyT(func(v *AppProject) AppProjectSpecOutput { return v.Spec }).(AppProjectSpecOutput)
}

func (o AppProjectOutput) Status() AppProjectStatusPtrOutput {
	return o.ApplyT(func(v *AppProject) AppProjectStatusPtrOutput { return v.Status }).(AppProjectStatusPtrOutput)
}

type AppProjectArrayOutput struct{ *pulumi.OutputState }

func (AppProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProject)(nil)).Elem()
}

func (o AppProjectArrayOutput) ToAppProjectArrayOutput() AppProjectArrayOutput {
	return o
}

func (o AppProjectArrayOutput) ToAppProjectArrayOutputWithContext(ctx context.Context) AppProjectArrayOutput {
	return o
}

func (o AppProjectArrayOutput) Index(i pulumi.IntInput) AppProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppProject {
		return vs[0].([]*AppProject)[vs[1].(int)]
	}).(AppProjectOutput)
}

type AppProjectMapOutput struct{ *pulumi.OutputState }

func (AppProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProject)(nil)).Elem()
}

func (o AppProjectMapOutput) ToAppProjectMapOutput() AppProjectMapOutput {
	return o
}

func (o AppProjectMapOutput) ToAppProjectMapOutputWithContext(ctx context.Context) AppProjectMapOutput {
	return o
}

func (o AppProjectMapOutput) MapIndex(k pulumi.StringInput) AppProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppProject {
		return vs[0].(map[string]*AppProject)[vs[1].(string)]
	}).(AppProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectInput)(nil)).Elem(), &AppProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectArrayInput)(nil)).Elem(), AppProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectMapInput)(nil)).Elem(), AppProjectMap{})
	pulumi.RegisterOutputType(AppProjectOutput{})
	pulumi.RegisterOutputType(AppProjectArrayOutput{})
	pulumi.RegisterOutputType(AppProjectMapOutput{})
}
