// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AppProjectList is a list of AppProject
type AppProjectList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of appprojects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items AppProjectTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewAppProjectList registers a new resource with the given unique name, arguments, and options.
func NewAppProjectList(ctx *pulumi.Context,
	name string, args *AppProjectListArgs, opts ...pulumi.ResourceOption) (*AppProjectList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AppProjectList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AppProjectList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:AppProjectList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppProjectList gets an existing AppProjectList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppProjectList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppProjectListState, opts ...pulumi.ResourceOption) (*AppProjectList, error) {
	var resource AppProjectList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:AppProjectList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppProjectList resources.
type appProjectListState struct {
}

type AppProjectListState struct {
}

func (AppProjectListState) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectListState)(nil)).Elem()
}

type appProjectListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of appprojects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []AppProjectType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a AppProjectList resource.
type AppProjectListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of appprojects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items AppProjectTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (AppProjectListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectListArgs)(nil)).Elem()
}

type AppProjectListInput interface {
	pulumi.Input

	ToAppProjectListOutput() AppProjectListOutput
	ToAppProjectListOutputWithContext(ctx context.Context) AppProjectListOutput
}

func (*AppProjectList) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectList)(nil)).Elem()
}

func (i *AppProjectList) ToAppProjectListOutput() AppProjectListOutput {
	return i.ToAppProjectListOutputWithContext(context.Background())
}

func (i *AppProjectList) ToAppProjectListOutputWithContext(ctx context.Context) AppProjectListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectListOutput)
}

// AppProjectListArrayInput is an input type that accepts AppProjectListArray and AppProjectListArrayOutput values.
// You can construct a concrete instance of `AppProjectListArrayInput` via:
//
//	AppProjectListArray{ AppProjectListArgs{...} }
type AppProjectListArrayInput interface {
	pulumi.Input

	ToAppProjectListArrayOutput() AppProjectListArrayOutput
	ToAppProjectListArrayOutputWithContext(context.Context) AppProjectListArrayOutput
}

type AppProjectListArray []AppProjectListInput

func (AppProjectListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProjectList)(nil)).Elem()
}

func (i AppProjectListArray) ToAppProjectListArrayOutput() AppProjectListArrayOutput {
	return i.ToAppProjectListArrayOutputWithContext(context.Background())
}

func (i AppProjectListArray) ToAppProjectListArrayOutputWithContext(ctx context.Context) AppProjectListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectListArrayOutput)
}

// AppProjectListMapInput is an input type that accepts AppProjectListMap and AppProjectListMapOutput values.
// You can construct a concrete instance of `AppProjectListMapInput` via:
//
//	AppProjectListMap{ "key": AppProjectListArgs{...} }
type AppProjectListMapInput interface {
	pulumi.Input

	ToAppProjectListMapOutput() AppProjectListMapOutput
	ToAppProjectListMapOutputWithContext(context.Context) AppProjectListMapOutput
}

type AppProjectListMap map[string]AppProjectListInput

func (AppProjectListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProjectList)(nil)).Elem()
}

func (i AppProjectListMap) ToAppProjectListMapOutput() AppProjectListMapOutput {
	return i.ToAppProjectListMapOutputWithContext(context.Background())
}

func (i AppProjectListMap) ToAppProjectListMapOutputWithContext(ctx context.Context) AppProjectListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectListMapOutput)
}

type AppProjectListOutput struct{ *pulumi.OutputState }

func (AppProjectListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectList)(nil)).Elem()
}

func (o AppProjectListOutput) ToAppProjectListOutput() AppProjectListOutput {
	return o
}

func (o AppProjectListOutput) ToAppProjectListOutputWithContext(ctx context.Context) AppProjectListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AppProjectListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AppProjectList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of appprojects. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o AppProjectListOutput) Items() AppProjectTypeArrayOutput {
	return o.ApplyT(func(v *AppProjectList) AppProjectTypeArrayOutput { return v.Items }).(AppProjectTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AppProjectListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *AppProjectList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AppProjectListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *AppProjectList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type AppProjectListArrayOutput struct{ *pulumi.OutputState }

func (AppProjectListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProjectList)(nil)).Elem()
}

func (o AppProjectListArrayOutput) ToAppProjectListArrayOutput() AppProjectListArrayOutput {
	return o
}

func (o AppProjectListArrayOutput) ToAppProjectListArrayOutputWithContext(ctx context.Context) AppProjectListArrayOutput {
	return o
}

func (o AppProjectListArrayOutput) Index(i pulumi.IntInput) AppProjectListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppProjectList {
		return vs[0].([]*AppProjectList)[vs[1].(int)]
	}).(AppProjectListOutput)
}

type AppProjectListMapOutput struct{ *pulumi.OutputState }

func (AppProjectListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProjectList)(nil)).Elem()
}

func (o AppProjectListMapOutput) ToAppProjectListMapOutput() AppProjectListMapOutput {
	return o
}

func (o AppProjectListMapOutput) ToAppProjectListMapOutputWithContext(ctx context.Context) AppProjectListMapOutput {
	return o
}

func (o AppProjectListMapOutput) MapIndex(k pulumi.StringInput) AppProjectListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppProjectList {
		return vs[0].(map[string]*AppProjectList)[vs[1].(string)]
	}).(AppProjectListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectListInput)(nil)).Elem(), &AppProjectList{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectListArrayInput)(nil)).Elem(), AppProjectListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectListMapInput)(nil)).Elem(), AppProjectListMap{})
	pulumi.RegisterOutputType(AppProjectListOutput{})
	pulumi.RegisterOutputType(AppProjectListArrayOutput{})
	pulumi.RegisterOutputType(AppProjectListMapOutput{})
}
