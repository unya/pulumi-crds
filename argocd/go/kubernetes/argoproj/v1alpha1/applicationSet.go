// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ApplicationSet struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     ApplicationSetSpecOutput      `pulumi:"spec"`
	Status   ApplicationSetStatusPtrOutput `pulumi:"status"`
}

// NewApplicationSet registers a new resource with the given unique name, arguments, and options.
func NewApplicationSet(ctx *pulumi.Context,
	name string, args *ApplicationSetArgs, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	if args == nil {
		args = &ApplicationSetArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ApplicationSet")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApplicationSet
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:ApplicationSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSet gets an existing ApplicationSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSetState, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	var resource ApplicationSet
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:ApplicationSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSet resources.
type applicationSetState struct {
}

type ApplicationSetState struct {
}

func (ApplicationSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetState)(nil)).Elem()
}

type applicationSetArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *ApplicationSetSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ApplicationSet resource.
type ApplicationSetArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ApplicationSetSpecPtrInput
}

func (ApplicationSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetArgs)(nil)).Elem()
}

type ApplicationSetInput interface {
	pulumi.Input

	ToApplicationSetOutput() ApplicationSetOutput
	ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput
}

func (*ApplicationSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSet)(nil)).Elem()
}

func (i *ApplicationSet) ToApplicationSetOutput() ApplicationSetOutput {
	return i.ToApplicationSetOutputWithContext(context.Background())
}

func (i *ApplicationSet) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetOutput)
}

// ApplicationSetArrayInput is an input type that accepts ApplicationSetArray and ApplicationSetArrayOutput values.
// You can construct a concrete instance of `ApplicationSetArrayInput` via:
//
//	ApplicationSetArray{ ApplicationSetArgs{...} }
type ApplicationSetArrayInput interface {
	pulumi.Input

	ToApplicationSetArrayOutput() ApplicationSetArrayOutput
	ToApplicationSetArrayOutputWithContext(context.Context) ApplicationSetArrayOutput
}

type ApplicationSetArray []ApplicationSetInput

func (ApplicationSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSet)(nil)).Elem()
}

func (i ApplicationSetArray) ToApplicationSetArrayOutput() ApplicationSetArrayOutput {
	return i.ToApplicationSetArrayOutputWithContext(context.Background())
}

func (i ApplicationSetArray) ToApplicationSetArrayOutputWithContext(ctx context.Context) ApplicationSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetArrayOutput)
}

// ApplicationSetMapInput is an input type that accepts ApplicationSetMap and ApplicationSetMapOutput values.
// You can construct a concrete instance of `ApplicationSetMapInput` via:
//
//	ApplicationSetMap{ "key": ApplicationSetArgs{...} }
type ApplicationSetMapInput interface {
	pulumi.Input

	ToApplicationSetMapOutput() ApplicationSetMapOutput
	ToApplicationSetMapOutputWithContext(context.Context) ApplicationSetMapOutput
}

type ApplicationSetMap map[string]ApplicationSetInput

func (ApplicationSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSet)(nil)).Elem()
}

func (i ApplicationSetMap) ToApplicationSetMapOutput() ApplicationSetMapOutput {
	return i.ToApplicationSetMapOutputWithContext(context.Background())
}

func (i ApplicationSetMap) ToApplicationSetMapOutputWithContext(ctx context.Context) ApplicationSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetMapOutput)
}

type ApplicationSetOutput struct{ *pulumi.OutputState }

func (ApplicationSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetOutput) ToApplicationSetOutput() ApplicationSetOutput {
	return o
}

func (o ApplicationSetOutput) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ApplicationSetOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSet) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSetOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSet) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ApplicationSetOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ApplicationSet) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ApplicationSetOutput) Spec() ApplicationSetSpecOutput {
	return o.ApplyT(func(v *ApplicationSet) ApplicationSetSpecOutput { return v.Spec }).(ApplicationSetSpecOutput)
}

func (o ApplicationSetOutput) Status() ApplicationSetStatusPtrOutput {
	return o.ApplyT(func(v *ApplicationSet) ApplicationSetStatusPtrOutput { return v.Status }).(ApplicationSetStatusPtrOutput)
}

type ApplicationSetArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetArrayOutput) ToApplicationSetArrayOutput() ApplicationSetArrayOutput {
	return o
}

func (o ApplicationSetArrayOutput) ToApplicationSetArrayOutputWithContext(ctx context.Context) ApplicationSetArrayOutput {
	return o
}

func (o ApplicationSetArrayOutput) Index(i pulumi.IntInput) ApplicationSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSet {
		return vs[0].([]*ApplicationSet)[vs[1].(int)]
	}).(ApplicationSetOutput)
}

type ApplicationSetMapOutput struct{ *pulumi.OutputState }

func (ApplicationSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetMapOutput) ToApplicationSetMapOutput() ApplicationSetMapOutput {
	return o
}

func (o ApplicationSetMapOutput) ToApplicationSetMapOutputWithContext(ctx context.Context) ApplicationSetMapOutput {
	return o
}

func (o ApplicationSetMapOutput) MapIndex(k pulumi.StringInput) ApplicationSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSet {
		return vs[0].(map[string]*ApplicationSet)[vs[1].(string)]
	}).(ApplicationSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetInput)(nil)).Elem(), &ApplicationSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetArrayInput)(nil)).Elem(), ApplicationSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetMapInput)(nil)).Elem(), ApplicationSetMap{})
	pulumi.RegisterOutputType(ApplicationSetOutput{})
	pulumi.RegisterOutputType(ApplicationSetArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSetMapOutput{})
}
