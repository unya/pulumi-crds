// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// AppProject provides a logical grouping of applications, providing controls for:
// * where the apps may deploy to (cluster whitelist)
// * what may be deployed (repository whitelist, resource whitelist/blacklist)
// * who can access these applications (roles, OIDC group claims bindings)
// * and what they can do (RBAC policies)
// * automation access to these roles (JWT tokens)
type AppProjectPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     AppProjectSpecPatchPtrOutput    `pulumi:"spec"`
	Status   AppProjectStatusPatchPtrOutput  `pulumi:"status"`
}

// NewAppProjectPatch registers a new resource with the given unique name, arguments, and options.
func NewAppProjectPatch(ctx *pulumi.Context,
	name string, args *AppProjectPatchArgs, opts ...pulumi.ResourceOption) (*AppProjectPatch, error) {
	if args == nil {
		args = &AppProjectPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("AppProject")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AppProjectPatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:AppProjectPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppProjectPatch gets an existing AppProjectPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppProjectPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppProjectPatchState, opts ...pulumi.ResourceOption) (*AppProjectPatch, error) {
	var resource AppProjectPatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:AppProjectPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppProjectPatch resources.
type appProjectPatchState struct {
}

type AppProjectPatchState struct {
}

func (AppProjectPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectPatchState)(nil)).Elem()
}

type appProjectPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *AppProjectSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a AppProjectPatch resource.
type AppProjectPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     AppProjectSpecPatchPtrInput
}

func (AppProjectPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appProjectPatchArgs)(nil)).Elem()
}

type AppProjectPatchInput interface {
	pulumi.Input

	ToAppProjectPatchOutput() AppProjectPatchOutput
	ToAppProjectPatchOutputWithContext(ctx context.Context) AppProjectPatchOutput
}

func (*AppProjectPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectPatch)(nil)).Elem()
}

func (i *AppProjectPatch) ToAppProjectPatchOutput() AppProjectPatchOutput {
	return i.ToAppProjectPatchOutputWithContext(context.Background())
}

func (i *AppProjectPatch) ToAppProjectPatchOutputWithContext(ctx context.Context) AppProjectPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectPatchOutput)
}

// AppProjectPatchArrayInput is an input type that accepts AppProjectPatchArray and AppProjectPatchArrayOutput values.
// You can construct a concrete instance of `AppProjectPatchArrayInput` via:
//
//	AppProjectPatchArray{ AppProjectPatchArgs{...} }
type AppProjectPatchArrayInput interface {
	pulumi.Input

	ToAppProjectPatchArrayOutput() AppProjectPatchArrayOutput
	ToAppProjectPatchArrayOutputWithContext(context.Context) AppProjectPatchArrayOutput
}

type AppProjectPatchArray []AppProjectPatchInput

func (AppProjectPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProjectPatch)(nil)).Elem()
}

func (i AppProjectPatchArray) ToAppProjectPatchArrayOutput() AppProjectPatchArrayOutput {
	return i.ToAppProjectPatchArrayOutputWithContext(context.Background())
}

func (i AppProjectPatchArray) ToAppProjectPatchArrayOutputWithContext(ctx context.Context) AppProjectPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectPatchArrayOutput)
}

// AppProjectPatchMapInput is an input type that accepts AppProjectPatchMap and AppProjectPatchMapOutput values.
// You can construct a concrete instance of `AppProjectPatchMapInput` via:
//
//	AppProjectPatchMap{ "key": AppProjectPatchArgs{...} }
type AppProjectPatchMapInput interface {
	pulumi.Input

	ToAppProjectPatchMapOutput() AppProjectPatchMapOutput
	ToAppProjectPatchMapOutputWithContext(context.Context) AppProjectPatchMapOutput
}

type AppProjectPatchMap map[string]AppProjectPatchInput

func (AppProjectPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProjectPatch)(nil)).Elem()
}

func (i AppProjectPatchMap) ToAppProjectPatchMapOutput() AppProjectPatchMapOutput {
	return i.ToAppProjectPatchMapOutputWithContext(context.Background())
}

func (i AppProjectPatchMap) ToAppProjectPatchMapOutputWithContext(ctx context.Context) AppProjectPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProjectPatchMapOutput)
}

type AppProjectPatchOutput struct{ *pulumi.OutputState }

func (AppProjectPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProjectPatch)(nil)).Elem()
}

func (o AppProjectPatchOutput) ToAppProjectPatchOutput() AppProjectPatchOutput {
	return o
}

func (o AppProjectPatchOutput) ToAppProjectPatchOutputWithContext(ctx context.Context) AppProjectPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AppProjectPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppProjectPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AppProjectPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppProjectPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AppProjectPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AppProjectPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AppProjectPatchOutput) Spec() AppProjectSpecPatchPtrOutput {
	return o.ApplyT(func(v *AppProjectPatch) AppProjectSpecPatchPtrOutput { return v.Spec }).(AppProjectSpecPatchPtrOutput)
}

func (o AppProjectPatchOutput) Status() AppProjectStatusPatchPtrOutput {
	return o.ApplyT(func(v *AppProjectPatch) AppProjectStatusPatchPtrOutput { return v.Status }).(AppProjectStatusPatchPtrOutput)
}

type AppProjectPatchArrayOutput struct{ *pulumi.OutputState }

func (AppProjectPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProjectPatch)(nil)).Elem()
}

func (o AppProjectPatchArrayOutput) ToAppProjectPatchArrayOutput() AppProjectPatchArrayOutput {
	return o
}

func (o AppProjectPatchArrayOutput) ToAppProjectPatchArrayOutputWithContext(ctx context.Context) AppProjectPatchArrayOutput {
	return o
}

func (o AppProjectPatchArrayOutput) Index(i pulumi.IntInput) AppProjectPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppProjectPatch {
		return vs[0].([]*AppProjectPatch)[vs[1].(int)]
	}).(AppProjectPatchOutput)
}

type AppProjectPatchMapOutput struct{ *pulumi.OutputState }

func (AppProjectPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProjectPatch)(nil)).Elem()
}

func (o AppProjectPatchMapOutput) ToAppProjectPatchMapOutput() AppProjectPatchMapOutput {
	return o
}

func (o AppProjectPatchMapOutput) ToAppProjectPatchMapOutputWithContext(ctx context.Context) AppProjectPatchMapOutput {
	return o
}

func (o AppProjectPatchMapOutput) MapIndex(k pulumi.StringInput) AppProjectPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppProjectPatch {
		return vs[0].(map[string]*AppProjectPatch)[vs[1].(string)]
	}).(AppProjectPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectPatchInput)(nil)).Elem(), &AppProjectPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectPatchArrayInput)(nil)).Elem(), AppProjectPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProjectPatchMapInput)(nil)).Elem(), AppProjectPatchMap{})
	pulumi.RegisterOutputType(AppProjectPatchOutput{})
	pulumi.RegisterOutputType(AppProjectPatchArrayOutput{})
	pulumi.RegisterOutputType(AppProjectPatchMapOutput{})
}
