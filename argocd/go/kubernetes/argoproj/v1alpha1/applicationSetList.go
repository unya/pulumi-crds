// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ApplicationSetList is a list of ApplicationSet
type ApplicationSetList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of applicationsets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ApplicationSetTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewApplicationSetList registers a new resource with the given unique name, arguments, and options.
func NewApplicationSetList(ctx *pulumi.Context,
	name string, args *ApplicationSetListArgs, opts ...pulumi.ResourceOption) (*ApplicationSetList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ApplicationSetList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApplicationSetList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:ApplicationSetList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSetList gets an existing ApplicationSetList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSetList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSetListState, opts ...pulumi.ResourceOption) (*ApplicationSetList, error) {
	var resource ApplicationSetList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:ApplicationSetList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSetList resources.
type applicationSetListState struct {
}

type ApplicationSetListState struct {
}

func (ApplicationSetListState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetListState)(nil)).Elem()
}

type applicationSetListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of applicationsets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ApplicationSetType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ApplicationSetList resource.
type ApplicationSetListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of applicationsets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ApplicationSetTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ApplicationSetListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetListArgs)(nil)).Elem()
}

type ApplicationSetListInput interface {
	pulumi.Input

	ToApplicationSetListOutput() ApplicationSetListOutput
	ToApplicationSetListOutputWithContext(ctx context.Context) ApplicationSetListOutput
}

func (*ApplicationSetList) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSetList)(nil)).Elem()
}

func (i *ApplicationSetList) ToApplicationSetListOutput() ApplicationSetListOutput {
	return i.ToApplicationSetListOutputWithContext(context.Background())
}

func (i *ApplicationSetList) ToApplicationSetListOutputWithContext(ctx context.Context) ApplicationSetListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetListOutput)
}

// ApplicationSetListArrayInput is an input type that accepts ApplicationSetListArray and ApplicationSetListArrayOutput values.
// You can construct a concrete instance of `ApplicationSetListArrayInput` via:
//
//	ApplicationSetListArray{ ApplicationSetListArgs{...} }
type ApplicationSetListArrayInput interface {
	pulumi.Input

	ToApplicationSetListArrayOutput() ApplicationSetListArrayOutput
	ToApplicationSetListArrayOutputWithContext(context.Context) ApplicationSetListArrayOutput
}

type ApplicationSetListArray []ApplicationSetListInput

func (ApplicationSetListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSetList)(nil)).Elem()
}

func (i ApplicationSetListArray) ToApplicationSetListArrayOutput() ApplicationSetListArrayOutput {
	return i.ToApplicationSetListArrayOutputWithContext(context.Background())
}

func (i ApplicationSetListArray) ToApplicationSetListArrayOutputWithContext(ctx context.Context) ApplicationSetListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetListArrayOutput)
}

// ApplicationSetListMapInput is an input type that accepts ApplicationSetListMap and ApplicationSetListMapOutput values.
// You can construct a concrete instance of `ApplicationSetListMapInput` via:
//
//	ApplicationSetListMap{ "key": ApplicationSetListArgs{...} }
type ApplicationSetListMapInput interface {
	pulumi.Input

	ToApplicationSetListMapOutput() ApplicationSetListMapOutput
	ToApplicationSetListMapOutputWithContext(context.Context) ApplicationSetListMapOutput
}

type ApplicationSetListMap map[string]ApplicationSetListInput

func (ApplicationSetListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSetList)(nil)).Elem()
}

func (i ApplicationSetListMap) ToApplicationSetListMapOutput() ApplicationSetListMapOutput {
	return i.ToApplicationSetListMapOutputWithContext(context.Background())
}

func (i ApplicationSetListMap) ToApplicationSetListMapOutputWithContext(ctx context.Context) ApplicationSetListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetListMapOutput)
}

type ApplicationSetListOutput struct{ *pulumi.OutputState }

func (ApplicationSetListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSetList)(nil)).Elem()
}

func (o ApplicationSetListOutput) ToApplicationSetListOutput() ApplicationSetListOutput {
	return o
}

func (o ApplicationSetListOutput) ToApplicationSetListOutputWithContext(ctx context.Context) ApplicationSetListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ApplicationSetListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSetList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of applicationsets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ApplicationSetListOutput) Items() ApplicationSetTypeArrayOutput {
	return o.ApplyT(func(v *ApplicationSetList) ApplicationSetTypeArrayOutput { return v.Items }).(ApplicationSetTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSetListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationSetList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApplicationSetListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ApplicationSetList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ApplicationSetListArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSetListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSetList)(nil)).Elem()
}

func (o ApplicationSetListArrayOutput) ToApplicationSetListArrayOutput() ApplicationSetListArrayOutput {
	return o
}

func (o ApplicationSetListArrayOutput) ToApplicationSetListArrayOutputWithContext(ctx context.Context) ApplicationSetListArrayOutput {
	return o
}

func (o ApplicationSetListArrayOutput) Index(i pulumi.IntInput) ApplicationSetListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSetList {
		return vs[0].([]*ApplicationSetList)[vs[1].(int)]
	}).(ApplicationSetListOutput)
}

type ApplicationSetListMapOutput struct{ *pulumi.OutputState }

func (ApplicationSetListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSetList)(nil)).Elem()
}

func (o ApplicationSetListMapOutput) ToApplicationSetListMapOutput() ApplicationSetListMapOutput {
	return o
}

func (o ApplicationSetListMapOutput) ToApplicationSetListMapOutputWithContext(ctx context.Context) ApplicationSetListMapOutput {
	return o
}

func (o ApplicationSetListMapOutput) MapIndex(k pulumi.StringInput) ApplicationSetListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSetList {
		return vs[0].(map[string]*ApplicationSetList)[vs[1].(string)]
	}).(ApplicationSetListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetListInput)(nil)).Elem(), &ApplicationSetList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetListArrayInput)(nil)).Elem(), ApplicationSetListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetListMapInput)(nil)).Elem(), ApplicationSetListMap{})
	pulumi.RegisterOutputType(ApplicationSetListOutput{})
	pulumi.RegisterOutputType(ApplicationSetListArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSetListMapOutput{})
}
