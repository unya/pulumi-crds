// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PermissionList is a list of Permission
type PermissionList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of permissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PermissionTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPermissionList registers a new resource with the given unique name, arguments, and options.
func NewPermissionList(ctx *pulumi.Context,
	name string, args *PermissionListArgs, opts ...pulumi.ResourceOption) (*PermissionList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("PermissionList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PermissionList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:PermissionList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionList gets an existing PermissionList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionListState, opts ...pulumi.ResourceOption) (*PermissionList, error) {
	var resource PermissionList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:PermissionList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionList resources.
type permissionListState struct {
}

type PermissionListState struct {
}

func (PermissionListState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionListState)(nil)).Elem()
}

type permissionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of permissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PermissionType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PermissionList resource.
type PermissionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of permissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PermissionTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PermissionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionListArgs)(nil)).Elem()
}

type PermissionListInput interface {
	pulumi.Input

	ToPermissionListOutput() PermissionListOutput
	ToPermissionListOutputWithContext(ctx context.Context) PermissionListOutput
}

func (*PermissionList) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionList)(nil)).Elem()
}

func (i *PermissionList) ToPermissionListOutput() PermissionListOutput {
	return i.ToPermissionListOutputWithContext(context.Background())
}

func (i *PermissionList) ToPermissionListOutputWithContext(ctx context.Context) PermissionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionListOutput)
}

// PermissionListArrayInput is an input type that accepts PermissionListArray and PermissionListArrayOutput values.
// You can construct a concrete instance of `PermissionListArrayInput` via:
//
//	PermissionListArray{ PermissionListArgs{...} }
type PermissionListArrayInput interface {
	pulumi.Input

	ToPermissionListArrayOutput() PermissionListArrayOutput
	ToPermissionListArrayOutputWithContext(context.Context) PermissionListArrayOutput
}

type PermissionListArray []PermissionListInput

func (PermissionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionList)(nil)).Elem()
}

func (i PermissionListArray) ToPermissionListArrayOutput() PermissionListArrayOutput {
	return i.ToPermissionListArrayOutputWithContext(context.Background())
}

func (i PermissionListArray) ToPermissionListArrayOutputWithContext(ctx context.Context) PermissionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionListArrayOutput)
}

// PermissionListMapInput is an input type that accepts PermissionListMap and PermissionListMapOutput values.
// You can construct a concrete instance of `PermissionListMapInput` via:
//
//	PermissionListMap{ "key": PermissionListArgs{...} }
type PermissionListMapInput interface {
	pulumi.Input

	ToPermissionListMapOutput() PermissionListMapOutput
	ToPermissionListMapOutputWithContext(context.Context) PermissionListMapOutput
}

type PermissionListMap map[string]PermissionListInput

func (PermissionListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionList)(nil)).Elem()
}

func (i PermissionListMap) ToPermissionListMapOutput() PermissionListMapOutput {
	return i.ToPermissionListMapOutputWithContext(context.Background())
}

func (i PermissionListMap) ToPermissionListMapOutputWithContext(ctx context.Context) PermissionListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionListMapOutput)
}

type PermissionListOutput struct{ *pulumi.OutputState }

func (PermissionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionList)(nil)).Elem()
}

func (o PermissionListOutput) ToPermissionListOutput() PermissionListOutput {
	return o
}

func (o PermissionListOutput) ToPermissionListOutputWithContext(ctx context.Context) PermissionListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PermissionListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of permissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PermissionListOutput) Items() PermissionTypeArrayOutput {
	return o.ApplyT(func(v *PermissionList) PermissionTypeArrayOutput { return v.Items }).(PermissionTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PermissionListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PermissionListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PermissionList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PermissionListArrayOutput struct{ *pulumi.OutputState }

func (PermissionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionList)(nil)).Elem()
}

func (o PermissionListArrayOutput) ToPermissionListArrayOutput() PermissionListArrayOutput {
	return o
}

func (o PermissionListArrayOutput) ToPermissionListArrayOutputWithContext(ctx context.Context) PermissionListArrayOutput {
	return o
}

func (o PermissionListArrayOutput) Index(i pulumi.IntInput) PermissionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionList {
		return vs[0].([]*PermissionList)[vs[1].(int)]
	}).(PermissionListOutput)
}

type PermissionListMapOutput struct{ *pulumi.OutputState }

func (PermissionListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionList)(nil)).Elem()
}

func (o PermissionListMapOutput) ToPermissionListMapOutput() PermissionListMapOutput {
	return o
}

func (o PermissionListMapOutput) ToPermissionListMapOutputWithContext(ctx context.Context) PermissionListMapOutput {
	return o
}

func (o PermissionListMapOutput) MapIndex(k pulumi.StringInput) PermissionListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionList {
		return vs[0].(map[string]*PermissionList)[vs[1].(string)]
	}).(PermissionListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionListInput)(nil)).Elem(), &PermissionList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionListArrayInput)(nil)).Elem(), PermissionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionListMapInput)(nil)).Elem(), PermissionListMap{})
	pulumi.RegisterOutputType(PermissionListOutput{})
	pulumi.RegisterOutputType(PermissionListArrayOutput{})
	pulumi.RegisterOutputType(PermissionListMapOutput{})
}
