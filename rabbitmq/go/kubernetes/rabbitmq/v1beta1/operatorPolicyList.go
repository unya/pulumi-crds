// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OperatorPolicyList is a list of OperatorPolicy
type OperatorPolicyList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of operatorpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OperatorPolicyTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewOperatorPolicyList registers a new resource with the given unique name, arguments, and options.
func NewOperatorPolicyList(ctx *pulumi.Context,
	name string, args *OperatorPolicyListArgs, opts ...pulumi.ResourceOption) (*OperatorPolicyList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("OperatorPolicyList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OperatorPolicyList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:OperatorPolicyList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperatorPolicyList gets an existing OperatorPolicyList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperatorPolicyList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperatorPolicyListState, opts ...pulumi.ResourceOption) (*OperatorPolicyList, error) {
	var resource OperatorPolicyList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:OperatorPolicyList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperatorPolicyList resources.
type operatorPolicyListState struct {
}

type OperatorPolicyListState struct {
}

func (OperatorPolicyListState) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorPolicyListState)(nil)).Elem()
}

type operatorPolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of operatorpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []OperatorPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a OperatorPolicyList resource.
type OperatorPolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of operatorpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OperatorPolicyTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (OperatorPolicyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorPolicyListArgs)(nil)).Elem()
}

type OperatorPolicyListInput interface {
	pulumi.Input

	ToOperatorPolicyListOutput() OperatorPolicyListOutput
	ToOperatorPolicyListOutputWithContext(ctx context.Context) OperatorPolicyListOutput
}

func (*OperatorPolicyList) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicyList)(nil)).Elem()
}

func (i *OperatorPolicyList) ToOperatorPolicyListOutput() OperatorPolicyListOutput {
	return i.ToOperatorPolicyListOutputWithContext(context.Background())
}

func (i *OperatorPolicyList) ToOperatorPolicyListOutputWithContext(ctx context.Context) OperatorPolicyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyListOutput)
}

// OperatorPolicyListArrayInput is an input type that accepts OperatorPolicyListArray and OperatorPolicyListArrayOutput values.
// You can construct a concrete instance of `OperatorPolicyListArrayInput` via:
//
//	OperatorPolicyListArray{ OperatorPolicyListArgs{...} }
type OperatorPolicyListArrayInput interface {
	pulumi.Input

	ToOperatorPolicyListArrayOutput() OperatorPolicyListArrayOutput
	ToOperatorPolicyListArrayOutputWithContext(context.Context) OperatorPolicyListArrayOutput
}

type OperatorPolicyListArray []OperatorPolicyListInput

func (OperatorPolicyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorPolicyList)(nil)).Elem()
}

func (i OperatorPolicyListArray) ToOperatorPolicyListArrayOutput() OperatorPolicyListArrayOutput {
	return i.ToOperatorPolicyListArrayOutputWithContext(context.Background())
}

func (i OperatorPolicyListArray) ToOperatorPolicyListArrayOutputWithContext(ctx context.Context) OperatorPolicyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyListArrayOutput)
}

// OperatorPolicyListMapInput is an input type that accepts OperatorPolicyListMap and OperatorPolicyListMapOutput values.
// You can construct a concrete instance of `OperatorPolicyListMapInput` via:
//
//	OperatorPolicyListMap{ "key": OperatorPolicyListArgs{...} }
type OperatorPolicyListMapInput interface {
	pulumi.Input

	ToOperatorPolicyListMapOutput() OperatorPolicyListMapOutput
	ToOperatorPolicyListMapOutputWithContext(context.Context) OperatorPolicyListMapOutput
}

type OperatorPolicyListMap map[string]OperatorPolicyListInput

func (OperatorPolicyListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorPolicyList)(nil)).Elem()
}

func (i OperatorPolicyListMap) ToOperatorPolicyListMapOutput() OperatorPolicyListMapOutput {
	return i.ToOperatorPolicyListMapOutputWithContext(context.Background())
}

func (i OperatorPolicyListMap) ToOperatorPolicyListMapOutputWithContext(ctx context.Context) OperatorPolicyListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyListMapOutput)
}

type OperatorPolicyListOutput struct{ *pulumi.OutputState }

func (OperatorPolicyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicyList)(nil)).Elem()
}

func (o OperatorPolicyListOutput) ToOperatorPolicyListOutput() OperatorPolicyListOutput {
	return o
}

func (o OperatorPolicyListOutput) ToOperatorPolicyListOutputWithContext(ctx context.Context) OperatorPolicyListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OperatorPolicyListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorPolicyList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of operatorpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o OperatorPolicyListOutput) Items() OperatorPolicyTypeArrayOutput {
	return o.ApplyT(func(v *OperatorPolicyList) OperatorPolicyTypeArrayOutput { return v.Items }).(OperatorPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OperatorPolicyListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorPolicyList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OperatorPolicyListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *OperatorPolicyList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type OperatorPolicyListArrayOutput struct{ *pulumi.OutputState }

func (OperatorPolicyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorPolicyList)(nil)).Elem()
}

func (o OperatorPolicyListArrayOutput) ToOperatorPolicyListArrayOutput() OperatorPolicyListArrayOutput {
	return o
}

func (o OperatorPolicyListArrayOutput) ToOperatorPolicyListArrayOutputWithContext(ctx context.Context) OperatorPolicyListArrayOutput {
	return o
}

func (o OperatorPolicyListArrayOutput) Index(i pulumi.IntInput) OperatorPolicyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperatorPolicyList {
		return vs[0].([]*OperatorPolicyList)[vs[1].(int)]
	}).(OperatorPolicyListOutput)
}

type OperatorPolicyListMapOutput struct{ *pulumi.OutputState }

func (OperatorPolicyListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorPolicyList)(nil)).Elem()
}

func (o OperatorPolicyListMapOutput) ToOperatorPolicyListMapOutput() OperatorPolicyListMapOutput {
	return o
}

func (o OperatorPolicyListMapOutput) ToOperatorPolicyListMapOutputWithContext(ctx context.Context) OperatorPolicyListMapOutput {
	return o
}

func (o OperatorPolicyListMapOutput) MapIndex(k pulumi.StringInput) OperatorPolicyListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperatorPolicyList {
		return vs[0].(map[string]*OperatorPolicyList)[vs[1].(string)]
	}).(OperatorPolicyListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyListInput)(nil)).Elem(), &OperatorPolicyList{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyListArrayInput)(nil)).Elem(), OperatorPolicyListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyListMapInput)(nil)).Elem(), OperatorPolicyListMap{})
	pulumi.RegisterOutputType(OperatorPolicyListOutput{})
	pulumi.RegisterOutputType(OperatorPolicyListArrayOutput{})
	pulumi.RegisterOutputType(OperatorPolicyListMapOutput{})
}
