// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Queue is the Schema for the queues API
type QueuePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     QueueSpecPatchPtrOutput         `pulumi:"spec"`
	Status   QueueStatusPatchPtrOutput       `pulumi:"status"`
}

// NewQueuePatch registers a new resource with the given unique name, arguments, and options.
func NewQueuePatch(ctx *pulumi.Context,
	name string, args *QueuePatchArgs, opts ...pulumi.ResourceOption) (*QueuePatch, error) {
	if args == nil {
		args = &QueuePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Queue")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource QueuePatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:QueuePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueuePatch gets an existing QueuePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueuePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueuePatchState, opts ...pulumi.ResourceOption) (*QueuePatch, error) {
	var resource QueuePatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:QueuePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueuePatch resources.
type queuePatchState struct {
}

type QueuePatchState struct {
}

func (QueuePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*queuePatchState)(nil)).Elem()
}

type queuePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *QueueSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a QueuePatch resource.
type QueuePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     QueueSpecPatchPtrInput
}

func (QueuePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queuePatchArgs)(nil)).Elem()
}

type QueuePatchInput interface {
	pulumi.Input

	ToQueuePatchOutput() QueuePatchOutput
	ToQueuePatchOutputWithContext(ctx context.Context) QueuePatchOutput
}

func (*QueuePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuePatch)(nil)).Elem()
}

func (i *QueuePatch) ToQueuePatchOutput() QueuePatchOutput {
	return i.ToQueuePatchOutputWithContext(context.Background())
}

func (i *QueuePatch) ToQueuePatchOutputWithContext(ctx context.Context) QueuePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePatchOutput)
}

// QueuePatchArrayInput is an input type that accepts QueuePatchArray and QueuePatchArrayOutput values.
// You can construct a concrete instance of `QueuePatchArrayInput` via:
//
//	QueuePatchArray{ QueuePatchArgs{...} }
type QueuePatchArrayInput interface {
	pulumi.Input

	ToQueuePatchArrayOutput() QueuePatchArrayOutput
	ToQueuePatchArrayOutputWithContext(context.Context) QueuePatchArrayOutput
}

type QueuePatchArray []QueuePatchInput

func (QueuePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueuePatch)(nil)).Elem()
}

func (i QueuePatchArray) ToQueuePatchArrayOutput() QueuePatchArrayOutput {
	return i.ToQueuePatchArrayOutputWithContext(context.Background())
}

func (i QueuePatchArray) ToQueuePatchArrayOutputWithContext(ctx context.Context) QueuePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePatchArrayOutput)
}

// QueuePatchMapInput is an input type that accepts QueuePatchMap and QueuePatchMapOutput values.
// You can construct a concrete instance of `QueuePatchMapInput` via:
//
//	QueuePatchMap{ "key": QueuePatchArgs{...} }
type QueuePatchMapInput interface {
	pulumi.Input

	ToQueuePatchMapOutput() QueuePatchMapOutput
	ToQueuePatchMapOutputWithContext(context.Context) QueuePatchMapOutput
}

type QueuePatchMap map[string]QueuePatchInput

func (QueuePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueuePatch)(nil)).Elem()
}

func (i QueuePatchMap) ToQueuePatchMapOutput() QueuePatchMapOutput {
	return i.ToQueuePatchMapOutputWithContext(context.Background())
}

func (i QueuePatchMap) ToQueuePatchMapOutputWithContext(ctx context.Context) QueuePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueuePatchMapOutput)
}

type QueuePatchOutput struct{ *pulumi.OutputState }

func (QueuePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueuePatch)(nil)).Elem()
}

func (o QueuePatchOutput) ToQueuePatchOutput() QueuePatchOutput {
	return o
}

func (o QueuePatchOutput) ToQueuePatchOutputWithContext(ctx context.Context) QueuePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o QueuePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o QueuePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueuePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o QueuePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *QueuePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o QueuePatchOutput) Spec() QueueSpecPatchPtrOutput {
	return o.ApplyT(func(v *QueuePatch) QueueSpecPatchPtrOutput { return v.Spec }).(QueueSpecPatchPtrOutput)
}

func (o QueuePatchOutput) Status() QueueStatusPatchPtrOutput {
	return o.ApplyT(func(v *QueuePatch) QueueStatusPatchPtrOutput { return v.Status }).(QueueStatusPatchPtrOutput)
}

type QueuePatchArrayOutput struct{ *pulumi.OutputState }

func (QueuePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueuePatch)(nil)).Elem()
}

func (o QueuePatchArrayOutput) ToQueuePatchArrayOutput() QueuePatchArrayOutput {
	return o
}

func (o QueuePatchArrayOutput) ToQueuePatchArrayOutputWithContext(ctx context.Context) QueuePatchArrayOutput {
	return o
}

func (o QueuePatchArrayOutput) Index(i pulumi.IntInput) QueuePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueuePatch {
		return vs[0].([]*QueuePatch)[vs[1].(int)]
	}).(QueuePatchOutput)
}

type QueuePatchMapOutput struct{ *pulumi.OutputState }

func (QueuePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueuePatch)(nil)).Elem()
}

func (o QueuePatchMapOutput) ToQueuePatchMapOutput() QueuePatchMapOutput {
	return o
}

func (o QueuePatchMapOutput) ToQueuePatchMapOutputWithContext(ctx context.Context) QueuePatchMapOutput {
	return o
}

func (o QueuePatchMapOutput) MapIndex(k pulumi.StringInput) QueuePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueuePatch {
		return vs[0].(map[string]*QueuePatch)[vs[1].(string)]
	}).(QueuePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueuePatchInput)(nil)).Elem(), &QueuePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuePatchArrayInput)(nil)).Elem(), QueuePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueuePatchMapInput)(nil)).Elem(), QueuePatchMap{})
	pulumi.RegisterOutputType(QueuePatchOutput{})
	pulumi.RegisterOutputType(QueuePatchArrayOutput{})
	pulumi.RegisterOutputType(QueuePatchMapOutput{})
}
