// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object
// corresponds to a single RabbitMQ cluster.
type RabbitmqClusterPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput     `pulumi:"metadata"`
	Spec     RabbitmqClusterSpecPatchPtrOutput   `pulumi:"spec"`
	Status   RabbitmqClusterStatusPatchPtrOutput `pulumi:"status"`
}

// NewRabbitmqClusterPatch registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqClusterPatch(ctx *pulumi.Context,
	name string, args *RabbitmqClusterPatchArgs, opts ...pulumi.ResourceOption) (*RabbitmqClusterPatch, error) {
	if args == nil {
		args = &RabbitmqClusterPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("RabbitmqCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RabbitmqClusterPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:RabbitmqClusterPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqClusterPatch gets an existing RabbitmqClusterPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqClusterPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqClusterPatchState, opts ...pulumi.ResourceOption) (*RabbitmqClusterPatch, error) {
	var resource RabbitmqClusterPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:RabbitmqClusterPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqClusterPatch resources.
type rabbitmqClusterPatchState struct {
}

type RabbitmqClusterPatchState struct {
}

func (RabbitmqClusterPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqClusterPatchState)(nil)).Elem()
}

type rabbitmqClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *RabbitmqClusterSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a RabbitmqClusterPatch resource.
type RabbitmqClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     RabbitmqClusterSpecPatchPtrInput
}

func (RabbitmqClusterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqClusterPatchArgs)(nil)).Elem()
}

type RabbitmqClusterPatchInput interface {
	pulumi.Input

	ToRabbitmqClusterPatchOutput() RabbitmqClusterPatchOutput
	ToRabbitmqClusterPatchOutputWithContext(ctx context.Context) RabbitmqClusterPatchOutput
}

func (*RabbitmqClusterPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqClusterPatch)(nil)).Elem()
}

func (i *RabbitmqClusterPatch) ToRabbitmqClusterPatchOutput() RabbitmqClusterPatchOutput {
	return i.ToRabbitmqClusterPatchOutputWithContext(context.Background())
}

func (i *RabbitmqClusterPatch) ToRabbitmqClusterPatchOutputWithContext(ctx context.Context) RabbitmqClusterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterPatchOutput)
}

// RabbitmqClusterPatchArrayInput is an input type that accepts RabbitmqClusterPatchArray and RabbitmqClusterPatchArrayOutput values.
// You can construct a concrete instance of `RabbitmqClusterPatchArrayInput` via:
//
//	RabbitmqClusterPatchArray{ RabbitmqClusterPatchArgs{...} }
type RabbitmqClusterPatchArrayInput interface {
	pulumi.Input

	ToRabbitmqClusterPatchArrayOutput() RabbitmqClusterPatchArrayOutput
	ToRabbitmqClusterPatchArrayOutputWithContext(context.Context) RabbitmqClusterPatchArrayOutput
}

type RabbitmqClusterPatchArray []RabbitmqClusterPatchInput

func (RabbitmqClusterPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqClusterPatch)(nil)).Elem()
}

func (i RabbitmqClusterPatchArray) ToRabbitmqClusterPatchArrayOutput() RabbitmqClusterPatchArrayOutput {
	return i.ToRabbitmqClusterPatchArrayOutputWithContext(context.Background())
}

func (i RabbitmqClusterPatchArray) ToRabbitmqClusterPatchArrayOutputWithContext(ctx context.Context) RabbitmqClusterPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterPatchArrayOutput)
}

// RabbitmqClusterPatchMapInput is an input type that accepts RabbitmqClusterPatchMap and RabbitmqClusterPatchMapOutput values.
// You can construct a concrete instance of `RabbitmqClusterPatchMapInput` via:
//
//	RabbitmqClusterPatchMap{ "key": RabbitmqClusterPatchArgs{...} }
type RabbitmqClusterPatchMapInput interface {
	pulumi.Input

	ToRabbitmqClusterPatchMapOutput() RabbitmqClusterPatchMapOutput
	ToRabbitmqClusterPatchMapOutputWithContext(context.Context) RabbitmqClusterPatchMapOutput
}

type RabbitmqClusterPatchMap map[string]RabbitmqClusterPatchInput

func (RabbitmqClusterPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqClusterPatch)(nil)).Elem()
}

func (i RabbitmqClusterPatchMap) ToRabbitmqClusterPatchMapOutput() RabbitmqClusterPatchMapOutput {
	return i.ToRabbitmqClusterPatchMapOutputWithContext(context.Background())
}

func (i RabbitmqClusterPatchMap) ToRabbitmqClusterPatchMapOutputWithContext(ctx context.Context) RabbitmqClusterPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterPatchMapOutput)
}

type RabbitmqClusterPatchOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqClusterPatch)(nil)).Elem()
}

func (o RabbitmqClusterPatchOutput) ToRabbitmqClusterPatchOutput() RabbitmqClusterPatchOutput {
	return o
}

func (o RabbitmqClusterPatchOutput) ToRabbitmqClusterPatchOutputWithContext(ctx context.Context) RabbitmqClusterPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RabbitmqClusterPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqClusterPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RabbitmqClusterPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqClusterPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RabbitmqClusterPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *RabbitmqClusterPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o RabbitmqClusterPatchOutput) Spec() RabbitmqClusterSpecPatchPtrOutput {
	return o.ApplyT(func(v *RabbitmqClusterPatch) RabbitmqClusterSpecPatchPtrOutput { return v.Spec }).(RabbitmqClusterSpecPatchPtrOutput)
}

func (o RabbitmqClusterPatchOutput) Status() RabbitmqClusterStatusPatchPtrOutput {
	return o.ApplyT(func(v *RabbitmqClusterPatch) RabbitmqClusterStatusPatchPtrOutput { return v.Status }).(RabbitmqClusterStatusPatchPtrOutput)
}

type RabbitmqClusterPatchArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqClusterPatch)(nil)).Elem()
}

func (o RabbitmqClusterPatchArrayOutput) ToRabbitmqClusterPatchArrayOutput() RabbitmqClusterPatchArrayOutput {
	return o
}

func (o RabbitmqClusterPatchArrayOutput) ToRabbitmqClusterPatchArrayOutputWithContext(ctx context.Context) RabbitmqClusterPatchArrayOutput {
	return o
}

func (o RabbitmqClusterPatchArrayOutput) Index(i pulumi.IntInput) RabbitmqClusterPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqClusterPatch {
		return vs[0].([]*RabbitmqClusterPatch)[vs[1].(int)]
	}).(RabbitmqClusterPatchOutput)
}

type RabbitmqClusterPatchMapOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqClusterPatch)(nil)).Elem()
}

func (o RabbitmqClusterPatchMapOutput) ToRabbitmqClusterPatchMapOutput() RabbitmqClusterPatchMapOutput {
	return o
}

func (o RabbitmqClusterPatchMapOutput) ToRabbitmqClusterPatchMapOutputWithContext(ctx context.Context) RabbitmqClusterPatchMapOutput {
	return o
}

func (o RabbitmqClusterPatchMapOutput) MapIndex(k pulumi.StringInput) RabbitmqClusterPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqClusterPatch {
		return vs[0].(map[string]*RabbitmqClusterPatch)[vs[1].(string)]
	}).(RabbitmqClusterPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterPatchInput)(nil)).Elem(), &RabbitmqClusterPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterPatchArrayInput)(nil)).Elem(), RabbitmqClusterPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterPatchMapInput)(nil)).Elem(), RabbitmqClusterPatchMap{})
	pulumi.RegisterOutputType(RabbitmqClusterPatchOutput{})
	pulumi.RegisterOutputType(RabbitmqClusterPatchArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqClusterPatchMapOutput{})
}
