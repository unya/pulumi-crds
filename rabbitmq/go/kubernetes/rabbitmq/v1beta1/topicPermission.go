// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TopicPermission is the Schema for the topicpermissions API
type TopicPermission struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput        `pulumi:"metadata"`
	Spec     TopicPermissionSpecOutput      `pulumi:"spec"`
	Status   TopicPermissionStatusPtrOutput `pulumi:"status"`
}

// NewTopicPermission registers a new resource with the given unique name, arguments, and options.
func NewTopicPermission(ctx *pulumi.Context,
	name string, args *TopicPermissionArgs, opts ...pulumi.ResourceOption) (*TopicPermission, error) {
	if args == nil {
		args = &TopicPermissionArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("TopicPermission")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TopicPermission
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:TopicPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicPermission gets an existing TopicPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicPermissionState, opts ...pulumi.ResourceOption) (*TopicPermission, error) {
	var resource TopicPermission
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:TopicPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicPermission resources.
type topicPermissionState struct {
}

type TopicPermissionState struct {
}

func (TopicPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionState)(nil)).Elem()
}

type topicPermissionArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *TopicPermissionSpec `pulumi:"spec"`
}

// The set of arguments for constructing a TopicPermission resource.
type TopicPermissionArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     TopicPermissionSpecPtrInput
}

func (TopicPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionArgs)(nil)).Elem()
}

type TopicPermissionInput interface {
	pulumi.Input

	ToTopicPermissionOutput() TopicPermissionOutput
	ToTopicPermissionOutputWithContext(ctx context.Context) TopicPermissionOutput
}

func (*TopicPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPermission)(nil)).Elem()
}

func (i *TopicPermission) ToTopicPermissionOutput() TopicPermissionOutput {
	return i.ToTopicPermissionOutputWithContext(context.Background())
}

func (i *TopicPermission) ToTopicPermissionOutputWithContext(ctx context.Context) TopicPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionOutput)
}

// TopicPermissionArrayInput is an input type that accepts TopicPermissionArray and TopicPermissionArrayOutput values.
// You can construct a concrete instance of `TopicPermissionArrayInput` via:
//
//	TopicPermissionArray{ TopicPermissionArgs{...} }
type TopicPermissionArrayInput interface {
	pulumi.Input

	ToTopicPermissionArrayOutput() TopicPermissionArrayOutput
	ToTopicPermissionArrayOutputWithContext(context.Context) TopicPermissionArrayOutput
}

type TopicPermissionArray []TopicPermissionInput

func (TopicPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicPermission)(nil)).Elem()
}

func (i TopicPermissionArray) ToTopicPermissionArrayOutput() TopicPermissionArrayOutput {
	return i.ToTopicPermissionArrayOutputWithContext(context.Background())
}

func (i TopicPermissionArray) ToTopicPermissionArrayOutputWithContext(ctx context.Context) TopicPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionArrayOutput)
}

// TopicPermissionMapInput is an input type that accepts TopicPermissionMap and TopicPermissionMapOutput values.
// You can construct a concrete instance of `TopicPermissionMapInput` via:
//
//	TopicPermissionMap{ "key": TopicPermissionArgs{...} }
type TopicPermissionMapInput interface {
	pulumi.Input

	ToTopicPermissionMapOutput() TopicPermissionMapOutput
	ToTopicPermissionMapOutputWithContext(context.Context) TopicPermissionMapOutput
}

type TopicPermissionMap map[string]TopicPermissionInput

func (TopicPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicPermission)(nil)).Elem()
}

func (i TopicPermissionMap) ToTopicPermissionMapOutput() TopicPermissionMapOutput {
	return i.ToTopicPermissionMapOutputWithContext(context.Background())
}

func (i TopicPermissionMap) ToTopicPermissionMapOutputWithContext(ctx context.Context) TopicPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionMapOutput)
}

type TopicPermissionOutput struct{ *pulumi.OutputState }

func (TopicPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPermission)(nil)).Elem()
}

func (o TopicPermissionOutput) ToTopicPermissionOutput() TopicPermissionOutput {
	return o
}

func (o TopicPermissionOutput) ToTopicPermissionOutputWithContext(ctx context.Context) TopicPermissionOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TopicPermissionOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicPermission) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TopicPermissionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicPermission) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TopicPermissionOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *TopicPermission) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o TopicPermissionOutput) Spec() TopicPermissionSpecOutput {
	return o.ApplyT(func(v *TopicPermission) TopicPermissionSpecOutput { return v.Spec }).(TopicPermissionSpecOutput)
}

func (o TopicPermissionOutput) Status() TopicPermissionStatusPtrOutput {
	return o.ApplyT(func(v *TopicPermission) TopicPermissionStatusPtrOutput { return v.Status }).(TopicPermissionStatusPtrOutput)
}

type TopicPermissionArrayOutput struct{ *pulumi.OutputState }

func (TopicPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicPermission)(nil)).Elem()
}

func (o TopicPermissionArrayOutput) ToTopicPermissionArrayOutput() TopicPermissionArrayOutput {
	return o
}

func (o TopicPermissionArrayOutput) ToTopicPermissionArrayOutputWithContext(ctx context.Context) TopicPermissionArrayOutput {
	return o
}

func (o TopicPermissionArrayOutput) Index(i pulumi.IntInput) TopicPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicPermission {
		return vs[0].([]*TopicPermission)[vs[1].(int)]
	}).(TopicPermissionOutput)
}

type TopicPermissionMapOutput struct{ *pulumi.OutputState }

func (TopicPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicPermission)(nil)).Elem()
}

func (o TopicPermissionMapOutput) ToTopicPermissionMapOutput() TopicPermissionMapOutput {
	return o
}

func (o TopicPermissionMapOutput) ToTopicPermissionMapOutputWithContext(ctx context.Context) TopicPermissionMapOutput {
	return o
}

func (o TopicPermissionMapOutput) MapIndex(k pulumi.StringInput) TopicPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicPermission {
		return vs[0].(map[string]*TopicPermission)[vs[1].(string)]
	}).(TopicPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionInput)(nil)).Elem(), &TopicPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionArrayInput)(nil)).Elem(), TopicPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionMapInput)(nil)).Elem(), TopicPermissionMap{})
	pulumi.RegisterOutputType(TopicPermissionOutput{})
	pulumi.RegisterOutputType(TopicPermissionArrayOutput{})
	pulumi.RegisterOutputType(TopicPermissionMapOutput{})
}
