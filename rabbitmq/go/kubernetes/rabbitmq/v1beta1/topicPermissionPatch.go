// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// TopicPermission is the Schema for the topicpermissions API
type TopicPermissionPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput     `pulumi:"metadata"`
	Spec     TopicPermissionSpecPatchPtrOutput   `pulumi:"spec"`
	Status   TopicPermissionStatusPatchPtrOutput `pulumi:"status"`
}

// NewTopicPermissionPatch registers a new resource with the given unique name, arguments, and options.
func NewTopicPermissionPatch(ctx *pulumi.Context,
	name string, args *TopicPermissionPatchArgs, opts ...pulumi.ResourceOption) (*TopicPermissionPatch, error) {
	if args == nil {
		args = &TopicPermissionPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("TopicPermission")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TopicPermissionPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:TopicPermissionPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicPermissionPatch gets an existing TopicPermissionPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicPermissionPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicPermissionPatchState, opts ...pulumi.ResourceOption) (*TopicPermissionPatch, error) {
	var resource TopicPermissionPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:TopicPermissionPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicPermissionPatch resources.
type topicPermissionPatchState struct {
}

type TopicPermissionPatchState struct {
}

func (TopicPermissionPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionPatchState)(nil)).Elem()
}

type topicPermissionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *TopicPermissionSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a TopicPermissionPatch resource.
type TopicPermissionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     TopicPermissionSpecPatchPtrInput
}

func (TopicPermissionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionPatchArgs)(nil)).Elem()
}

type TopicPermissionPatchInput interface {
	pulumi.Input

	ToTopicPermissionPatchOutput() TopicPermissionPatchOutput
	ToTopicPermissionPatchOutputWithContext(ctx context.Context) TopicPermissionPatchOutput
}

func (*TopicPermissionPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPermissionPatch)(nil)).Elem()
}

func (i *TopicPermissionPatch) ToTopicPermissionPatchOutput() TopicPermissionPatchOutput {
	return i.ToTopicPermissionPatchOutputWithContext(context.Background())
}

func (i *TopicPermissionPatch) ToTopicPermissionPatchOutputWithContext(ctx context.Context) TopicPermissionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionPatchOutput)
}

// TopicPermissionPatchArrayInput is an input type that accepts TopicPermissionPatchArray and TopicPermissionPatchArrayOutput values.
// You can construct a concrete instance of `TopicPermissionPatchArrayInput` via:
//
//	TopicPermissionPatchArray{ TopicPermissionPatchArgs{...} }
type TopicPermissionPatchArrayInput interface {
	pulumi.Input

	ToTopicPermissionPatchArrayOutput() TopicPermissionPatchArrayOutput
	ToTopicPermissionPatchArrayOutputWithContext(context.Context) TopicPermissionPatchArrayOutput
}

type TopicPermissionPatchArray []TopicPermissionPatchInput

func (TopicPermissionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicPermissionPatch)(nil)).Elem()
}

func (i TopicPermissionPatchArray) ToTopicPermissionPatchArrayOutput() TopicPermissionPatchArrayOutput {
	return i.ToTopicPermissionPatchArrayOutputWithContext(context.Background())
}

func (i TopicPermissionPatchArray) ToTopicPermissionPatchArrayOutputWithContext(ctx context.Context) TopicPermissionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionPatchArrayOutput)
}

// TopicPermissionPatchMapInput is an input type that accepts TopicPermissionPatchMap and TopicPermissionPatchMapOutput values.
// You can construct a concrete instance of `TopicPermissionPatchMapInput` via:
//
//	TopicPermissionPatchMap{ "key": TopicPermissionPatchArgs{...} }
type TopicPermissionPatchMapInput interface {
	pulumi.Input

	ToTopicPermissionPatchMapOutput() TopicPermissionPatchMapOutput
	ToTopicPermissionPatchMapOutputWithContext(context.Context) TopicPermissionPatchMapOutput
}

type TopicPermissionPatchMap map[string]TopicPermissionPatchInput

func (TopicPermissionPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicPermissionPatch)(nil)).Elem()
}

func (i TopicPermissionPatchMap) ToTopicPermissionPatchMapOutput() TopicPermissionPatchMapOutput {
	return i.ToTopicPermissionPatchMapOutputWithContext(context.Background())
}

func (i TopicPermissionPatchMap) ToTopicPermissionPatchMapOutputWithContext(ctx context.Context) TopicPermissionPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionPatchMapOutput)
}

type TopicPermissionPatchOutput struct{ *pulumi.OutputState }

func (TopicPermissionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPermissionPatch)(nil)).Elem()
}

func (o TopicPermissionPatchOutput) ToTopicPermissionPatchOutput() TopicPermissionPatchOutput {
	return o
}

func (o TopicPermissionPatchOutput) ToTopicPermissionPatchOutputWithContext(ctx context.Context) TopicPermissionPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TopicPermissionPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPermissionPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TopicPermissionPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopicPermissionPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TopicPermissionPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *TopicPermissionPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o TopicPermissionPatchOutput) Spec() TopicPermissionSpecPatchPtrOutput {
	return o.ApplyT(func(v *TopicPermissionPatch) TopicPermissionSpecPatchPtrOutput { return v.Spec }).(TopicPermissionSpecPatchPtrOutput)
}

func (o TopicPermissionPatchOutput) Status() TopicPermissionStatusPatchPtrOutput {
	return o.ApplyT(func(v *TopicPermissionPatch) TopicPermissionStatusPatchPtrOutput { return v.Status }).(TopicPermissionStatusPatchPtrOutput)
}

type TopicPermissionPatchArrayOutput struct{ *pulumi.OutputState }

func (TopicPermissionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicPermissionPatch)(nil)).Elem()
}

func (o TopicPermissionPatchArrayOutput) ToTopicPermissionPatchArrayOutput() TopicPermissionPatchArrayOutput {
	return o
}

func (o TopicPermissionPatchArrayOutput) ToTopicPermissionPatchArrayOutputWithContext(ctx context.Context) TopicPermissionPatchArrayOutput {
	return o
}

func (o TopicPermissionPatchArrayOutput) Index(i pulumi.IntInput) TopicPermissionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicPermissionPatch {
		return vs[0].([]*TopicPermissionPatch)[vs[1].(int)]
	}).(TopicPermissionPatchOutput)
}

type TopicPermissionPatchMapOutput struct{ *pulumi.OutputState }

func (TopicPermissionPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicPermissionPatch)(nil)).Elem()
}

func (o TopicPermissionPatchMapOutput) ToTopicPermissionPatchMapOutput() TopicPermissionPatchMapOutput {
	return o
}

func (o TopicPermissionPatchMapOutput) ToTopicPermissionPatchMapOutputWithContext(ctx context.Context) TopicPermissionPatchMapOutput {
	return o
}

func (o TopicPermissionPatchMapOutput) MapIndex(k pulumi.StringInput) TopicPermissionPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicPermissionPatch {
		return vs[0].(map[string]*TopicPermissionPatch)[vs[1].(string)]
	}).(TopicPermissionPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionPatchInput)(nil)).Elem(), &TopicPermissionPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionPatchArrayInput)(nil)).Elem(), TopicPermissionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionPatchMapInput)(nil)).Elem(), TopicPermissionPatchMap{})
	pulumi.RegisterOutputType(TopicPermissionPatchOutput{})
	pulumi.RegisterOutputType(TopicPermissionPatchArrayOutput{})
	pulumi.RegisterOutputType(TopicPermissionPatchMapOutput{})
}
