// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ExchangeList is a list of Exchange
type ExchangeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of exchanges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ExchangeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewExchangeList registers a new resource with the given unique name, arguments, and options.
func NewExchangeList(ctx *pulumi.Context,
	name string, args *ExchangeListArgs, opts ...pulumi.ResourceOption) (*ExchangeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("ExchangeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ExchangeList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:ExchangeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExchangeList gets an existing ExchangeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExchangeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExchangeListState, opts ...pulumi.ResourceOption) (*ExchangeList, error) {
	var resource ExchangeList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:ExchangeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExchangeList resources.
type exchangeListState struct {
}

type ExchangeListState struct {
}

func (ExchangeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeListState)(nil)).Elem()
}

type exchangeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of exchanges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ExchangeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ExchangeList resource.
type ExchangeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of exchanges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ExchangeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ExchangeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeListArgs)(nil)).Elem()
}

type ExchangeListInput interface {
	pulumi.Input

	ToExchangeListOutput() ExchangeListOutput
	ToExchangeListOutputWithContext(ctx context.Context) ExchangeListOutput
}

func (*ExchangeList) ElementType() reflect.Type {
	return reflect.TypeOf((**ExchangeList)(nil)).Elem()
}

func (i *ExchangeList) ToExchangeListOutput() ExchangeListOutput {
	return i.ToExchangeListOutputWithContext(context.Background())
}

func (i *ExchangeList) ToExchangeListOutputWithContext(ctx context.Context) ExchangeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeListOutput)
}

// ExchangeListArrayInput is an input type that accepts ExchangeListArray and ExchangeListArrayOutput values.
// You can construct a concrete instance of `ExchangeListArrayInput` via:
//
//	ExchangeListArray{ ExchangeListArgs{...} }
type ExchangeListArrayInput interface {
	pulumi.Input

	ToExchangeListArrayOutput() ExchangeListArrayOutput
	ToExchangeListArrayOutputWithContext(context.Context) ExchangeListArrayOutput
}

type ExchangeListArray []ExchangeListInput

func (ExchangeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExchangeList)(nil)).Elem()
}

func (i ExchangeListArray) ToExchangeListArrayOutput() ExchangeListArrayOutput {
	return i.ToExchangeListArrayOutputWithContext(context.Background())
}

func (i ExchangeListArray) ToExchangeListArrayOutputWithContext(ctx context.Context) ExchangeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeListArrayOutput)
}

// ExchangeListMapInput is an input type that accepts ExchangeListMap and ExchangeListMapOutput values.
// You can construct a concrete instance of `ExchangeListMapInput` via:
//
//	ExchangeListMap{ "key": ExchangeListArgs{...} }
type ExchangeListMapInput interface {
	pulumi.Input

	ToExchangeListMapOutput() ExchangeListMapOutput
	ToExchangeListMapOutputWithContext(context.Context) ExchangeListMapOutput
}

type ExchangeListMap map[string]ExchangeListInput

func (ExchangeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExchangeList)(nil)).Elem()
}

func (i ExchangeListMap) ToExchangeListMapOutput() ExchangeListMapOutput {
	return i.ToExchangeListMapOutputWithContext(context.Background())
}

func (i ExchangeListMap) ToExchangeListMapOutputWithContext(ctx context.Context) ExchangeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeListMapOutput)
}

type ExchangeListOutput struct{ *pulumi.OutputState }

func (ExchangeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExchangeList)(nil)).Elem()
}

func (o ExchangeListOutput) ToExchangeListOutput() ExchangeListOutput {
	return o
}

func (o ExchangeListOutput) ToExchangeListOutputWithContext(ctx context.Context) ExchangeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ExchangeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ExchangeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of exchanges. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ExchangeListOutput) Items() ExchangeTypeArrayOutput {
	return o.ApplyT(func(v *ExchangeList) ExchangeTypeArrayOutput { return v.Items }).(ExchangeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExchangeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ExchangeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExchangeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ExchangeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ExchangeListArrayOutput struct{ *pulumi.OutputState }

func (ExchangeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExchangeList)(nil)).Elem()
}

func (o ExchangeListArrayOutput) ToExchangeListArrayOutput() ExchangeListArrayOutput {
	return o
}

func (o ExchangeListArrayOutput) ToExchangeListArrayOutputWithContext(ctx context.Context) ExchangeListArrayOutput {
	return o
}

func (o ExchangeListArrayOutput) Index(i pulumi.IntInput) ExchangeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExchangeList {
		return vs[0].([]*ExchangeList)[vs[1].(int)]
	}).(ExchangeListOutput)
}

type ExchangeListMapOutput struct{ *pulumi.OutputState }

func (ExchangeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExchangeList)(nil)).Elem()
}

func (o ExchangeListMapOutput) ToExchangeListMapOutput() ExchangeListMapOutput {
	return o
}

func (o ExchangeListMapOutput) ToExchangeListMapOutputWithContext(ctx context.Context) ExchangeListMapOutput {
	return o
}

func (o ExchangeListMapOutput) MapIndex(k pulumi.StringInput) ExchangeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExchangeList {
		return vs[0].(map[string]*ExchangeList)[vs[1].(string)]
	}).(ExchangeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeListInput)(nil)).Elem(), &ExchangeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeListArrayInput)(nil)).Elem(), ExchangeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeListMapInput)(nil)).Elem(), ExchangeListMap{})
	pulumi.RegisterOutputType(ExchangeListOutput{})
	pulumi.RegisterOutputType(ExchangeListArrayOutput{})
	pulumi.RegisterOutputType(ExchangeListMapOutput{})
}
