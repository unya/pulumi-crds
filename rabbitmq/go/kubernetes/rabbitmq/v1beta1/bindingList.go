// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BindingList is a list of Binding
type BindingList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of bindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BindingTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewBindingList registers a new resource with the given unique name, arguments, and options.
func NewBindingList(ctx *pulumi.Context,
	name string, args *BindingListArgs, opts ...pulumi.ResourceOption) (*BindingList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("BindingList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BindingList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:BindingList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBindingList gets an existing BindingList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBindingList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindingListState, opts ...pulumi.ResourceOption) (*BindingList, error) {
	var resource BindingList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:BindingList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BindingList resources.
type bindingListState struct {
}

type BindingListState struct {
}

func (BindingListState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingListState)(nil)).Elem()
}

type bindingListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of bindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []BindingType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a BindingList resource.
type BindingListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of bindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BindingTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (BindingListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingListArgs)(nil)).Elem()
}

type BindingListInput interface {
	pulumi.Input

	ToBindingListOutput() BindingListOutput
	ToBindingListOutputWithContext(ctx context.Context) BindingListOutput
}

func (*BindingList) ElementType() reflect.Type {
	return reflect.TypeOf((**BindingList)(nil)).Elem()
}

func (i *BindingList) ToBindingListOutput() BindingListOutput {
	return i.ToBindingListOutputWithContext(context.Background())
}

func (i *BindingList) ToBindingListOutputWithContext(ctx context.Context) BindingListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingListOutput)
}

// BindingListArrayInput is an input type that accepts BindingListArray and BindingListArrayOutput values.
// You can construct a concrete instance of `BindingListArrayInput` via:
//
//	BindingListArray{ BindingListArgs{...} }
type BindingListArrayInput interface {
	pulumi.Input

	ToBindingListArrayOutput() BindingListArrayOutput
	ToBindingListArrayOutputWithContext(context.Context) BindingListArrayOutput
}

type BindingListArray []BindingListInput

func (BindingListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindingList)(nil)).Elem()
}

func (i BindingListArray) ToBindingListArrayOutput() BindingListArrayOutput {
	return i.ToBindingListArrayOutputWithContext(context.Background())
}

func (i BindingListArray) ToBindingListArrayOutputWithContext(ctx context.Context) BindingListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingListArrayOutput)
}

// BindingListMapInput is an input type that accepts BindingListMap and BindingListMapOutput values.
// You can construct a concrete instance of `BindingListMapInput` via:
//
//	BindingListMap{ "key": BindingListArgs{...} }
type BindingListMapInput interface {
	pulumi.Input

	ToBindingListMapOutput() BindingListMapOutput
	ToBindingListMapOutputWithContext(context.Context) BindingListMapOutput
}

type BindingListMap map[string]BindingListInput

func (BindingListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindingList)(nil)).Elem()
}

func (i BindingListMap) ToBindingListMapOutput() BindingListMapOutput {
	return i.ToBindingListMapOutputWithContext(context.Background())
}

func (i BindingListMap) ToBindingListMapOutputWithContext(ctx context.Context) BindingListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingListMapOutput)
}

type BindingListOutput struct{ *pulumi.OutputState }

func (BindingListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindingList)(nil)).Elem()
}

func (o BindingListOutput) ToBindingListOutput() BindingListOutput {
	return o
}

func (o BindingListOutput) ToBindingListOutputWithContext(ctx context.Context) BindingListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BindingListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BindingList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of bindings. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o BindingListOutput) Items() BindingTypeArrayOutput {
	return o.ApplyT(func(v *BindingList) BindingTypeArrayOutput { return v.Items }).(BindingTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BindingListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BindingList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BindingListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *BindingList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type BindingListArrayOutput struct{ *pulumi.OutputState }

func (BindingListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindingList)(nil)).Elem()
}

func (o BindingListArrayOutput) ToBindingListArrayOutput() BindingListArrayOutput {
	return o
}

func (o BindingListArrayOutput) ToBindingListArrayOutputWithContext(ctx context.Context) BindingListArrayOutput {
	return o
}

func (o BindingListArrayOutput) Index(i pulumi.IntInput) BindingListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BindingList {
		return vs[0].([]*BindingList)[vs[1].(int)]
	}).(BindingListOutput)
}

type BindingListMapOutput struct{ *pulumi.OutputState }

func (BindingListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindingList)(nil)).Elem()
}

func (o BindingListMapOutput) ToBindingListMapOutput() BindingListMapOutput {
	return o
}

func (o BindingListMapOutput) ToBindingListMapOutputWithContext(ctx context.Context) BindingListMapOutput {
	return o
}

func (o BindingListMapOutput) MapIndex(k pulumi.StringInput) BindingListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BindingList {
		return vs[0].(map[string]*BindingList)[vs[1].(string)]
	}).(BindingListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingListInput)(nil)).Elem(), &BindingList{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingListArrayInput)(nil)).Elem(), BindingListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingListMapInput)(nil)).Elem(), BindingListMap{})
	pulumi.RegisterOutputType(BindingListOutput{})
	pulumi.RegisterOutputType(BindingListArrayOutput{})
	pulumi.RegisterOutputType(BindingListMapOutput{})
}
