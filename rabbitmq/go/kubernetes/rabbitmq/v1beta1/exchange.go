// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Exchange is the Schema for the exchanges API
type Exchange struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     ExchangeSpecOutput      `pulumi:"spec"`
	Status   ExchangeStatusPtrOutput `pulumi:"status"`
}

// NewExchange registers a new resource with the given unique name, arguments, and options.
func NewExchange(ctx *pulumi.Context,
	name string, args *ExchangeArgs, opts ...pulumi.ResourceOption) (*Exchange, error) {
	if args == nil {
		args = &ExchangeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Exchange")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Exchange
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:Exchange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExchange gets an existing Exchange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExchange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExchangeState, opts ...pulumi.ResourceOption) (*Exchange, error) {
	var resource Exchange
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:Exchange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Exchange resources.
type exchangeState struct {
}

type ExchangeState struct {
}

func (ExchangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeState)(nil)).Elem()
}

type exchangeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ExchangeSpec      `pulumi:"spec"`
}

// The set of arguments for constructing a Exchange resource.
type ExchangeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ExchangeSpecPtrInput
}

func (ExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeArgs)(nil)).Elem()
}

type ExchangeInput interface {
	pulumi.Input

	ToExchangeOutput() ExchangeOutput
	ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput
}

func (*Exchange) ElementType() reflect.Type {
	return reflect.TypeOf((**Exchange)(nil)).Elem()
}

func (i *Exchange) ToExchangeOutput() ExchangeOutput {
	return i.ToExchangeOutputWithContext(context.Background())
}

func (i *Exchange) ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeOutput)
}

// ExchangeArrayInput is an input type that accepts ExchangeArray and ExchangeArrayOutput values.
// You can construct a concrete instance of `ExchangeArrayInput` via:
//
//	ExchangeArray{ ExchangeArgs{...} }
type ExchangeArrayInput interface {
	pulumi.Input

	ToExchangeArrayOutput() ExchangeArrayOutput
	ToExchangeArrayOutputWithContext(context.Context) ExchangeArrayOutput
}

type ExchangeArray []ExchangeInput

func (ExchangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Exchange)(nil)).Elem()
}

func (i ExchangeArray) ToExchangeArrayOutput() ExchangeArrayOutput {
	return i.ToExchangeArrayOutputWithContext(context.Background())
}

func (i ExchangeArray) ToExchangeArrayOutputWithContext(ctx context.Context) ExchangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeArrayOutput)
}

// ExchangeMapInput is an input type that accepts ExchangeMap and ExchangeMapOutput values.
// You can construct a concrete instance of `ExchangeMapInput` via:
//
//	ExchangeMap{ "key": ExchangeArgs{...} }
type ExchangeMapInput interface {
	pulumi.Input

	ToExchangeMapOutput() ExchangeMapOutput
	ToExchangeMapOutputWithContext(context.Context) ExchangeMapOutput
}

type ExchangeMap map[string]ExchangeInput

func (ExchangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Exchange)(nil)).Elem()
}

func (i ExchangeMap) ToExchangeMapOutput() ExchangeMapOutput {
	return i.ToExchangeMapOutputWithContext(context.Background())
}

func (i ExchangeMap) ToExchangeMapOutputWithContext(ctx context.Context) ExchangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeMapOutput)
}

type ExchangeOutput struct{ *pulumi.OutputState }

func (ExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Exchange)(nil)).Elem()
}

func (o ExchangeOutput) ToExchangeOutput() ExchangeOutput {
	return o
}

func (o ExchangeOutput) ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ExchangeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExchangeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Exchange) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ExchangeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Exchange) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ExchangeOutput) Spec() ExchangeSpecOutput {
	return o.ApplyT(func(v *Exchange) ExchangeSpecOutput { return v.Spec }).(ExchangeSpecOutput)
}

func (o ExchangeOutput) Status() ExchangeStatusPtrOutput {
	return o.ApplyT(func(v *Exchange) ExchangeStatusPtrOutput { return v.Status }).(ExchangeStatusPtrOutput)
}

type ExchangeArrayOutput struct{ *pulumi.OutputState }

func (ExchangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Exchange)(nil)).Elem()
}

func (o ExchangeArrayOutput) ToExchangeArrayOutput() ExchangeArrayOutput {
	return o
}

func (o ExchangeArrayOutput) ToExchangeArrayOutputWithContext(ctx context.Context) ExchangeArrayOutput {
	return o
}

func (o ExchangeArrayOutput) Index(i pulumi.IntInput) ExchangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Exchange {
		return vs[0].([]*Exchange)[vs[1].(int)]
	}).(ExchangeOutput)
}

type ExchangeMapOutput struct{ *pulumi.OutputState }

func (ExchangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Exchange)(nil)).Elem()
}

func (o ExchangeMapOutput) ToExchangeMapOutput() ExchangeMapOutput {
	return o
}

func (o ExchangeMapOutput) ToExchangeMapOutputWithContext(ctx context.Context) ExchangeMapOutput {
	return o
}

func (o ExchangeMapOutput) MapIndex(k pulumi.StringInput) ExchangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Exchange {
		return vs[0].(map[string]*Exchange)[vs[1].(string)]
	}).(ExchangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeInput)(nil)).Elem(), &Exchange{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeArrayInput)(nil)).Elem(), ExchangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeMapInput)(nil)).Elem(), ExchangeMap{})
	pulumi.RegisterOutputType(ExchangeOutput{})
	pulumi.RegisterOutputType(ExchangeArrayOutput{})
	pulumi.RegisterOutputType(ExchangeMapOutput{})
}
