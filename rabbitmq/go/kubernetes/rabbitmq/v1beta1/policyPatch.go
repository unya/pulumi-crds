// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Policy is the Schema for the policies API
type PolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PolicySpecPatchPtrOutput        `pulumi:"spec"`
	Status   PolicyStatusPatchPtrOutput      `pulumi:"status"`
}

// NewPolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewPolicyPatch(ctx *pulumi.Context,
	name string, args *PolicyPatchArgs, opts ...pulumi.ResourceOption) (*PolicyPatch, error) {
	if args == nil {
		args = &PolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Policy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PolicyPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:PolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyPatch gets an existing PolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyPatchState, opts ...pulumi.ResourceOption) (*PolicyPatch, error) {
	var resource PolicyPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:PolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyPatch resources.
type policyPatchState struct {
}

type PolicyPatchState struct {
}

func (PolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyPatchState)(nil)).Elem()
}

type policyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PolicySpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a PolicyPatch resource.
type PolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PolicySpecPatchPtrInput
}

func (PolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyPatchArgs)(nil)).Elem()
}

type PolicyPatchInput interface {
	pulumi.Input

	ToPolicyPatchOutput() PolicyPatchOutput
	ToPolicyPatchOutputWithContext(ctx context.Context) PolicyPatchOutput
}

func (*PolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyPatch)(nil)).Elem()
}

func (i *PolicyPatch) ToPolicyPatchOutput() PolicyPatchOutput {
	return i.ToPolicyPatchOutputWithContext(context.Background())
}

func (i *PolicyPatch) ToPolicyPatchOutputWithContext(ctx context.Context) PolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPatchOutput)
}

// PolicyPatchArrayInput is an input type that accepts PolicyPatchArray and PolicyPatchArrayOutput values.
// You can construct a concrete instance of `PolicyPatchArrayInput` via:
//
//	PolicyPatchArray{ PolicyPatchArgs{...} }
type PolicyPatchArrayInput interface {
	pulumi.Input

	ToPolicyPatchArrayOutput() PolicyPatchArrayOutput
	ToPolicyPatchArrayOutputWithContext(context.Context) PolicyPatchArrayOutput
}

type PolicyPatchArray []PolicyPatchInput

func (PolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyPatch)(nil)).Elem()
}

func (i PolicyPatchArray) ToPolicyPatchArrayOutput() PolicyPatchArrayOutput {
	return i.ToPolicyPatchArrayOutputWithContext(context.Background())
}

func (i PolicyPatchArray) ToPolicyPatchArrayOutputWithContext(ctx context.Context) PolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPatchArrayOutput)
}

// PolicyPatchMapInput is an input type that accepts PolicyPatchMap and PolicyPatchMapOutput values.
// You can construct a concrete instance of `PolicyPatchMapInput` via:
//
//	PolicyPatchMap{ "key": PolicyPatchArgs{...} }
type PolicyPatchMapInput interface {
	pulumi.Input

	ToPolicyPatchMapOutput() PolicyPatchMapOutput
	ToPolicyPatchMapOutputWithContext(context.Context) PolicyPatchMapOutput
}

type PolicyPatchMap map[string]PolicyPatchInput

func (PolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyPatch)(nil)).Elem()
}

func (i PolicyPatchMap) ToPolicyPatchMapOutput() PolicyPatchMapOutput {
	return i.ToPolicyPatchMapOutputWithContext(context.Background())
}

func (i PolicyPatchMap) ToPolicyPatchMapOutputWithContext(ctx context.Context) PolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPatchMapOutput)
}

type PolicyPatchOutput struct{ *pulumi.OutputState }

func (PolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyPatch)(nil)).Elem()
}

func (o PolicyPatchOutput) ToPolicyPatchOutput() PolicyPatchOutput {
	return o
}

func (o PolicyPatchOutput) ToPolicyPatchOutputWithContext(ctx context.Context) PolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PolicyPatchOutput) Spec() PolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *PolicyPatch) PolicySpecPatchPtrOutput { return v.Spec }).(PolicySpecPatchPtrOutput)
}

func (o PolicyPatchOutput) Status() PolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v *PolicyPatch) PolicyStatusPatchPtrOutput { return v.Status }).(PolicyStatusPatchPtrOutput)
}

type PolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (PolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyPatch)(nil)).Elem()
}

func (o PolicyPatchArrayOutput) ToPolicyPatchArrayOutput() PolicyPatchArrayOutput {
	return o
}

func (o PolicyPatchArrayOutput) ToPolicyPatchArrayOutputWithContext(ctx context.Context) PolicyPatchArrayOutput {
	return o
}

func (o PolicyPatchArrayOutput) Index(i pulumi.IntInput) PolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyPatch {
		return vs[0].([]*PolicyPatch)[vs[1].(int)]
	}).(PolicyPatchOutput)
}

type PolicyPatchMapOutput struct{ *pulumi.OutputState }

func (PolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyPatch)(nil)).Elem()
}

func (o PolicyPatchMapOutput) ToPolicyPatchMapOutput() PolicyPatchMapOutput {
	return o
}

func (o PolicyPatchMapOutput) ToPolicyPatchMapOutputWithContext(ctx context.Context) PolicyPatchMapOutput {
	return o
}

func (o PolicyPatchMapOutput) MapIndex(k pulumi.StringInput) PolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyPatch {
		return vs[0].(map[string]*PolicyPatch)[vs[1].(string)]
	}).(PolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPatchInput)(nil)).Elem(), &PolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPatchArrayInput)(nil)).Elem(), PolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPatchMapInput)(nil)).Elem(), PolicyPatchMap{})
	pulumi.RegisterOutputType(PolicyPatchOutput{})
	pulumi.RegisterOutputType(PolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(PolicyPatchMapOutput{})
}
