// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object
// corresponds to a single RabbitMQ cluster.
type RabbitmqCluster struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput        `pulumi:"metadata"`
	Spec     RabbitmqClusterSpecOutput      `pulumi:"spec"`
	Status   RabbitmqClusterStatusPtrOutput `pulumi:"status"`
}

// NewRabbitmqCluster registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqCluster(ctx *pulumi.Context,
	name string, args *RabbitmqClusterArgs, opts ...pulumi.ResourceOption) (*RabbitmqCluster, error) {
	if args == nil {
		args = &RabbitmqClusterArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("RabbitmqCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RabbitmqCluster
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:RabbitmqCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqCluster gets an existing RabbitmqCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqClusterState, opts ...pulumi.ResourceOption) (*RabbitmqCluster, error) {
	var resource RabbitmqCluster
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:RabbitmqCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqCluster resources.
type rabbitmqClusterState struct {
}

type RabbitmqClusterState struct {
}

func (RabbitmqClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqClusterState)(nil)).Elem()
}

type rabbitmqClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *RabbitmqClusterSpec `pulumi:"spec"`
}

// The set of arguments for constructing a RabbitmqCluster resource.
type RabbitmqClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     RabbitmqClusterSpecPtrInput
}

func (RabbitmqClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqClusterArgs)(nil)).Elem()
}

type RabbitmqClusterInput interface {
	pulumi.Input

	ToRabbitmqClusterOutput() RabbitmqClusterOutput
	ToRabbitmqClusterOutputWithContext(ctx context.Context) RabbitmqClusterOutput
}

func (*RabbitmqCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqCluster)(nil)).Elem()
}

func (i *RabbitmqCluster) ToRabbitmqClusterOutput() RabbitmqClusterOutput {
	return i.ToRabbitmqClusterOutputWithContext(context.Background())
}

func (i *RabbitmqCluster) ToRabbitmqClusterOutputWithContext(ctx context.Context) RabbitmqClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterOutput)
}

// RabbitmqClusterArrayInput is an input type that accepts RabbitmqClusterArray and RabbitmqClusterArrayOutput values.
// You can construct a concrete instance of `RabbitmqClusterArrayInput` via:
//
//	RabbitmqClusterArray{ RabbitmqClusterArgs{...} }
type RabbitmqClusterArrayInput interface {
	pulumi.Input

	ToRabbitmqClusterArrayOutput() RabbitmqClusterArrayOutput
	ToRabbitmqClusterArrayOutputWithContext(context.Context) RabbitmqClusterArrayOutput
}

type RabbitmqClusterArray []RabbitmqClusterInput

func (RabbitmqClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqCluster)(nil)).Elem()
}

func (i RabbitmqClusterArray) ToRabbitmqClusterArrayOutput() RabbitmqClusterArrayOutput {
	return i.ToRabbitmqClusterArrayOutputWithContext(context.Background())
}

func (i RabbitmqClusterArray) ToRabbitmqClusterArrayOutputWithContext(ctx context.Context) RabbitmqClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterArrayOutput)
}

// RabbitmqClusterMapInput is an input type that accepts RabbitmqClusterMap and RabbitmqClusterMapOutput values.
// You can construct a concrete instance of `RabbitmqClusterMapInput` via:
//
//	RabbitmqClusterMap{ "key": RabbitmqClusterArgs{...} }
type RabbitmqClusterMapInput interface {
	pulumi.Input

	ToRabbitmqClusterMapOutput() RabbitmqClusterMapOutput
	ToRabbitmqClusterMapOutputWithContext(context.Context) RabbitmqClusterMapOutput
}

type RabbitmqClusterMap map[string]RabbitmqClusterInput

func (RabbitmqClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqCluster)(nil)).Elem()
}

func (i RabbitmqClusterMap) ToRabbitmqClusterMapOutput() RabbitmqClusterMapOutput {
	return i.ToRabbitmqClusterMapOutputWithContext(context.Background())
}

func (i RabbitmqClusterMap) ToRabbitmqClusterMapOutputWithContext(ctx context.Context) RabbitmqClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterMapOutput)
}

type RabbitmqClusterOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqCluster)(nil)).Elem()
}

func (o RabbitmqClusterOutput) ToRabbitmqClusterOutput() RabbitmqClusterOutput {
	return o
}

func (o RabbitmqClusterOutput) ToRabbitmqClusterOutputWithContext(ctx context.Context) RabbitmqClusterOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RabbitmqClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RabbitmqClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o RabbitmqClusterOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *RabbitmqCluster) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o RabbitmqClusterOutput) Spec() RabbitmqClusterSpecOutput {
	return o.ApplyT(func(v *RabbitmqCluster) RabbitmqClusterSpecOutput { return v.Spec }).(RabbitmqClusterSpecOutput)
}

func (o RabbitmqClusterOutput) Status() RabbitmqClusterStatusPtrOutput {
	return o.ApplyT(func(v *RabbitmqCluster) RabbitmqClusterStatusPtrOutput { return v.Status }).(RabbitmqClusterStatusPtrOutput)
}

type RabbitmqClusterArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqCluster)(nil)).Elem()
}

func (o RabbitmqClusterArrayOutput) ToRabbitmqClusterArrayOutput() RabbitmqClusterArrayOutput {
	return o
}

func (o RabbitmqClusterArrayOutput) ToRabbitmqClusterArrayOutputWithContext(ctx context.Context) RabbitmqClusterArrayOutput {
	return o
}

func (o RabbitmqClusterArrayOutput) Index(i pulumi.IntInput) RabbitmqClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqCluster {
		return vs[0].([]*RabbitmqCluster)[vs[1].(int)]
	}).(RabbitmqClusterOutput)
}

type RabbitmqClusterMapOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqCluster)(nil)).Elem()
}

func (o RabbitmqClusterMapOutput) ToRabbitmqClusterMapOutput() RabbitmqClusterMapOutput {
	return o
}

func (o RabbitmqClusterMapOutput) ToRabbitmqClusterMapOutputWithContext(ctx context.Context) RabbitmqClusterMapOutput {
	return o
}

func (o RabbitmqClusterMapOutput) MapIndex(k pulumi.StringInput) RabbitmqClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqCluster {
		return vs[0].(map[string]*RabbitmqCluster)[vs[1].(string)]
	}).(RabbitmqClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterInput)(nil)).Elem(), &RabbitmqCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterArrayInput)(nil)).Elem(), RabbitmqClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterMapInput)(nil)).Elem(), RabbitmqClusterMap{})
	pulumi.RegisterOutputType(RabbitmqClusterOutput{})
	pulumi.RegisterOutputType(RabbitmqClusterArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqClusterMapOutput{})
}
