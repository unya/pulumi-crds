// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// FederationList is a list of Federation
type FederationList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of federations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FederationTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewFederationList registers a new resource with the given unique name, arguments, and options.
func NewFederationList(ctx *pulumi.Context,
	name string, args *FederationListArgs, opts ...pulumi.ResourceOption) (*FederationList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("FederationList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FederationList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:FederationList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederationList gets an existing FederationList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederationList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederationListState, opts ...pulumi.ResourceOption) (*FederationList, error) {
	var resource FederationList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:FederationList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederationList resources.
type federationListState struct {
}

type FederationListState struct {
}

func (FederationListState) ElementType() reflect.Type {
	return reflect.TypeOf((*federationListState)(nil)).Elem()
}

type federationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of federations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []FederationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a FederationList resource.
type FederationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of federations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items FederationTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (FederationListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federationListArgs)(nil)).Elem()
}

type FederationListInput interface {
	pulumi.Input

	ToFederationListOutput() FederationListOutput
	ToFederationListOutputWithContext(ctx context.Context) FederationListOutput
}

func (*FederationList) ElementType() reflect.Type {
	return reflect.TypeOf((**FederationList)(nil)).Elem()
}

func (i *FederationList) ToFederationListOutput() FederationListOutput {
	return i.ToFederationListOutputWithContext(context.Background())
}

func (i *FederationList) ToFederationListOutputWithContext(ctx context.Context) FederationListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationListOutput)
}

// FederationListArrayInput is an input type that accepts FederationListArray and FederationListArrayOutput values.
// You can construct a concrete instance of `FederationListArrayInput` via:
//
//	FederationListArray{ FederationListArgs{...} }
type FederationListArrayInput interface {
	pulumi.Input

	ToFederationListArrayOutput() FederationListArrayOutput
	ToFederationListArrayOutputWithContext(context.Context) FederationListArrayOutput
}

type FederationListArray []FederationListInput

func (FederationListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederationList)(nil)).Elem()
}

func (i FederationListArray) ToFederationListArrayOutput() FederationListArrayOutput {
	return i.ToFederationListArrayOutputWithContext(context.Background())
}

func (i FederationListArray) ToFederationListArrayOutputWithContext(ctx context.Context) FederationListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationListArrayOutput)
}

// FederationListMapInput is an input type that accepts FederationListMap and FederationListMapOutput values.
// You can construct a concrete instance of `FederationListMapInput` via:
//
//	FederationListMap{ "key": FederationListArgs{...} }
type FederationListMapInput interface {
	pulumi.Input

	ToFederationListMapOutput() FederationListMapOutput
	ToFederationListMapOutputWithContext(context.Context) FederationListMapOutput
}

type FederationListMap map[string]FederationListInput

func (FederationListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederationList)(nil)).Elem()
}

func (i FederationListMap) ToFederationListMapOutput() FederationListMapOutput {
	return i.ToFederationListMapOutputWithContext(context.Background())
}

func (i FederationListMap) ToFederationListMapOutputWithContext(ctx context.Context) FederationListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationListMapOutput)
}

type FederationListOutput struct{ *pulumi.OutputState }

func (FederationListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederationList)(nil)).Elem()
}

func (o FederationListOutput) ToFederationListOutput() FederationListOutput {
	return o
}

func (o FederationListOutput) ToFederationListOutputWithContext(ctx context.Context) FederationListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FederationListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FederationList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of federations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o FederationListOutput) Items() FederationTypeArrayOutput {
	return o.ApplyT(func(v *FederationList) FederationTypeArrayOutput { return v.Items }).(FederationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FederationListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *FederationList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FederationListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *FederationList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type FederationListArrayOutput struct{ *pulumi.OutputState }

func (FederationListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederationList)(nil)).Elem()
}

func (o FederationListArrayOutput) ToFederationListArrayOutput() FederationListArrayOutput {
	return o
}

func (o FederationListArrayOutput) ToFederationListArrayOutputWithContext(ctx context.Context) FederationListArrayOutput {
	return o
}

func (o FederationListArrayOutput) Index(i pulumi.IntInput) FederationListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederationList {
		return vs[0].([]*FederationList)[vs[1].(int)]
	}).(FederationListOutput)
}

type FederationListMapOutput struct{ *pulumi.OutputState }

func (FederationListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederationList)(nil)).Elem()
}

func (o FederationListMapOutput) ToFederationListMapOutput() FederationListMapOutput {
	return o
}

func (o FederationListMapOutput) ToFederationListMapOutputWithContext(ctx context.Context) FederationListMapOutput {
	return o
}

func (o FederationListMapOutput) MapIndex(k pulumi.StringInput) FederationListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederationList {
		return vs[0].(map[string]*FederationList)[vs[1].(string)]
	}).(FederationListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederationListInput)(nil)).Elem(), &FederationList{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationListArrayInput)(nil)).Elem(), FederationListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationListMapInput)(nil)).Elem(), FederationListMap{})
	pulumi.RegisterOutputType(FederationListOutput{})
	pulumi.RegisterOutputType(FederationListArrayOutput{})
	pulumi.RegisterOutputType(FederationListMapOutput{})
}
