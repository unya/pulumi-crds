// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// QueueList is a list of Queue
type QueueList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of queues. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items QueueTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewQueueList registers a new resource with the given unique name, arguments, and options.
func NewQueueList(ctx *pulumi.Context,
	name string, args *QueueListArgs, opts ...pulumi.ResourceOption) (*QueueList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("QueueList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource QueueList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:QueueList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueList gets an existing QueueList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueListState, opts ...pulumi.ResourceOption) (*QueueList, error) {
	var resource QueueList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:QueueList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueList resources.
type queueListState struct {
}

type QueueListState struct {
}

func (QueueListState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueListState)(nil)).Elem()
}

type queueListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of queues. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []QueueType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a QueueList resource.
type QueueListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of queues. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items QueueTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (QueueListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueListArgs)(nil)).Elem()
}

type QueueListInput interface {
	pulumi.Input

	ToQueueListOutput() QueueListOutput
	ToQueueListOutputWithContext(ctx context.Context) QueueListOutput
}

func (*QueueList) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueList)(nil)).Elem()
}

func (i *QueueList) ToQueueListOutput() QueueListOutput {
	return i.ToQueueListOutputWithContext(context.Background())
}

func (i *QueueList) ToQueueListOutputWithContext(ctx context.Context) QueueListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueListOutput)
}

// QueueListArrayInput is an input type that accepts QueueListArray and QueueListArrayOutput values.
// You can construct a concrete instance of `QueueListArrayInput` via:
//
//	QueueListArray{ QueueListArgs{...} }
type QueueListArrayInput interface {
	pulumi.Input

	ToQueueListArrayOutput() QueueListArrayOutput
	ToQueueListArrayOutputWithContext(context.Context) QueueListArrayOutput
}

type QueueListArray []QueueListInput

func (QueueListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueList)(nil)).Elem()
}

func (i QueueListArray) ToQueueListArrayOutput() QueueListArrayOutput {
	return i.ToQueueListArrayOutputWithContext(context.Background())
}

func (i QueueListArray) ToQueueListArrayOutputWithContext(ctx context.Context) QueueListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueListArrayOutput)
}

// QueueListMapInput is an input type that accepts QueueListMap and QueueListMapOutput values.
// You can construct a concrete instance of `QueueListMapInput` via:
//
//	QueueListMap{ "key": QueueListArgs{...} }
type QueueListMapInput interface {
	pulumi.Input

	ToQueueListMapOutput() QueueListMapOutput
	ToQueueListMapOutputWithContext(context.Context) QueueListMapOutput
}

type QueueListMap map[string]QueueListInput

func (QueueListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueList)(nil)).Elem()
}

func (i QueueListMap) ToQueueListMapOutput() QueueListMapOutput {
	return i.ToQueueListMapOutputWithContext(context.Background())
}

func (i QueueListMap) ToQueueListMapOutputWithContext(ctx context.Context) QueueListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueListMapOutput)
}

type QueueListOutput struct{ *pulumi.OutputState }

func (QueueListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueList)(nil)).Elem()
}

func (o QueueListOutput) ToQueueListOutput() QueueListOutput {
	return o
}

func (o QueueListOutput) ToQueueListOutputWithContext(ctx context.Context) QueueListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o QueueListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of queues. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o QueueListOutput) Items() QueueTypeArrayOutput {
	return o.ApplyT(func(v *QueueList) QueueTypeArrayOutput { return v.Items }).(QueueTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o QueueListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o QueueListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *QueueList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type QueueListArrayOutput struct{ *pulumi.OutputState }

func (QueueListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueList)(nil)).Elem()
}

func (o QueueListArrayOutput) ToQueueListArrayOutput() QueueListArrayOutput {
	return o
}

func (o QueueListArrayOutput) ToQueueListArrayOutputWithContext(ctx context.Context) QueueListArrayOutput {
	return o
}

func (o QueueListArrayOutput) Index(i pulumi.IntInput) QueueListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueueList {
		return vs[0].([]*QueueList)[vs[1].(int)]
	}).(QueueListOutput)
}

type QueueListMapOutput struct{ *pulumi.OutputState }

func (QueueListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueList)(nil)).Elem()
}

func (o QueueListMapOutput) ToQueueListMapOutput() QueueListMapOutput {
	return o
}

func (o QueueListMapOutput) ToQueueListMapOutputWithContext(ctx context.Context) QueueListMapOutput {
	return o
}

func (o QueueListMapOutput) MapIndex(k pulumi.StringInput) QueueListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueueList {
		return vs[0].(map[string]*QueueList)[vs[1].(string)]
	}).(QueueListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueListInput)(nil)).Elem(), &QueueList{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueListArrayInput)(nil)).Elem(), QueueListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueListMapInput)(nil)).Elem(), QueueListMap{})
	pulumi.RegisterOutputType(QueueListOutput{})
	pulumi.RegisterOutputType(QueueListArrayOutput{})
	pulumi.RegisterOutputType(QueueListMapOutput{})
}
