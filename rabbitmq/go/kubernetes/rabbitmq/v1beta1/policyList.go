// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PolicyList is a list of Policy
type PolicyList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of policies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PolicyTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPolicyList registers a new resource with the given unique name, arguments, and options.
func NewPolicyList(ctx *pulumi.Context,
	name string, args *PolicyListArgs, opts ...pulumi.ResourceOption) (*PolicyList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("PolicyList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PolicyList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:PolicyList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyList gets an existing PolicyList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyListState, opts ...pulumi.ResourceOption) (*PolicyList, error) {
	var resource PolicyList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:PolicyList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyList resources.
type policyListState struct {
}

type PolicyListState struct {
}

func (PolicyListState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyListState)(nil)).Elem()
}

type policyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of policies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PolicyList resource.
type PolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of policies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PolicyTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PolicyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyListArgs)(nil)).Elem()
}

type PolicyListInput interface {
	pulumi.Input

	ToPolicyListOutput() PolicyListOutput
	ToPolicyListOutputWithContext(ctx context.Context) PolicyListOutput
}

func (*PolicyList) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyList)(nil)).Elem()
}

func (i *PolicyList) ToPolicyListOutput() PolicyListOutput {
	return i.ToPolicyListOutputWithContext(context.Background())
}

func (i *PolicyList) ToPolicyListOutputWithContext(ctx context.Context) PolicyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyListOutput)
}

// PolicyListArrayInput is an input type that accepts PolicyListArray and PolicyListArrayOutput values.
// You can construct a concrete instance of `PolicyListArrayInput` via:
//
//	PolicyListArray{ PolicyListArgs{...} }
type PolicyListArrayInput interface {
	pulumi.Input

	ToPolicyListArrayOutput() PolicyListArrayOutput
	ToPolicyListArrayOutputWithContext(context.Context) PolicyListArrayOutput
}

type PolicyListArray []PolicyListInput

func (PolicyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyList)(nil)).Elem()
}

func (i PolicyListArray) ToPolicyListArrayOutput() PolicyListArrayOutput {
	return i.ToPolicyListArrayOutputWithContext(context.Background())
}

func (i PolicyListArray) ToPolicyListArrayOutputWithContext(ctx context.Context) PolicyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyListArrayOutput)
}

// PolicyListMapInput is an input type that accepts PolicyListMap and PolicyListMapOutput values.
// You can construct a concrete instance of `PolicyListMapInput` via:
//
//	PolicyListMap{ "key": PolicyListArgs{...} }
type PolicyListMapInput interface {
	pulumi.Input

	ToPolicyListMapOutput() PolicyListMapOutput
	ToPolicyListMapOutputWithContext(context.Context) PolicyListMapOutput
}

type PolicyListMap map[string]PolicyListInput

func (PolicyListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyList)(nil)).Elem()
}

func (i PolicyListMap) ToPolicyListMapOutput() PolicyListMapOutput {
	return i.ToPolicyListMapOutputWithContext(context.Background())
}

func (i PolicyListMap) ToPolicyListMapOutputWithContext(ctx context.Context) PolicyListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyListMapOutput)
}

type PolicyListOutput struct{ *pulumi.OutputState }

func (PolicyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyList)(nil)).Elem()
}

func (o PolicyListOutput) ToPolicyListOutput() PolicyListOutput {
	return o
}

func (o PolicyListOutput) ToPolicyListOutputWithContext(ctx context.Context) PolicyListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PolicyListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of policies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PolicyListOutput) Items() PolicyTypeArrayOutput {
	return o.ApplyT(func(v *PolicyList) PolicyTypeArrayOutput { return v.Items }).(PolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PolicyListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PolicyListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PolicyList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PolicyListArrayOutput struct{ *pulumi.OutputState }

func (PolicyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyList)(nil)).Elem()
}

func (o PolicyListArrayOutput) ToPolicyListArrayOutput() PolicyListArrayOutput {
	return o
}

func (o PolicyListArrayOutput) ToPolicyListArrayOutputWithContext(ctx context.Context) PolicyListArrayOutput {
	return o
}

func (o PolicyListArrayOutput) Index(i pulumi.IntInput) PolicyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyList {
		return vs[0].([]*PolicyList)[vs[1].(int)]
	}).(PolicyListOutput)
}

type PolicyListMapOutput struct{ *pulumi.OutputState }

func (PolicyListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyList)(nil)).Elem()
}

func (o PolicyListMapOutput) ToPolicyListMapOutput() PolicyListMapOutput {
	return o
}

func (o PolicyListMapOutput) ToPolicyListMapOutputWithContext(ctx context.Context) PolicyListMapOutput {
	return o
}

func (o PolicyListMapOutput) MapIndex(k pulumi.StringInput) PolicyListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyList {
		return vs[0].(map[string]*PolicyList)[vs[1].(string)]
	}).(PolicyListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyListInput)(nil)).Elem(), &PolicyList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyListArrayInput)(nil)).Elem(), PolicyListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyListMapInput)(nil)).Elem(), PolicyListMap{})
	pulumi.RegisterOutputType(PolicyListOutput{})
	pulumi.RegisterOutputType(PolicyListArrayOutput{})
	pulumi.RegisterOutputType(PolicyListMapOutput{})
}
