// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Permission is the Schema for the permissions API
type PermissionPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PermissionSpecPatchPtrOutput    `pulumi:"spec"`
	Status   PermissionStatusPatchPtrOutput  `pulumi:"status"`
}

// NewPermissionPatch registers a new resource with the given unique name, arguments, and options.
func NewPermissionPatch(ctx *pulumi.Context,
	name string, args *PermissionPatchArgs, opts ...pulumi.ResourceOption) (*PermissionPatch, error) {
	if args == nil {
		args = &PermissionPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Permission")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PermissionPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:PermissionPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionPatch gets an existing PermissionPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionPatchState, opts ...pulumi.ResourceOption) (*PermissionPatch, error) {
	var resource PermissionPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:PermissionPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionPatch resources.
type permissionPatchState struct {
}

type PermissionPatchState struct {
}

func (PermissionPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionPatchState)(nil)).Elem()
}

type permissionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PermissionSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a PermissionPatch resource.
type PermissionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PermissionSpecPatchPtrInput
}

func (PermissionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionPatchArgs)(nil)).Elem()
}

type PermissionPatchInput interface {
	pulumi.Input

	ToPermissionPatchOutput() PermissionPatchOutput
	ToPermissionPatchOutputWithContext(ctx context.Context) PermissionPatchOutput
}

func (*PermissionPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionPatch)(nil)).Elem()
}

func (i *PermissionPatch) ToPermissionPatchOutput() PermissionPatchOutput {
	return i.ToPermissionPatchOutputWithContext(context.Background())
}

func (i *PermissionPatch) ToPermissionPatchOutputWithContext(ctx context.Context) PermissionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionPatchOutput)
}

// PermissionPatchArrayInput is an input type that accepts PermissionPatchArray and PermissionPatchArrayOutput values.
// You can construct a concrete instance of `PermissionPatchArrayInput` via:
//
//	PermissionPatchArray{ PermissionPatchArgs{...} }
type PermissionPatchArrayInput interface {
	pulumi.Input

	ToPermissionPatchArrayOutput() PermissionPatchArrayOutput
	ToPermissionPatchArrayOutputWithContext(context.Context) PermissionPatchArrayOutput
}

type PermissionPatchArray []PermissionPatchInput

func (PermissionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionPatch)(nil)).Elem()
}

func (i PermissionPatchArray) ToPermissionPatchArrayOutput() PermissionPatchArrayOutput {
	return i.ToPermissionPatchArrayOutputWithContext(context.Background())
}

func (i PermissionPatchArray) ToPermissionPatchArrayOutputWithContext(ctx context.Context) PermissionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionPatchArrayOutput)
}

// PermissionPatchMapInput is an input type that accepts PermissionPatchMap and PermissionPatchMapOutput values.
// You can construct a concrete instance of `PermissionPatchMapInput` via:
//
//	PermissionPatchMap{ "key": PermissionPatchArgs{...} }
type PermissionPatchMapInput interface {
	pulumi.Input

	ToPermissionPatchMapOutput() PermissionPatchMapOutput
	ToPermissionPatchMapOutputWithContext(context.Context) PermissionPatchMapOutput
}

type PermissionPatchMap map[string]PermissionPatchInput

func (PermissionPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionPatch)(nil)).Elem()
}

func (i PermissionPatchMap) ToPermissionPatchMapOutput() PermissionPatchMapOutput {
	return i.ToPermissionPatchMapOutputWithContext(context.Background())
}

func (i PermissionPatchMap) ToPermissionPatchMapOutputWithContext(ctx context.Context) PermissionPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionPatchMapOutput)
}

type PermissionPatchOutput struct{ *pulumi.OutputState }

func (PermissionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionPatch)(nil)).Elem()
}

func (o PermissionPatchOutput) ToPermissionPatchOutput() PermissionPatchOutput {
	return o
}

func (o PermissionPatchOutput) ToPermissionPatchOutputWithContext(ctx context.Context) PermissionPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PermissionPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PermissionPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PermissionPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PermissionPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PermissionPatchOutput) Spec() PermissionSpecPatchPtrOutput {
	return o.ApplyT(func(v *PermissionPatch) PermissionSpecPatchPtrOutput { return v.Spec }).(PermissionSpecPatchPtrOutput)
}

func (o PermissionPatchOutput) Status() PermissionStatusPatchPtrOutput {
	return o.ApplyT(func(v *PermissionPatch) PermissionStatusPatchPtrOutput { return v.Status }).(PermissionStatusPatchPtrOutput)
}

type PermissionPatchArrayOutput struct{ *pulumi.OutputState }

func (PermissionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionPatch)(nil)).Elem()
}

func (o PermissionPatchArrayOutput) ToPermissionPatchArrayOutput() PermissionPatchArrayOutput {
	return o
}

func (o PermissionPatchArrayOutput) ToPermissionPatchArrayOutputWithContext(ctx context.Context) PermissionPatchArrayOutput {
	return o
}

func (o PermissionPatchArrayOutput) Index(i pulumi.IntInput) PermissionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionPatch {
		return vs[0].([]*PermissionPatch)[vs[1].(int)]
	}).(PermissionPatchOutput)
}

type PermissionPatchMapOutput struct{ *pulumi.OutputState }

func (PermissionPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionPatch)(nil)).Elem()
}

func (o PermissionPatchMapOutput) ToPermissionPatchMapOutput() PermissionPatchMapOutput {
	return o
}

func (o PermissionPatchMapOutput) ToPermissionPatchMapOutputWithContext(ctx context.Context) PermissionPatchMapOutput {
	return o
}

func (o PermissionPatchMapOutput) MapIndex(k pulumi.StringInput) PermissionPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionPatch {
		return vs[0].(map[string]*PermissionPatch)[vs[1].(string)]
	}).(PermissionPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionPatchInput)(nil)).Elem(), &PermissionPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionPatchArrayInput)(nil)).Elem(), PermissionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionPatchMapInput)(nil)).Elem(), PermissionPatchMap{})
	pulumi.RegisterOutputType(PermissionPatchOutput{})
	pulumi.RegisterOutputType(PermissionPatchArrayOutput{})
	pulumi.RegisterOutputType(PermissionPatchMapOutput{})
}
