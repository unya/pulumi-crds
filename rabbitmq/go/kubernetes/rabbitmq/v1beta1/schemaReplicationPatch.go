// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// SchemaReplication is the Schema for the schemareplications API
// This feature requires Tanzu RabbitMQ with schema replication plugin.
// For more information, see: https://tanzu.vmware.com/rabbitmq and https://www.rabbitmq.com/definitions-standby.html.
type SchemaReplicationPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput       `pulumi:"metadata"`
	Spec     SchemaReplicationSpecPatchPtrOutput   `pulumi:"spec"`
	Status   SchemaReplicationStatusPatchPtrOutput `pulumi:"status"`
}

// NewSchemaReplicationPatch registers a new resource with the given unique name, arguments, and options.
func NewSchemaReplicationPatch(ctx *pulumi.Context,
	name string, args *SchemaReplicationPatchArgs, opts ...pulumi.ResourceOption) (*SchemaReplicationPatch, error) {
	if args == nil {
		args = &SchemaReplicationPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("SchemaReplication")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SchemaReplicationPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:SchemaReplicationPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaReplicationPatch gets an existing SchemaReplicationPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaReplicationPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaReplicationPatchState, opts ...pulumi.ResourceOption) (*SchemaReplicationPatch, error) {
	var resource SchemaReplicationPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:SchemaReplicationPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaReplicationPatch resources.
type schemaReplicationPatchState struct {
}

type SchemaReplicationPatchState struct {
}

func (SchemaReplicationPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaReplicationPatchState)(nil)).Elem()
}

type schemaReplicationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch     `pulumi:"metadata"`
	Spec     *SchemaReplicationSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a SchemaReplicationPatch resource.
type SchemaReplicationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     SchemaReplicationSpecPatchPtrInput
}

func (SchemaReplicationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaReplicationPatchArgs)(nil)).Elem()
}

type SchemaReplicationPatchInput interface {
	pulumi.Input

	ToSchemaReplicationPatchOutput() SchemaReplicationPatchOutput
	ToSchemaReplicationPatchOutputWithContext(ctx context.Context) SchemaReplicationPatchOutput
}

func (*SchemaReplicationPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaReplicationPatch)(nil)).Elem()
}

func (i *SchemaReplicationPatch) ToSchemaReplicationPatchOutput() SchemaReplicationPatchOutput {
	return i.ToSchemaReplicationPatchOutputWithContext(context.Background())
}

func (i *SchemaReplicationPatch) ToSchemaReplicationPatchOutputWithContext(ctx context.Context) SchemaReplicationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationPatchOutput)
}

// SchemaReplicationPatchArrayInput is an input type that accepts SchemaReplicationPatchArray and SchemaReplicationPatchArrayOutput values.
// You can construct a concrete instance of `SchemaReplicationPatchArrayInput` via:
//
//	SchemaReplicationPatchArray{ SchemaReplicationPatchArgs{...} }
type SchemaReplicationPatchArrayInput interface {
	pulumi.Input

	ToSchemaReplicationPatchArrayOutput() SchemaReplicationPatchArrayOutput
	ToSchemaReplicationPatchArrayOutputWithContext(context.Context) SchemaReplicationPatchArrayOutput
}

type SchemaReplicationPatchArray []SchemaReplicationPatchInput

func (SchemaReplicationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaReplicationPatch)(nil)).Elem()
}

func (i SchemaReplicationPatchArray) ToSchemaReplicationPatchArrayOutput() SchemaReplicationPatchArrayOutput {
	return i.ToSchemaReplicationPatchArrayOutputWithContext(context.Background())
}

func (i SchemaReplicationPatchArray) ToSchemaReplicationPatchArrayOutputWithContext(ctx context.Context) SchemaReplicationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationPatchArrayOutput)
}

// SchemaReplicationPatchMapInput is an input type that accepts SchemaReplicationPatchMap and SchemaReplicationPatchMapOutput values.
// You can construct a concrete instance of `SchemaReplicationPatchMapInput` via:
//
//	SchemaReplicationPatchMap{ "key": SchemaReplicationPatchArgs{...} }
type SchemaReplicationPatchMapInput interface {
	pulumi.Input

	ToSchemaReplicationPatchMapOutput() SchemaReplicationPatchMapOutput
	ToSchemaReplicationPatchMapOutputWithContext(context.Context) SchemaReplicationPatchMapOutput
}

type SchemaReplicationPatchMap map[string]SchemaReplicationPatchInput

func (SchemaReplicationPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaReplicationPatch)(nil)).Elem()
}

func (i SchemaReplicationPatchMap) ToSchemaReplicationPatchMapOutput() SchemaReplicationPatchMapOutput {
	return i.ToSchemaReplicationPatchMapOutputWithContext(context.Background())
}

func (i SchemaReplicationPatchMap) ToSchemaReplicationPatchMapOutputWithContext(ctx context.Context) SchemaReplicationPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationPatchMapOutput)
}

type SchemaReplicationPatchOutput struct{ *pulumi.OutputState }

func (SchemaReplicationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaReplicationPatch)(nil)).Elem()
}

func (o SchemaReplicationPatchOutput) ToSchemaReplicationPatchOutput() SchemaReplicationPatchOutput {
	return o
}

func (o SchemaReplicationPatchOutput) ToSchemaReplicationPatchOutputWithContext(ctx context.Context) SchemaReplicationPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SchemaReplicationPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaReplicationPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SchemaReplicationPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaReplicationPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SchemaReplicationPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SchemaReplicationPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SchemaReplicationPatchOutput) Spec() SchemaReplicationSpecPatchPtrOutput {
	return o.ApplyT(func(v *SchemaReplicationPatch) SchemaReplicationSpecPatchPtrOutput { return v.Spec }).(SchemaReplicationSpecPatchPtrOutput)
}

func (o SchemaReplicationPatchOutput) Status() SchemaReplicationStatusPatchPtrOutput {
	return o.ApplyT(func(v *SchemaReplicationPatch) SchemaReplicationStatusPatchPtrOutput { return v.Status }).(SchemaReplicationStatusPatchPtrOutput)
}

type SchemaReplicationPatchArrayOutput struct{ *pulumi.OutputState }

func (SchemaReplicationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaReplicationPatch)(nil)).Elem()
}

func (o SchemaReplicationPatchArrayOutput) ToSchemaReplicationPatchArrayOutput() SchemaReplicationPatchArrayOutput {
	return o
}

func (o SchemaReplicationPatchArrayOutput) ToSchemaReplicationPatchArrayOutputWithContext(ctx context.Context) SchemaReplicationPatchArrayOutput {
	return o
}

func (o SchemaReplicationPatchArrayOutput) Index(i pulumi.IntInput) SchemaReplicationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaReplicationPatch {
		return vs[0].([]*SchemaReplicationPatch)[vs[1].(int)]
	}).(SchemaReplicationPatchOutput)
}

type SchemaReplicationPatchMapOutput struct{ *pulumi.OutputState }

func (SchemaReplicationPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaReplicationPatch)(nil)).Elem()
}

func (o SchemaReplicationPatchMapOutput) ToSchemaReplicationPatchMapOutput() SchemaReplicationPatchMapOutput {
	return o
}

func (o SchemaReplicationPatchMapOutput) ToSchemaReplicationPatchMapOutputWithContext(ctx context.Context) SchemaReplicationPatchMapOutput {
	return o
}

func (o SchemaReplicationPatchMapOutput) MapIndex(k pulumi.StringInput) SchemaReplicationPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaReplicationPatch {
		return vs[0].(map[string]*SchemaReplicationPatch)[vs[1].(string)]
	}).(SchemaReplicationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationPatchInput)(nil)).Elem(), &SchemaReplicationPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationPatchArrayInput)(nil)).Elem(), SchemaReplicationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationPatchMapInput)(nil)).Elem(), SchemaReplicationPatchMap{})
	pulumi.RegisterOutputType(SchemaReplicationPatchOutput{})
	pulumi.RegisterOutputType(SchemaReplicationPatchArrayOutput{})
	pulumi.RegisterOutputType(SchemaReplicationPatchMapOutput{})
}
