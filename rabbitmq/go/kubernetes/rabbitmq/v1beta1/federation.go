// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Federation is the Schema for the federations API
type Federation struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput   `pulumi:"metadata"`
	Spec     FederationSpecOutput      `pulumi:"spec"`
	Status   FederationStatusPtrOutput `pulumi:"status"`
}

// NewFederation registers a new resource with the given unique name, arguments, and options.
func NewFederation(ctx *pulumi.Context,
	name string, args *FederationArgs, opts ...pulumi.ResourceOption) (*Federation, error) {
	if args == nil {
		args = &FederationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Federation")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Federation
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:Federation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederation gets an existing Federation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederationState, opts ...pulumi.ResourceOption) (*Federation, error) {
	var resource Federation
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:Federation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Federation resources.
type federationState struct {
}

type FederationState struct {
}

func (FederationState) ElementType() reflect.Type {
	return reflect.TypeOf((*federationState)(nil)).Elem()
}

type federationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *FederationSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a Federation resource.
type FederationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     FederationSpecPtrInput
}

func (FederationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federationArgs)(nil)).Elem()
}

type FederationInput interface {
	pulumi.Input

	ToFederationOutput() FederationOutput
	ToFederationOutputWithContext(ctx context.Context) FederationOutput
}

func (*Federation) ElementType() reflect.Type {
	return reflect.TypeOf((**Federation)(nil)).Elem()
}

func (i *Federation) ToFederationOutput() FederationOutput {
	return i.ToFederationOutputWithContext(context.Background())
}

func (i *Federation) ToFederationOutputWithContext(ctx context.Context) FederationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationOutput)
}

// FederationArrayInput is an input type that accepts FederationArray and FederationArrayOutput values.
// You can construct a concrete instance of `FederationArrayInput` via:
//
//	FederationArray{ FederationArgs{...} }
type FederationArrayInput interface {
	pulumi.Input

	ToFederationArrayOutput() FederationArrayOutput
	ToFederationArrayOutputWithContext(context.Context) FederationArrayOutput
}

type FederationArray []FederationInput

func (FederationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Federation)(nil)).Elem()
}

func (i FederationArray) ToFederationArrayOutput() FederationArrayOutput {
	return i.ToFederationArrayOutputWithContext(context.Background())
}

func (i FederationArray) ToFederationArrayOutputWithContext(ctx context.Context) FederationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationArrayOutput)
}

// FederationMapInput is an input type that accepts FederationMap and FederationMapOutput values.
// You can construct a concrete instance of `FederationMapInput` via:
//
//	FederationMap{ "key": FederationArgs{...} }
type FederationMapInput interface {
	pulumi.Input

	ToFederationMapOutput() FederationMapOutput
	ToFederationMapOutputWithContext(context.Context) FederationMapOutput
}

type FederationMap map[string]FederationInput

func (FederationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Federation)(nil)).Elem()
}

func (i FederationMap) ToFederationMapOutput() FederationMapOutput {
	return i.ToFederationMapOutputWithContext(context.Background())
}

func (i FederationMap) ToFederationMapOutputWithContext(ctx context.Context) FederationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationMapOutput)
}

type FederationOutput struct{ *pulumi.OutputState }

func (FederationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Federation)(nil)).Elem()
}

func (o FederationOutput) ToFederationOutput() FederationOutput {
	return o
}

func (o FederationOutput) ToFederationOutputWithContext(ctx context.Context) FederationOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FederationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Federation) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FederationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Federation) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FederationOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Federation) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o FederationOutput) Spec() FederationSpecOutput {
	return o.ApplyT(func(v *Federation) FederationSpecOutput { return v.Spec }).(FederationSpecOutput)
}

func (o FederationOutput) Status() FederationStatusPtrOutput {
	return o.ApplyT(func(v *Federation) FederationStatusPtrOutput { return v.Status }).(FederationStatusPtrOutput)
}

type FederationArrayOutput struct{ *pulumi.OutputState }

func (FederationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Federation)(nil)).Elem()
}

func (o FederationArrayOutput) ToFederationArrayOutput() FederationArrayOutput {
	return o
}

func (o FederationArrayOutput) ToFederationArrayOutputWithContext(ctx context.Context) FederationArrayOutput {
	return o
}

func (o FederationArrayOutput) Index(i pulumi.IntInput) FederationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Federation {
		return vs[0].([]*Federation)[vs[1].(int)]
	}).(FederationOutput)
}

type FederationMapOutput struct{ *pulumi.OutputState }

func (FederationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Federation)(nil)).Elem()
}

func (o FederationMapOutput) ToFederationMapOutput() FederationMapOutput {
	return o
}

func (o FederationMapOutput) ToFederationMapOutputWithContext(ctx context.Context) FederationMapOutput {
	return o
}

func (o FederationMapOutput) MapIndex(k pulumi.StringInput) FederationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Federation {
		return vs[0].(map[string]*Federation)[vs[1].(string)]
	}).(FederationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederationInput)(nil)).Elem(), &Federation{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationArrayInput)(nil)).Elem(), FederationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationMapInput)(nil)).Elem(), FederationMap{})
	pulumi.RegisterOutputType(FederationOutput{})
	pulumi.RegisterOutputType(FederationArrayOutput{})
	pulumi.RegisterOutputType(FederationMapOutput{})
}
