// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Exchange is the Schema for the exchanges API
type ExchangePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ExchangeSpecPatchPtrOutput      `pulumi:"spec"`
	Status   ExchangeStatusPatchPtrOutput    `pulumi:"status"`
}

// NewExchangePatch registers a new resource with the given unique name, arguments, and options.
func NewExchangePatch(ctx *pulumi.Context,
	name string, args *ExchangePatchArgs, opts ...pulumi.ResourceOption) (*ExchangePatch, error) {
	if args == nil {
		args = &ExchangePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Exchange")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ExchangePatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:ExchangePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExchangePatch gets an existing ExchangePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExchangePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExchangePatchState, opts ...pulumi.ResourceOption) (*ExchangePatch, error) {
	var resource ExchangePatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:ExchangePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExchangePatch resources.
type exchangePatchState struct {
}

type ExchangePatchState struct {
}

func (ExchangePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangePatchState)(nil)).Elem()
}

type exchangePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ExchangeSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a ExchangePatch resource.
type ExchangePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ExchangeSpecPatchPtrInput
}

func (ExchangePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangePatchArgs)(nil)).Elem()
}

type ExchangePatchInput interface {
	pulumi.Input

	ToExchangePatchOutput() ExchangePatchOutput
	ToExchangePatchOutputWithContext(ctx context.Context) ExchangePatchOutput
}

func (*ExchangePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ExchangePatch)(nil)).Elem()
}

func (i *ExchangePatch) ToExchangePatchOutput() ExchangePatchOutput {
	return i.ToExchangePatchOutputWithContext(context.Background())
}

func (i *ExchangePatch) ToExchangePatchOutputWithContext(ctx context.Context) ExchangePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangePatchOutput)
}

// ExchangePatchArrayInput is an input type that accepts ExchangePatchArray and ExchangePatchArrayOutput values.
// You can construct a concrete instance of `ExchangePatchArrayInput` via:
//
//	ExchangePatchArray{ ExchangePatchArgs{...} }
type ExchangePatchArrayInput interface {
	pulumi.Input

	ToExchangePatchArrayOutput() ExchangePatchArrayOutput
	ToExchangePatchArrayOutputWithContext(context.Context) ExchangePatchArrayOutput
}

type ExchangePatchArray []ExchangePatchInput

func (ExchangePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExchangePatch)(nil)).Elem()
}

func (i ExchangePatchArray) ToExchangePatchArrayOutput() ExchangePatchArrayOutput {
	return i.ToExchangePatchArrayOutputWithContext(context.Background())
}

func (i ExchangePatchArray) ToExchangePatchArrayOutputWithContext(ctx context.Context) ExchangePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangePatchArrayOutput)
}

// ExchangePatchMapInput is an input type that accepts ExchangePatchMap and ExchangePatchMapOutput values.
// You can construct a concrete instance of `ExchangePatchMapInput` via:
//
//	ExchangePatchMap{ "key": ExchangePatchArgs{...} }
type ExchangePatchMapInput interface {
	pulumi.Input

	ToExchangePatchMapOutput() ExchangePatchMapOutput
	ToExchangePatchMapOutputWithContext(context.Context) ExchangePatchMapOutput
}

type ExchangePatchMap map[string]ExchangePatchInput

func (ExchangePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExchangePatch)(nil)).Elem()
}

func (i ExchangePatchMap) ToExchangePatchMapOutput() ExchangePatchMapOutput {
	return i.ToExchangePatchMapOutputWithContext(context.Background())
}

func (i ExchangePatchMap) ToExchangePatchMapOutputWithContext(ctx context.Context) ExchangePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangePatchMapOutput)
}

type ExchangePatchOutput struct{ *pulumi.OutputState }

func (ExchangePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExchangePatch)(nil)).Elem()
}

func (o ExchangePatchOutput) ToExchangePatchOutput() ExchangePatchOutput {
	return o
}

func (o ExchangePatchOutput) ToExchangePatchOutputWithContext(ctx context.Context) ExchangePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ExchangePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExchangePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ExchangePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExchangePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ExchangePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ExchangePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ExchangePatchOutput) Spec() ExchangeSpecPatchPtrOutput {
	return o.ApplyT(func(v *ExchangePatch) ExchangeSpecPatchPtrOutput { return v.Spec }).(ExchangeSpecPatchPtrOutput)
}

func (o ExchangePatchOutput) Status() ExchangeStatusPatchPtrOutput {
	return o.ApplyT(func(v *ExchangePatch) ExchangeStatusPatchPtrOutput { return v.Status }).(ExchangeStatusPatchPtrOutput)
}

type ExchangePatchArrayOutput struct{ *pulumi.OutputState }

func (ExchangePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExchangePatch)(nil)).Elem()
}

func (o ExchangePatchArrayOutput) ToExchangePatchArrayOutput() ExchangePatchArrayOutput {
	return o
}

func (o ExchangePatchArrayOutput) ToExchangePatchArrayOutputWithContext(ctx context.Context) ExchangePatchArrayOutput {
	return o
}

func (o ExchangePatchArrayOutput) Index(i pulumi.IntInput) ExchangePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExchangePatch {
		return vs[0].([]*ExchangePatch)[vs[1].(int)]
	}).(ExchangePatchOutput)
}

type ExchangePatchMapOutput struct{ *pulumi.OutputState }

func (ExchangePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExchangePatch)(nil)).Elem()
}

func (o ExchangePatchMapOutput) ToExchangePatchMapOutput() ExchangePatchMapOutput {
	return o
}

func (o ExchangePatchMapOutput) ToExchangePatchMapOutputWithContext(ctx context.Context) ExchangePatchMapOutput {
	return o
}

func (o ExchangePatchMapOutput) MapIndex(k pulumi.StringInput) ExchangePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExchangePatch {
		return vs[0].(map[string]*ExchangePatch)[vs[1].(string)]
	}).(ExchangePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangePatchInput)(nil)).Elem(), &ExchangePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangePatchArrayInput)(nil)).Elem(), ExchangePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangePatchMapInput)(nil)).Elem(), ExchangePatchMap{})
	pulumi.RegisterOutputType(ExchangePatchOutput{})
	pulumi.RegisterOutputType(ExchangePatchArrayOutput{})
	pulumi.RegisterOutputType(ExchangePatchMapOutput{})
}
