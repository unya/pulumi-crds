// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SchemaReplication is the Schema for the schemareplications API
// This feature requires Tanzu RabbitMQ with schema replication plugin.
// For more information, see: https://tanzu.vmware.com/rabbitmq and https://www.rabbitmq.com/definitions-standby.html.
type SchemaReplication struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput          `pulumi:"metadata"`
	Spec     SchemaReplicationSpecOutput      `pulumi:"spec"`
	Status   SchemaReplicationStatusPtrOutput `pulumi:"status"`
}

// NewSchemaReplication registers a new resource with the given unique name, arguments, and options.
func NewSchemaReplication(ctx *pulumi.Context,
	name string, args *SchemaReplicationArgs, opts ...pulumi.ResourceOption) (*SchemaReplication, error) {
	if args == nil {
		args = &SchemaReplicationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("SchemaReplication")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SchemaReplication
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:SchemaReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaReplication gets an existing SchemaReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaReplicationState, opts ...pulumi.ResourceOption) (*SchemaReplication, error) {
	var resource SchemaReplication
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:SchemaReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaReplication resources.
type schemaReplicationState struct {
}

type SchemaReplicationState struct {
}

func (SchemaReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaReplicationState)(nil)).Elem()
}

type schemaReplicationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *SchemaReplicationSpec `pulumi:"spec"`
}

// The set of arguments for constructing a SchemaReplication resource.
type SchemaReplicationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SchemaReplicationSpecPtrInput
}

func (SchemaReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaReplicationArgs)(nil)).Elem()
}

type SchemaReplicationInput interface {
	pulumi.Input

	ToSchemaReplicationOutput() SchemaReplicationOutput
	ToSchemaReplicationOutputWithContext(ctx context.Context) SchemaReplicationOutput
}

func (*SchemaReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaReplication)(nil)).Elem()
}

func (i *SchemaReplication) ToSchemaReplicationOutput() SchemaReplicationOutput {
	return i.ToSchemaReplicationOutputWithContext(context.Background())
}

func (i *SchemaReplication) ToSchemaReplicationOutputWithContext(ctx context.Context) SchemaReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationOutput)
}

// SchemaReplicationArrayInput is an input type that accepts SchemaReplicationArray and SchemaReplicationArrayOutput values.
// You can construct a concrete instance of `SchemaReplicationArrayInput` via:
//
//	SchemaReplicationArray{ SchemaReplicationArgs{...} }
type SchemaReplicationArrayInput interface {
	pulumi.Input

	ToSchemaReplicationArrayOutput() SchemaReplicationArrayOutput
	ToSchemaReplicationArrayOutputWithContext(context.Context) SchemaReplicationArrayOutput
}

type SchemaReplicationArray []SchemaReplicationInput

func (SchemaReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaReplication)(nil)).Elem()
}

func (i SchemaReplicationArray) ToSchemaReplicationArrayOutput() SchemaReplicationArrayOutput {
	return i.ToSchemaReplicationArrayOutputWithContext(context.Background())
}

func (i SchemaReplicationArray) ToSchemaReplicationArrayOutputWithContext(ctx context.Context) SchemaReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationArrayOutput)
}

// SchemaReplicationMapInput is an input type that accepts SchemaReplicationMap and SchemaReplicationMapOutput values.
// You can construct a concrete instance of `SchemaReplicationMapInput` via:
//
//	SchemaReplicationMap{ "key": SchemaReplicationArgs{...} }
type SchemaReplicationMapInput interface {
	pulumi.Input

	ToSchemaReplicationMapOutput() SchemaReplicationMapOutput
	ToSchemaReplicationMapOutputWithContext(context.Context) SchemaReplicationMapOutput
}

type SchemaReplicationMap map[string]SchemaReplicationInput

func (SchemaReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaReplication)(nil)).Elem()
}

func (i SchemaReplicationMap) ToSchemaReplicationMapOutput() SchemaReplicationMapOutput {
	return i.ToSchemaReplicationMapOutputWithContext(context.Background())
}

func (i SchemaReplicationMap) ToSchemaReplicationMapOutputWithContext(ctx context.Context) SchemaReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationMapOutput)
}

type SchemaReplicationOutput struct{ *pulumi.OutputState }

func (SchemaReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaReplication)(nil)).Elem()
}

func (o SchemaReplicationOutput) ToSchemaReplicationOutput() SchemaReplicationOutput {
	return o
}

func (o SchemaReplicationOutput) ToSchemaReplicationOutputWithContext(ctx context.Context) SchemaReplicationOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SchemaReplicationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaReplication) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SchemaReplicationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaReplication) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SchemaReplicationOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *SchemaReplication) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SchemaReplicationOutput) Spec() SchemaReplicationSpecOutput {
	return o.ApplyT(func(v *SchemaReplication) SchemaReplicationSpecOutput { return v.Spec }).(SchemaReplicationSpecOutput)
}

func (o SchemaReplicationOutput) Status() SchemaReplicationStatusPtrOutput {
	return o.ApplyT(func(v *SchemaReplication) SchemaReplicationStatusPtrOutput { return v.Status }).(SchemaReplicationStatusPtrOutput)
}

type SchemaReplicationArrayOutput struct{ *pulumi.OutputState }

func (SchemaReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaReplication)(nil)).Elem()
}

func (o SchemaReplicationArrayOutput) ToSchemaReplicationArrayOutput() SchemaReplicationArrayOutput {
	return o
}

func (o SchemaReplicationArrayOutput) ToSchemaReplicationArrayOutputWithContext(ctx context.Context) SchemaReplicationArrayOutput {
	return o
}

func (o SchemaReplicationArrayOutput) Index(i pulumi.IntInput) SchemaReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaReplication {
		return vs[0].([]*SchemaReplication)[vs[1].(int)]
	}).(SchemaReplicationOutput)
}

type SchemaReplicationMapOutput struct{ *pulumi.OutputState }

func (SchemaReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaReplication)(nil)).Elem()
}

func (o SchemaReplicationMapOutput) ToSchemaReplicationMapOutput() SchemaReplicationMapOutput {
	return o
}

func (o SchemaReplicationMapOutput) ToSchemaReplicationMapOutputWithContext(ctx context.Context) SchemaReplicationMapOutput {
	return o
}

func (o SchemaReplicationMapOutput) MapIndex(k pulumi.StringInput) SchemaReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaReplication {
		return vs[0].(map[string]*SchemaReplication)[vs[1].(string)]
	}).(SchemaReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationInput)(nil)).Elem(), &SchemaReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationArrayInput)(nil)).Elem(), SchemaReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationMapInput)(nil)).Elem(), SchemaReplicationMap{})
	pulumi.RegisterOutputType(SchemaReplicationOutput{})
	pulumi.RegisterOutputType(SchemaReplicationArrayOutput{})
	pulumi.RegisterOutputType(SchemaReplicationMapOutput{})
}
