// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OperatorPolicy is the Schema for the operator policies API
type OperatorPolicy struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     OperatorPolicySpecOutput      `pulumi:"spec"`
	Status   OperatorPolicyStatusPtrOutput `pulumi:"status"`
}

// NewOperatorPolicy registers a new resource with the given unique name, arguments, and options.
func NewOperatorPolicy(ctx *pulumi.Context,
	name string, args *OperatorPolicyArgs, opts ...pulumi.ResourceOption) (*OperatorPolicy, error) {
	if args == nil {
		args = &OperatorPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("OperatorPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OperatorPolicy
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:OperatorPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperatorPolicy gets an existing OperatorPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperatorPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperatorPolicyState, opts ...pulumi.ResourceOption) (*OperatorPolicy, error) {
	var resource OperatorPolicy
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:OperatorPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperatorPolicy resources.
type operatorPolicyState struct {
}

type OperatorPolicyState struct {
}

func (OperatorPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorPolicyState)(nil)).Elem()
}

type operatorPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *OperatorPolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a OperatorPolicy resource.
type OperatorPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     OperatorPolicySpecPtrInput
}

func (OperatorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorPolicyArgs)(nil)).Elem()
}

type OperatorPolicyInput interface {
	pulumi.Input

	ToOperatorPolicyOutput() OperatorPolicyOutput
	ToOperatorPolicyOutputWithContext(ctx context.Context) OperatorPolicyOutput
}

func (*OperatorPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicy)(nil)).Elem()
}

func (i *OperatorPolicy) ToOperatorPolicyOutput() OperatorPolicyOutput {
	return i.ToOperatorPolicyOutputWithContext(context.Background())
}

func (i *OperatorPolicy) ToOperatorPolicyOutputWithContext(ctx context.Context) OperatorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyOutput)
}

// OperatorPolicyArrayInput is an input type that accepts OperatorPolicyArray and OperatorPolicyArrayOutput values.
// You can construct a concrete instance of `OperatorPolicyArrayInput` via:
//
//	OperatorPolicyArray{ OperatorPolicyArgs{...} }
type OperatorPolicyArrayInput interface {
	pulumi.Input

	ToOperatorPolicyArrayOutput() OperatorPolicyArrayOutput
	ToOperatorPolicyArrayOutputWithContext(context.Context) OperatorPolicyArrayOutput
}

type OperatorPolicyArray []OperatorPolicyInput

func (OperatorPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorPolicy)(nil)).Elem()
}

func (i OperatorPolicyArray) ToOperatorPolicyArrayOutput() OperatorPolicyArrayOutput {
	return i.ToOperatorPolicyArrayOutputWithContext(context.Background())
}

func (i OperatorPolicyArray) ToOperatorPolicyArrayOutputWithContext(ctx context.Context) OperatorPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyArrayOutput)
}

// OperatorPolicyMapInput is an input type that accepts OperatorPolicyMap and OperatorPolicyMapOutput values.
// You can construct a concrete instance of `OperatorPolicyMapInput` via:
//
//	OperatorPolicyMap{ "key": OperatorPolicyArgs{...} }
type OperatorPolicyMapInput interface {
	pulumi.Input

	ToOperatorPolicyMapOutput() OperatorPolicyMapOutput
	ToOperatorPolicyMapOutputWithContext(context.Context) OperatorPolicyMapOutput
}

type OperatorPolicyMap map[string]OperatorPolicyInput

func (OperatorPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorPolicy)(nil)).Elem()
}

func (i OperatorPolicyMap) ToOperatorPolicyMapOutput() OperatorPolicyMapOutput {
	return i.ToOperatorPolicyMapOutputWithContext(context.Background())
}

func (i OperatorPolicyMap) ToOperatorPolicyMapOutputWithContext(ctx context.Context) OperatorPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyMapOutput)
}

type OperatorPolicyOutput struct{ *pulumi.OutputState }

func (OperatorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicy)(nil)).Elem()
}

func (o OperatorPolicyOutput) ToOperatorPolicyOutput() OperatorPolicyOutput {
	return o
}

func (o OperatorPolicyOutput) ToOperatorPolicyOutputWithContext(ctx context.Context) OperatorPolicyOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OperatorPolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorPolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OperatorPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorPolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OperatorPolicyOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *OperatorPolicy) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o OperatorPolicyOutput) Spec() OperatorPolicySpecOutput {
	return o.ApplyT(func(v *OperatorPolicy) OperatorPolicySpecOutput { return v.Spec }).(OperatorPolicySpecOutput)
}

func (o OperatorPolicyOutput) Status() OperatorPolicyStatusPtrOutput {
	return o.ApplyT(func(v *OperatorPolicy) OperatorPolicyStatusPtrOutput { return v.Status }).(OperatorPolicyStatusPtrOutput)
}

type OperatorPolicyArrayOutput struct{ *pulumi.OutputState }

func (OperatorPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorPolicy)(nil)).Elem()
}

func (o OperatorPolicyArrayOutput) ToOperatorPolicyArrayOutput() OperatorPolicyArrayOutput {
	return o
}

func (o OperatorPolicyArrayOutput) ToOperatorPolicyArrayOutputWithContext(ctx context.Context) OperatorPolicyArrayOutput {
	return o
}

func (o OperatorPolicyArrayOutput) Index(i pulumi.IntInput) OperatorPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperatorPolicy {
		return vs[0].([]*OperatorPolicy)[vs[1].(int)]
	}).(OperatorPolicyOutput)
}

type OperatorPolicyMapOutput struct{ *pulumi.OutputState }

func (OperatorPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorPolicy)(nil)).Elem()
}

func (o OperatorPolicyMapOutput) ToOperatorPolicyMapOutput() OperatorPolicyMapOutput {
	return o
}

func (o OperatorPolicyMapOutput) ToOperatorPolicyMapOutputWithContext(ctx context.Context) OperatorPolicyMapOutput {
	return o
}

func (o OperatorPolicyMapOutput) MapIndex(k pulumi.StringInput) OperatorPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperatorPolicy {
		return vs[0].(map[string]*OperatorPolicy)[vs[1].(string)]
	}).(OperatorPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyInput)(nil)).Elem(), &OperatorPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyArrayInput)(nil)).Elem(), OperatorPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyMapInput)(nil)).Elem(), OperatorPolicyMap{})
	pulumi.RegisterOutputType(OperatorPolicyOutput{})
	pulumi.RegisterOutputType(OperatorPolicyArrayOutput{})
	pulumi.RegisterOutputType(OperatorPolicyMapOutput{})
}
