// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// User is the Schema for the users API.
type UserPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     UserSpecPatchPtrOutput          `pulumi:"spec"`
	Status   UserStatusPatchPtrOutput        `pulumi:"status"`
}

// NewUserPatch registers a new resource with the given unique name, arguments, and options.
func NewUserPatch(ctx *pulumi.Context,
	name string, args *UserPatchArgs, opts ...pulumi.ResourceOption) (*UserPatch, error) {
	if args == nil {
		args = &UserPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("User")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource UserPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:UserPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserPatch gets an existing UserPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserPatchState, opts ...pulumi.ResourceOption) (*UserPatch, error) {
	var resource UserPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:UserPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserPatch resources.
type userPatchState struct {
}

type UserPatchState struct {
}

func (UserPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*userPatchState)(nil)).Elem()
}

type userPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *UserSpecPatch          `pulumi:"spec"`
}

// The set of arguments for constructing a UserPatch resource.
type UserPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     UserSpecPatchPtrInput
}

func (UserPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userPatchArgs)(nil)).Elem()
}

type UserPatchInput interface {
	pulumi.Input

	ToUserPatchOutput() UserPatchOutput
	ToUserPatchOutputWithContext(ctx context.Context) UserPatchOutput
}

func (*UserPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPatch)(nil)).Elem()
}

func (i *UserPatch) ToUserPatchOutput() UserPatchOutput {
	return i.ToUserPatchOutputWithContext(context.Background())
}

func (i *UserPatch) ToUserPatchOutputWithContext(ctx context.Context) UserPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPatchOutput)
}

// UserPatchArrayInput is an input type that accepts UserPatchArray and UserPatchArrayOutput values.
// You can construct a concrete instance of `UserPatchArrayInput` via:
//
//	UserPatchArray{ UserPatchArgs{...} }
type UserPatchArrayInput interface {
	pulumi.Input

	ToUserPatchArrayOutput() UserPatchArrayOutput
	ToUserPatchArrayOutputWithContext(context.Context) UserPatchArrayOutput
}

type UserPatchArray []UserPatchInput

func (UserPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPatch)(nil)).Elem()
}

func (i UserPatchArray) ToUserPatchArrayOutput() UserPatchArrayOutput {
	return i.ToUserPatchArrayOutputWithContext(context.Background())
}

func (i UserPatchArray) ToUserPatchArrayOutputWithContext(ctx context.Context) UserPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPatchArrayOutput)
}

// UserPatchMapInput is an input type that accepts UserPatchMap and UserPatchMapOutput values.
// You can construct a concrete instance of `UserPatchMapInput` via:
//
//	UserPatchMap{ "key": UserPatchArgs{...} }
type UserPatchMapInput interface {
	pulumi.Input

	ToUserPatchMapOutput() UserPatchMapOutput
	ToUserPatchMapOutputWithContext(context.Context) UserPatchMapOutput
}

type UserPatchMap map[string]UserPatchInput

func (UserPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPatch)(nil)).Elem()
}

func (i UserPatchMap) ToUserPatchMapOutput() UserPatchMapOutput {
	return i.ToUserPatchMapOutputWithContext(context.Background())
}

func (i UserPatchMap) ToUserPatchMapOutputWithContext(ctx context.Context) UserPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPatchMapOutput)
}

type UserPatchOutput struct{ *pulumi.OutputState }

func (UserPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPatch)(nil)).Elem()
}

func (o UserPatchOutput) ToUserPatchOutput() UserPatchOutput {
	return o
}

func (o UserPatchOutput) ToUserPatchOutputWithContext(ctx context.Context) UserPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o UserPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o UserPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o UserPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *UserPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o UserPatchOutput) Spec() UserSpecPatchPtrOutput {
	return o.ApplyT(func(v *UserPatch) UserSpecPatchPtrOutput { return v.Spec }).(UserSpecPatchPtrOutput)
}

func (o UserPatchOutput) Status() UserStatusPatchPtrOutput {
	return o.ApplyT(func(v *UserPatch) UserStatusPatchPtrOutput { return v.Status }).(UserStatusPatchPtrOutput)
}

type UserPatchArrayOutput struct{ *pulumi.OutputState }

func (UserPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserPatch)(nil)).Elem()
}

func (o UserPatchArrayOutput) ToUserPatchArrayOutput() UserPatchArrayOutput {
	return o
}

func (o UserPatchArrayOutput) ToUserPatchArrayOutputWithContext(ctx context.Context) UserPatchArrayOutput {
	return o
}

func (o UserPatchArrayOutput) Index(i pulumi.IntInput) UserPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserPatch {
		return vs[0].([]*UserPatch)[vs[1].(int)]
	}).(UserPatchOutput)
}

type UserPatchMapOutput struct{ *pulumi.OutputState }

func (UserPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserPatch)(nil)).Elem()
}

func (o UserPatchMapOutput) ToUserPatchMapOutput() UserPatchMapOutput {
	return o
}

func (o UserPatchMapOutput) ToUserPatchMapOutputWithContext(ctx context.Context) UserPatchMapOutput {
	return o
}

func (o UserPatchMapOutput) MapIndex(k pulumi.StringInput) UserPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserPatch {
		return vs[0].(map[string]*UserPatch)[vs[1].(string)]
	}).(UserPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserPatchInput)(nil)).Elem(), &UserPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPatchArrayInput)(nil)).Elem(), UserPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPatchMapInput)(nil)).Elem(), UserPatchMap{})
	pulumi.RegisterOutputType(UserPatchOutput{})
	pulumi.RegisterOutputType(UserPatchArrayOutput{})
	pulumi.RegisterOutputType(UserPatchMapOutput{})
}
