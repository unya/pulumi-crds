// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Shovel is the Schema for the shovels API
type Shovel struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     ShovelSpecOutput        `pulumi:"spec"`
	Status   ShovelStatusPtrOutput   `pulumi:"status"`
}

// NewShovel registers a new resource with the given unique name, arguments, and options.
func NewShovel(ctx *pulumi.Context,
	name string, args *ShovelArgs, opts ...pulumi.ResourceOption) (*Shovel, error) {
	if args == nil {
		args = &ShovelArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Shovel")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Shovel
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:Shovel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShovel gets an existing Shovel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShovel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShovelState, opts ...pulumi.ResourceOption) (*Shovel, error) {
	var resource Shovel
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:Shovel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Shovel resources.
type shovelState struct {
}

type ShovelState struct {
}

func (ShovelState) ElementType() reflect.Type {
	return reflect.TypeOf((*shovelState)(nil)).Elem()
}

type shovelArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ShovelSpec        `pulumi:"spec"`
}

// The set of arguments for constructing a Shovel resource.
type ShovelArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ShovelSpecPtrInput
}

func (ShovelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shovelArgs)(nil)).Elem()
}

type ShovelInput interface {
	pulumi.Input

	ToShovelOutput() ShovelOutput
	ToShovelOutputWithContext(ctx context.Context) ShovelOutput
}

func (*Shovel) ElementType() reflect.Type {
	return reflect.TypeOf((**Shovel)(nil)).Elem()
}

func (i *Shovel) ToShovelOutput() ShovelOutput {
	return i.ToShovelOutputWithContext(context.Background())
}

func (i *Shovel) ToShovelOutputWithContext(ctx context.Context) ShovelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelOutput)
}

// ShovelArrayInput is an input type that accepts ShovelArray and ShovelArrayOutput values.
// You can construct a concrete instance of `ShovelArrayInput` via:
//
//	ShovelArray{ ShovelArgs{...} }
type ShovelArrayInput interface {
	pulumi.Input

	ToShovelArrayOutput() ShovelArrayOutput
	ToShovelArrayOutputWithContext(context.Context) ShovelArrayOutput
}

type ShovelArray []ShovelInput

func (ShovelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Shovel)(nil)).Elem()
}

func (i ShovelArray) ToShovelArrayOutput() ShovelArrayOutput {
	return i.ToShovelArrayOutputWithContext(context.Background())
}

func (i ShovelArray) ToShovelArrayOutputWithContext(ctx context.Context) ShovelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelArrayOutput)
}

// ShovelMapInput is an input type that accepts ShovelMap and ShovelMapOutput values.
// You can construct a concrete instance of `ShovelMapInput` via:
//
//	ShovelMap{ "key": ShovelArgs{...} }
type ShovelMapInput interface {
	pulumi.Input

	ToShovelMapOutput() ShovelMapOutput
	ToShovelMapOutputWithContext(context.Context) ShovelMapOutput
}

type ShovelMap map[string]ShovelInput

func (ShovelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Shovel)(nil)).Elem()
}

func (i ShovelMap) ToShovelMapOutput() ShovelMapOutput {
	return i.ToShovelMapOutputWithContext(context.Background())
}

func (i ShovelMap) ToShovelMapOutputWithContext(ctx context.Context) ShovelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelMapOutput)
}

type ShovelOutput struct{ *pulumi.OutputState }

func (ShovelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Shovel)(nil)).Elem()
}

func (o ShovelOutput) ToShovelOutput() ShovelOutput {
	return o
}

func (o ShovelOutput) ToShovelOutputWithContext(ctx context.Context) ShovelOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ShovelOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Shovel) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ShovelOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Shovel) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ShovelOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Shovel) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ShovelOutput) Spec() ShovelSpecOutput {
	return o.ApplyT(func(v *Shovel) ShovelSpecOutput { return v.Spec }).(ShovelSpecOutput)
}

func (o ShovelOutput) Status() ShovelStatusPtrOutput {
	return o.ApplyT(func(v *Shovel) ShovelStatusPtrOutput { return v.Status }).(ShovelStatusPtrOutput)
}

type ShovelArrayOutput struct{ *pulumi.OutputState }

func (ShovelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Shovel)(nil)).Elem()
}

func (o ShovelArrayOutput) ToShovelArrayOutput() ShovelArrayOutput {
	return o
}

func (o ShovelArrayOutput) ToShovelArrayOutputWithContext(ctx context.Context) ShovelArrayOutput {
	return o
}

func (o ShovelArrayOutput) Index(i pulumi.IntInput) ShovelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Shovel {
		return vs[0].([]*Shovel)[vs[1].(int)]
	}).(ShovelOutput)
}

type ShovelMapOutput struct{ *pulumi.OutputState }

func (ShovelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Shovel)(nil)).Elem()
}

func (o ShovelMapOutput) ToShovelMapOutput() ShovelMapOutput {
	return o
}

func (o ShovelMapOutput) ToShovelMapOutputWithContext(ctx context.Context) ShovelMapOutput {
	return o
}

func (o ShovelMapOutput) MapIndex(k pulumi.StringInput) ShovelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Shovel {
		return vs[0].(map[string]*Shovel)[vs[1].(string)]
	}).(ShovelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelInput)(nil)).Elem(), &Shovel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelArrayInput)(nil)).Elem(), ShovelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelMapInput)(nil)).Elem(), ShovelMap{})
	pulumi.RegisterOutputType(ShovelOutput{})
	pulumi.RegisterOutputType(ShovelArrayOutput{})
	pulumi.RegisterOutputType(ShovelMapOutput{})
}
