// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Federation is the Schema for the federations API
type FederationPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     FederationSpecPatchPtrOutput    `pulumi:"spec"`
	Status   FederationStatusPatchPtrOutput  `pulumi:"status"`
}

// NewFederationPatch registers a new resource with the given unique name, arguments, and options.
func NewFederationPatch(ctx *pulumi.Context,
	name string, args *FederationPatchArgs, opts ...pulumi.ResourceOption) (*FederationPatch, error) {
	if args == nil {
		args = &FederationPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Federation")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FederationPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:FederationPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederationPatch gets an existing FederationPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederationPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederationPatchState, opts ...pulumi.ResourceOption) (*FederationPatch, error) {
	var resource FederationPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:FederationPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederationPatch resources.
type federationPatchState struct {
}

type FederationPatchState struct {
}

func (FederationPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*federationPatchState)(nil)).Elem()
}

type federationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *FederationSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a FederationPatch resource.
type FederationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     FederationSpecPatchPtrInput
}

func (FederationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federationPatchArgs)(nil)).Elem()
}

type FederationPatchInput interface {
	pulumi.Input

	ToFederationPatchOutput() FederationPatchOutput
	ToFederationPatchOutputWithContext(ctx context.Context) FederationPatchOutput
}

func (*FederationPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**FederationPatch)(nil)).Elem()
}

func (i *FederationPatch) ToFederationPatchOutput() FederationPatchOutput {
	return i.ToFederationPatchOutputWithContext(context.Background())
}

func (i *FederationPatch) ToFederationPatchOutputWithContext(ctx context.Context) FederationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationPatchOutput)
}

// FederationPatchArrayInput is an input type that accepts FederationPatchArray and FederationPatchArrayOutput values.
// You can construct a concrete instance of `FederationPatchArrayInput` via:
//
//	FederationPatchArray{ FederationPatchArgs{...} }
type FederationPatchArrayInput interface {
	pulumi.Input

	ToFederationPatchArrayOutput() FederationPatchArrayOutput
	ToFederationPatchArrayOutputWithContext(context.Context) FederationPatchArrayOutput
}

type FederationPatchArray []FederationPatchInput

func (FederationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederationPatch)(nil)).Elem()
}

func (i FederationPatchArray) ToFederationPatchArrayOutput() FederationPatchArrayOutput {
	return i.ToFederationPatchArrayOutputWithContext(context.Background())
}

func (i FederationPatchArray) ToFederationPatchArrayOutputWithContext(ctx context.Context) FederationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationPatchArrayOutput)
}

// FederationPatchMapInput is an input type that accepts FederationPatchMap and FederationPatchMapOutput values.
// You can construct a concrete instance of `FederationPatchMapInput` via:
//
//	FederationPatchMap{ "key": FederationPatchArgs{...} }
type FederationPatchMapInput interface {
	pulumi.Input

	ToFederationPatchMapOutput() FederationPatchMapOutput
	ToFederationPatchMapOutputWithContext(context.Context) FederationPatchMapOutput
}

type FederationPatchMap map[string]FederationPatchInput

func (FederationPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederationPatch)(nil)).Elem()
}

func (i FederationPatchMap) ToFederationPatchMapOutput() FederationPatchMapOutput {
	return i.ToFederationPatchMapOutputWithContext(context.Background())
}

func (i FederationPatchMap) ToFederationPatchMapOutputWithContext(ctx context.Context) FederationPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationPatchMapOutput)
}

type FederationPatchOutput struct{ *pulumi.OutputState }

func (FederationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederationPatch)(nil)).Elem()
}

func (o FederationPatchOutput) ToFederationPatchOutput() FederationPatchOutput {
	return o
}

func (o FederationPatchOutput) ToFederationPatchOutputWithContext(ctx context.Context) FederationPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FederationPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederationPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FederationPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederationPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FederationPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *FederationPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o FederationPatchOutput) Spec() FederationSpecPatchPtrOutput {
	return o.ApplyT(func(v *FederationPatch) FederationSpecPatchPtrOutput { return v.Spec }).(FederationSpecPatchPtrOutput)
}

func (o FederationPatchOutput) Status() FederationStatusPatchPtrOutput {
	return o.ApplyT(func(v *FederationPatch) FederationStatusPatchPtrOutput { return v.Status }).(FederationStatusPatchPtrOutput)
}

type FederationPatchArrayOutput struct{ *pulumi.OutputState }

func (FederationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederationPatch)(nil)).Elem()
}

func (o FederationPatchArrayOutput) ToFederationPatchArrayOutput() FederationPatchArrayOutput {
	return o
}

func (o FederationPatchArrayOutput) ToFederationPatchArrayOutputWithContext(ctx context.Context) FederationPatchArrayOutput {
	return o
}

func (o FederationPatchArrayOutput) Index(i pulumi.IntInput) FederationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederationPatch {
		return vs[0].([]*FederationPatch)[vs[1].(int)]
	}).(FederationPatchOutput)
}

type FederationPatchMapOutput struct{ *pulumi.OutputState }

func (FederationPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederationPatch)(nil)).Elem()
}

func (o FederationPatchMapOutput) ToFederationPatchMapOutput() FederationPatchMapOutput {
	return o
}

func (o FederationPatchMapOutput) ToFederationPatchMapOutputWithContext(ctx context.Context) FederationPatchMapOutput {
	return o
}

func (o FederationPatchMapOutput) MapIndex(k pulumi.StringInput) FederationPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederationPatch {
		return vs[0].(map[string]*FederationPatch)[vs[1].(string)]
	}).(FederationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederationPatchInput)(nil)).Elem(), &FederationPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationPatchArrayInput)(nil)).Elem(), FederationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationPatchMapInput)(nil)).Elem(), FederationPatchMap{})
	pulumi.RegisterOutputType(FederationPatchOutput{})
	pulumi.RegisterOutputType(FederationPatchArrayOutput{})
	pulumi.RegisterOutputType(FederationPatchMapOutput{})
}
