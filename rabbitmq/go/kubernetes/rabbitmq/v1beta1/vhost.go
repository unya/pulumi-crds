// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Vhost is the Schema for the vhosts API
type Vhost struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     VhostSpecOutput         `pulumi:"spec"`
	Status   VhostStatusPtrOutput    `pulumi:"status"`
}

// NewVhost registers a new resource with the given unique name, arguments, and options.
func NewVhost(ctx *pulumi.Context,
	name string, args *VhostArgs, opts ...pulumi.ResourceOption) (*Vhost, error) {
	if args == nil {
		args = &VhostArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Vhost")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Vhost
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:Vhost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVhost gets an existing Vhost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVhost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VhostState, opts ...pulumi.ResourceOption) (*Vhost, error) {
	var resource Vhost
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:Vhost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vhost resources.
type vhostState struct {
}

type VhostState struct {
}

func (VhostState) ElementType() reflect.Type {
	return reflect.TypeOf((*vhostState)(nil)).Elem()
}

type vhostArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VhostSpec         `pulumi:"spec"`
}

// The set of arguments for constructing a Vhost resource.
type VhostArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VhostSpecPtrInput
}

func (VhostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vhostArgs)(nil)).Elem()
}

type VhostInput interface {
	pulumi.Input

	ToVhostOutput() VhostOutput
	ToVhostOutputWithContext(ctx context.Context) VhostOutput
}

func (*Vhost) ElementType() reflect.Type {
	return reflect.TypeOf((**Vhost)(nil)).Elem()
}

func (i *Vhost) ToVhostOutput() VhostOutput {
	return i.ToVhostOutputWithContext(context.Background())
}

func (i *Vhost) ToVhostOutputWithContext(ctx context.Context) VhostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostOutput)
}

// VhostArrayInput is an input type that accepts VhostArray and VhostArrayOutput values.
// You can construct a concrete instance of `VhostArrayInput` via:
//
//	VhostArray{ VhostArgs{...} }
type VhostArrayInput interface {
	pulumi.Input

	ToVhostArrayOutput() VhostArrayOutput
	ToVhostArrayOutputWithContext(context.Context) VhostArrayOutput
}

type VhostArray []VhostInput

func (VhostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vhost)(nil)).Elem()
}

func (i VhostArray) ToVhostArrayOutput() VhostArrayOutput {
	return i.ToVhostArrayOutputWithContext(context.Background())
}

func (i VhostArray) ToVhostArrayOutputWithContext(ctx context.Context) VhostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostArrayOutput)
}

// VhostMapInput is an input type that accepts VhostMap and VhostMapOutput values.
// You can construct a concrete instance of `VhostMapInput` via:
//
//	VhostMap{ "key": VhostArgs{...} }
type VhostMapInput interface {
	pulumi.Input

	ToVhostMapOutput() VhostMapOutput
	ToVhostMapOutputWithContext(context.Context) VhostMapOutput
}

type VhostMap map[string]VhostInput

func (VhostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vhost)(nil)).Elem()
}

func (i VhostMap) ToVhostMapOutput() VhostMapOutput {
	return i.ToVhostMapOutputWithContext(context.Background())
}

func (i VhostMap) ToVhostMapOutputWithContext(ctx context.Context) VhostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostMapOutput)
}

type VhostOutput struct{ *pulumi.OutputState }

func (VhostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vhost)(nil)).Elem()
}

func (o VhostOutput) ToVhostOutput() VhostOutput {
	return o
}

func (o VhostOutput) ToVhostOutputWithContext(ctx context.Context) VhostOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VhostOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Vhost) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VhostOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Vhost) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VhostOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Vhost) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VhostOutput) Spec() VhostSpecOutput {
	return o.ApplyT(func(v *Vhost) VhostSpecOutput { return v.Spec }).(VhostSpecOutput)
}

func (o VhostOutput) Status() VhostStatusPtrOutput {
	return o.ApplyT(func(v *Vhost) VhostStatusPtrOutput { return v.Status }).(VhostStatusPtrOutput)
}

type VhostArrayOutput struct{ *pulumi.OutputState }

func (VhostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vhost)(nil)).Elem()
}

func (o VhostArrayOutput) ToVhostArrayOutput() VhostArrayOutput {
	return o
}

func (o VhostArrayOutput) ToVhostArrayOutputWithContext(ctx context.Context) VhostArrayOutput {
	return o
}

func (o VhostArrayOutput) Index(i pulumi.IntInput) VhostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vhost {
		return vs[0].([]*Vhost)[vs[1].(int)]
	}).(VhostOutput)
}

type VhostMapOutput struct{ *pulumi.OutputState }

func (VhostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vhost)(nil)).Elem()
}

func (o VhostMapOutput) ToVhostMapOutput() VhostMapOutput {
	return o
}

func (o VhostMapOutput) ToVhostMapOutputWithContext(ctx context.Context) VhostMapOutput {
	return o
}

func (o VhostMapOutput) MapIndex(k pulumi.StringInput) VhostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vhost {
		return vs[0].(map[string]*Vhost)[vs[1].(string)]
	}).(VhostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VhostInput)(nil)).Elem(), &Vhost{})
	pulumi.RegisterInputType(reflect.TypeOf((*VhostArrayInput)(nil)).Elem(), VhostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VhostMapInput)(nil)).Elem(), VhostMap{})
	pulumi.RegisterOutputType(VhostOutput{})
	pulumi.RegisterOutputType(VhostArrayOutput{})
	pulumi.RegisterOutputType(VhostMapOutput{})
}
