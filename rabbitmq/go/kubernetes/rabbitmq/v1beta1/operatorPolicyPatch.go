// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// OperatorPolicy is the Schema for the operator policies API
type OperatorPolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput    `pulumi:"metadata"`
	Spec     OperatorPolicySpecPatchPtrOutput   `pulumi:"spec"`
	Status   OperatorPolicyStatusPatchPtrOutput `pulumi:"status"`
}

// NewOperatorPolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewOperatorPolicyPatch(ctx *pulumi.Context,
	name string, args *OperatorPolicyPatchArgs, opts ...pulumi.ResourceOption) (*OperatorPolicyPatch, error) {
	if args == nil {
		args = &OperatorPolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("OperatorPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OperatorPolicyPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:OperatorPolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperatorPolicyPatch gets an existing OperatorPolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperatorPolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperatorPolicyPatchState, opts ...pulumi.ResourceOption) (*OperatorPolicyPatch, error) {
	var resource OperatorPolicyPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:OperatorPolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperatorPolicyPatch resources.
type operatorPolicyPatchState struct {
}

type OperatorPolicyPatchState struct {
}

func (OperatorPolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorPolicyPatchState)(nil)).Elem()
}

type operatorPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *OperatorPolicySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a OperatorPolicyPatch resource.
type OperatorPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     OperatorPolicySpecPatchPtrInput
}

func (OperatorPolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorPolicyPatchArgs)(nil)).Elem()
}

type OperatorPolicyPatchInput interface {
	pulumi.Input

	ToOperatorPolicyPatchOutput() OperatorPolicyPatchOutput
	ToOperatorPolicyPatchOutputWithContext(ctx context.Context) OperatorPolicyPatchOutput
}

func (*OperatorPolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicyPatch)(nil)).Elem()
}

func (i *OperatorPolicyPatch) ToOperatorPolicyPatchOutput() OperatorPolicyPatchOutput {
	return i.ToOperatorPolicyPatchOutputWithContext(context.Background())
}

func (i *OperatorPolicyPatch) ToOperatorPolicyPatchOutputWithContext(ctx context.Context) OperatorPolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyPatchOutput)
}

// OperatorPolicyPatchArrayInput is an input type that accepts OperatorPolicyPatchArray and OperatorPolicyPatchArrayOutput values.
// You can construct a concrete instance of `OperatorPolicyPatchArrayInput` via:
//
//	OperatorPolicyPatchArray{ OperatorPolicyPatchArgs{...} }
type OperatorPolicyPatchArrayInput interface {
	pulumi.Input

	ToOperatorPolicyPatchArrayOutput() OperatorPolicyPatchArrayOutput
	ToOperatorPolicyPatchArrayOutputWithContext(context.Context) OperatorPolicyPatchArrayOutput
}

type OperatorPolicyPatchArray []OperatorPolicyPatchInput

func (OperatorPolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorPolicyPatch)(nil)).Elem()
}

func (i OperatorPolicyPatchArray) ToOperatorPolicyPatchArrayOutput() OperatorPolicyPatchArrayOutput {
	return i.ToOperatorPolicyPatchArrayOutputWithContext(context.Background())
}

func (i OperatorPolicyPatchArray) ToOperatorPolicyPatchArrayOutputWithContext(ctx context.Context) OperatorPolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyPatchArrayOutput)
}

// OperatorPolicyPatchMapInput is an input type that accepts OperatorPolicyPatchMap and OperatorPolicyPatchMapOutput values.
// You can construct a concrete instance of `OperatorPolicyPatchMapInput` via:
//
//	OperatorPolicyPatchMap{ "key": OperatorPolicyPatchArgs{...} }
type OperatorPolicyPatchMapInput interface {
	pulumi.Input

	ToOperatorPolicyPatchMapOutput() OperatorPolicyPatchMapOutput
	ToOperatorPolicyPatchMapOutputWithContext(context.Context) OperatorPolicyPatchMapOutput
}

type OperatorPolicyPatchMap map[string]OperatorPolicyPatchInput

func (OperatorPolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorPolicyPatch)(nil)).Elem()
}

func (i OperatorPolicyPatchMap) ToOperatorPolicyPatchMapOutput() OperatorPolicyPatchMapOutput {
	return i.ToOperatorPolicyPatchMapOutputWithContext(context.Background())
}

func (i OperatorPolicyPatchMap) ToOperatorPolicyPatchMapOutputWithContext(ctx context.Context) OperatorPolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyPatchMapOutput)
}

type OperatorPolicyPatchOutput struct{ *pulumi.OutputState }

func (OperatorPolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicyPatch)(nil)).Elem()
}

func (o OperatorPolicyPatchOutput) ToOperatorPolicyPatchOutput() OperatorPolicyPatchOutput {
	return o
}

func (o OperatorPolicyPatchOutput) ToOperatorPolicyPatchOutputWithContext(ctx context.Context) OperatorPolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OperatorPolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OperatorPolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OperatorPolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o OperatorPolicyPatchOutput) Spec() OperatorPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPatch) OperatorPolicySpecPatchPtrOutput { return v.Spec }).(OperatorPolicySpecPatchPtrOutput)
}

func (o OperatorPolicyPatchOutput) Status() OperatorPolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPatch) OperatorPolicyStatusPatchPtrOutput { return v.Status }).(OperatorPolicyStatusPatchPtrOutput)
}

type OperatorPolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (OperatorPolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperatorPolicyPatch)(nil)).Elem()
}

func (o OperatorPolicyPatchArrayOutput) ToOperatorPolicyPatchArrayOutput() OperatorPolicyPatchArrayOutput {
	return o
}

func (o OperatorPolicyPatchArrayOutput) ToOperatorPolicyPatchArrayOutputWithContext(ctx context.Context) OperatorPolicyPatchArrayOutput {
	return o
}

func (o OperatorPolicyPatchArrayOutput) Index(i pulumi.IntInput) OperatorPolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperatorPolicyPatch {
		return vs[0].([]*OperatorPolicyPatch)[vs[1].(int)]
	}).(OperatorPolicyPatchOutput)
}

type OperatorPolicyPatchMapOutput struct{ *pulumi.OutputState }

func (OperatorPolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperatorPolicyPatch)(nil)).Elem()
}

func (o OperatorPolicyPatchMapOutput) ToOperatorPolicyPatchMapOutput() OperatorPolicyPatchMapOutput {
	return o
}

func (o OperatorPolicyPatchMapOutput) ToOperatorPolicyPatchMapOutputWithContext(ctx context.Context) OperatorPolicyPatchMapOutput {
	return o
}

func (o OperatorPolicyPatchMapOutput) MapIndex(k pulumi.StringInput) OperatorPolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperatorPolicyPatch {
		return vs[0].(map[string]*OperatorPolicyPatch)[vs[1].(string)]
	}).(OperatorPolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyPatchInput)(nil)).Elem(), &OperatorPolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyPatchArrayInput)(nil)).Elem(), OperatorPolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyPatchMapInput)(nil)).Elem(), OperatorPolicyPatchMap{})
	pulumi.RegisterOutputType(OperatorPolicyPatchOutput{})
	pulumi.RegisterOutputType(OperatorPolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(OperatorPolicyPatchMapOutput{})
}
