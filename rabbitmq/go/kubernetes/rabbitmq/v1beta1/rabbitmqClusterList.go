// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// RabbitmqClusterList is a list of RabbitmqCluster
type RabbitmqClusterList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of rabbitmqclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items RabbitmqClusterTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewRabbitmqClusterList registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqClusterList(ctx *pulumi.Context,
	name string, args *RabbitmqClusterListArgs, opts ...pulumi.ResourceOption) (*RabbitmqClusterList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("RabbitmqClusterList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource RabbitmqClusterList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:RabbitmqClusterList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqClusterList gets an existing RabbitmqClusterList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqClusterList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqClusterListState, opts ...pulumi.ResourceOption) (*RabbitmqClusterList, error) {
	var resource RabbitmqClusterList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:RabbitmqClusterList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqClusterList resources.
type rabbitmqClusterListState struct {
}

type RabbitmqClusterListState struct {
}

func (RabbitmqClusterListState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqClusterListState)(nil)).Elem()
}

type rabbitmqClusterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of rabbitmqclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []RabbitmqClusterType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a RabbitmqClusterList resource.
type RabbitmqClusterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of rabbitmqclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items RabbitmqClusterTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (RabbitmqClusterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqClusterListArgs)(nil)).Elem()
}

type RabbitmqClusterListInput interface {
	pulumi.Input

	ToRabbitmqClusterListOutput() RabbitmqClusterListOutput
	ToRabbitmqClusterListOutputWithContext(ctx context.Context) RabbitmqClusterListOutput
}

func (*RabbitmqClusterList) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqClusterList)(nil)).Elem()
}

func (i *RabbitmqClusterList) ToRabbitmqClusterListOutput() RabbitmqClusterListOutput {
	return i.ToRabbitmqClusterListOutputWithContext(context.Background())
}

func (i *RabbitmqClusterList) ToRabbitmqClusterListOutputWithContext(ctx context.Context) RabbitmqClusterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterListOutput)
}

// RabbitmqClusterListArrayInput is an input type that accepts RabbitmqClusterListArray and RabbitmqClusterListArrayOutput values.
// You can construct a concrete instance of `RabbitmqClusterListArrayInput` via:
//
//	RabbitmqClusterListArray{ RabbitmqClusterListArgs{...} }
type RabbitmqClusterListArrayInput interface {
	pulumi.Input

	ToRabbitmqClusterListArrayOutput() RabbitmqClusterListArrayOutput
	ToRabbitmqClusterListArrayOutputWithContext(context.Context) RabbitmqClusterListArrayOutput
}

type RabbitmqClusterListArray []RabbitmqClusterListInput

func (RabbitmqClusterListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqClusterList)(nil)).Elem()
}

func (i RabbitmqClusterListArray) ToRabbitmqClusterListArrayOutput() RabbitmqClusterListArrayOutput {
	return i.ToRabbitmqClusterListArrayOutputWithContext(context.Background())
}

func (i RabbitmqClusterListArray) ToRabbitmqClusterListArrayOutputWithContext(ctx context.Context) RabbitmqClusterListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterListArrayOutput)
}

// RabbitmqClusterListMapInput is an input type that accepts RabbitmqClusterListMap and RabbitmqClusterListMapOutput values.
// You can construct a concrete instance of `RabbitmqClusterListMapInput` via:
//
//	RabbitmqClusterListMap{ "key": RabbitmqClusterListArgs{...} }
type RabbitmqClusterListMapInput interface {
	pulumi.Input

	ToRabbitmqClusterListMapOutput() RabbitmqClusterListMapOutput
	ToRabbitmqClusterListMapOutputWithContext(context.Context) RabbitmqClusterListMapOutput
}

type RabbitmqClusterListMap map[string]RabbitmqClusterListInput

func (RabbitmqClusterListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqClusterList)(nil)).Elem()
}

func (i RabbitmqClusterListMap) ToRabbitmqClusterListMapOutput() RabbitmqClusterListMapOutput {
	return i.ToRabbitmqClusterListMapOutputWithContext(context.Background())
}

func (i RabbitmqClusterListMap) ToRabbitmqClusterListMapOutputWithContext(ctx context.Context) RabbitmqClusterListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqClusterListMapOutput)
}

type RabbitmqClusterListOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqClusterList)(nil)).Elem()
}

func (o RabbitmqClusterListOutput) ToRabbitmqClusterListOutput() RabbitmqClusterListOutput {
	return o
}

func (o RabbitmqClusterListOutput) ToRabbitmqClusterListOutputWithContext(ctx context.Context) RabbitmqClusterListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o RabbitmqClusterListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqClusterList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of rabbitmqclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o RabbitmqClusterListOutput) Items() RabbitmqClusterTypeArrayOutput {
	return o.ApplyT(func(v *RabbitmqClusterList) RabbitmqClusterTypeArrayOutput { return v.Items }).(RabbitmqClusterTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RabbitmqClusterListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqClusterList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o RabbitmqClusterListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *RabbitmqClusterList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type RabbitmqClusterListArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqClusterList)(nil)).Elem()
}

func (o RabbitmqClusterListArrayOutput) ToRabbitmqClusterListArrayOutput() RabbitmqClusterListArrayOutput {
	return o
}

func (o RabbitmqClusterListArrayOutput) ToRabbitmqClusterListArrayOutputWithContext(ctx context.Context) RabbitmqClusterListArrayOutput {
	return o
}

func (o RabbitmqClusterListArrayOutput) Index(i pulumi.IntInput) RabbitmqClusterListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqClusterList {
		return vs[0].([]*RabbitmqClusterList)[vs[1].(int)]
	}).(RabbitmqClusterListOutput)
}

type RabbitmqClusterListMapOutput struct{ *pulumi.OutputState }

func (RabbitmqClusterListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqClusterList)(nil)).Elem()
}

func (o RabbitmqClusterListMapOutput) ToRabbitmqClusterListMapOutput() RabbitmqClusterListMapOutput {
	return o
}

func (o RabbitmqClusterListMapOutput) ToRabbitmqClusterListMapOutputWithContext(ctx context.Context) RabbitmqClusterListMapOutput {
	return o
}

func (o RabbitmqClusterListMapOutput) MapIndex(k pulumi.StringInput) RabbitmqClusterListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqClusterList {
		return vs[0].(map[string]*RabbitmqClusterList)[vs[1].(string)]
	}).(RabbitmqClusterListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterListInput)(nil)).Elem(), &RabbitmqClusterList{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterListArrayInput)(nil)).Elem(), RabbitmqClusterListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqClusterListMapInput)(nil)).Elem(), RabbitmqClusterListMap{})
	pulumi.RegisterOutputType(RabbitmqClusterListOutput{})
	pulumi.RegisterOutputType(RabbitmqClusterListArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqClusterListMapOutput{})
}
