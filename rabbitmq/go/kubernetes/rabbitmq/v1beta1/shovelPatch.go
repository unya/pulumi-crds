// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Shovel is the Schema for the shovels API
type ShovelPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ShovelSpecPatchPtrOutput        `pulumi:"spec"`
	Status   ShovelStatusPatchPtrOutput      `pulumi:"status"`
}

// NewShovelPatch registers a new resource with the given unique name, arguments, and options.
func NewShovelPatch(ctx *pulumi.Context,
	name string, args *ShovelPatchArgs, opts ...pulumi.ResourceOption) (*ShovelPatch, error) {
	if args == nil {
		args = &ShovelPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("Shovel")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ShovelPatch
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:ShovelPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShovelPatch gets an existing ShovelPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShovelPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShovelPatchState, opts ...pulumi.ResourceOption) (*ShovelPatch, error) {
	var resource ShovelPatch
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:ShovelPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShovelPatch resources.
type shovelPatchState struct {
}

type ShovelPatchState struct {
}

func (ShovelPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*shovelPatchState)(nil)).Elem()
}

type shovelPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ShovelSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a ShovelPatch resource.
type ShovelPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ShovelSpecPatchPtrInput
}

func (ShovelPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shovelPatchArgs)(nil)).Elem()
}

type ShovelPatchInput interface {
	pulumi.Input

	ToShovelPatchOutput() ShovelPatchOutput
	ToShovelPatchOutputWithContext(ctx context.Context) ShovelPatchOutput
}

func (*ShovelPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ShovelPatch)(nil)).Elem()
}

func (i *ShovelPatch) ToShovelPatchOutput() ShovelPatchOutput {
	return i.ToShovelPatchOutputWithContext(context.Background())
}

func (i *ShovelPatch) ToShovelPatchOutputWithContext(ctx context.Context) ShovelPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelPatchOutput)
}

// ShovelPatchArrayInput is an input type that accepts ShovelPatchArray and ShovelPatchArrayOutput values.
// You can construct a concrete instance of `ShovelPatchArrayInput` via:
//
//	ShovelPatchArray{ ShovelPatchArgs{...} }
type ShovelPatchArrayInput interface {
	pulumi.Input

	ToShovelPatchArrayOutput() ShovelPatchArrayOutput
	ToShovelPatchArrayOutputWithContext(context.Context) ShovelPatchArrayOutput
}

type ShovelPatchArray []ShovelPatchInput

func (ShovelPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShovelPatch)(nil)).Elem()
}

func (i ShovelPatchArray) ToShovelPatchArrayOutput() ShovelPatchArrayOutput {
	return i.ToShovelPatchArrayOutputWithContext(context.Background())
}

func (i ShovelPatchArray) ToShovelPatchArrayOutputWithContext(ctx context.Context) ShovelPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelPatchArrayOutput)
}

// ShovelPatchMapInput is an input type that accepts ShovelPatchMap and ShovelPatchMapOutput values.
// You can construct a concrete instance of `ShovelPatchMapInput` via:
//
//	ShovelPatchMap{ "key": ShovelPatchArgs{...} }
type ShovelPatchMapInput interface {
	pulumi.Input

	ToShovelPatchMapOutput() ShovelPatchMapOutput
	ToShovelPatchMapOutputWithContext(context.Context) ShovelPatchMapOutput
}

type ShovelPatchMap map[string]ShovelPatchInput

func (ShovelPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShovelPatch)(nil)).Elem()
}

func (i ShovelPatchMap) ToShovelPatchMapOutput() ShovelPatchMapOutput {
	return i.ToShovelPatchMapOutputWithContext(context.Background())
}

func (i ShovelPatchMap) ToShovelPatchMapOutputWithContext(ctx context.Context) ShovelPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelPatchMapOutput)
}

type ShovelPatchOutput struct{ *pulumi.OutputState }

func (ShovelPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShovelPatch)(nil)).Elem()
}

func (o ShovelPatchOutput) ToShovelPatchOutput() ShovelPatchOutput {
	return o
}

func (o ShovelPatchOutput) ToShovelPatchOutputWithContext(ctx context.Context) ShovelPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ShovelPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ShovelPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ShovelPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ShovelPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ShovelPatchOutput) Spec() ShovelSpecPatchPtrOutput {
	return o.ApplyT(func(v *ShovelPatch) ShovelSpecPatchPtrOutput { return v.Spec }).(ShovelSpecPatchPtrOutput)
}

func (o ShovelPatchOutput) Status() ShovelStatusPatchPtrOutput {
	return o.ApplyT(func(v *ShovelPatch) ShovelStatusPatchPtrOutput { return v.Status }).(ShovelStatusPatchPtrOutput)
}

type ShovelPatchArrayOutput struct{ *pulumi.OutputState }

func (ShovelPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShovelPatch)(nil)).Elem()
}

func (o ShovelPatchArrayOutput) ToShovelPatchArrayOutput() ShovelPatchArrayOutput {
	return o
}

func (o ShovelPatchArrayOutput) ToShovelPatchArrayOutputWithContext(ctx context.Context) ShovelPatchArrayOutput {
	return o
}

func (o ShovelPatchArrayOutput) Index(i pulumi.IntInput) ShovelPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShovelPatch {
		return vs[0].([]*ShovelPatch)[vs[1].(int)]
	}).(ShovelPatchOutput)
}

type ShovelPatchMapOutput struct{ *pulumi.OutputState }

func (ShovelPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShovelPatch)(nil)).Elem()
}

func (o ShovelPatchMapOutput) ToShovelPatchMapOutput() ShovelPatchMapOutput {
	return o
}

func (o ShovelPatchMapOutput) ToShovelPatchMapOutputWithContext(ctx context.Context) ShovelPatchMapOutput {
	return o
}

func (o ShovelPatchMapOutput) MapIndex(k pulumi.StringInput) ShovelPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShovelPatch {
		return vs[0].(map[string]*ShovelPatch)[vs[1].(string)]
	}).(ShovelPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelPatchInput)(nil)).Elem(), &ShovelPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelPatchArrayInput)(nil)).Elem(), ShovelPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelPatchMapInput)(nil)).Elem(), ShovelPatchMap{})
	pulumi.RegisterOutputType(ShovelPatchOutput{})
	pulumi.RegisterOutputType(ShovelPatchArrayOutput{})
	pulumi.RegisterOutputType(ShovelPatchMapOutput{})
}
