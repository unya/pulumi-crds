// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VhostList is a list of Vhost
type VhostList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VhostTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVhostList registers a new resource with the given unique name, arguments, and options.
func NewVhostList(ctx *pulumi.Context,
	name string, args *VhostListArgs, opts ...pulumi.ResourceOption) (*VhostList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("VhostList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VhostList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:VhostList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVhostList gets an existing VhostList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVhostList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VhostListState, opts ...pulumi.ResourceOption) (*VhostList, error) {
	var resource VhostList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:VhostList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VhostList resources.
type vhostListState struct {
}

type VhostListState struct {
}

func (VhostListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vhostListState)(nil)).Elem()
}

type vhostListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VhostType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VhostList resource.
type VhostListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VhostTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VhostListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vhostListArgs)(nil)).Elem()
}

type VhostListInput interface {
	pulumi.Input

	ToVhostListOutput() VhostListOutput
	ToVhostListOutputWithContext(ctx context.Context) VhostListOutput
}

func (*VhostList) ElementType() reflect.Type {
	return reflect.TypeOf((**VhostList)(nil)).Elem()
}

func (i *VhostList) ToVhostListOutput() VhostListOutput {
	return i.ToVhostListOutputWithContext(context.Background())
}

func (i *VhostList) ToVhostListOutputWithContext(ctx context.Context) VhostListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostListOutput)
}

// VhostListArrayInput is an input type that accepts VhostListArray and VhostListArrayOutput values.
// You can construct a concrete instance of `VhostListArrayInput` via:
//
//	VhostListArray{ VhostListArgs{...} }
type VhostListArrayInput interface {
	pulumi.Input

	ToVhostListArrayOutput() VhostListArrayOutput
	ToVhostListArrayOutputWithContext(context.Context) VhostListArrayOutput
}

type VhostListArray []VhostListInput

func (VhostListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VhostList)(nil)).Elem()
}

func (i VhostListArray) ToVhostListArrayOutput() VhostListArrayOutput {
	return i.ToVhostListArrayOutputWithContext(context.Background())
}

func (i VhostListArray) ToVhostListArrayOutputWithContext(ctx context.Context) VhostListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostListArrayOutput)
}

// VhostListMapInput is an input type that accepts VhostListMap and VhostListMapOutput values.
// You can construct a concrete instance of `VhostListMapInput` via:
//
//	VhostListMap{ "key": VhostListArgs{...} }
type VhostListMapInput interface {
	pulumi.Input

	ToVhostListMapOutput() VhostListMapOutput
	ToVhostListMapOutputWithContext(context.Context) VhostListMapOutput
}

type VhostListMap map[string]VhostListInput

func (VhostListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VhostList)(nil)).Elem()
}

func (i VhostListMap) ToVhostListMapOutput() VhostListMapOutput {
	return i.ToVhostListMapOutputWithContext(context.Background())
}

func (i VhostListMap) ToVhostListMapOutputWithContext(ctx context.Context) VhostListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VhostListMapOutput)
}

type VhostListOutput struct{ *pulumi.OutputState }

func (VhostListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VhostList)(nil)).Elem()
}

func (o VhostListOutput) ToVhostListOutput() VhostListOutput {
	return o
}

func (o VhostListOutput) ToVhostListOutputWithContext(ctx context.Context) VhostListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VhostListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VhostList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vhosts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VhostListOutput) Items() VhostTypeArrayOutput {
	return o.ApplyT(func(v *VhostList) VhostTypeArrayOutput { return v.Items }).(VhostTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VhostListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VhostList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VhostListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VhostList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VhostListArrayOutput struct{ *pulumi.OutputState }

func (VhostListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VhostList)(nil)).Elem()
}

func (o VhostListArrayOutput) ToVhostListArrayOutput() VhostListArrayOutput {
	return o
}

func (o VhostListArrayOutput) ToVhostListArrayOutputWithContext(ctx context.Context) VhostListArrayOutput {
	return o
}

func (o VhostListArrayOutput) Index(i pulumi.IntInput) VhostListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VhostList {
		return vs[0].([]*VhostList)[vs[1].(int)]
	}).(VhostListOutput)
}

type VhostListMapOutput struct{ *pulumi.OutputState }

func (VhostListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VhostList)(nil)).Elem()
}

func (o VhostListMapOutput) ToVhostListMapOutput() VhostListMapOutput {
	return o
}

func (o VhostListMapOutput) ToVhostListMapOutputWithContext(ctx context.Context) VhostListMapOutput {
	return o
}

func (o VhostListMapOutput) MapIndex(k pulumi.StringInput) VhostListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VhostList {
		return vs[0].(map[string]*VhostList)[vs[1].(string)]
	}).(VhostListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VhostListInput)(nil)).Elem(), &VhostList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VhostListArrayInput)(nil)).Elem(), VhostListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VhostListMapInput)(nil)).Elem(), VhostListMap{})
	pulumi.RegisterOutputType(VhostListOutput{})
	pulumi.RegisterOutputType(VhostListArrayOutput{})
	pulumi.RegisterOutputType(VhostListMapOutput{})
}
