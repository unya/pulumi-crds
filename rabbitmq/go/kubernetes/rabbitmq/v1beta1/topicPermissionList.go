// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TopicPermissionList is a list of TopicPermission
type TopicPermissionList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of topicpermissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items TopicPermissionTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewTopicPermissionList registers a new resource with the given unique name, arguments, and options.
func NewTopicPermissionList(ctx *pulumi.Context,
	name string, args *TopicPermissionListArgs, opts ...pulumi.ResourceOption) (*TopicPermissionList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("TopicPermissionList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TopicPermissionList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:TopicPermissionList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicPermissionList gets an existing TopicPermissionList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicPermissionList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicPermissionListState, opts ...pulumi.ResourceOption) (*TopicPermissionList, error) {
	var resource TopicPermissionList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:TopicPermissionList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicPermissionList resources.
type topicPermissionListState struct {
}

type TopicPermissionListState struct {
}

func (TopicPermissionListState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionListState)(nil)).Elem()
}

type topicPermissionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of topicpermissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []TopicPermissionType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a TopicPermissionList resource.
type TopicPermissionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of topicpermissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items TopicPermissionTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (TopicPermissionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionListArgs)(nil)).Elem()
}

type TopicPermissionListInput interface {
	pulumi.Input

	ToTopicPermissionListOutput() TopicPermissionListOutput
	ToTopicPermissionListOutputWithContext(ctx context.Context) TopicPermissionListOutput
}

func (*TopicPermissionList) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPermissionList)(nil)).Elem()
}

func (i *TopicPermissionList) ToTopicPermissionListOutput() TopicPermissionListOutput {
	return i.ToTopicPermissionListOutputWithContext(context.Background())
}

func (i *TopicPermissionList) ToTopicPermissionListOutputWithContext(ctx context.Context) TopicPermissionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionListOutput)
}

// TopicPermissionListArrayInput is an input type that accepts TopicPermissionListArray and TopicPermissionListArrayOutput values.
// You can construct a concrete instance of `TopicPermissionListArrayInput` via:
//
//	TopicPermissionListArray{ TopicPermissionListArgs{...} }
type TopicPermissionListArrayInput interface {
	pulumi.Input

	ToTopicPermissionListArrayOutput() TopicPermissionListArrayOutput
	ToTopicPermissionListArrayOutputWithContext(context.Context) TopicPermissionListArrayOutput
}

type TopicPermissionListArray []TopicPermissionListInput

func (TopicPermissionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicPermissionList)(nil)).Elem()
}

func (i TopicPermissionListArray) ToTopicPermissionListArrayOutput() TopicPermissionListArrayOutput {
	return i.ToTopicPermissionListArrayOutputWithContext(context.Background())
}

func (i TopicPermissionListArray) ToTopicPermissionListArrayOutputWithContext(ctx context.Context) TopicPermissionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionListArrayOutput)
}

// TopicPermissionListMapInput is an input type that accepts TopicPermissionListMap and TopicPermissionListMapOutput values.
// You can construct a concrete instance of `TopicPermissionListMapInput` via:
//
//	TopicPermissionListMap{ "key": TopicPermissionListArgs{...} }
type TopicPermissionListMapInput interface {
	pulumi.Input

	ToTopicPermissionListMapOutput() TopicPermissionListMapOutput
	ToTopicPermissionListMapOutputWithContext(context.Context) TopicPermissionListMapOutput
}

type TopicPermissionListMap map[string]TopicPermissionListInput

func (TopicPermissionListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicPermissionList)(nil)).Elem()
}

func (i TopicPermissionListMap) ToTopicPermissionListMapOutput() TopicPermissionListMapOutput {
	return i.ToTopicPermissionListMapOutputWithContext(context.Background())
}

func (i TopicPermissionListMap) ToTopicPermissionListMapOutputWithContext(ctx context.Context) TopicPermissionListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionListMapOutput)
}

type TopicPermissionListOutput struct{ *pulumi.OutputState }

func (TopicPermissionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicPermissionList)(nil)).Elem()
}

func (o TopicPermissionListOutput) ToTopicPermissionListOutput() TopicPermissionListOutput {
	return o
}

func (o TopicPermissionListOutput) ToTopicPermissionListOutputWithContext(ctx context.Context) TopicPermissionListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TopicPermissionListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicPermissionList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of topicpermissions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o TopicPermissionListOutput) Items() TopicPermissionTypeArrayOutput {
	return o.ApplyT(func(v *TopicPermissionList) TopicPermissionTypeArrayOutput { return v.Items }).(TopicPermissionTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TopicPermissionListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *TopicPermissionList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TopicPermissionListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *TopicPermissionList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type TopicPermissionListArrayOutput struct{ *pulumi.OutputState }

func (TopicPermissionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TopicPermissionList)(nil)).Elem()
}

func (o TopicPermissionListArrayOutput) ToTopicPermissionListArrayOutput() TopicPermissionListArrayOutput {
	return o
}

func (o TopicPermissionListArrayOutput) ToTopicPermissionListArrayOutputWithContext(ctx context.Context) TopicPermissionListArrayOutput {
	return o
}

func (o TopicPermissionListArrayOutput) Index(i pulumi.IntInput) TopicPermissionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TopicPermissionList {
		return vs[0].([]*TopicPermissionList)[vs[1].(int)]
	}).(TopicPermissionListOutput)
}

type TopicPermissionListMapOutput struct{ *pulumi.OutputState }

func (TopicPermissionListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TopicPermissionList)(nil)).Elem()
}

func (o TopicPermissionListMapOutput) ToTopicPermissionListMapOutput() TopicPermissionListMapOutput {
	return o
}

func (o TopicPermissionListMapOutput) ToTopicPermissionListMapOutputWithContext(ctx context.Context) TopicPermissionListMapOutput {
	return o
}

func (o TopicPermissionListMapOutput) MapIndex(k pulumi.StringInput) TopicPermissionListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TopicPermissionList {
		return vs[0].(map[string]*TopicPermissionList)[vs[1].(string)]
	}).(TopicPermissionListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionListInput)(nil)).Elem(), &TopicPermissionList{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionListArrayInput)(nil)).Elem(), TopicPermissionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionListMapInput)(nil)).Elem(), TopicPermissionListMap{})
	pulumi.RegisterOutputType(TopicPermissionListOutput{})
	pulumi.RegisterOutputType(TopicPermissionListArrayOutput{})
	pulumi.RegisterOutputType(TopicPermissionListMapOutput{})
}
