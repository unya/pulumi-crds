// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SchemaReplicationList is a list of SchemaReplication
type SchemaReplicationList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of schemareplications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SchemaReplicationTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSchemaReplicationList registers a new resource with the given unique name, arguments, and options.
func NewSchemaReplicationList(ctx *pulumi.Context,
	name string, args *SchemaReplicationListArgs, opts ...pulumi.ResourceOption) (*SchemaReplicationList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1beta1")
	args.Kind = pulumi.StringPtr("SchemaReplicationList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SchemaReplicationList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1beta1:SchemaReplicationList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaReplicationList gets an existing SchemaReplicationList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaReplicationList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaReplicationListState, opts ...pulumi.ResourceOption) (*SchemaReplicationList, error) {
	var resource SchemaReplicationList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1beta1:SchemaReplicationList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaReplicationList resources.
type schemaReplicationListState struct {
}

type SchemaReplicationListState struct {
}

func (SchemaReplicationListState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaReplicationListState)(nil)).Elem()
}

type schemaReplicationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of schemareplications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SchemaReplicationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SchemaReplicationList resource.
type SchemaReplicationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of schemareplications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SchemaReplicationTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SchemaReplicationListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaReplicationListArgs)(nil)).Elem()
}

type SchemaReplicationListInput interface {
	pulumi.Input

	ToSchemaReplicationListOutput() SchemaReplicationListOutput
	ToSchemaReplicationListOutputWithContext(ctx context.Context) SchemaReplicationListOutput
}

func (*SchemaReplicationList) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaReplicationList)(nil)).Elem()
}

func (i *SchemaReplicationList) ToSchemaReplicationListOutput() SchemaReplicationListOutput {
	return i.ToSchemaReplicationListOutputWithContext(context.Background())
}

func (i *SchemaReplicationList) ToSchemaReplicationListOutputWithContext(ctx context.Context) SchemaReplicationListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationListOutput)
}

// SchemaReplicationListArrayInput is an input type that accepts SchemaReplicationListArray and SchemaReplicationListArrayOutput values.
// You can construct a concrete instance of `SchemaReplicationListArrayInput` via:
//
//	SchemaReplicationListArray{ SchemaReplicationListArgs{...} }
type SchemaReplicationListArrayInput interface {
	pulumi.Input

	ToSchemaReplicationListArrayOutput() SchemaReplicationListArrayOutput
	ToSchemaReplicationListArrayOutputWithContext(context.Context) SchemaReplicationListArrayOutput
}

type SchemaReplicationListArray []SchemaReplicationListInput

func (SchemaReplicationListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaReplicationList)(nil)).Elem()
}

func (i SchemaReplicationListArray) ToSchemaReplicationListArrayOutput() SchemaReplicationListArrayOutput {
	return i.ToSchemaReplicationListArrayOutputWithContext(context.Background())
}

func (i SchemaReplicationListArray) ToSchemaReplicationListArrayOutputWithContext(ctx context.Context) SchemaReplicationListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationListArrayOutput)
}

// SchemaReplicationListMapInput is an input type that accepts SchemaReplicationListMap and SchemaReplicationListMapOutput values.
// You can construct a concrete instance of `SchemaReplicationListMapInput` via:
//
//	SchemaReplicationListMap{ "key": SchemaReplicationListArgs{...} }
type SchemaReplicationListMapInput interface {
	pulumi.Input

	ToSchemaReplicationListMapOutput() SchemaReplicationListMapOutput
	ToSchemaReplicationListMapOutputWithContext(context.Context) SchemaReplicationListMapOutput
}

type SchemaReplicationListMap map[string]SchemaReplicationListInput

func (SchemaReplicationListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaReplicationList)(nil)).Elem()
}

func (i SchemaReplicationListMap) ToSchemaReplicationListMapOutput() SchemaReplicationListMapOutput {
	return i.ToSchemaReplicationListMapOutputWithContext(context.Background())
}

func (i SchemaReplicationListMap) ToSchemaReplicationListMapOutputWithContext(ctx context.Context) SchemaReplicationListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaReplicationListMapOutput)
}

type SchemaReplicationListOutput struct{ *pulumi.OutputState }

func (SchemaReplicationListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaReplicationList)(nil)).Elem()
}

func (o SchemaReplicationListOutput) ToSchemaReplicationListOutput() SchemaReplicationListOutput {
	return o
}

func (o SchemaReplicationListOutput) ToSchemaReplicationListOutputWithContext(ctx context.Context) SchemaReplicationListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SchemaReplicationListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaReplicationList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of schemareplications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SchemaReplicationListOutput) Items() SchemaReplicationTypeArrayOutput {
	return o.ApplyT(func(v *SchemaReplicationList) SchemaReplicationTypeArrayOutput { return v.Items }).(SchemaReplicationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SchemaReplicationListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaReplicationList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SchemaReplicationListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SchemaReplicationList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SchemaReplicationListArrayOutput struct{ *pulumi.OutputState }

func (SchemaReplicationListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaReplicationList)(nil)).Elem()
}

func (o SchemaReplicationListArrayOutput) ToSchemaReplicationListArrayOutput() SchemaReplicationListArrayOutput {
	return o
}

func (o SchemaReplicationListArrayOutput) ToSchemaReplicationListArrayOutputWithContext(ctx context.Context) SchemaReplicationListArrayOutput {
	return o
}

func (o SchemaReplicationListArrayOutput) Index(i pulumi.IntInput) SchemaReplicationListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaReplicationList {
		return vs[0].([]*SchemaReplicationList)[vs[1].(int)]
	}).(SchemaReplicationListOutput)
}

type SchemaReplicationListMapOutput struct{ *pulumi.OutputState }

func (SchemaReplicationListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaReplicationList)(nil)).Elem()
}

func (o SchemaReplicationListMapOutput) ToSchemaReplicationListMapOutput() SchemaReplicationListMapOutput {
	return o
}

func (o SchemaReplicationListMapOutput) ToSchemaReplicationListMapOutputWithContext(ctx context.Context) SchemaReplicationListMapOutput {
	return o
}

func (o SchemaReplicationListMapOutput) MapIndex(k pulumi.StringInput) SchemaReplicationListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaReplicationList {
		return vs[0].(map[string]*SchemaReplicationList)[vs[1].(string)]
	}).(SchemaReplicationListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationListInput)(nil)).Elem(), &SchemaReplicationList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationListArrayInput)(nil)).Elem(), SchemaReplicationListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaReplicationListMapInput)(nil)).Elem(), SchemaReplicationListMap{})
	pulumi.RegisterOutputType(SchemaReplicationListOutput{})
	pulumi.RegisterOutputType(SchemaReplicationListArrayOutput{})
	pulumi.RegisterOutputType(SchemaReplicationListMapOutput{})
}
