// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// SuperStream is the Schema for the queues API
type SuperStreamType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SuperStreamSpec   `pulumi:"spec"`
	Status   *SuperStreamStatus `pulumi:"status"`
}

// SuperStreamTypeInput is an input type that accepts SuperStreamTypeArgs and SuperStreamTypeOutput values.
// You can construct a concrete instance of `SuperStreamTypeInput` via:
//
//	SuperStreamTypeArgs{...}
type SuperStreamTypeInput interface {
	pulumi.Input

	ToSuperStreamTypeOutput() SuperStreamTypeOutput
	ToSuperStreamTypeOutputWithContext(context.Context) SuperStreamTypeOutput
}

// SuperStream is the Schema for the queues API
type SuperStreamTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     SuperStreamSpecPtrInput   `pulumi:"spec"`
	Status   SuperStreamStatusPtrInput `pulumi:"status"`
}

func (SuperStreamTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamType)(nil)).Elem()
}

func (i SuperStreamTypeArgs) ToSuperStreamTypeOutput() SuperStreamTypeOutput {
	return i.ToSuperStreamTypeOutputWithContext(context.Background())
}

func (i SuperStreamTypeArgs) ToSuperStreamTypeOutputWithContext(ctx context.Context) SuperStreamTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamTypeOutput)
}

// SuperStreamTypeArrayInput is an input type that accepts SuperStreamTypeArray and SuperStreamTypeArrayOutput values.
// You can construct a concrete instance of `SuperStreamTypeArrayInput` via:
//
//	SuperStreamTypeArray{ SuperStreamTypeArgs{...} }
type SuperStreamTypeArrayInput interface {
	pulumi.Input

	ToSuperStreamTypeArrayOutput() SuperStreamTypeArrayOutput
	ToSuperStreamTypeArrayOutputWithContext(context.Context) SuperStreamTypeArrayOutput
}

type SuperStreamTypeArray []SuperStreamTypeInput

func (SuperStreamTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuperStreamType)(nil)).Elem()
}

func (i SuperStreamTypeArray) ToSuperStreamTypeArrayOutput() SuperStreamTypeArrayOutput {
	return i.ToSuperStreamTypeArrayOutputWithContext(context.Background())
}

func (i SuperStreamTypeArray) ToSuperStreamTypeArrayOutputWithContext(ctx context.Context) SuperStreamTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamTypeArrayOutput)
}

// SuperStream is the Schema for the queues API
type SuperStreamTypeOutput struct{ *pulumi.OutputState }

func (SuperStreamTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamType)(nil)).Elem()
}

func (o SuperStreamTypeOutput) ToSuperStreamTypeOutput() SuperStreamTypeOutput {
	return o
}

func (o SuperStreamTypeOutput) ToSuperStreamTypeOutputWithContext(ctx context.Context) SuperStreamTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SuperStreamTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SuperStreamTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SuperStreamType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o SuperStreamTypeOutput) Spec() SuperStreamSpecPtrOutput {
	return o.ApplyT(func(v SuperStreamType) *SuperStreamSpec { return v.Spec }).(SuperStreamSpecPtrOutput)
}

func (o SuperStreamTypeOutput) Status() SuperStreamStatusPtrOutput {
	return o.ApplyT(func(v SuperStreamType) *SuperStreamStatus { return v.Status }).(SuperStreamStatusPtrOutput)
}

type SuperStreamTypeArrayOutput struct{ *pulumi.OutputState }

func (SuperStreamTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuperStreamType)(nil)).Elem()
}

func (o SuperStreamTypeArrayOutput) ToSuperStreamTypeArrayOutput() SuperStreamTypeArrayOutput {
	return o
}

func (o SuperStreamTypeArrayOutput) ToSuperStreamTypeArrayOutputWithContext(ctx context.Context) SuperStreamTypeArrayOutput {
	return o
}

func (o SuperStreamTypeArrayOutput) Index(i pulumi.IntInput) SuperStreamTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuperStreamType {
		return vs[0].([]SuperStreamType)[vs[1].(int)]
	}).(SuperStreamTypeOutput)
}

// SuperStreamList is a list of SuperStream
type SuperStreamListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SuperStreamType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// SuperStreamListTypeInput is an input type that accepts SuperStreamListTypeArgs and SuperStreamListTypeOutput values.
// You can construct a concrete instance of `SuperStreamListTypeInput` via:
//
//	SuperStreamListTypeArgs{...}
type SuperStreamListTypeInput interface {
	pulumi.Input

	ToSuperStreamListTypeOutput() SuperStreamListTypeOutput
	ToSuperStreamListTypeOutputWithContext(context.Context) SuperStreamListTypeOutput
}

// SuperStreamList is a list of SuperStream
type SuperStreamListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SuperStreamTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (SuperStreamListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamListType)(nil)).Elem()
}

func (i SuperStreamListTypeArgs) ToSuperStreamListTypeOutput() SuperStreamListTypeOutput {
	return i.ToSuperStreamListTypeOutputWithContext(context.Background())
}

func (i SuperStreamListTypeArgs) ToSuperStreamListTypeOutputWithContext(ctx context.Context) SuperStreamListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamListTypeOutput)
}

// SuperStreamList is a list of SuperStream
type SuperStreamListTypeOutput struct{ *pulumi.OutputState }

func (SuperStreamListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamListType)(nil)).Elem()
}

func (o SuperStreamListTypeOutput) ToSuperStreamListTypeOutput() SuperStreamListTypeOutput {
	return o
}

func (o SuperStreamListTypeOutput) ToSuperStreamListTypeOutputWithContext(ctx context.Context) SuperStreamListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SuperStreamListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SuperStreamListTypeOutput) Items() SuperStreamTypeArrayOutput {
	return o.ApplyT(func(v SuperStreamListType) []SuperStreamType { return v.Items }).(SuperStreamTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v SuperStreamListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// SuperStream is the Schema for the queues API
type SuperStreamPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *SuperStreamSpecPatch   `pulumi:"spec"`
	Status   *SuperStreamStatusPatch `pulumi:"status"`
}

// SuperStreamPatchTypeInput is an input type that accepts SuperStreamPatchTypeArgs and SuperStreamPatchTypeOutput values.
// You can construct a concrete instance of `SuperStreamPatchTypeInput` via:
//
//	SuperStreamPatchTypeArgs{...}
type SuperStreamPatchTypeInput interface {
	pulumi.Input

	ToSuperStreamPatchTypeOutput() SuperStreamPatchTypeOutput
	ToSuperStreamPatchTypeOutputWithContext(context.Context) SuperStreamPatchTypeOutput
}

// SuperStream is the Schema for the queues API
type SuperStreamPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     SuperStreamSpecPatchPtrInput   `pulumi:"spec"`
	Status   SuperStreamStatusPatchPtrInput `pulumi:"status"`
}

func (SuperStreamPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamPatchType)(nil)).Elem()
}

func (i SuperStreamPatchTypeArgs) ToSuperStreamPatchTypeOutput() SuperStreamPatchTypeOutput {
	return i.ToSuperStreamPatchTypeOutputWithContext(context.Background())
}

func (i SuperStreamPatchTypeArgs) ToSuperStreamPatchTypeOutputWithContext(ctx context.Context) SuperStreamPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamPatchTypeOutput)
}

// SuperStream is the Schema for the queues API
type SuperStreamPatchTypeOutput struct{ *pulumi.OutputState }

func (SuperStreamPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamPatchType)(nil)).Elem()
}

func (o SuperStreamPatchTypeOutput) ToSuperStreamPatchTypeOutput() SuperStreamPatchTypeOutput {
	return o
}

func (o SuperStreamPatchTypeOutput) ToSuperStreamPatchTypeOutputWithContext(ctx context.Context) SuperStreamPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SuperStreamPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SuperStreamPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SuperStreamPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SuperStreamPatchTypeOutput) Spec() SuperStreamSpecPatchPtrOutput {
	return o.ApplyT(func(v SuperStreamPatchType) *SuperStreamSpecPatch { return v.Spec }).(SuperStreamSpecPatchPtrOutput)
}

func (o SuperStreamPatchTypeOutput) Status() SuperStreamStatusPatchPtrOutput {
	return o.ApplyT(func(v SuperStreamPatchType) *SuperStreamStatusPatch { return v.Status }).(SuperStreamStatusPatchPtrOutput)
}

// SuperStreamSpec defines the desired state of SuperStream
type SuperStreamSpec struct {
	// Name of the queue; required property.
	Name *string `pulumi:"name"`
	// Number of partitions to create within this super stream.
	// Defaults to '3'.
	Partitions               *int                                     `pulumi:"partitions"`
	RabbitmqClusterReference *SuperStreamSpecRabbitmqClusterReference `pulumi:"rabbitmqClusterReference"`
	// Routing keys to use for each of the partitions in the SuperStream
	// If unset, the routing keys for the partitions will be set to the index of the partitions
	RoutingKeys []string `pulumi:"routingKeys"`
	// Default to vhost '/'; cannot be updated
	Vhost *string `pulumi:"vhost"`
}

// SuperStreamSpecInput is an input type that accepts SuperStreamSpecArgs and SuperStreamSpecOutput values.
// You can construct a concrete instance of `SuperStreamSpecInput` via:
//
//	SuperStreamSpecArgs{...}
type SuperStreamSpecInput interface {
	pulumi.Input

	ToSuperStreamSpecOutput() SuperStreamSpecOutput
	ToSuperStreamSpecOutputWithContext(context.Context) SuperStreamSpecOutput
}

// SuperStreamSpec defines the desired state of SuperStream
type SuperStreamSpecArgs struct {
	// Name of the queue; required property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Number of partitions to create within this super stream.
	// Defaults to '3'.
	Partitions               pulumi.IntPtrInput                              `pulumi:"partitions"`
	RabbitmqClusterReference SuperStreamSpecRabbitmqClusterReferencePtrInput `pulumi:"rabbitmqClusterReference"`
	// Routing keys to use for each of the partitions in the SuperStream
	// If unset, the routing keys for the partitions will be set to the index of the partitions
	RoutingKeys pulumi.StringArrayInput `pulumi:"routingKeys"`
	// Default to vhost '/'; cannot be updated
	Vhost pulumi.StringPtrInput `pulumi:"vhost"`
}

func (SuperStreamSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpec)(nil)).Elem()
}

func (i SuperStreamSpecArgs) ToSuperStreamSpecOutput() SuperStreamSpecOutput {
	return i.ToSuperStreamSpecOutputWithContext(context.Background())
}

func (i SuperStreamSpecArgs) ToSuperStreamSpecOutputWithContext(ctx context.Context) SuperStreamSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecOutput)
}

func (i SuperStreamSpecArgs) ToSuperStreamSpecPtrOutput() SuperStreamSpecPtrOutput {
	return i.ToSuperStreamSpecPtrOutputWithContext(context.Background())
}

func (i SuperStreamSpecArgs) ToSuperStreamSpecPtrOutputWithContext(ctx context.Context) SuperStreamSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecOutput).ToSuperStreamSpecPtrOutputWithContext(ctx)
}

// SuperStreamSpecPtrInput is an input type that accepts SuperStreamSpecArgs, SuperStreamSpecPtr and SuperStreamSpecPtrOutput values.
// You can construct a concrete instance of `SuperStreamSpecPtrInput` via:
//
//	        SuperStreamSpecArgs{...}
//
//	or:
//
//	        nil
type SuperStreamSpecPtrInput interface {
	pulumi.Input

	ToSuperStreamSpecPtrOutput() SuperStreamSpecPtrOutput
	ToSuperStreamSpecPtrOutputWithContext(context.Context) SuperStreamSpecPtrOutput
}

type superStreamSpecPtrType SuperStreamSpecArgs

func SuperStreamSpecPtr(v *SuperStreamSpecArgs) SuperStreamSpecPtrInput {
	return (*superStreamSpecPtrType)(v)
}

func (*superStreamSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpec)(nil)).Elem()
}

func (i *superStreamSpecPtrType) ToSuperStreamSpecPtrOutput() SuperStreamSpecPtrOutput {
	return i.ToSuperStreamSpecPtrOutputWithContext(context.Background())
}

func (i *superStreamSpecPtrType) ToSuperStreamSpecPtrOutputWithContext(ctx context.Context) SuperStreamSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecPtrOutput)
}

// SuperStreamSpec defines the desired state of SuperStream
type SuperStreamSpecOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpec)(nil)).Elem()
}

func (o SuperStreamSpecOutput) ToSuperStreamSpecOutput() SuperStreamSpecOutput {
	return o
}

func (o SuperStreamSpecOutput) ToSuperStreamSpecOutputWithContext(ctx context.Context) SuperStreamSpecOutput {
	return o
}

func (o SuperStreamSpecOutput) ToSuperStreamSpecPtrOutput() SuperStreamSpecPtrOutput {
	return o.ToSuperStreamSpecPtrOutputWithContext(context.Background())
}

func (o SuperStreamSpecOutput) ToSuperStreamSpecPtrOutputWithContext(ctx context.Context) SuperStreamSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamSpec) *SuperStreamSpec {
		return &v
	}).(SuperStreamSpecPtrOutput)
}

// Name of the queue; required property.
func (o SuperStreamSpecOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpec) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Number of partitions to create within this super stream.
// Defaults to '3'.
func (o SuperStreamSpecOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SuperStreamSpec) *int { return v.Partitions }).(pulumi.IntPtrOutput)
}

func (o SuperStreamSpecOutput) RabbitmqClusterReference() SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return o.ApplyT(func(v SuperStreamSpec) *SuperStreamSpecRabbitmqClusterReference { return v.RabbitmqClusterReference }).(SuperStreamSpecRabbitmqClusterReferencePtrOutput)
}

// Routing keys to use for each of the partitions in the SuperStream
// If unset, the routing keys for the partitions will be set to the index of the partitions
func (o SuperStreamSpecOutput) RoutingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SuperStreamSpec) []string { return v.RoutingKeys }).(pulumi.StringArrayOutput)
}

// Default to vhost '/'; cannot be updated
func (o SuperStreamSpecOutput) Vhost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpec) *string { return v.Vhost }).(pulumi.StringPtrOutput)
}

type SuperStreamSpecPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpec)(nil)).Elem()
}

func (o SuperStreamSpecPtrOutput) ToSuperStreamSpecPtrOutput() SuperStreamSpecPtrOutput {
	return o
}

func (o SuperStreamSpecPtrOutput) ToSuperStreamSpecPtrOutputWithContext(ctx context.Context) SuperStreamSpecPtrOutput {
	return o
}

func (o SuperStreamSpecPtrOutput) Elem() SuperStreamSpecOutput {
	return o.ApplyT(func(v *SuperStreamSpec) SuperStreamSpec {
		if v != nil {
			return *v
		}
		var ret SuperStreamSpec
		return ret
	}).(SuperStreamSpecOutput)
}

// Name of the queue; required property.
func (o SuperStreamSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpec) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Number of partitions to create within this super stream.
// Defaults to '3'.
func (o SuperStreamSpecPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpec) *int {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.IntPtrOutput)
}

func (o SuperStreamSpecPtrOutput) RabbitmqClusterReference() SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return o.ApplyT(func(v *SuperStreamSpec) *SuperStreamSpecRabbitmqClusterReference {
		if v == nil {
			return nil
		}
		return v.RabbitmqClusterReference
	}).(SuperStreamSpecRabbitmqClusterReferencePtrOutput)
}

// Routing keys to use for each of the partitions in the SuperStream
// If unset, the routing keys for the partitions will be set to the index of the partitions
func (o SuperStreamSpecPtrOutput) RoutingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SuperStreamSpec) []string {
		if v == nil {
			return nil
		}
		return v.RoutingKeys
	}).(pulumi.StringArrayOutput)
}

// Default to vhost '/'; cannot be updated
func (o SuperStreamSpecPtrOutput) Vhost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpec) *string {
		if v == nil {
			return nil
		}
		return v.Vhost
	}).(pulumi.StringPtrOutput)
}

// SuperStreamSpec defines the desired state of SuperStream
type SuperStreamSpecPatch struct {
	// Name of the queue; required property.
	Name *string `pulumi:"name"`
	// Number of partitions to create within this super stream.
	// Defaults to '3'.
	Partitions               *int                                          `pulumi:"partitions"`
	RabbitmqClusterReference *SuperStreamSpecRabbitmqClusterReferencePatch `pulumi:"rabbitmqClusterReference"`
	// Routing keys to use for each of the partitions in the SuperStream
	// If unset, the routing keys for the partitions will be set to the index of the partitions
	RoutingKeys []string `pulumi:"routingKeys"`
	// Default to vhost '/'; cannot be updated
	Vhost *string `pulumi:"vhost"`
}

// SuperStreamSpecPatchInput is an input type that accepts SuperStreamSpecPatchArgs and SuperStreamSpecPatchOutput values.
// You can construct a concrete instance of `SuperStreamSpecPatchInput` via:
//
//	SuperStreamSpecPatchArgs{...}
type SuperStreamSpecPatchInput interface {
	pulumi.Input

	ToSuperStreamSpecPatchOutput() SuperStreamSpecPatchOutput
	ToSuperStreamSpecPatchOutputWithContext(context.Context) SuperStreamSpecPatchOutput
}

// SuperStreamSpec defines the desired state of SuperStream
type SuperStreamSpecPatchArgs struct {
	// Name of the queue; required property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Number of partitions to create within this super stream.
	// Defaults to '3'.
	Partitions               pulumi.IntPtrInput                                   `pulumi:"partitions"`
	RabbitmqClusterReference SuperStreamSpecRabbitmqClusterReferencePatchPtrInput `pulumi:"rabbitmqClusterReference"`
	// Routing keys to use for each of the partitions in the SuperStream
	// If unset, the routing keys for the partitions will be set to the index of the partitions
	RoutingKeys pulumi.StringArrayInput `pulumi:"routingKeys"`
	// Default to vhost '/'; cannot be updated
	Vhost pulumi.StringPtrInput `pulumi:"vhost"`
}

func (SuperStreamSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecPatch)(nil)).Elem()
}

func (i SuperStreamSpecPatchArgs) ToSuperStreamSpecPatchOutput() SuperStreamSpecPatchOutput {
	return i.ToSuperStreamSpecPatchOutputWithContext(context.Background())
}

func (i SuperStreamSpecPatchArgs) ToSuperStreamSpecPatchOutputWithContext(ctx context.Context) SuperStreamSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecPatchOutput)
}

func (i SuperStreamSpecPatchArgs) ToSuperStreamSpecPatchPtrOutput() SuperStreamSpecPatchPtrOutput {
	return i.ToSuperStreamSpecPatchPtrOutputWithContext(context.Background())
}

func (i SuperStreamSpecPatchArgs) ToSuperStreamSpecPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecPatchOutput).ToSuperStreamSpecPatchPtrOutputWithContext(ctx)
}

// SuperStreamSpecPatchPtrInput is an input type that accepts SuperStreamSpecPatchArgs, SuperStreamSpecPatchPtr and SuperStreamSpecPatchPtrOutput values.
// You can construct a concrete instance of `SuperStreamSpecPatchPtrInput` via:
//
//	        SuperStreamSpecPatchArgs{...}
//
//	or:
//
//	        nil
type SuperStreamSpecPatchPtrInput interface {
	pulumi.Input

	ToSuperStreamSpecPatchPtrOutput() SuperStreamSpecPatchPtrOutput
	ToSuperStreamSpecPatchPtrOutputWithContext(context.Context) SuperStreamSpecPatchPtrOutput
}

type superStreamSpecPatchPtrType SuperStreamSpecPatchArgs

func SuperStreamSpecPatchPtr(v *SuperStreamSpecPatchArgs) SuperStreamSpecPatchPtrInput {
	return (*superStreamSpecPatchPtrType)(v)
}

func (*superStreamSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecPatch)(nil)).Elem()
}

func (i *superStreamSpecPatchPtrType) ToSuperStreamSpecPatchPtrOutput() SuperStreamSpecPatchPtrOutput {
	return i.ToSuperStreamSpecPatchPtrOutputWithContext(context.Background())
}

func (i *superStreamSpecPatchPtrType) ToSuperStreamSpecPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecPatchPtrOutput)
}

// SuperStreamSpec defines the desired state of SuperStream
type SuperStreamSpecPatchOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecPatch)(nil)).Elem()
}

func (o SuperStreamSpecPatchOutput) ToSuperStreamSpecPatchOutput() SuperStreamSpecPatchOutput {
	return o
}

func (o SuperStreamSpecPatchOutput) ToSuperStreamSpecPatchOutputWithContext(ctx context.Context) SuperStreamSpecPatchOutput {
	return o
}

func (o SuperStreamSpecPatchOutput) ToSuperStreamSpecPatchPtrOutput() SuperStreamSpecPatchPtrOutput {
	return o.ToSuperStreamSpecPatchPtrOutputWithContext(context.Background())
}

func (o SuperStreamSpecPatchOutput) ToSuperStreamSpecPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamSpecPatch) *SuperStreamSpecPatch {
		return &v
	}).(SuperStreamSpecPatchPtrOutput)
}

// Name of the queue; required property.
func (o SuperStreamSpecPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Number of partitions to create within this super stream.
// Defaults to '3'.
func (o SuperStreamSpecPatchOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecPatch) *int { return v.Partitions }).(pulumi.IntPtrOutput)
}

func (o SuperStreamSpecPatchOutput) RabbitmqClusterReference() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecPatch) *SuperStreamSpecRabbitmqClusterReferencePatch {
		return v.RabbitmqClusterReference
	}).(SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput)
}

// Routing keys to use for each of the partitions in the SuperStream
// If unset, the routing keys for the partitions will be set to the index of the partitions
func (o SuperStreamSpecPatchOutput) RoutingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SuperStreamSpecPatch) []string { return v.RoutingKeys }).(pulumi.StringArrayOutput)
}

// Default to vhost '/'; cannot be updated
func (o SuperStreamSpecPatchOutput) Vhost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecPatch) *string { return v.Vhost }).(pulumi.StringPtrOutput)
}

type SuperStreamSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecPatch)(nil)).Elem()
}

func (o SuperStreamSpecPatchPtrOutput) ToSuperStreamSpecPatchPtrOutput() SuperStreamSpecPatchPtrOutput {
	return o
}

func (o SuperStreamSpecPatchPtrOutput) ToSuperStreamSpecPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecPatchPtrOutput {
	return o
}

func (o SuperStreamSpecPatchPtrOutput) Elem() SuperStreamSpecPatchOutput {
	return o.ApplyT(func(v *SuperStreamSpecPatch) SuperStreamSpecPatch {
		if v != nil {
			return *v
		}
		var ret SuperStreamSpecPatch
		return ret
	}).(SuperStreamSpecPatchOutput)
}

// Name of the queue; required property.
func (o SuperStreamSpecPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Number of partitions to create within this super stream.
// Defaults to '3'.
func (o SuperStreamSpecPatchPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.IntPtrOutput)
}

func (o SuperStreamSpecPatchPtrOutput) RabbitmqClusterReference() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecPatch) *SuperStreamSpecRabbitmqClusterReferencePatch {
		if v == nil {
			return nil
		}
		return v.RabbitmqClusterReference
	}).(SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput)
}

// Routing keys to use for each of the partitions in the SuperStream
// If unset, the routing keys for the partitions will be set to the index of the partitions
func (o SuperStreamSpecPatchPtrOutput) RoutingKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SuperStreamSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.RoutingKeys
	}).(pulumi.StringArrayOutput)
}

// Default to vhost '/'; cannot be updated
func (o SuperStreamSpecPatchPtrOutput) Vhost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Vhost
	}).(pulumi.StringPtrOutput)
}

// Reference to the RabbitmqCluster that the SuperStream will be created in.
// Required property.
type SuperStreamSpecRabbitmqClusterReference struct {
	ConnectionSecret *SuperStreamSpecRabbitmqClusterReferenceConnectionSecret `pulumi:"connectionSecret"`
	// The name of the RabbitMQ cluster to reference.
	// Have to set either name or connectionSecret, but not both.
	Name *string `pulumi:"name"`
	// The namespace of the RabbitMQ cluster to reference.
	// Defaults to the namespace of the requested resource if omitted.
	Namespace *string `pulumi:"namespace"`
}

// SuperStreamSpecRabbitmqClusterReferenceInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferenceArgs and SuperStreamSpecRabbitmqClusterReferenceOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferenceInput` via:
//
//	SuperStreamSpecRabbitmqClusterReferenceArgs{...}
type SuperStreamSpecRabbitmqClusterReferenceInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferenceOutput() SuperStreamSpecRabbitmqClusterReferenceOutput
	ToSuperStreamSpecRabbitmqClusterReferenceOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferenceOutput
}

// Reference to the RabbitmqCluster that the SuperStream will be created in.
// Required property.
type SuperStreamSpecRabbitmqClusterReferenceArgs struct {
	ConnectionSecret SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrInput `pulumi:"connectionSecret"`
	// The name of the RabbitMQ cluster to reference.
	// Have to set either name or connectionSecret, but not both.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace of the RabbitMQ cluster to reference.
	// Defaults to the namespace of the requested resource if omitted.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SuperStreamSpecRabbitmqClusterReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReference)(nil)).Elem()
}

func (i SuperStreamSpecRabbitmqClusterReferenceArgs) ToSuperStreamSpecRabbitmqClusterReferenceOutput() SuperStreamSpecRabbitmqClusterReferenceOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferenceArgs) ToSuperStreamSpecRabbitmqClusterReferenceOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceOutput)
}

func (i SuperStreamSpecRabbitmqClusterReferenceArgs) ToSuperStreamSpecRabbitmqClusterReferencePtrOutput() SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferenceArgs) ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceOutput).ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(ctx)
}

// SuperStreamSpecRabbitmqClusterReferencePtrInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferenceArgs, SuperStreamSpecRabbitmqClusterReferencePtr and SuperStreamSpecRabbitmqClusterReferencePtrOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferencePtrInput` via:
//
//	        SuperStreamSpecRabbitmqClusterReferenceArgs{...}
//
//	or:
//
//	        nil
type SuperStreamSpecRabbitmqClusterReferencePtrInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferencePtrOutput() SuperStreamSpecRabbitmqClusterReferencePtrOutput
	ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferencePtrOutput
}

type superStreamSpecRabbitmqClusterReferencePtrType SuperStreamSpecRabbitmqClusterReferenceArgs

func SuperStreamSpecRabbitmqClusterReferencePtr(v *SuperStreamSpecRabbitmqClusterReferenceArgs) SuperStreamSpecRabbitmqClusterReferencePtrInput {
	return (*superStreamSpecRabbitmqClusterReferencePtrType)(v)
}

func (*superStreamSpecRabbitmqClusterReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReference)(nil)).Elem()
}

func (i *superStreamSpecRabbitmqClusterReferencePtrType) ToSuperStreamSpecRabbitmqClusterReferencePtrOutput() SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(context.Background())
}

func (i *superStreamSpecRabbitmqClusterReferencePtrType) ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferencePtrOutput)
}

// Reference to the RabbitmqCluster that the SuperStream will be created in.
// Required property.
type SuperStreamSpecRabbitmqClusterReferenceOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReference)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferenceOutput) ToSuperStreamSpecRabbitmqClusterReferenceOutput() SuperStreamSpecRabbitmqClusterReferenceOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceOutput) ToSuperStreamSpecRabbitmqClusterReferenceOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceOutput) ToSuperStreamSpecRabbitmqClusterReferencePtrOutput() SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return o.ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(context.Background())
}

func (o SuperStreamSpecRabbitmqClusterReferenceOutput) ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamSpecRabbitmqClusterReference) *SuperStreamSpecRabbitmqClusterReference {
		return &v
	}).(SuperStreamSpecRabbitmqClusterReferencePtrOutput)
}

func (o SuperStreamSpecRabbitmqClusterReferenceOutput) ConnectionSecret() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReference) *SuperStreamSpecRabbitmqClusterReferenceConnectionSecret {
		return v.ConnectionSecret
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput)
}

// The name of the RabbitMQ cluster to reference.
// Have to set either name or connectionSecret, but not both.
func (o SuperStreamSpecRabbitmqClusterReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace of the RabbitMQ cluster to reference.
// Defaults to the namespace of the requested resource if omitted.
func (o SuperStreamSpecRabbitmqClusterReferenceOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReference) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SuperStreamSpecRabbitmqClusterReferencePtrOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReference)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferencePtrOutput) ToSuperStreamSpecRabbitmqClusterReferencePtrOutput() SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferencePtrOutput) ToSuperStreamSpecRabbitmqClusterReferencePtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferencePtrOutput) Elem() SuperStreamSpecRabbitmqClusterReferenceOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReference) SuperStreamSpecRabbitmqClusterReference {
		if v != nil {
			return *v
		}
		var ret SuperStreamSpecRabbitmqClusterReference
		return ret
	}).(SuperStreamSpecRabbitmqClusterReferenceOutput)
}

func (o SuperStreamSpecRabbitmqClusterReferencePtrOutput) ConnectionSecret() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReference) *SuperStreamSpecRabbitmqClusterReferenceConnectionSecret {
		if v == nil {
			return nil
		}
		return v.ConnectionSecret
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput)
}

// The name of the RabbitMQ cluster to reference.
// Have to set either name or connectionSecret, but not both.
func (o SuperStreamSpecRabbitmqClusterReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace of the RabbitMQ cluster to reference.
// Defaults to the namespace of the requested resource if omitted.
func (o SuperStreamSpecRabbitmqClusterReferencePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReference) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Secret contains the http management uri for the RabbitMQ cluster.
// The Secret must contain the key `uri`, `username` and `password` or operator will error.
// Have to set either name or connectionSecret, but not both.
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecret struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// SuperStreamSpecRabbitmqClusterReferenceConnectionSecretInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs and SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferenceConnectionSecretInput` via:
//
//	SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs{...}
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput
	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput
}

// Secret contains the http management uri for the RabbitMQ cluster.
// The Secret must contain the key `uri`, `username` and `password` or operator will error.
// Have to set either name or connectionSecret, but not both.
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecret)(nil)).Elem()
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput)
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput).ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(ctx)
}

// SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs, SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtr and SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrInput` via:
//
//	        SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs{...}
//
//	or:
//
//	        nil
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput
	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput
}

type superStreamSpecRabbitmqClusterReferenceConnectionSecretPtrType SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs

func SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtr(v *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrInput {
	return (*superStreamSpecRabbitmqClusterReferenceConnectionSecretPtrType)(v)
}

func (*superStreamSpecRabbitmqClusterReferenceConnectionSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReferenceConnectionSecret)(nil)).Elem()
}

func (i *superStreamSpecRabbitmqClusterReferenceConnectionSecretPtrType) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(context.Background())
}

func (i *superStreamSpecRabbitmqClusterReferenceConnectionSecretPtrType) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput)
}

// Secret contains the http management uri for the RabbitMQ cluster.
// The Secret must contain the key `uri`, `username` and `password` or operator will error.
// Have to set either name or connectionSecret, but not both.
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecret)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return o.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(context.Background())
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamSpecRabbitmqClusterReferenceConnectionSecret) *SuperStreamSpecRabbitmqClusterReferenceConnectionSecret {
		return &v
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReferenceConnectionSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReferenceConnectionSecret)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput) Elem() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferenceConnectionSecret) SuperStreamSpecRabbitmqClusterReferenceConnectionSecret {
		if v != nil {
			return *v
		}
		var ret SuperStreamSpecRabbitmqClusterReferenceConnectionSecret
		return ret
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferenceConnectionSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Secret contains the http management uri for the RabbitMQ cluster.
// The Secret must contain the key `uri`, `username` and `password` or operator will error.
// Have to set either name or connectionSecret, but not both.
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs and SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchInput` via:
//
//	SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs{...}
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput
	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput
}

// Secret contains the http management uri for the RabbitMQ cluster.
// The Secret must contain the key `uri`, `username` and `password` or operator will error.
// Have to set either name or connectionSecret, but not both.
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch)(nil)).Elem()
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput)
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput).ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(ctx)
}

// SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs, SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtr and SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrInput` via:
//
//	        SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs{...}
//
//	or:
//
//	        nil
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput
	ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput
}

type superStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrType SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs

func SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtr(v *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrInput {
	return (*superStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrType)(v)
}

func (*superStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch)(nil)).Elem()
}

func (i *superStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrType) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(context.Background())
}

func (i *superStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrType) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput)
}

// Secret contains the http management uri for the RabbitMQ cluster.
// The Secret must contain the key `uri`, `username` and `password` or operator will error.
// Have to set either name or connectionSecret, but not both.
type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return o.ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(context.Background())
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch) *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch {
		return &v
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput) ToSuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput) Elem() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch) SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch {
		if v != nil {
			return *v
		}
		var ret SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch
		return ret
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference to the RabbitmqCluster that the SuperStream will be created in.
// Required property.
type SuperStreamSpecRabbitmqClusterReferencePatch struct {
	ConnectionSecret *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch `pulumi:"connectionSecret"`
	// The name of the RabbitMQ cluster to reference.
	// Have to set either name or connectionSecret, but not both.
	Name *string `pulumi:"name"`
	// The namespace of the RabbitMQ cluster to reference.
	// Defaults to the namespace of the requested resource if omitted.
	Namespace *string `pulumi:"namespace"`
}

// SuperStreamSpecRabbitmqClusterReferencePatchInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferencePatchArgs and SuperStreamSpecRabbitmqClusterReferencePatchOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferencePatchInput` via:
//
//	SuperStreamSpecRabbitmqClusterReferencePatchArgs{...}
type SuperStreamSpecRabbitmqClusterReferencePatchInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferencePatchOutput() SuperStreamSpecRabbitmqClusterReferencePatchOutput
	ToSuperStreamSpecRabbitmqClusterReferencePatchOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferencePatchOutput
}

// Reference to the RabbitmqCluster that the SuperStream will be created in.
// Required property.
type SuperStreamSpecRabbitmqClusterReferencePatchArgs struct {
	ConnectionSecret SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrInput `pulumi:"connectionSecret"`
	// The name of the RabbitMQ cluster to reference.
	// Have to set either name or connectionSecret, but not both.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The namespace of the RabbitMQ cluster to reference.
	// Defaults to the namespace of the requested resource if omitted.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (SuperStreamSpecRabbitmqClusterReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferencePatch)(nil)).Elem()
}

func (i SuperStreamSpecRabbitmqClusterReferencePatchArgs) ToSuperStreamSpecRabbitmqClusterReferencePatchOutput() SuperStreamSpecRabbitmqClusterReferencePatchOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferencePatchOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferencePatchArgs) ToSuperStreamSpecRabbitmqClusterReferencePatchOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferencePatchOutput)
}

func (i SuperStreamSpecRabbitmqClusterReferencePatchArgs) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutput() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(context.Background())
}

func (i SuperStreamSpecRabbitmqClusterReferencePatchArgs) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferencePatchOutput).ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(ctx)
}

// SuperStreamSpecRabbitmqClusterReferencePatchPtrInput is an input type that accepts SuperStreamSpecRabbitmqClusterReferencePatchArgs, SuperStreamSpecRabbitmqClusterReferencePatchPtr and SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput values.
// You can construct a concrete instance of `SuperStreamSpecRabbitmqClusterReferencePatchPtrInput` via:
//
//	        SuperStreamSpecRabbitmqClusterReferencePatchArgs{...}
//
//	or:
//
//	        nil
type SuperStreamSpecRabbitmqClusterReferencePatchPtrInput interface {
	pulumi.Input

	ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutput() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput
	ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(context.Context) SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput
}

type superStreamSpecRabbitmqClusterReferencePatchPtrType SuperStreamSpecRabbitmqClusterReferencePatchArgs

func SuperStreamSpecRabbitmqClusterReferencePatchPtr(v *SuperStreamSpecRabbitmqClusterReferencePatchArgs) SuperStreamSpecRabbitmqClusterReferencePatchPtrInput {
	return (*superStreamSpecRabbitmqClusterReferencePatchPtrType)(v)
}

func (*superStreamSpecRabbitmqClusterReferencePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReferencePatch)(nil)).Elem()
}

func (i *superStreamSpecRabbitmqClusterReferencePatchPtrType) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutput() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return i.ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(context.Background())
}

func (i *superStreamSpecRabbitmqClusterReferencePatchPtrType) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput)
}

// Reference to the RabbitmqCluster that the SuperStream will be created in.
// Required property.
type SuperStreamSpecRabbitmqClusterReferencePatchOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferencePatch)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) ToSuperStreamSpecRabbitmqClusterReferencePatchOutput() SuperStreamSpecRabbitmqClusterReferencePatchOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) ToSuperStreamSpecRabbitmqClusterReferencePatchOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePatchOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutput() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return o.ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(context.Background())
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamSpecRabbitmqClusterReferencePatch) *SuperStreamSpecRabbitmqClusterReferencePatch {
		return &v
	}).(SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput)
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) ConnectionSecret() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReferencePatch) *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch {
		return v.ConnectionSecret
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput)
}

// The name of the RabbitMQ cluster to reference.
// Have to set either name or connectionSecret, but not both.
func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The namespace of the RabbitMQ cluster to reference.
// Defaults to the namespace of the requested resource if omitted.
func (o SuperStreamSpecRabbitmqClusterReferencePatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamSpecRabbitmqClusterReferencePatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamSpecRabbitmqClusterReferencePatch)(nil)).Elem()
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutput() SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) ToSuperStreamSpecRabbitmqClusterReferencePatchPtrOutputWithContext(ctx context.Context) SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput {
	return o
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) Elem() SuperStreamSpecRabbitmqClusterReferencePatchOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferencePatch) SuperStreamSpecRabbitmqClusterReferencePatch {
		if v != nil {
			return *v
		}
		var ret SuperStreamSpecRabbitmqClusterReferencePatch
		return ret
	}).(SuperStreamSpecRabbitmqClusterReferencePatchOutput)
}

func (o SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) ConnectionSecret() SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferencePatch) *SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatch {
		if v == nil {
			return nil
		}
		return v.ConnectionSecret
	}).(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput)
}

// The name of the RabbitMQ cluster to reference.
// Have to set either name or connectionSecret, but not both.
func (o SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace of the RabbitMQ cluster to reference.
// Defaults to the namespace of the requested resource if omitted.
func (o SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SuperStreamSpecRabbitmqClusterReferencePatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SuperStreamStatus defines the observed state of SuperStream
type SuperStreamStatus struct {
	Conditions []SuperStreamStatusConditions `pulumi:"conditions"`
	// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
	// SuperStream's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
	Partitions []string `pulumi:"partitions"`
}

// SuperStreamStatusInput is an input type that accepts SuperStreamStatusArgs and SuperStreamStatusOutput values.
// You can construct a concrete instance of `SuperStreamStatusInput` via:
//
//	SuperStreamStatusArgs{...}
type SuperStreamStatusInput interface {
	pulumi.Input

	ToSuperStreamStatusOutput() SuperStreamStatusOutput
	ToSuperStreamStatusOutputWithContext(context.Context) SuperStreamStatusOutput
}

// SuperStreamStatus defines the observed state of SuperStream
type SuperStreamStatusArgs struct {
	Conditions SuperStreamStatusConditionsArrayInput `pulumi:"conditions"`
	// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
	// SuperStream's generation, which is updated on mutation by the API Server.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
	Partitions pulumi.StringArrayInput `pulumi:"partitions"`
}

func (SuperStreamStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatus)(nil)).Elem()
}

func (i SuperStreamStatusArgs) ToSuperStreamStatusOutput() SuperStreamStatusOutput {
	return i.ToSuperStreamStatusOutputWithContext(context.Background())
}

func (i SuperStreamStatusArgs) ToSuperStreamStatusOutputWithContext(ctx context.Context) SuperStreamStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusOutput)
}

func (i SuperStreamStatusArgs) ToSuperStreamStatusPtrOutput() SuperStreamStatusPtrOutput {
	return i.ToSuperStreamStatusPtrOutputWithContext(context.Background())
}

func (i SuperStreamStatusArgs) ToSuperStreamStatusPtrOutputWithContext(ctx context.Context) SuperStreamStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusOutput).ToSuperStreamStatusPtrOutputWithContext(ctx)
}

// SuperStreamStatusPtrInput is an input type that accepts SuperStreamStatusArgs, SuperStreamStatusPtr and SuperStreamStatusPtrOutput values.
// You can construct a concrete instance of `SuperStreamStatusPtrInput` via:
//
//	        SuperStreamStatusArgs{...}
//
//	or:
//
//	        nil
type SuperStreamStatusPtrInput interface {
	pulumi.Input

	ToSuperStreamStatusPtrOutput() SuperStreamStatusPtrOutput
	ToSuperStreamStatusPtrOutputWithContext(context.Context) SuperStreamStatusPtrOutput
}

type superStreamStatusPtrType SuperStreamStatusArgs

func SuperStreamStatusPtr(v *SuperStreamStatusArgs) SuperStreamStatusPtrInput {
	return (*superStreamStatusPtrType)(v)
}

func (*superStreamStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamStatus)(nil)).Elem()
}

func (i *superStreamStatusPtrType) ToSuperStreamStatusPtrOutput() SuperStreamStatusPtrOutput {
	return i.ToSuperStreamStatusPtrOutputWithContext(context.Background())
}

func (i *superStreamStatusPtrType) ToSuperStreamStatusPtrOutputWithContext(ctx context.Context) SuperStreamStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusPtrOutput)
}

// SuperStreamStatus defines the observed state of SuperStream
type SuperStreamStatusOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatus)(nil)).Elem()
}

func (o SuperStreamStatusOutput) ToSuperStreamStatusOutput() SuperStreamStatusOutput {
	return o
}

func (o SuperStreamStatusOutput) ToSuperStreamStatusOutputWithContext(ctx context.Context) SuperStreamStatusOutput {
	return o
}

func (o SuperStreamStatusOutput) ToSuperStreamStatusPtrOutput() SuperStreamStatusPtrOutput {
	return o.ToSuperStreamStatusPtrOutputWithContext(context.Background())
}

func (o SuperStreamStatusOutput) ToSuperStreamStatusPtrOutputWithContext(ctx context.Context) SuperStreamStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamStatus) *SuperStreamStatus {
		return &v
	}).(SuperStreamStatusPtrOutput)
}

func (o SuperStreamStatusOutput) Conditions() SuperStreamStatusConditionsArrayOutput {
	return o.ApplyT(func(v SuperStreamStatus) []SuperStreamStatusConditions { return v.Conditions }).(SuperStreamStatusConditionsArrayOutput)
}

// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
// SuperStream's generation, which is updated on mutation by the API Server.
func (o SuperStreamStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SuperStreamStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
func (o SuperStreamStatusOutput) Partitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SuperStreamStatus) []string { return v.Partitions }).(pulumi.StringArrayOutput)
}

type SuperStreamStatusPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamStatus)(nil)).Elem()
}

func (o SuperStreamStatusPtrOutput) ToSuperStreamStatusPtrOutput() SuperStreamStatusPtrOutput {
	return o
}

func (o SuperStreamStatusPtrOutput) ToSuperStreamStatusPtrOutputWithContext(ctx context.Context) SuperStreamStatusPtrOutput {
	return o
}

func (o SuperStreamStatusPtrOutput) Elem() SuperStreamStatusOutput {
	return o.ApplyT(func(v *SuperStreamStatus) SuperStreamStatus {
		if v != nil {
			return *v
		}
		var ret SuperStreamStatus
		return ret
	}).(SuperStreamStatusOutput)
}

func (o SuperStreamStatusPtrOutput) Conditions() SuperStreamStatusConditionsArrayOutput {
	return o.ApplyT(func(v *SuperStreamStatus) []SuperStreamStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(SuperStreamStatusConditionsArrayOutput)
}

// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
// SuperStream's generation, which is updated on mutation by the API Server.
func (o SuperStreamStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SuperStreamStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
func (o SuperStreamStatusPtrOutput) Partitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SuperStreamStatus) []string {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.StringArrayOutput)
}

type SuperStreamStatusConditions struct {
	// The last time this Condition status changed.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Full text reason for current status of the condition.
	Message *string `pulumi:"message"`
	// One word, camel-case reason for current status of the condition.
	Reason *string `pulumi:"reason"`
	// True, False, or Unknown
	Status *string `pulumi:"status"`
	// Type indicates the scope of the custom resource status addressed by the condition.
	Type *string `pulumi:"type"`
}

// SuperStreamStatusConditionsInput is an input type that accepts SuperStreamStatusConditionsArgs and SuperStreamStatusConditionsOutput values.
// You can construct a concrete instance of `SuperStreamStatusConditionsInput` via:
//
//	SuperStreamStatusConditionsArgs{...}
type SuperStreamStatusConditionsInput interface {
	pulumi.Input

	ToSuperStreamStatusConditionsOutput() SuperStreamStatusConditionsOutput
	ToSuperStreamStatusConditionsOutputWithContext(context.Context) SuperStreamStatusConditionsOutput
}

type SuperStreamStatusConditionsArgs struct {
	// The last time this Condition status changed.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Full text reason for current status of the condition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// One word, camel-case reason for current status of the condition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// True, False, or Unknown
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type indicates the scope of the custom resource status addressed by the condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SuperStreamStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatusConditions)(nil)).Elem()
}

func (i SuperStreamStatusConditionsArgs) ToSuperStreamStatusConditionsOutput() SuperStreamStatusConditionsOutput {
	return i.ToSuperStreamStatusConditionsOutputWithContext(context.Background())
}

func (i SuperStreamStatusConditionsArgs) ToSuperStreamStatusConditionsOutputWithContext(ctx context.Context) SuperStreamStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusConditionsOutput)
}

// SuperStreamStatusConditionsArrayInput is an input type that accepts SuperStreamStatusConditionsArray and SuperStreamStatusConditionsArrayOutput values.
// You can construct a concrete instance of `SuperStreamStatusConditionsArrayInput` via:
//
//	SuperStreamStatusConditionsArray{ SuperStreamStatusConditionsArgs{...} }
type SuperStreamStatusConditionsArrayInput interface {
	pulumi.Input

	ToSuperStreamStatusConditionsArrayOutput() SuperStreamStatusConditionsArrayOutput
	ToSuperStreamStatusConditionsArrayOutputWithContext(context.Context) SuperStreamStatusConditionsArrayOutput
}

type SuperStreamStatusConditionsArray []SuperStreamStatusConditionsInput

func (SuperStreamStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuperStreamStatusConditions)(nil)).Elem()
}

func (i SuperStreamStatusConditionsArray) ToSuperStreamStatusConditionsArrayOutput() SuperStreamStatusConditionsArrayOutput {
	return i.ToSuperStreamStatusConditionsArrayOutputWithContext(context.Background())
}

func (i SuperStreamStatusConditionsArray) ToSuperStreamStatusConditionsArrayOutputWithContext(ctx context.Context) SuperStreamStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusConditionsArrayOutput)
}

type SuperStreamStatusConditionsOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatusConditions)(nil)).Elem()
}

func (o SuperStreamStatusConditionsOutput) ToSuperStreamStatusConditionsOutput() SuperStreamStatusConditionsOutput {
	return o
}

func (o SuperStreamStatusConditionsOutput) ToSuperStreamStatusConditionsOutputWithContext(ctx context.Context) SuperStreamStatusConditionsOutput {
	return o
}

// The last time this Condition status changed.
func (o SuperStreamStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Full text reason for current status of the condition.
func (o SuperStreamStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// One word, camel-case reason for current status of the condition.
func (o SuperStreamStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// True, False, or Unknown
func (o SuperStreamStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type indicates the scope of the custom resource status addressed by the condition.
func (o SuperStreamStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SuperStreamStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuperStreamStatusConditions)(nil)).Elem()
}

func (o SuperStreamStatusConditionsArrayOutput) ToSuperStreamStatusConditionsArrayOutput() SuperStreamStatusConditionsArrayOutput {
	return o
}

func (o SuperStreamStatusConditionsArrayOutput) ToSuperStreamStatusConditionsArrayOutputWithContext(ctx context.Context) SuperStreamStatusConditionsArrayOutput {
	return o
}

func (o SuperStreamStatusConditionsArrayOutput) Index(i pulumi.IntInput) SuperStreamStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuperStreamStatusConditions {
		return vs[0].([]SuperStreamStatusConditions)[vs[1].(int)]
	}).(SuperStreamStatusConditionsOutput)
}

type SuperStreamStatusConditionsPatch struct {
	// The last time this Condition status changed.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Full text reason for current status of the condition.
	Message *string `pulumi:"message"`
	// One word, camel-case reason for current status of the condition.
	Reason *string `pulumi:"reason"`
	// True, False, or Unknown
	Status *string `pulumi:"status"`
	// Type indicates the scope of the custom resource status addressed by the condition.
	Type *string `pulumi:"type"`
}

// SuperStreamStatusConditionsPatchInput is an input type that accepts SuperStreamStatusConditionsPatchArgs and SuperStreamStatusConditionsPatchOutput values.
// You can construct a concrete instance of `SuperStreamStatusConditionsPatchInput` via:
//
//	SuperStreamStatusConditionsPatchArgs{...}
type SuperStreamStatusConditionsPatchInput interface {
	pulumi.Input

	ToSuperStreamStatusConditionsPatchOutput() SuperStreamStatusConditionsPatchOutput
	ToSuperStreamStatusConditionsPatchOutputWithContext(context.Context) SuperStreamStatusConditionsPatchOutput
}

type SuperStreamStatusConditionsPatchArgs struct {
	// The last time this Condition status changed.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Full text reason for current status of the condition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// One word, camel-case reason for current status of the condition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// True, False, or Unknown
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type indicates the scope of the custom resource status addressed by the condition.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (SuperStreamStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatusConditionsPatch)(nil)).Elem()
}

func (i SuperStreamStatusConditionsPatchArgs) ToSuperStreamStatusConditionsPatchOutput() SuperStreamStatusConditionsPatchOutput {
	return i.ToSuperStreamStatusConditionsPatchOutputWithContext(context.Background())
}

func (i SuperStreamStatusConditionsPatchArgs) ToSuperStreamStatusConditionsPatchOutputWithContext(ctx context.Context) SuperStreamStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusConditionsPatchOutput)
}

// SuperStreamStatusConditionsPatchArrayInput is an input type that accepts SuperStreamStatusConditionsPatchArray and SuperStreamStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `SuperStreamStatusConditionsPatchArrayInput` via:
//
//	SuperStreamStatusConditionsPatchArray{ SuperStreamStatusConditionsPatchArgs{...} }
type SuperStreamStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToSuperStreamStatusConditionsPatchArrayOutput() SuperStreamStatusConditionsPatchArrayOutput
	ToSuperStreamStatusConditionsPatchArrayOutputWithContext(context.Context) SuperStreamStatusConditionsPatchArrayOutput
}

type SuperStreamStatusConditionsPatchArray []SuperStreamStatusConditionsPatchInput

func (SuperStreamStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuperStreamStatusConditionsPatch)(nil)).Elem()
}

func (i SuperStreamStatusConditionsPatchArray) ToSuperStreamStatusConditionsPatchArrayOutput() SuperStreamStatusConditionsPatchArrayOutput {
	return i.ToSuperStreamStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i SuperStreamStatusConditionsPatchArray) ToSuperStreamStatusConditionsPatchArrayOutputWithContext(ctx context.Context) SuperStreamStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusConditionsPatchArrayOutput)
}

type SuperStreamStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatusConditionsPatch)(nil)).Elem()
}

func (o SuperStreamStatusConditionsPatchOutput) ToSuperStreamStatusConditionsPatchOutput() SuperStreamStatusConditionsPatchOutput {
	return o
}

func (o SuperStreamStatusConditionsPatchOutput) ToSuperStreamStatusConditionsPatchOutputWithContext(ctx context.Context) SuperStreamStatusConditionsPatchOutput {
	return o
}

// The last time this Condition status changed.
func (o SuperStreamStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Full text reason for current status of the condition.
func (o SuperStreamStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// One word, camel-case reason for current status of the condition.
func (o SuperStreamStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// True, False, or Unknown
func (o SuperStreamStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type indicates the scope of the custom resource status addressed by the condition.
func (o SuperStreamStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type SuperStreamStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SuperStreamStatusConditionsPatch)(nil)).Elem()
}

func (o SuperStreamStatusConditionsPatchArrayOutput) ToSuperStreamStatusConditionsPatchArrayOutput() SuperStreamStatusConditionsPatchArrayOutput {
	return o
}

func (o SuperStreamStatusConditionsPatchArrayOutput) ToSuperStreamStatusConditionsPatchArrayOutputWithContext(ctx context.Context) SuperStreamStatusConditionsPatchArrayOutput {
	return o
}

func (o SuperStreamStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) SuperStreamStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SuperStreamStatusConditionsPatch {
		return vs[0].([]SuperStreamStatusConditionsPatch)[vs[1].(int)]
	}).(SuperStreamStatusConditionsPatchOutput)
}

// SuperStreamStatus defines the observed state of SuperStream
type SuperStreamStatusPatch struct {
	Conditions []SuperStreamStatusConditionsPatch `pulumi:"conditions"`
	// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
	// SuperStream's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
	Partitions []string `pulumi:"partitions"`
}

// SuperStreamStatusPatchInput is an input type that accepts SuperStreamStatusPatchArgs and SuperStreamStatusPatchOutput values.
// You can construct a concrete instance of `SuperStreamStatusPatchInput` via:
//
//	SuperStreamStatusPatchArgs{...}
type SuperStreamStatusPatchInput interface {
	pulumi.Input

	ToSuperStreamStatusPatchOutput() SuperStreamStatusPatchOutput
	ToSuperStreamStatusPatchOutputWithContext(context.Context) SuperStreamStatusPatchOutput
}

// SuperStreamStatus defines the observed state of SuperStream
type SuperStreamStatusPatchArgs struct {
	Conditions SuperStreamStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
	// SuperStream's generation, which is updated on mutation by the API Server.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
	Partitions pulumi.StringArrayInput `pulumi:"partitions"`
}

func (SuperStreamStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatusPatch)(nil)).Elem()
}

func (i SuperStreamStatusPatchArgs) ToSuperStreamStatusPatchOutput() SuperStreamStatusPatchOutput {
	return i.ToSuperStreamStatusPatchOutputWithContext(context.Background())
}

func (i SuperStreamStatusPatchArgs) ToSuperStreamStatusPatchOutputWithContext(ctx context.Context) SuperStreamStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusPatchOutput)
}

func (i SuperStreamStatusPatchArgs) ToSuperStreamStatusPatchPtrOutput() SuperStreamStatusPatchPtrOutput {
	return i.ToSuperStreamStatusPatchPtrOutputWithContext(context.Background())
}

func (i SuperStreamStatusPatchArgs) ToSuperStreamStatusPatchPtrOutputWithContext(ctx context.Context) SuperStreamStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusPatchOutput).ToSuperStreamStatusPatchPtrOutputWithContext(ctx)
}

// SuperStreamStatusPatchPtrInput is an input type that accepts SuperStreamStatusPatchArgs, SuperStreamStatusPatchPtr and SuperStreamStatusPatchPtrOutput values.
// You can construct a concrete instance of `SuperStreamStatusPatchPtrInput` via:
//
//	        SuperStreamStatusPatchArgs{...}
//
//	or:
//
//	        nil
type SuperStreamStatusPatchPtrInput interface {
	pulumi.Input

	ToSuperStreamStatusPatchPtrOutput() SuperStreamStatusPatchPtrOutput
	ToSuperStreamStatusPatchPtrOutputWithContext(context.Context) SuperStreamStatusPatchPtrOutput
}

type superStreamStatusPatchPtrType SuperStreamStatusPatchArgs

func SuperStreamStatusPatchPtr(v *SuperStreamStatusPatchArgs) SuperStreamStatusPatchPtrInput {
	return (*superStreamStatusPatchPtrType)(v)
}

func (*superStreamStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamStatusPatch)(nil)).Elem()
}

func (i *superStreamStatusPatchPtrType) ToSuperStreamStatusPatchPtrOutput() SuperStreamStatusPatchPtrOutput {
	return i.ToSuperStreamStatusPatchPtrOutputWithContext(context.Background())
}

func (i *superStreamStatusPatchPtrType) ToSuperStreamStatusPatchPtrOutputWithContext(ctx context.Context) SuperStreamStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamStatusPatchPtrOutput)
}

// SuperStreamStatus defines the observed state of SuperStream
type SuperStreamStatusPatchOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SuperStreamStatusPatch)(nil)).Elem()
}

func (o SuperStreamStatusPatchOutput) ToSuperStreamStatusPatchOutput() SuperStreamStatusPatchOutput {
	return o
}

func (o SuperStreamStatusPatchOutput) ToSuperStreamStatusPatchOutputWithContext(ctx context.Context) SuperStreamStatusPatchOutput {
	return o
}

func (o SuperStreamStatusPatchOutput) ToSuperStreamStatusPatchPtrOutput() SuperStreamStatusPatchPtrOutput {
	return o.ToSuperStreamStatusPatchPtrOutputWithContext(context.Background())
}

func (o SuperStreamStatusPatchOutput) ToSuperStreamStatusPatchPtrOutputWithContext(ctx context.Context) SuperStreamStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SuperStreamStatusPatch) *SuperStreamStatusPatch {
		return &v
	}).(SuperStreamStatusPatchPtrOutput)
}

func (o SuperStreamStatusPatchOutput) Conditions() SuperStreamStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v SuperStreamStatusPatch) []SuperStreamStatusConditionsPatch { return v.Conditions }).(SuperStreamStatusConditionsPatchArrayOutput)
}

// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
// SuperStream's generation, which is updated on mutation by the API Server.
func (o SuperStreamStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SuperStreamStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
func (o SuperStreamStatusPatchOutput) Partitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SuperStreamStatusPatch) []string { return v.Partitions }).(pulumi.StringArrayOutput)
}

type SuperStreamStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (SuperStreamStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamStatusPatch)(nil)).Elem()
}

func (o SuperStreamStatusPatchPtrOutput) ToSuperStreamStatusPatchPtrOutput() SuperStreamStatusPatchPtrOutput {
	return o
}

func (o SuperStreamStatusPatchPtrOutput) ToSuperStreamStatusPatchPtrOutputWithContext(ctx context.Context) SuperStreamStatusPatchPtrOutput {
	return o
}

func (o SuperStreamStatusPatchPtrOutput) Elem() SuperStreamStatusPatchOutput {
	return o.ApplyT(func(v *SuperStreamStatusPatch) SuperStreamStatusPatch {
		if v != nil {
			return *v
		}
		var ret SuperStreamStatusPatch
		return ret
	}).(SuperStreamStatusPatchOutput)
}

func (o SuperStreamStatusPatchPtrOutput) Conditions() SuperStreamStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *SuperStreamStatusPatch) []SuperStreamStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(SuperStreamStatusConditionsPatchArrayOutput)
}

// observedGeneration is the most recent successful generation observed for this SuperStream. It corresponds to the
// SuperStream's generation, which is updated on mutation by the API Server.
func (o SuperStreamStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SuperStreamStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Partitions are a list of the stream queue names which form the partitions of this SuperStream.
func (o SuperStreamStatusPatchPtrOutput) Partitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SuperStreamStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamTypeInput)(nil)).Elem(), SuperStreamTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamTypeArrayInput)(nil)).Elem(), SuperStreamTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamListTypeInput)(nil)).Elem(), SuperStreamListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamPatchTypeInput)(nil)).Elem(), SuperStreamPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecInput)(nil)).Elem(), SuperStreamSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecPtrInput)(nil)).Elem(), SuperStreamSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecPatchInput)(nil)).Elem(), SuperStreamSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecPatchPtrInput)(nil)).Elem(), SuperStreamSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferencePtrInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecretInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferenceConnectionSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferencePatchInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamSpecRabbitmqClusterReferencePatchPtrInput)(nil)).Elem(), SuperStreamSpecRabbitmqClusterReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusInput)(nil)).Elem(), SuperStreamStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusPtrInput)(nil)).Elem(), SuperStreamStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusConditionsInput)(nil)).Elem(), SuperStreamStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusConditionsArrayInput)(nil)).Elem(), SuperStreamStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusConditionsPatchInput)(nil)).Elem(), SuperStreamStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusConditionsPatchArrayInput)(nil)).Elem(), SuperStreamStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusPatchInput)(nil)).Elem(), SuperStreamStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamStatusPatchPtrInput)(nil)).Elem(), SuperStreamStatusPatchArgs{})
	pulumi.RegisterOutputType(SuperStreamTypeOutput{})
	pulumi.RegisterOutputType(SuperStreamTypeArrayOutput{})
	pulumi.RegisterOutputType(SuperStreamListTypeOutput{})
	pulumi.RegisterOutputType(SuperStreamPatchTypeOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecPtrOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecPatchOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferenceOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferencePtrOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPtrOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferenceConnectionSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferencePatchOutput{})
	pulumi.RegisterOutputType(SuperStreamSpecRabbitmqClusterReferencePatchPtrOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusPtrOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusConditionsOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusPatchOutput{})
	pulumi.RegisterOutputType(SuperStreamStatusPatchPtrOutput{})
}
