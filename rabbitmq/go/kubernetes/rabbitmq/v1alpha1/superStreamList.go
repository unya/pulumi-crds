// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SuperStreamList is a list of SuperStream
type SuperStreamList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SuperStreamTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSuperStreamList registers a new resource with the given unique name, arguments, and options.
func NewSuperStreamList(ctx *pulumi.Context,
	name string, args *SuperStreamListArgs, opts ...pulumi.ResourceOption) (*SuperStreamList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1alpha1")
	args.Kind = pulumi.StringPtr("SuperStreamList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SuperStreamList
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1alpha1:SuperStreamList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSuperStreamList gets an existing SuperStreamList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSuperStreamList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SuperStreamListState, opts ...pulumi.ResourceOption) (*SuperStreamList, error) {
	var resource SuperStreamList
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1alpha1:SuperStreamList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SuperStreamList resources.
type superStreamListState struct {
}

type SuperStreamListState struct {
}

func (SuperStreamListState) ElementType() reflect.Type {
	return reflect.TypeOf((*superStreamListState)(nil)).Elem()
}

type superStreamListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SuperStreamType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SuperStreamList resource.
type SuperStreamListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SuperStreamTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SuperStreamListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*superStreamListArgs)(nil)).Elem()
}

type SuperStreamListInput interface {
	pulumi.Input

	ToSuperStreamListOutput() SuperStreamListOutput
	ToSuperStreamListOutputWithContext(ctx context.Context) SuperStreamListOutput
}

func (*SuperStreamList) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamList)(nil)).Elem()
}

func (i *SuperStreamList) ToSuperStreamListOutput() SuperStreamListOutput {
	return i.ToSuperStreamListOutputWithContext(context.Background())
}

func (i *SuperStreamList) ToSuperStreamListOutputWithContext(ctx context.Context) SuperStreamListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamListOutput)
}

// SuperStreamListArrayInput is an input type that accepts SuperStreamListArray and SuperStreamListArrayOutput values.
// You can construct a concrete instance of `SuperStreamListArrayInput` via:
//
//	SuperStreamListArray{ SuperStreamListArgs{...} }
type SuperStreamListArrayInput interface {
	pulumi.Input

	ToSuperStreamListArrayOutput() SuperStreamListArrayOutput
	ToSuperStreamListArrayOutputWithContext(context.Context) SuperStreamListArrayOutput
}

type SuperStreamListArray []SuperStreamListInput

func (SuperStreamListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SuperStreamList)(nil)).Elem()
}

func (i SuperStreamListArray) ToSuperStreamListArrayOutput() SuperStreamListArrayOutput {
	return i.ToSuperStreamListArrayOutputWithContext(context.Background())
}

func (i SuperStreamListArray) ToSuperStreamListArrayOutputWithContext(ctx context.Context) SuperStreamListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamListArrayOutput)
}

// SuperStreamListMapInput is an input type that accepts SuperStreamListMap and SuperStreamListMapOutput values.
// You can construct a concrete instance of `SuperStreamListMapInput` via:
//
//	SuperStreamListMap{ "key": SuperStreamListArgs{...} }
type SuperStreamListMapInput interface {
	pulumi.Input

	ToSuperStreamListMapOutput() SuperStreamListMapOutput
	ToSuperStreamListMapOutputWithContext(context.Context) SuperStreamListMapOutput
}

type SuperStreamListMap map[string]SuperStreamListInput

func (SuperStreamListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SuperStreamList)(nil)).Elem()
}

func (i SuperStreamListMap) ToSuperStreamListMapOutput() SuperStreamListMapOutput {
	return i.ToSuperStreamListMapOutputWithContext(context.Background())
}

func (i SuperStreamListMap) ToSuperStreamListMapOutputWithContext(ctx context.Context) SuperStreamListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamListMapOutput)
}

type SuperStreamListOutput struct{ *pulumi.OutputState }

func (SuperStreamListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStreamList)(nil)).Elem()
}

func (o SuperStreamListOutput) ToSuperStreamListOutput() SuperStreamListOutput {
	return o
}

func (o SuperStreamListOutput) ToSuperStreamListOutputWithContext(ctx context.Context) SuperStreamListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SuperStreamListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SuperStreamList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of superstreams. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SuperStreamListOutput) Items() SuperStreamTypeArrayOutput {
	return o.ApplyT(func(v *SuperStreamList) SuperStreamTypeArrayOutput { return v.Items }).(SuperStreamTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SuperStreamList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SuperStreamList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SuperStreamListArrayOutput struct{ *pulumi.OutputState }

func (SuperStreamListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SuperStreamList)(nil)).Elem()
}

func (o SuperStreamListArrayOutput) ToSuperStreamListArrayOutput() SuperStreamListArrayOutput {
	return o
}

func (o SuperStreamListArrayOutput) ToSuperStreamListArrayOutputWithContext(ctx context.Context) SuperStreamListArrayOutput {
	return o
}

func (o SuperStreamListArrayOutput) Index(i pulumi.IntInput) SuperStreamListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SuperStreamList {
		return vs[0].([]*SuperStreamList)[vs[1].(int)]
	}).(SuperStreamListOutput)
}

type SuperStreamListMapOutput struct{ *pulumi.OutputState }

func (SuperStreamListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SuperStreamList)(nil)).Elem()
}

func (o SuperStreamListMapOutput) ToSuperStreamListMapOutput() SuperStreamListMapOutput {
	return o
}

func (o SuperStreamListMapOutput) ToSuperStreamListMapOutputWithContext(ctx context.Context) SuperStreamListMapOutput {
	return o
}

func (o SuperStreamListMapOutput) MapIndex(k pulumi.StringInput) SuperStreamListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SuperStreamList {
		return vs[0].(map[string]*SuperStreamList)[vs[1].(string)]
	}).(SuperStreamListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamListInput)(nil)).Elem(), &SuperStreamList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamListArrayInput)(nil)).Elem(), SuperStreamListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamListMapInput)(nil)).Elem(), SuperStreamListMap{})
	pulumi.RegisterOutputType(SuperStreamListOutput{})
	pulumi.RegisterOutputType(SuperStreamListArrayOutput{})
	pulumi.RegisterOutputType(SuperStreamListMapOutput{})
}
