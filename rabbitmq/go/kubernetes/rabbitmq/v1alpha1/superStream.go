// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SuperStream is the Schema for the queues API
type SuperStream struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     SuperStreamSpecOutput      `pulumi:"spec"`
	Status   SuperStreamStatusPtrOutput `pulumi:"status"`
}

// NewSuperStream registers a new resource with the given unique name, arguments, and options.
func NewSuperStream(ctx *pulumi.Context,
	name string, args *SuperStreamArgs, opts ...pulumi.ResourceOption) (*SuperStream, error) {
	if args == nil {
		args = &SuperStreamArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("rabbitmq.com/v1alpha1")
	args.Kind = pulumi.StringPtr("SuperStream")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SuperStream
	err := ctx.RegisterResource("kubernetes:rabbitmq.com/v1alpha1:SuperStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSuperStream gets an existing SuperStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSuperStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SuperStreamState, opts ...pulumi.ResourceOption) (*SuperStream, error) {
	var resource SuperStream
	err := ctx.ReadResource("kubernetes:rabbitmq.com/v1alpha1:SuperStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SuperStream resources.
type superStreamState struct {
}

type SuperStreamState struct {
}

func (SuperStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*superStreamState)(nil)).Elem()
}

type superStreamArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SuperStreamSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a SuperStream resource.
type SuperStreamArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SuperStreamSpecPtrInput
}

func (SuperStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*superStreamArgs)(nil)).Elem()
}

type SuperStreamInput interface {
	pulumi.Input

	ToSuperStreamOutput() SuperStreamOutput
	ToSuperStreamOutputWithContext(ctx context.Context) SuperStreamOutput
}

func (*SuperStream) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStream)(nil)).Elem()
}

func (i *SuperStream) ToSuperStreamOutput() SuperStreamOutput {
	return i.ToSuperStreamOutputWithContext(context.Background())
}

func (i *SuperStream) ToSuperStreamOutputWithContext(ctx context.Context) SuperStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamOutput)
}

// SuperStreamArrayInput is an input type that accepts SuperStreamArray and SuperStreamArrayOutput values.
// You can construct a concrete instance of `SuperStreamArrayInput` via:
//
//	SuperStreamArray{ SuperStreamArgs{...} }
type SuperStreamArrayInput interface {
	pulumi.Input

	ToSuperStreamArrayOutput() SuperStreamArrayOutput
	ToSuperStreamArrayOutputWithContext(context.Context) SuperStreamArrayOutput
}

type SuperStreamArray []SuperStreamInput

func (SuperStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SuperStream)(nil)).Elem()
}

func (i SuperStreamArray) ToSuperStreamArrayOutput() SuperStreamArrayOutput {
	return i.ToSuperStreamArrayOutputWithContext(context.Background())
}

func (i SuperStreamArray) ToSuperStreamArrayOutputWithContext(ctx context.Context) SuperStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamArrayOutput)
}

// SuperStreamMapInput is an input type that accepts SuperStreamMap and SuperStreamMapOutput values.
// You can construct a concrete instance of `SuperStreamMapInput` via:
//
//	SuperStreamMap{ "key": SuperStreamArgs{...} }
type SuperStreamMapInput interface {
	pulumi.Input

	ToSuperStreamMapOutput() SuperStreamMapOutput
	ToSuperStreamMapOutputWithContext(context.Context) SuperStreamMapOutput
}

type SuperStreamMap map[string]SuperStreamInput

func (SuperStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SuperStream)(nil)).Elem()
}

func (i SuperStreamMap) ToSuperStreamMapOutput() SuperStreamMapOutput {
	return i.ToSuperStreamMapOutputWithContext(context.Background())
}

func (i SuperStreamMap) ToSuperStreamMapOutputWithContext(ctx context.Context) SuperStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuperStreamMapOutput)
}

type SuperStreamOutput struct{ *pulumi.OutputState }

func (SuperStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuperStream)(nil)).Elem()
}

func (o SuperStreamOutput) ToSuperStreamOutput() SuperStreamOutput {
	return o
}

func (o SuperStreamOutput) ToSuperStreamOutputWithContext(ctx context.Context) SuperStreamOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SuperStreamOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SuperStream) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SuperStreamOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SuperStream) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SuperStreamOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *SuperStream) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SuperStreamOutput) Spec() SuperStreamSpecOutput {
	return o.ApplyT(func(v *SuperStream) SuperStreamSpecOutput { return v.Spec }).(SuperStreamSpecOutput)
}

func (o SuperStreamOutput) Status() SuperStreamStatusPtrOutput {
	return o.ApplyT(func(v *SuperStream) SuperStreamStatusPtrOutput { return v.Status }).(SuperStreamStatusPtrOutput)
}

type SuperStreamArrayOutput struct{ *pulumi.OutputState }

func (SuperStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SuperStream)(nil)).Elem()
}

func (o SuperStreamArrayOutput) ToSuperStreamArrayOutput() SuperStreamArrayOutput {
	return o
}

func (o SuperStreamArrayOutput) ToSuperStreamArrayOutputWithContext(ctx context.Context) SuperStreamArrayOutput {
	return o
}

func (o SuperStreamArrayOutput) Index(i pulumi.IntInput) SuperStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SuperStream {
		return vs[0].([]*SuperStream)[vs[1].(int)]
	}).(SuperStreamOutput)
}

type SuperStreamMapOutput struct{ *pulumi.OutputState }

func (SuperStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SuperStream)(nil)).Elem()
}

func (o SuperStreamMapOutput) ToSuperStreamMapOutput() SuperStreamMapOutput {
	return o
}

func (o SuperStreamMapOutput) ToSuperStreamMapOutputWithContext(ctx context.Context) SuperStreamMapOutput {
	return o
}

func (o SuperStreamMapOutput) MapIndex(k pulumi.StringInput) SuperStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SuperStream {
		return vs[0].(map[string]*SuperStream)[vs[1].(string)]
	}).(SuperStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamInput)(nil)).Elem(), &SuperStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamArrayInput)(nil)).Elem(), SuperStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuperStreamMapInput)(nil)).Elem(), SuperStreamMap{})
	pulumi.RegisterOutputType(SuperStreamOutput{})
	pulumi.RegisterOutputType(SuperStreamArrayOutput{})
	pulumi.RegisterOutputType(SuperStreamMapOutput{})
}
