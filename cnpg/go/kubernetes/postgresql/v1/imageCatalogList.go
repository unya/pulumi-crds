// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ImageCatalogList is a list of ImageCatalog
type ImageCatalogList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of imagecatalogs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImageCatalogTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewImageCatalogList registers a new resource with the given unique name, arguments, and options.
func NewImageCatalogList(ctx *pulumi.Context,
	name string, args *ImageCatalogListArgs, opts ...pulumi.ResourceOption) (*ImageCatalogList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ImageCatalogList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImageCatalogList
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ImageCatalogList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageCatalogList gets an existing ImageCatalogList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageCatalogList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageCatalogListState, opts ...pulumi.ResourceOption) (*ImageCatalogList, error) {
	var resource ImageCatalogList
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ImageCatalogList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageCatalogList resources.
type imageCatalogListState struct {
}

type ImageCatalogListState struct {
}

func (ImageCatalogListState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCatalogListState)(nil)).Elem()
}

type imageCatalogListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of imagecatalogs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ImageCatalogType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ImageCatalogList resource.
type ImageCatalogListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of imagecatalogs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImageCatalogTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ImageCatalogListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCatalogListArgs)(nil)).Elem()
}

type ImageCatalogListInput interface {
	pulumi.Input

	ToImageCatalogListOutput() ImageCatalogListOutput
	ToImageCatalogListOutputWithContext(ctx context.Context) ImageCatalogListOutput
}

func (*ImageCatalogList) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCatalogList)(nil)).Elem()
}

func (i *ImageCatalogList) ToImageCatalogListOutput() ImageCatalogListOutput {
	return i.ToImageCatalogListOutputWithContext(context.Background())
}

func (i *ImageCatalogList) ToImageCatalogListOutputWithContext(ctx context.Context) ImageCatalogListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogListOutput)
}

// ImageCatalogListArrayInput is an input type that accepts ImageCatalogListArray and ImageCatalogListArrayOutput values.
// You can construct a concrete instance of `ImageCatalogListArrayInput` via:
//
//	ImageCatalogListArray{ ImageCatalogListArgs{...} }
type ImageCatalogListArrayInput interface {
	pulumi.Input

	ToImageCatalogListArrayOutput() ImageCatalogListArrayOutput
	ToImageCatalogListArrayOutputWithContext(context.Context) ImageCatalogListArrayOutput
}

type ImageCatalogListArray []ImageCatalogListInput

func (ImageCatalogListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageCatalogList)(nil)).Elem()
}

func (i ImageCatalogListArray) ToImageCatalogListArrayOutput() ImageCatalogListArrayOutput {
	return i.ToImageCatalogListArrayOutputWithContext(context.Background())
}

func (i ImageCatalogListArray) ToImageCatalogListArrayOutputWithContext(ctx context.Context) ImageCatalogListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogListArrayOutput)
}

// ImageCatalogListMapInput is an input type that accepts ImageCatalogListMap and ImageCatalogListMapOutput values.
// You can construct a concrete instance of `ImageCatalogListMapInput` via:
//
//	ImageCatalogListMap{ "key": ImageCatalogListArgs{...} }
type ImageCatalogListMapInput interface {
	pulumi.Input

	ToImageCatalogListMapOutput() ImageCatalogListMapOutput
	ToImageCatalogListMapOutputWithContext(context.Context) ImageCatalogListMapOutput
}

type ImageCatalogListMap map[string]ImageCatalogListInput

func (ImageCatalogListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageCatalogList)(nil)).Elem()
}

func (i ImageCatalogListMap) ToImageCatalogListMapOutput() ImageCatalogListMapOutput {
	return i.ToImageCatalogListMapOutputWithContext(context.Background())
}

func (i ImageCatalogListMap) ToImageCatalogListMapOutputWithContext(ctx context.Context) ImageCatalogListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogListMapOutput)
}

type ImageCatalogListOutput struct{ *pulumi.OutputState }

func (ImageCatalogListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCatalogList)(nil)).Elem()
}

func (o ImageCatalogListOutput) ToImageCatalogListOutput() ImageCatalogListOutput {
	return o
}

func (o ImageCatalogListOutput) ToImageCatalogListOutputWithContext(ctx context.Context) ImageCatalogListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageCatalogListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCatalogList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of imagecatalogs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ImageCatalogListOutput) Items() ImageCatalogTypeArrayOutput {
	return o.ApplyT(func(v *ImageCatalogList) ImageCatalogTypeArrayOutput { return v.Items }).(ImageCatalogTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageCatalogListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageCatalogList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageCatalogListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ImageCatalogList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ImageCatalogListArrayOutput struct{ *pulumi.OutputState }

func (ImageCatalogListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageCatalogList)(nil)).Elem()
}

func (o ImageCatalogListArrayOutput) ToImageCatalogListArrayOutput() ImageCatalogListArrayOutput {
	return o
}

func (o ImageCatalogListArrayOutput) ToImageCatalogListArrayOutputWithContext(ctx context.Context) ImageCatalogListArrayOutput {
	return o
}

func (o ImageCatalogListArrayOutput) Index(i pulumi.IntInput) ImageCatalogListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageCatalogList {
		return vs[0].([]*ImageCatalogList)[vs[1].(int)]
	}).(ImageCatalogListOutput)
}

type ImageCatalogListMapOutput struct{ *pulumi.OutputState }

func (ImageCatalogListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageCatalogList)(nil)).Elem()
}

func (o ImageCatalogListMapOutput) ToImageCatalogListMapOutput() ImageCatalogListMapOutput {
	return o
}

func (o ImageCatalogListMapOutput) ToImageCatalogListMapOutputWithContext(ctx context.Context) ImageCatalogListMapOutput {
	return o
}

func (o ImageCatalogListMapOutput) MapIndex(k pulumi.StringInput) ImageCatalogListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageCatalogList {
		return vs[0].(map[string]*ImageCatalogList)[vs[1].(string)]
	}).(ImageCatalogListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogListInput)(nil)).Elem(), &ImageCatalogList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogListArrayInput)(nil)).Elem(), ImageCatalogListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogListMapInput)(nil)).Elem(), ImageCatalogListMap{})
	pulumi.RegisterOutputType(ImageCatalogListOutput{})
	pulumi.RegisterOutputType(ImageCatalogListArrayOutput{})
	pulumi.RegisterOutputType(ImageCatalogListMapOutput{})
}
