// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Cluster is the Schema for the PostgreSQL API
type ClusterPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ClusterSpecPatchPtrOutput       `pulumi:"spec"`
	Status   ClusterStatusPatchPtrOutput     `pulumi:"status"`
}

// NewClusterPatch registers a new resource with the given unique name, arguments, and options.
func NewClusterPatch(ctx *pulumi.Context,
	name string, args *ClusterPatchArgs, opts ...pulumi.ResourceOption) (*ClusterPatch, error) {
	if args == nil {
		args = &ClusterPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("Cluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterPatch
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ClusterPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterPatch gets an existing ClusterPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterPatchState, opts ...pulumi.ResourceOption) (*ClusterPatch, error) {
	var resource ClusterPatch
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ClusterPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterPatch resources.
type clusterPatchState struct {
}

type ClusterPatchState struct {
}

func (ClusterPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPatchState)(nil)).Elem()
}

type clusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ClusterSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterPatch resource.
type ClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ClusterSpecPatchPtrInput
}

func (ClusterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterPatchArgs)(nil)).Elem()
}

type ClusterPatchInput interface {
	pulumi.Input

	ToClusterPatchOutput() ClusterPatchOutput
	ToClusterPatchOutputWithContext(ctx context.Context) ClusterPatchOutput
}

func (*ClusterPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPatch)(nil)).Elem()
}

func (i *ClusterPatch) ToClusterPatchOutput() ClusterPatchOutput {
	return i.ToClusterPatchOutputWithContext(context.Background())
}

func (i *ClusterPatch) ToClusterPatchOutputWithContext(ctx context.Context) ClusterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPatchOutput)
}

// ClusterPatchArrayInput is an input type that accepts ClusterPatchArray and ClusterPatchArrayOutput values.
// You can construct a concrete instance of `ClusterPatchArrayInput` via:
//
//	ClusterPatchArray{ ClusterPatchArgs{...} }
type ClusterPatchArrayInput interface {
	pulumi.Input

	ToClusterPatchArrayOutput() ClusterPatchArrayOutput
	ToClusterPatchArrayOutputWithContext(context.Context) ClusterPatchArrayOutput
}

type ClusterPatchArray []ClusterPatchInput

func (ClusterPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPatch)(nil)).Elem()
}

func (i ClusterPatchArray) ToClusterPatchArrayOutput() ClusterPatchArrayOutput {
	return i.ToClusterPatchArrayOutputWithContext(context.Background())
}

func (i ClusterPatchArray) ToClusterPatchArrayOutputWithContext(ctx context.Context) ClusterPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPatchArrayOutput)
}

// ClusterPatchMapInput is an input type that accepts ClusterPatchMap and ClusterPatchMapOutput values.
// You can construct a concrete instance of `ClusterPatchMapInput` via:
//
//	ClusterPatchMap{ "key": ClusterPatchArgs{...} }
type ClusterPatchMapInput interface {
	pulumi.Input

	ToClusterPatchMapOutput() ClusterPatchMapOutput
	ToClusterPatchMapOutputWithContext(context.Context) ClusterPatchMapOutput
}

type ClusterPatchMap map[string]ClusterPatchInput

func (ClusterPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPatch)(nil)).Elem()
}

func (i ClusterPatchMap) ToClusterPatchMapOutput() ClusterPatchMapOutput {
	return i.ToClusterPatchMapOutputWithContext(context.Background())
}

func (i ClusterPatchMap) ToClusterPatchMapOutputWithContext(ctx context.Context) ClusterPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPatchMapOutput)
}

type ClusterPatchOutput struct{ *pulumi.OutputState }

func (ClusterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPatch)(nil)).Elem()
}

func (o ClusterPatchOutput) ToClusterPatchOutput() ClusterPatchOutput {
	return o
}

func (o ClusterPatchOutput) ToClusterPatchOutputWithContext(ctx context.Context) ClusterPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ClusterPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ClusterPatchOutput) Spec() ClusterSpecPatchPtrOutput {
	return o.ApplyT(func(v *ClusterPatch) ClusterSpecPatchPtrOutput { return v.Spec }).(ClusterSpecPatchPtrOutput)
}

func (o ClusterPatchOutput) Status() ClusterStatusPatchPtrOutput {
	return o.ApplyT(func(v *ClusterPatch) ClusterStatusPatchPtrOutput { return v.Status }).(ClusterStatusPatchPtrOutput)
}

type ClusterPatchArrayOutput struct{ *pulumi.OutputState }

func (ClusterPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterPatch)(nil)).Elem()
}

func (o ClusterPatchArrayOutput) ToClusterPatchArrayOutput() ClusterPatchArrayOutput {
	return o
}

func (o ClusterPatchArrayOutput) ToClusterPatchArrayOutputWithContext(ctx context.Context) ClusterPatchArrayOutput {
	return o
}

func (o ClusterPatchArrayOutput) Index(i pulumi.IntInput) ClusterPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterPatch {
		return vs[0].([]*ClusterPatch)[vs[1].(int)]
	}).(ClusterPatchOutput)
}

type ClusterPatchMapOutput struct{ *pulumi.OutputState }

func (ClusterPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterPatch)(nil)).Elem()
}

func (o ClusterPatchMapOutput) ToClusterPatchMapOutput() ClusterPatchMapOutput {
	return o
}

func (o ClusterPatchMapOutput) ToClusterPatchMapOutputWithContext(ctx context.Context) ClusterPatchMapOutput {
	return o
}

func (o ClusterPatchMapOutput) MapIndex(k pulumi.StringInput) ClusterPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterPatch {
		return vs[0].(map[string]*ClusterPatch)[vs[1].(string)]
	}).(ClusterPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPatchInput)(nil)).Elem(), &ClusterPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPatchArrayInput)(nil)).Elem(), ClusterPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPatchMapInput)(nil)).Elem(), ClusterPatchMap{})
	pulumi.RegisterOutputType(ClusterPatchOutput{})
	pulumi.RegisterOutputType(ClusterPatchArrayOutput{})
	pulumi.RegisterOutputType(ClusterPatchMapOutput{})
}
