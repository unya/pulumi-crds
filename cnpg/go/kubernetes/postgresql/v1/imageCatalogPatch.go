// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ImageCatalog is the Schema for the imagecatalogs API
type ImageCatalogPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ImageCatalogSpecPatchPtrOutput  `pulumi:"spec"`
}

// NewImageCatalogPatch registers a new resource with the given unique name, arguments, and options.
func NewImageCatalogPatch(ctx *pulumi.Context,
	name string, args *ImageCatalogPatchArgs, opts ...pulumi.ResourceOption) (*ImageCatalogPatch, error) {
	if args == nil {
		args = &ImageCatalogPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ImageCatalog")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImageCatalogPatch
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ImageCatalogPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageCatalogPatch gets an existing ImageCatalogPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageCatalogPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageCatalogPatchState, opts ...pulumi.ResourceOption) (*ImageCatalogPatch, error) {
	var resource ImageCatalogPatch
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ImageCatalogPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageCatalogPatch resources.
type imageCatalogPatchState struct {
}

type ImageCatalogPatchState struct {
}

func (ImageCatalogPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCatalogPatchState)(nil)).Elem()
}

type imageCatalogPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ImageCatalogSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a ImageCatalogPatch resource.
type ImageCatalogPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ImageCatalogSpecPatchPtrInput
}

func (ImageCatalogPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageCatalogPatchArgs)(nil)).Elem()
}

type ImageCatalogPatchInput interface {
	pulumi.Input

	ToImageCatalogPatchOutput() ImageCatalogPatchOutput
	ToImageCatalogPatchOutputWithContext(ctx context.Context) ImageCatalogPatchOutput
}

func (*ImageCatalogPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCatalogPatch)(nil)).Elem()
}

func (i *ImageCatalogPatch) ToImageCatalogPatchOutput() ImageCatalogPatchOutput {
	return i.ToImageCatalogPatchOutputWithContext(context.Background())
}

func (i *ImageCatalogPatch) ToImageCatalogPatchOutputWithContext(ctx context.Context) ImageCatalogPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogPatchOutput)
}

// ImageCatalogPatchArrayInput is an input type that accepts ImageCatalogPatchArray and ImageCatalogPatchArrayOutput values.
// You can construct a concrete instance of `ImageCatalogPatchArrayInput` via:
//
//	ImageCatalogPatchArray{ ImageCatalogPatchArgs{...} }
type ImageCatalogPatchArrayInput interface {
	pulumi.Input

	ToImageCatalogPatchArrayOutput() ImageCatalogPatchArrayOutput
	ToImageCatalogPatchArrayOutputWithContext(context.Context) ImageCatalogPatchArrayOutput
}

type ImageCatalogPatchArray []ImageCatalogPatchInput

func (ImageCatalogPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageCatalogPatch)(nil)).Elem()
}

func (i ImageCatalogPatchArray) ToImageCatalogPatchArrayOutput() ImageCatalogPatchArrayOutput {
	return i.ToImageCatalogPatchArrayOutputWithContext(context.Background())
}

func (i ImageCatalogPatchArray) ToImageCatalogPatchArrayOutputWithContext(ctx context.Context) ImageCatalogPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogPatchArrayOutput)
}

// ImageCatalogPatchMapInput is an input type that accepts ImageCatalogPatchMap and ImageCatalogPatchMapOutput values.
// You can construct a concrete instance of `ImageCatalogPatchMapInput` via:
//
//	ImageCatalogPatchMap{ "key": ImageCatalogPatchArgs{...} }
type ImageCatalogPatchMapInput interface {
	pulumi.Input

	ToImageCatalogPatchMapOutput() ImageCatalogPatchMapOutput
	ToImageCatalogPatchMapOutputWithContext(context.Context) ImageCatalogPatchMapOutput
}

type ImageCatalogPatchMap map[string]ImageCatalogPatchInput

func (ImageCatalogPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageCatalogPatch)(nil)).Elem()
}

func (i ImageCatalogPatchMap) ToImageCatalogPatchMapOutput() ImageCatalogPatchMapOutput {
	return i.ToImageCatalogPatchMapOutputWithContext(context.Background())
}

func (i ImageCatalogPatchMap) ToImageCatalogPatchMapOutputWithContext(ctx context.Context) ImageCatalogPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageCatalogPatchMapOutput)
}

type ImageCatalogPatchOutput struct{ *pulumi.OutputState }

func (ImageCatalogPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageCatalogPatch)(nil)).Elem()
}

func (o ImageCatalogPatchOutput) ToImageCatalogPatchOutput() ImageCatalogPatchOutput {
	return o
}

func (o ImageCatalogPatchOutput) ToImageCatalogPatchOutputWithContext(ctx context.Context) ImageCatalogPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageCatalogPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageCatalogPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageCatalogPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageCatalogPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImageCatalogPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ImageCatalogPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ImageCatalogPatchOutput) Spec() ImageCatalogSpecPatchPtrOutput {
	return o.ApplyT(func(v *ImageCatalogPatch) ImageCatalogSpecPatchPtrOutput { return v.Spec }).(ImageCatalogSpecPatchPtrOutput)
}

type ImageCatalogPatchArrayOutput struct{ *pulumi.OutputState }

func (ImageCatalogPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageCatalogPatch)(nil)).Elem()
}

func (o ImageCatalogPatchArrayOutput) ToImageCatalogPatchArrayOutput() ImageCatalogPatchArrayOutput {
	return o
}

func (o ImageCatalogPatchArrayOutput) ToImageCatalogPatchArrayOutputWithContext(ctx context.Context) ImageCatalogPatchArrayOutput {
	return o
}

func (o ImageCatalogPatchArrayOutput) Index(i pulumi.IntInput) ImageCatalogPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageCatalogPatch {
		return vs[0].([]*ImageCatalogPatch)[vs[1].(int)]
	}).(ImageCatalogPatchOutput)
}

type ImageCatalogPatchMapOutput struct{ *pulumi.OutputState }

func (ImageCatalogPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageCatalogPatch)(nil)).Elem()
}

func (o ImageCatalogPatchMapOutput) ToImageCatalogPatchMapOutput() ImageCatalogPatchMapOutput {
	return o
}

func (o ImageCatalogPatchMapOutput) ToImageCatalogPatchMapOutputWithContext(ctx context.Context) ImageCatalogPatchMapOutput {
	return o
}

func (o ImageCatalogPatchMapOutput) MapIndex(k pulumi.StringInput) ImageCatalogPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageCatalogPatch {
		return vs[0].(map[string]*ImageCatalogPatch)[vs[1].(string)]
	}).(ImageCatalogPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogPatchInput)(nil)).Elem(), &ImageCatalogPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogPatchArrayInput)(nil)).Elem(), ImageCatalogPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageCatalogPatchMapInput)(nil)).Elem(), ImageCatalogPatchMap{})
	pulumi.RegisterOutputType(ImageCatalogPatchOutput{})
	pulumi.RegisterOutputType(ImageCatalogPatchArrayOutput{})
	pulumi.RegisterOutputType(ImageCatalogPatchMapOutput{})
}
