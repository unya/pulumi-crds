// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PoolerList is a list of Pooler
type PoolerList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of poolers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PoolerTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPoolerList registers a new resource with the given unique name, arguments, and options.
func NewPoolerList(ctx *pulumi.Context,
	name string, args *PoolerListArgs, opts ...pulumi.ResourceOption) (*PoolerList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("PoolerList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PoolerList
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:PoolerList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPoolerList gets an existing PoolerList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPoolerList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolerListState, opts ...pulumi.ResourceOption) (*PoolerList, error) {
	var resource PoolerList
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:PoolerList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PoolerList resources.
type poolerListState struct {
}

type PoolerListState struct {
}

func (PoolerListState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerListState)(nil)).Elem()
}

type poolerListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of poolers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PoolerType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PoolerList resource.
type PoolerListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of poolers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PoolerTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PoolerListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerListArgs)(nil)).Elem()
}

type PoolerListInput interface {
	pulumi.Input

	ToPoolerListOutput() PoolerListOutput
	ToPoolerListOutputWithContext(ctx context.Context) PoolerListOutput
}

func (*PoolerList) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolerList)(nil)).Elem()
}

func (i *PoolerList) ToPoolerListOutput() PoolerListOutput {
	return i.ToPoolerListOutputWithContext(context.Background())
}

func (i *PoolerList) ToPoolerListOutputWithContext(ctx context.Context) PoolerListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerListOutput)
}

// PoolerListArrayInput is an input type that accepts PoolerListArray and PoolerListArrayOutput values.
// You can construct a concrete instance of `PoolerListArrayInput` via:
//
//	PoolerListArray{ PoolerListArgs{...} }
type PoolerListArrayInput interface {
	pulumi.Input

	ToPoolerListArrayOutput() PoolerListArrayOutput
	ToPoolerListArrayOutputWithContext(context.Context) PoolerListArrayOutput
}

type PoolerListArray []PoolerListInput

func (PoolerListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PoolerList)(nil)).Elem()
}

func (i PoolerListArray) ToPoolerListArrayOutput() PoolerListArrayOutput {
	return i.ToPoolerListArrayOutputWithContext(context.Background())
}

func (i PoolerListArray) ToPoolerListArrayOutputWithContext(ctx context.Context) PoolerListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerListArrayOutput)
}

// PoolerListMapInput is an input type that accepts PoolerListMap and PoolerListMapOutput values.
// You can construct a concrete instance of `PoolerListMapInput` via:
//
//	PoolerListMap{ "key": PoolerListArgs{...} }
type PoolerListMapInput interface {
	pulumi.Input

	ToPoolerListMapOutput() PoolerListMapOutput
	ToPoolerListMapOutputWithContext(context.Context) PoolerListMapOutput
}

type PoolerListMap map[string]PoolerListInput

func (PoolerListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PoolerList)(nil)).Elem()
}

func (i PoolerListMap) ToPoolerListMapOutput() PoolerListMapOutput {
	return i.ToPoolerListMapOutputWithContext(context.Background())
}

func (i PoolerListMap) ToPoolerListMapOutputWithContext(ctx context.Context) PoolerListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerListMapOutput)
}

type PoolerListOutput struct{ *pulumi.OutputState }

func (PoolerListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolerList)(nil)).Elem()
}

func (o PoolerListOutput) ToPoolerListOutput() PoolerListOutput {
	return o
}

func (o PoolerListOutput) ToPoolerListOutputWithContext(ctx context.Context) PoolerListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PoolerListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolerList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of poolers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PoolerListOutput) Items() PoolerTypeArrayOutput {
	return o.ApplyT(func(v *PoolerList) PoolerTypeArrayOutput { return v.Items }).(PoolerTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PoolerListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PoolerList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PoolerListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PoolerList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PoolerListArrayOutput struct{ *pulumi.OutputState }

func (PoolerListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PoolerList)(nil)).Elem()
}

func (o PoolerListArrayOutput) ToPoolerListArrayOutput() PoolerListArrayOutput {
	return o
}

func (o PoolerListArrayOutput) ToPoolerListArrayOutputWithContext(ctx context.Context) PoolerListArrayOutput {
	return o
}

func (o PoolerListArrayOutput) Index(i pulumi.IntInput) PoolerListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PoolerList {
		return vs[0].([]*PoolerList)[vs[1].(int)]
	}).(PoolerListOutput)
}

type PoolerListMapOutput struct{ *pulumi.OutputState }

func (PoolerListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PoolerList)(nil)).Elem()
}

func (o PoolerListMapOutput) ToPoolerListMapOutput() PoolerListMapOutput {
	return o
}

func (o PoolerListMapOutput) ToPoolerListMapOutputWithContext(ctx context.Context) PoolerListMapOutput {
	return o
}

func (o PoolerListMapOutput) MapIndex(k pulumi.StringInput) PoolerListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PoolerList {
		return vs[0].(map[string]*PoolerList)[vs[1].(string)]
	}).(PoolerListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerListInput)(nil)).Elem(), &PoolerList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerListArrayInput)(nil)).Elem(), PoolerListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerListMapInput)(nil)).Elem(), PoolerListMap{})
	pulumi.RegisterOutputType(PoolerListOutput{})
	pulumi.RegisterOutputType(PoolerListArrayOutput{})
	pulumi.RegisterOutputType(PoolerListMapOutput{})
}
