// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SubscriptionList is a list of Subscription
type SubscriptionList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SubscriptionTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSubscriptionList registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionList(ctx *pulumi.Context,
	name string, args *SubscriptionListArgs, opts ...pulumi.ResourceOption) (*SubscriptionList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("SubscriptionList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SubscriptionList
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:SubscriptionList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionList gets an existing SubscriptionList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionListState, opts ...pulumi.ResourceOption) (*SubscriptionList, error) {
	var resource SubscriptionList
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:SubscriptionList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionList resources.
type subscriptionListState struct {
}

type SubscriptionListState struct {
}

func (SubscriptionListState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionListState)(nil)).Elem()
}

type subscriptionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SubscriptionType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SubscriptionList resource.
type SubscriptionListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SubscriptionTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SubscriptionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionListArgs)(nil)).Elem()
}

type SubscriptionListInput interface {
	pulumi.Input

	ToSubscriptionListOutput() SubscriptionListOutput
	ToSubscriptionListOutputWithContext(ctx context.Context) SubscriptionListOutput
}

func (*SubscriptionList) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionList)(nil)).Elem()
}

func (i *SubscriptionList) ToSubscriptionListOutput() SubscriptionListOutput {
	return i.ToSubscriptionListOutputWithContext(context.Background())
}

func (i *SubscriptionList) ToSubscriptionListOutputWithContext(ctx context.Context) SubscriptionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionListOutput)
}

// SubscriptionListArrayInput is an input type that accepts SubscriptionListArray and SubscriptionListArrayOutput values.
// You can construct a concrete instance of `SubscriptionListArrayInput` via:
//
//	SubscriptionListArray{ SubscriptionListArgs{...} }
type SubscriptionListArrayInput interface {
	pulumi.Input

	ToSubscriptionListArrayOutput() SubscriptionListArrayOutput
	ToSubscriptionListArrayOutputWithContext(context.Context) SubscriptionListArrayOutput
}

type SubscriptionListArray []SubscriptionListInput

func (SubscriptionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionList)(nil)).Elem()
}

func (i SubscriptionListArray) ToSubscriptionListArrayOutput() SubscriptionListArrayOutput {
	return i.ToSubscriptionListArrayOutputWithContext(context.Background())
}

func (i SubscriptionListArray) ToSubscriptionListArrayOutputWithContext(ctx context.Context) SubscriptionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionListArrayOutput)
}

// SubscriptionListMapInput is an input type that accepts SubscriptionListMap and SubscriptionListMapOutput values.
// You can construct a concrete instance of `SubscriptionListMapInput` via:
//
//	SubscriptionListMap{ "key": SubscriptionListArgs{...} }
type SubscriptionListMapInput interface {
	pulumi.Input

	ToSubscriptionListMapOutput() SubscriptionListMapOutput
	ToSubscriptionListMapOutputWithContext(context.Context) SubscriptionListMapOutput
}

type SubscriptionListMap map[string]SubscriptionListInput

func (SubscriptionListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionList)(nil)).Elem()
}

func (i SubscriptionListMap) ToSubscriptionListMapOutput() SubscriptionListMapOutput {
	return i.ToSubscriptionListMapOutputWithContext(context.Background())
}

func (i SubscriptionListMap) ToSubscriptionListMapOutputWithContext(ctx context.Context) SubscriptionListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionListMapOutput)
}

type SubscriptionListOutput struct{ *pulumi.OutputState }

func (SubscriptionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionList)(nil)).Elem()
}

func (o SubscriptionListOutput) ToSubscriptionListOutput() SubscriptionListOutput {
	return o
}

func (o SubscriptionListOutput) ToSubscriptionListOutputWithContext(ctx context.Context) SubscriptionListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SubscriptionListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of subscriptions. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SubscriptionListOutput) Items() SubscriptionTypeArrayOutput {
	return o.ApplyT(func(v *SubscriptionList) SubscriptionTypeArrayOutput { return v.Items }).(SubscriptionTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SubscriptionListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SubscriptionListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SubscriptionList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SubscriptionListArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionList)(nil)).Elem()
}

func (o SubscriptionListArrayOutput) ToSubscriptionListArrayOutput() SubscriptionListArrayOutput {
	return o
}

func (o SubscriptionListArrayOutput) ToSubscriptionListArrayOutputWithContext(ctx context.Context) SubscriptionListArrayOutput {
	return o
}

func (o SubscriptionListArrayOutput) Index(i pulumi.IntInput) SubscriptionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionList {
		return vs[0].([]*SubscriptionList)[vs[1].(int)]
	}).(SubscriptionListOutput)
}

type SubscriptionListMapOutput struct{ *pulumi.OutputState }

func (SubscriptionListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionList)(nil)).Elem()
}

func (o SubscriptionListMapOutput) ToSubscriptionListMapOutput() SubscriptionListMapOutput {
	return o
}

func (o SubscriptionListMapOutput) ToSubscriptionListMapOutputWithContext(ctx context.Context) SubscriptionListMapOutput {
	return o
}

func (o SubscriptionListMapOutput) MapIndex(k pulumi.StringInput) SubscriptionListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionList {
		return vs[0].(map[string]*SubscriptionList)[vs[1].(string)]
	}).(SubscriptionListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionListInput)(nil)).Elem(), &SubscriptionList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionListArrayInput)(nil)).Elem(), SubscriptionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionListMapInput)(nil)).Elem(), SubscriptionListMap{})
	pulumi.RegisterOutputType(SubscriptionListOutput{})
	pulumi.RegisterOutputType(SubscriptionListArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionListMapOutput{})
}
