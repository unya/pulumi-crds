// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterList is a list of Cluster
type ClusterList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of clusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClusterTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewClusterList registers a new resource with the given unique name, arguments, and options.
func NewClusterList(ctx *pulumi.Context,
	name string, args *ClusterListArgs, opts ...pulumi.ResourceOption) (*ClusterList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ClusterList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterList
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ClusterList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterList gets an existing ClusterList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterListState, opts ...pulumi.ResourceOption) (*ClusterList, error) {
	var resource ClusterList
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ClusterList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterList resources.
type clusterListState struct {
}

type ClusterListState struct {
}

func (ClusterListState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterListState)(nil)).Elem()
}

type clusterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of clusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ClusterType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ClusterList resource.
type ClusterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of clusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClusterTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ClusterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterListArgs)(nil)).Elem()
}

type ClusterListInput interface {
	pulumi.Input

	ToClusterListOutput() ClusterListOutput
	ToClusterListOutputWithContext(ctx context.Context) ClusterListOutput
}

func (*ClusterList) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterList)(nil)).Elem()
}

func (i *ClusterList) ToClusterListOutput() ClusterListOutput {
	return i.ToClusterListOutputWithContext(context.Background())
}

func (i *ClusterList) ToClusterListOutputWithContext(ctx context.Context) ClusterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterListOutput)
}

// ClusterListArrayInput is an input type that accepts ClusterListArray and ClusterListArrayOutput values.
// You can construct a concrete instance of `ClusterListArrayInput` via:
//
//	ClusterListArray{ ClusterListArgs{...} }
type ClusterListArrayInput interface {
	pulumi.Input

	ToClusterListArrayOutput() ClusterListArrayOutput
	ToClusterListArrayOutputWithContext(context.Context) ClusterListArrayOutput
}

type ClusterListArray []ClusterListInput

func (ClusterListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterList)(nil)).Elem()
}

func (i ClusterListArray) ToClusterListArrayOutput() ClusterListArrayOutput {
	return i.ToClusterListArrayOutputWithContext(context.Background())
}

func (i ClusterListArray) ToClusterListArrayOutputWithContext(ctx context.Context) ClusterListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterListArrayOutput)
}

// ClusterListMapInput is an input type that accepts ClusterListMap and ClusterListMapOutput values.
// You can construct a concrete instance of `ClusterListMapInput` via:
//
//	ClusterListMap{ "key": ClusterListArgs{...} }
type ClusterListMapInput interface {
	pulumi.Input

	ToClusterListMapOutput() ClusterListMapOutput
	ToClusterListMapOutputWithContext(context.Context) ClusterListMapOutput
}

type ClusterListMap map[string]ClusterListInput

func (ClusterListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterList)(nil)).Elem()
}

func (i ClusterListMap) ToClusterListMapOutput() ClusterListMapOutput {
	return i.ToClusterListMapOutputWithContext(context.Background())
}

func (i ClusterListMap) ToClusterListMapOutputWithContext(ctx context.Context) ClusterListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterListMapOutput)
}

type ClusterListOutput struct{ *pulumi.OutputState }

func (ClusterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterList)(nil)).Elem()
}

func (o ClusterListOutput) ToClusterListOutput() ClusterListOutput {
	return o
}

func (o ClusterListOutput) ToClusterListOutputWithContext(ctx context.Context) ClusterListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of clusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ClusterListOutput) Items() ClusterTypeArrayOutput {
	return o.ApplyT(func(v *ClusterList) ClusterTypeArrayOutput { return v.Items }).(ClusterTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ClusterList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ClusterListArrayOutput struct{ *pulumi.OutputState }

func (ClusterListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterList)(nil)).Elem()
}

func (o ClusterListArrayOutput) ToClusterListArrayOutput() ClusterListArrayOutput {
	return o
}

func (o ClusterListArrayOutput) ToClusterListArrayOutputWithContext(ctx context.Context) ClusterListArrayOutput {
	return o
}

func (o ClusterListArrayOutput) Index(i pulumi.IntInput) ClusterListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterList {
		return vs[0].([]*ClusterList)[vs[1].(int)]
	}).(ClusterListOutput)
}

type ClusterListMapOutput struct{ *pulumi.OutputState }

func (ClusterListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterList)(nil)).Elem()
}

func (o ClusterListMapOutput) ToClusterListMapOutput() ClusterListMapOutput {
	return o
}

func (o ClusterListMapOutput) ToClusterListMapOutputWithContext(ctx context.Context) ClusterListMapOutput {
	return o
}

func (o ClusterListMapOutput) MapIndex(k pulumi.StringInput) ClusterListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterList {
		return vs[0].(map[string]*ClusterList)[vs[1].(string)]
	}).(ClusterListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterListInput)(nil)).Elem(), &ClusterList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterListArrayInput)(nil)).Elem(), ClusterListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterListMapInput)(nil)).Elem(), ClusterListMap{})
	pulumi.RegisterOutputType(ClusterListOutput{})
	pulumi.RegisterOutputType(ClusterListArrayOutput{})
	pulumi.RegisterOutputType(ClusterListMapOutput{})
}
