// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ClusterImageCatalog is the Schema for the clusterimagecatalogs API
type ClusterImageCatalogPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput       `pulumi:"metadata"`
	Spec     ClusterImageCatalogSpecPatchPtrOutput `pulumi:"spec"`
}

// NewClusterImageCatalogPatch registers a new resource with the given unique name, arguments, and options.
func NewClusterImageCatalogPatch(ctx *pulumi.Context,
	name string, args *ClusterImageCatalogPatchArgs, opts ...pulumi.ResourceOption) (*ClusterImageCatalogPatch, error) {
	if args == nil {
		args = &ClusterImageCatalogPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ClusterImageCatalog")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterImageCatalogPatch
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalogPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterImageCatalogPatch gets an existing ClusterImageCatalogPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterImageCatalogPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterImageCatalogPatchState, opts ...pulumi.ResourceOption) (*ClusterImageCatalogPatch, error) {
	var resource ClusterImageCatalogPatch
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:ClusterImageCatalogPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterImageCatalogPatch resources.
type clusterImageCatalogPatchState struct {
}

type ClusterImageCatalogPatchState struct {
}

func (ClusterImageCatalogPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterImageCatalogPatchState)(nil)).Elem()
}

type clusterImageCatalogPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch       `pulumi:"metadata"`
	Spec     *ClusterImageCatalogSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ClusterImageCatalogPatch resource.
type ClusterImageCatalogPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ClusterImageCatalogSpecPatchPtrInput
}

func (ClusterImageCatalogPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterImageCatalogPatchArgs)(nil)).Elem()
}

type ClusterImageCatalogPatchInput interface {
	pulumi.Input

	ToClusterImageCatalogPatchOutput() ClusterImageCatalogPatchOutput
	ToClusterImageCatalogPatchOutputWithContext(ctx context.Context) ClusterImageCatalogPatchOutput
}

func (*ClusterImageCatalogPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterImageCatalogPatch)(nil)).Elem()
}

func (i *ClusterImageCatalogPatch) ToClusterImageCatalogPatchOutput() ClusterImageCatalogPatchOutput {
	return i.ToClusterImageCatalogPatchOutputWithContext(context.Background())
}

func (i *ClusterImageCatalogPatch) ToClusterImageCatalogPatchOutputWithContext(ctx context.Context) ClusterImageCatalogPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterImageCatalogPatchOutput)
}

// ClusterImageCatalogPatchArrayInput is an input type that accepts ClusterImageCatalogPatchArray and ClusterImageCatalogPatchArrayOutput values.
// You can construct a concrete instance of `ClusterImageCatalogPatchArrayInput` via:
//
//	ClusterImageCatalogPatchArray{ ClusterImageCatalogPatchArgs{...} }
type ClusterImageCatalogPatchArrayInput interface {
	pulumi.Input

	ToClusterImageCatalogPatchArrayOutput() ClusterImageCatalogPatchArrayOutput
	ToClusterImageCatalogPatchArrayOutputWithContext(context.Context) ClusterImageCatalogPatchArrayOutput
}

type ClusterImageCatalogPatchArray []ClusterImageCatalogPatchInput

func (ClusterImageCatalogPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterImageCatalogPatch)(nil)).Elem()
}

func (i ClusterImageCatalogPatchArray) ToClusterImageCatalogPatchArrayOutput() ClusterImageCatalogPatchArrayOutput {
	return i.ToClusterImageCatalogPatchArrayOutputWithContext(context.Background())
}

func (i ClusterImageCatalogPatchArray) ToClusterImageCatalogPatchArrayOutputWithContext(ctx context.Context) ClusterImageCatalogPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterImageCatalogPatchArrayOutput)
}

// ClusterImageCatalogPatchMapInput is an input type that accepts ClusterImageCatalogPatchMap and ClusterImageCatalogPatchMapOutput values.
// You can construct a concrete instance of `ClusterImageCatalogPatchMapInput` via:
//
//	ClusterImageCatalogPatchMap{ "key": ClusterImageCatalogPatchArgs{...} }
type ClusterImageCatalogPatchMapInput interface {
	pulumi.Input

	ToClusterImageCatalogPatchMapOutput() ClusterImageCatalogPatchMapOutput
	ToClusterImageCatalogPatchMapOutputWithContext(context.Context) ClusterImageCatalogPatchMapOutput
}

type ClusterImageCatalogPatchMap map[string]ClusterImageCatalogPatchInput

func (ClusterImageCatalogPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterImageCatalogPatch)(nil)).Elem()
}

func (i ClusterImageCatalogPatchMap) ToClusterImageCatalogPatchMapOutput() ClusterImageCatalogPatchMapOutput {
	return i.ToClusterImageCatalogPatchMapOutputWithContext(context.Background())
}

func (i ClusterImageCatalogPatchMap) ToClusterImageCatalogPatchMapOutputWithContext(ctx context.Context) ClusterImageCatalogPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterImageCatalogPatchMapOutput)
}

type ClusterImageCatalogPatchOutput struct{ *pulumi.OutputState }

func (ClusterImageCatalogPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterImageCatalogPatch)(nil)).Elem()
}

func (o ClusterImageCatalogPatchOutput) ToClusterImageCatalogPatchOutput() ClusterImageCatalogPatchOutput {
	return o
}

func (o ClusterImageCatalogPatchOutput) ToClusterImageCatalogPatchOutputWithContext(ctx context.Context) ClusterImageCatalogPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClusterImageCatalogPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterImageCatalogPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClusterImageCatalogPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterImageCatalogPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClusterImageCatalogPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ClusterImageCatalogPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ClusterImageCatalogPatchOutput) Spec() ClusterImageCatalogSpecPatchPtrOutput {
	return o.ApplyT(func(v *ClusterImageCatalogPatch) ClusterImageCatalogSpecPatchPtrOutput { return v.Spec }).(ClusterImageCatalogSpecPatchPtrOutput)
}

type ClusterImageCatalogPatchArrayOutput struct{ *pulumi.OutputState }

func (ClusterImageCatalogPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterImageCatalogPatch)(nil)).Elem()
}

func (o ClusterImageCatalogPatchArrayOutput) ToClusterImageCatalogPatchArrayOutput() ClusterImageCatalogPatchArrayOutput {
	return o
}

func (o ClusterImageCatalogPatchArrayOutput) ToClusterImageCatalogPatchArrayOutputWithContext(ctx context.Context) ClusterImageCatalogPatchArrayOutput {
	return o
}

func (o ClusterImageCatalogPatchArrayOutput) Index(i pulumi.IntInput) ClusterImageCatalogPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterImageCatalogPatch {
		return vs[0].([]*ClusterImageCatalogPatch)[vs[1].(int)]
	}).(ClusterImageCatalogPatchOutput)
}

type ClusterImageCatalogPatchMapOutput struct{ *pulumi.OutputState }

func (ClusterImageCatalogPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterImageCatalogPatch)(nil)).Elem()
}

func (o ClusterImageCatalogPatchMapOutput) ToClusterImageCatalogPatchMapOutput() ClusterImageCatalogPatchMapOutput {
	return o
}

func (o ClusterImageCatalogPatchMapOutput) ToClusterImageCatalogPatchMapOutputWithContext(ctx context.Context) ClusterImageCatalogPatchMapOutput {
	return o
}

func (o ClusterImageCatalogPatchMapOutput) MapIndex(k pulumi.StringInput) ClusterImageCatalogPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterImageCatalogPatch {
		return vs[0].(map[string]*ClusterImageCatalogPatch)[vs[1].(string)]
	}).(ClusterImageCatalogPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterImageCatalogPatchInput)(nil)).Elem(), &ClusterImageCatalogPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterImageCatalogPatchArrayInput)(nil)).Elem(), ClusterImageCatalogPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterImageCatalogPatchMapInput)(nil)).Elem(), ClusterImageCatalogPatchMap{})
	pulumi.RegisterOutputType(ClusterImageCatalogPatchOutput{})
	pulumi.RegisterOutputType(ClusterImageCatalogPatchArrayOutput{})
	pulumi.RegisterOutputType(ClusterImageCatalogPatchMapOutput{})
}
