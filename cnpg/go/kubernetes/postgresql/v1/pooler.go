// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Pooler is the Schema for the poolers API
type Pooler struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     PoolerSpecOutput        `pulumi:"spec"`
	Status   PoolerStatusPtrOutput   `pulumi:"status"`
}

// NewPooler registers a new resource with the given unique name, arguments, and options.
func NewPooler(ctx *pulumi.Context,
	name string, args *PoolerArgs, opts ...pulumi.ResourceOption) (*Pooler, error) {
	if args == nil {
		args = &PoolerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("Pooler")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Pooler
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:Pooler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPooler gets an existing Pooler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPooler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolerState, opts ...pulumi.ResourceOption) (*Pooler, error) {
	var resource Pooler
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:Pooler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pooler resources.
type poolerState struct {
}

type PoolerState struct {
}

func (PoolerState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerState)(nil)).Elem()
}

type poolerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *PoolerSpec        `pulumi:"spec"`
}

// The set of arguments for constructing a Pooler resource.
type PoolerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PoolerSpecPtrInput
}

func (PoolerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerArgs)(nil)).Elem()
}

type PoolerInput interface {
	pulumi.Input

	ToPoolerOutput() PoolerOutput
	ToPoolerOutputWithContext(ctx context.Context) PoolerOutput
}

func (*Pooler) ElementType() reflect.Type {
	return reflect.TypeOf((**Pooler)(nil)).Elem()
}

func (i *Pooler) ToPoolerOutput() PoolerOutput {
	return i.ToPoolerOutputWithContext(context.Background())
}

func (i *Pooler) ToPoolerOutputWithContext(ctx context.Context) PoolerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerOutput)
}

// PoolerArrayInput is an input type that accepts PoolerArray and PoolerArrayOutput values.
// You can construct a concrete instance of `PoolerArrayInput` via:
//
//	PoolerArray{ PoolerArgs{...} }
type PoolerArrayInput interface {
	pulumi.Input

	ToPoolerArrayOutput() PoolerArrayOutput
	ToPoolerArrayOutputWithContext(context.Context) PoolerArrayOutput
}

type PoolerArray []PoolerInput

func (PoolerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pooler)(nil)).Elem()
}

func (i PoolerArray) ToPoolerArrayOutput() PoolerArrayOutput {
	return i.ToPoolerArrayOutputWithContext(context.Background())
}

func (i PoolerArray) ToPoolerArrayOutputWithContext(ctx context.Context) PoolerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerArrayOutput)
}

// PoolerMapInput is an input type that accepts PoolerMap and PoolerMapOutput values.
// You can construct a concrete instance of `PoolerMapInput` via:
//
//	PoolerMap{ "key": PoolerArgs{...} }
type PoolerMapInput interface {
	pulumi.Input

	ToPoolerMapOutput() PoolerMapOutput
	ToPoolerMapOutputWithContext(context.Context) PoolerMapOutput
}

type PoolerMap map[string]PoolerInput

func (PoolerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pooler)(nil)).Elem()
}

func (i PoolerMap) ToPoolerMapOutput() PoolerMapOutput {
	return i.ToPoolerMapOutputWithContext(context.Background())
}

func (i PoolerMap) ToPoolerMapOutputWithContext(ctx context.Context) PoolerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerMapOutput)
}

type PoolerOutput struct{ *pulumi.OutputState }

func (PoolerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pooler)(nil)).Elem()
}

func (o PoolerOutput) ToPoolerOutput() PoolerOutput {
	return o
}

func (o PoolerOutput) ToPoolerOutputWithContext(ctx context.Context) PoolerOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PoolerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Pooler) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PoolerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Pooler) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PoolerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Pooler) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PoolerOutput) Spec() PoolerSpecOutput {
	return o.ApplyT(func(v *Pooler) PoolerSpecOutput { return v.Spec }).(PoolerSpecOutput)
}

func (o PoolerOutput) Status() PoolerStatusPtrOutput {
	return o.ApplyT(func(v *Pooler) PoolerStatusPtrOutput { return v.Status }).(PoolerStatusPtrOutput)
}

type PoolerArrayOutput struct{ *pulumi.OutputState }

func (PoolerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pooler)(nil)).Elem()
}

func (o PoolerArrayOutput) ToPoolerArrayOutput() PoolerArrayOutput {
	return o
}

func (o PoolerArrayOutput) ToPoolerArrayOutputWithContext(ctx context.Context) PoolerArrayOutput {
	return o
}

func (o PoolerArrayOutput) Index(i pulumi.IntInput) PoolerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pooler {
		return vs[0].([]*Pooler)[vs[1].(int)]
	}).(PoolerOutput)
}

type PoolerMapOutput struct{ *pulumi.OutputState }

func (PoolerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pooler)(nil)).Elem()
}

func (o PoolerMapOutput) ToPoolerMapOutput() PoolerMapOutput {
	return o
}

func (o PoolerMapOutput) ToPoolerMapOutputWithContext(ctx context.Context) PoolerMapOutput {
	return o
}

func (o PoolerMapOutput) MapIndex(k pulumi.StringInput) PoolerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pooler {
		return vs[0].(map[string]*Pooler)[vs[1].(string)]
	}).(PoolerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerInput)(nil)).Elem(), &Pooler{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerArrayInput)(nil)).Elem(), PoolerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerMapInput)(nil)).Elem(), PoolerMap{})
	pulumi.RegisterOutputType(PoolerOutput{})
	pulumi.RegisterOutputType(PoolerArrayOutput{})
	pulumi.RegisterOutputType(PoolerMapOutput{})
}
