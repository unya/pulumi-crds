// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Subscription is the Schema for the subscriptions API
type SubscriptionPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     SubscriptionSpecPatchPtrOutput   `pulumi:"spec"`
	Status   SubscriptionStatusPatchPtrOutput `pulumi:"status"`
}

// NewSubscriptionPatch registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionPatch(ctx *pulumi.Context,
	name string, args *SubscriptionPatchArgs, opts ...pulumi.ResourceOption) (*SubscriptionPatch, error) {
	if args == nil {
		args = &SubscriptionPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("Subscription")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SubscriptionPatch
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:SubscriptionPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionPatch gets an existing SubscriptionPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionPatchState, opts ...pulumi.ResourceOption) (*SubscriptionPatch, error) {
	var resource SubscriptionPatch
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:SubscriptionPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionPatch resources.
type subscriptionPatchState struct {
}

type SubscriptionPatchState struct {
}

func (SubscriptionPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionPatchState)(nil)).Elem()
}

type subscriptionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *SubscriptionSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a SubscriptionPatch resource.
type SubscriptionPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     SubscriptionSpecPatchPtrInput
}

func (SubscriptionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionPatchArgs)(nil)).Elem()
}

type SubscriptionPatchInput interface {
	pulumi.Input

	ToSubscriptionPatchOutput() SubscriptionPatchOutput
	ToSubscriptionPatchOutputWithContext(ctx context.Context) SubscriptionPatchOutput
}

func (*SubscriptionPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPatch)(nil)).Elem()
}

func (i *SubscriptionPatch) ToSubscriptionPatchOutput() SubscriptionPatchOutput {
	return i.ToSubscriptionPatchOutputWithContext(context.Background())
}

func (i *SubscriptionPatch) ToSubscriptionPatchOutputWithContext(ctx context.Context) SubscriptionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPatchOutput)
}

// SubscriptionPatchArrayInput is an input type that accepts SubscriptionPatchArray and SubscriptionPatchArrayOutput values.
// You can construct a concrete instance of `SubscriptionPatchArrayInput` via:
//
//	SubscriptionPatchArray{ SubscriptionPatchArgs{...} }
type SubscriptionPatchArrayInput interface {
	pulumi.Input

	ToSubscriptionPatchArrayOutput() SubscriptionPatchArrayOutput
	ToSubscriptionPatchArrayOutputWithContext(context.Context) SubscriptionPatchArrayOutput
}

type SubscriptionPatchArray []SubscriptionPatchInput

func (SubscriptionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionPatch)(nil)).Elem()
}

func (i SubscriptionPatchArray) ToSubscriptionPatchArrayOutput() SubscriptionPatchArrayOutput {
	return i.ToSubscriptionPatchArrayOutputWithContext(context.Background())
}

func (i SubscriptionPatchArray) ToSubscriptionPatchArrayOutputWithContext(ctx context.Context) SubscriptionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPatchArrayOutput)
}

// SubscriptionPatchMapInput is an input type that accepts SubscriptionPatchMap and SubscriptionPatchMapOutput values.
// You can construct a concrete instance of `SubscriptionPatchMapInput` via:
//
//	SubscriptionPatchMap{ "key": SubscriptionPatchArgs{...} }
type SubscriptionPatchMapInput interface {
	pulumi.Input

	ToSubscriptionPatchMapOutput() SubscriptionPatchMapOutput
	ToSubscriptionPatchMapOutputWithContext(context.Context) SubscriptionPatchMapOutput
}

type SubscriptionPatchMap map[string]SubscriptionPatchInput

func (SubscriptionPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionPatch)(nil)).Elem()
}

func (i SubscriptionPatchMap) ToSubscriptionPatchMapOutput() SubscriptionPatchMapOutput {
	return i.ToSubscriptionPatchMapOutputWithContext(context.Background())
}

func (i SubscriptionPatchMap) ToSubscriptionPatchMapOutputWithContext(ctx context.Context) SubscriptionPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionPatchMapOutput)
}

type SubscriptionPatchOutput struct{ *pulumi.OutputState }

func (SubscriptionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionPatch)(nil)).Elem()
}

func (o SubscriptionPatchOutput) ToSubscriptionPatchOutput() SubscriptionPatchOutput {
	return o
}

func (o SubscriptionPatchOutput) ToSubscriptionPatchOutputWithContext(ctx context.Context) SubscriptionPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SubscriptionPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SubscriptionPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SubscriptionPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SubscriptionPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SubscriptionPatchOutput) Spec() SubscriptionSpecPatchPtrOutput {
	return o.ApplyT(func(v *SubscriptionPatch) SubscriptionSpecPatchPtrOutput { return v.Spec }).(SubscriptionSpecPatchPtrOutput)
}

func (o SubscriptionPatchOutput) Status() SubscriptionStatusPatchPtrOutput {
	return o.ApplyT(func(v *SubscriptionPatch) SubscriptionStatusPatchPtrOutput { return v.Status }).(SubscriptionStatusPatchPtrOutput)
}

type SubscriptionPatchArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionPatch)(nil)).Elem()
}

func (o SubscriptionPatchArrayOutput) ToSubscriptionPatchArrayOutput() SubscriptionPatchArrayOutput {
	return o
}

func (o SubscriptionPatchArrayOutput) ToSubscriptionPatchArrayOutputWithContext(ctx context.Context) SubscriptionPatchArrayOutput {
	return o
}

func (o SubscriptionPatchArrayOutput) Index(i pulumi.IntInput) SubscriptionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionPatch {
		return vs[0].([]*SubscriptionPatch)[vs[1].(int)]
	}).(SubscriptionPatchOutput)
}

type SubscriptionPatchMapOutput struct{ *pulumi.OutputState }

func (SubscriptionPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionPatch)(nil)).Elem()
}

func (o SubscriptionPatchMapOutput) ToSubscriptionPatchMapOutput() SubscriptionPatchMapOutput {
	return o
}

func (o SubscriptionPatchMapOutput) ToSubscriptionPatchMapOutputWithContext(ctx context.Context) SubscriptionPatchMapOutput {
	return o
}

func (o SubscriptionPatchMapOutput) MapIndex(k pulumi.StringInput) SubscriptionPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionPatch {
		return vs[0].(map[string]*SubscriptionPatch)[vs[1].(string)]
	}).(SubscriptionPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPatchInput)(nil)).Elem(), &SubscriptionPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPatchArrayInput)(nil)).Elem(), SubscriptionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionPatchMapInput)(nil)).Elem(), SubscriptionPatchMap{})
	pulumi.RegisterOutputType(SubscriptionPatchOutput{})
	pulumi.RegisterOutputType(SubscriptionPatchArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionPatchMapOutput{})
}
