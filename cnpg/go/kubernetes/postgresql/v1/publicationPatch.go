// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Publication is the Schema for the publications API
type PublicationPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PublicationSpecPatchPtrOutput   `pulumi:"spec"`
	Status   PublicationStatusPatchPtrOutput `pulumi:"status"`
}

// NewPublicationPatch registers a new resource with the given unique name, arguments, and options.
func NewPublicationPatch(ctx *pulumi.Context,
	name string, args *PublicationPatchArgs, opts ...pulumi.ResourceOption) (*PublicationPatch, error) {
	if args == nil {
		args = &PublicationPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("Publication")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PublicationPatch
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:PublicationPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicationPatch gets an existing PublicationPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicationPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicationPatchState, opts ...pulumi.ResourceOption) (*PublicationPatch, error) {
	var resource PublicationPatch
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:PublicationPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicationPatch resources.
type publicationPatchState struct {
}

type PublicationPatchState struct {
}

func (PublicationPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicationPatchState)(nil)).Elem()
}

type publicationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PublicationSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a PublicationPatch resource.
type PublicationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PublicationSpecPatchPtrInput
}

func (PublicationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicationPatchArgs)(nil)).Elem()
}

type PublicationPatchInput interface {
	pulumi.Input

	ToPublicationPatchOutput() PublicationPatchOutput
	ToPublicationPatchOutputWithContext(ctx context.Context) PublicationPatchOutput
}

func (*PublicationPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationPatch)(nil)).Elem()
}

func (i *PublicationPatch) ToPublicationPatchOutput() PublicationPatchOutput {
	return i.ToPublicationPatchOutputWithContext(context.Background())
}

func (i *PublicationPatch) ToPublicationPatchOutputWithContext(ctx context.Context) PublicationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPatchOutput)
}

// PublicationPatchArrayInput is an input type that accepts PublicationPatchArray and PublicationPatchArrayOutput values.
// You can construct a concrete instance of `PublicationPatchArrayInput` via:
//
//	PublicationPatchArray{ PublicationPatchArgs{...} }
type PublicationPatchArrayInput interface {
	pulumi.Input

	ToPublicationPatchArrayOutput() PublicationPatchArrayOutput
	ToPublicationPatchArrayOutputWithContext(context.Context) PublicationPatchArrayOutput
}

type PublicationPatchArray []PublicationPatchInput

func (PublicationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicationPatch)(nil)).Elem()
}

func (i PublicationPatchArray) ToPublicationPatchArrayOutput() PublicationPatchArrayOutput {
	return i.ToPublicationPatchArrayOutputWithContext(context.Background())
}

func (i PublicationPatchArray) ToPublicationPatchArrayOutputWithContext(ctx context.Context) PublicationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPatchArrayOutput)
}

// PublicationPatchMapInput is an input type that accepts PublicationPatchMap and PublicationPatchMapOutput values.
// You can construct a concrete instance of `PublicationPatchMapInput` via:
//
//	PublicationPatchMap{ "key": PublicationPatchArgs{...} }
type PublicationPatchMapInput interface {
	pulumi.Input

	ToPublicationPatchMapOutput() PublicationPatchMapOutput
	ToPublicationPatchMapOutputWithContext(context.Context) PublicationPatchMapOutput
}

type PublicationPatchMap map[string]PublicationPatchInput

func (PublicationPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicationPatch)(nil)).Elem()
}

func (i PublicationPatchMap) ToPublicationPatchMapOutput() PublicationPatchMapOutput {
	return i.ToPublicationPatchMapOutputWithContext(context.Background())
}

func (i PublicationPatchMap) ToPublicationPatchMapOutputWithContext(ctx context.Context) PublicationPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationPatchMapOutput)
}

type PublicationPatchOutput struct{ *pulumi.OutputState }

func (PublicationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationPatch)(nil)).Elem()
}

func (o PublicationPatchOutput) ToPublicationPatchOutput() PublicationPatchOutput {
	return o
}

func (o PublicationPatchOutput) ToPublicationPatchOutputWithContext(ctx context.Context) PublicationPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PublicationPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicationPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PublicationPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicationPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PublicationPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PublicationPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PublicationPatchOutput) Spec() PublicationSpecPatchPtrOutput {
	return o.ApplyT(func(v *PublicationPatch) PublicationSpecPatchPtrOutput { return v.Spec }).(PublicationSpecPatchPtrOutput)
}

func (o PublicationPatchOutput) Status() PublicationStatusPatchPtrOutput {
	return o.ApplyT(func(v *PublicationPatch) PublicationStatusPatchPtrOutput { return v.Status }).(PublicationStatusPatchPtrOutput)
}

type PublicationPatchArrayOutput struct{ *pulumi.OutputState }

func (PublicationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicationPatch)(nil)).Elem()
}

func (o PublicationPatchArrayOutput) ToPublicationPatchArrayOutput() PublicationPatchArrayOutput {
	return o
}

func (o PublicationPatchArrayOutput) ToPublicationPatchArrayOutputWithContext(ctx context.Context) PublicationPatchArrayOutput {
	return o
}

func (o PublicationPatchArrayOutput) Index(i pulumi.IntInput) PublicationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicationPatch {
		return vs[0].([]*PublicationPatch)[vs[1].(int)]
	}).(PublicationPatchOutput)
}

type PublicationPatchMapOutput struct{ *pulumi.OutputState }

func (PublicationPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicationPatch)(nil)).Elem()
}

func (o PublicationPatchMapOutput) ToPublicationPatchMapOutput() PublicationPatchMapOutput {
	return o
}

func (o PublicationPatchMapOutput) ToPublicationPatchMapOutputWithContext(ctx context.Context) PublicationPatchMapOutput {
	return o
}

func (o PublicationPatchMapOutput) MapIndex(k pulumi.StringInput) PublicationPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicationPatch {
		return vs[0].(map[string]*PublicationPatch)[vs[1].(string)]
	}).(PublicationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPatchInput)(nil)).Elem(), &PublicationPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPatchArrayInput)(nil)).Elem(), PublicationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationPatchMapInput)(nil)).Elem(), PublicationPatchMap{})
	pulumi.RegisterOutputType(PublicationPatchOutput{})
	pulumi.RegisterOutputType(PublicationPatchArrayOutput{})
	pulumi.RegisterOutputType(PublicationPatchMapOutput{})
}
