// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Pooler is the Schema for the poolers API
type PoolerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PoolerSpecPatchPtrOutput        `pulumi:"spec"`
	Status   PoolerStatusPatchPtrOutput      `pulumi:"status"`
}

// NewPoolerPatch registers a new resource with the given unique name, arguments, and options.
func NewPoolerPatch(ctx *pulumi.Context,
	name string, args *PoolerPatchArgs, opts ...pulumi.ResourceOption) (*PoolerPatch, error) {
	if args == nil {
		args = &PoolerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("Pooler")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PoolerPatch
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:PoolerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPoolerPatch gets an existing PoolerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPoolerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolerPatchState, opts ...pulumi.ResourceOption) (*PoolerPatch, error) {
	var resource PoolerPatch
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:PoolerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PoolerPatch resources.
type poolerPatchState struct {
}

type PoolerPatchState struct {
}

func (PoolerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerPatchState)(nil)).Elem()
}

type poolerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PoolerSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a PoolerPatch resource.
type PoolerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PoolerSpecPatchPtrInput
}

func (PoolerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolerPatchArgs)(nil)).Elem()
}

type PoolerPatchInput interface {
	pulumi.Input

	ToPoolerPatchOutput() PoolerPatchOutput
	ToPoolerPatchOutputWithContext(ctx context.Context) PoolerPatchOutput
}

func (*PoolerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolerPatch)(nil)).Elem()
}

func (i *PoolerPatch) ToPoolerPatchOutput() PoolerPatchOutput {
	return i.ToPoolerPatchOutputWithContext(context.Background())
}

func (i *PoolerPatch) ToPoolerPatchOutputWithContext(ctx context.Context) PoolerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerPatchOutput)
}

// PoolerPatchArrayInput is an input type that accepts PoolerPatchArray and PoolerPatchArrayOutput values.
// You can construct a concrete instance of `PoolerPatchArrayInput` via:
//
//	PoolerPatchArray{ PoolerPatchArgs{...} }
type PoolerPatchArrayInput interface {
	pulumi.Input

	ToPoolerPatchArrayOutput() PoolerPatchArrayOutput
	ToPoolerPatchArrayOutputWithContext(context.Context) PoolerPatchArrayOutput
}

type PoolerPatchArray []PoolerPatchInput

func (PoolerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PoolerPatch)(nil)).Elem()
}

func (i PoolerPatchArray) ToPoolerPatchArrayOutput() PoolerPatchArrayOutput {
	return i.ToPoolerPatchArrayOutputWithContext(context.Background())
}

func (i PoolerPatchArray) ToPoolerPatchArrayOutputWithContext(ctx context.Context) PoolerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerPatchArrayOutput)
}

// PoolerPatchMapInput is an input type that accepts PoolerPatchMap and PoolerPatchMapOutput values.
// You can construct a concrete instance of `PoolerPatchMapInput` via:
//
//	PoolerPatchMap{ "key": PoolerPatchArgs{...} }
type PoolerPatchMapInput interface {
	pulumi.Input

	ToPoolerPatchMapOutput() PoolerPatchMapOutput
	ToPoolerPatchMapOutputWithContext(context.Context) PoolerPatchMapOutput
}

type PoolerPatchMap map[string]PoolerPatchInput

func (PoolerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PoolerPatch)(nil)).Elem()
}

func (i PoolerPatchMap) ToPoolerPatchMapOutput() PoolerPatchMapOutput {
	return i.ToPoolerPatchMapOutputWithContext(context.Background())
}

func (i PoolerPatchMap) ToPoolerPatchMapOutputWithContext(ctx context.Context) PoolerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolerPatchMapOutput)
}

type PoolerPatchOutput struct{ *pulumi.OutputState }

func (PoolerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolerPatch)(nil)).Elem()
}

func (o PoolerPatchOutput) ToPoolerPatchOutput() PoolerPatchOutput {
	return o
}

func (o PoolerPatchOutput) ToPoolerPatchOutputWithContext(ctx context.Context) PoolerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PoolerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PoolerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PoolerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PoolerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PoolerPatchOutput) Spec() PoolerSpecPatchPtrOutput {
	return o.ApplyT(func(v *PoolerPatch) PoolerSpecPatchPtrOutput { return v.Spec }).(PoolerSpecPatchPtrOutput)
}

func (o PoolerPatchOutput) Status() PoolerStatusPatchPtrOutput {
	return o.ApplyT(func(v *PoolerPatch) PoolerStatusPatchPtrOutput { return v.Status }).(PoolerStatusPatchPtrOutput)
}

type PoolerPatchArrayOutput struct{ *pulumi.OutputState }

func (PoolerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PoolerPatch)(nil)).Elem()
}

func (o PoolerPatchArrayOutput) ToPoolerPatchArrayOutput() PoolerPatchArrayOutput {
	return o
}

func (o PoolerPatchArrayOutput) ToPoolerPatchArrayOutputWithContext(ctx context.Context) PoolerPatchArrayOutput {
	return o
}

func (o PoolerPatchArrayOutput) Index(i pulumi.IntInput) PoolerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PoolerPatch {
		return vs[0].([]*PoolerPatch)[vs[1].(int)]
	}).(PoolerPatchOutput)
}

type PoolerPatchMapOutput struct{ *pulumi.OutputState }

func (PoolerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PoolerPatch)(nil)).Elem()
}

func (o PoolerPatchMapOutput) ToPoolerPatchMapOutput() PoolerPatchMapOutput {
	return o
}

func (o PoolerPatchMapOutput) ToPoolerPatchMapOutputWithContext(ctx context.Context) PoolerPatchMapOutput {
	return o
}

func (o PoolerPatchMapOutput) MapIndex(k pulumi.StringInput) PoolerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PoolerPatch {
		return vs[0].(map[string]*PoolerPatch)[vs[1].(string)]
	}).(PoolerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerPatchInput)(nil)).Elem(), &PoolerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerPatchArrayInput)(nil)).Elem(), PoolerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolerPatchMapInput)(nil)).Elem(), PoolerPatchMap{})
	pulumi.RegisterOutputType(PoolerPatchOutput{})
	pulumi.RegisterOutputType(PoolerPatchArrayOutput{})
	pulumi.RegisterOutputType(PoolerPatchMapOutput{})
}
