// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PublicationList is a list of Publication
type PublicationList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of publications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PublicationTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPublicationList registers a new resource with the given unique name, arguments, and options.
func NewPublicationList(ctx *pulumi.Context,
	name string, args *PublicationListArgs, opts ...pulumi.ResourceOption) (*PublicationList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("postgresql.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("PublicationList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PublicationList
	err := ctx.RegisterResource("kubernetes:postgresql.cnpg.io/v1:PublicationList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicationList gets an existing PublicationList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicationList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicationListState, opts ...pulumi.ResourceOption) (*PublicationList, error) {
	var resource PublicationList
	err := ctx.ReadResource("kubernetes:postgresql.cnpg.io/v1:PublicationList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicationList resources.
type publicationListState struct {
}

type PublicationListState struct {
}

func (PublicationListState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicationListState)(nil)).Elem()
}

type publicationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of publications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PublicationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PublicationList resource.
type PublicationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of publications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PublicationTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PublicationListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicationListArgs)(nil)).Elem()
}

type PublicationListInput interface {
	pulumi.Input

	ToPublicationListOutput() PublicationListOutput
	ToPublicationListOutputWithContext(ctx context.Context) PublicationListOutput
}

func (*PublicationList) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationList)(nil)).Elem()
}

func (i *PublicationList) ToPublicationListOutput() PublicationListOutput {
	return i.ToPublicationListOutputWithContext(context.Background())
}

func (i *PublicationList) ToPublicationListOutputWithContext(ctx context.Context) PublicationListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationListOutput)
}

// PublicationListArrayInput is an input type that accepts PublicationListArray and PublicationListArrayOutput values.
// You can construct a concrete instance of `PublicationListArrayInput` via:
//
//	PublicationListArray{ PublicationListArgs{...} }
type PublicationListArrayInput interface {
	pulumi.Input

	ToPublicationListArrayOutput() PublicationListArrayOutput
	ToPublicationListArrayOutputWithContext(context.Context) PublicationListArrayOutput
}

type PublicationListArray []PublicationListInput

func (PublicationListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicationList)(nil)).Elem()
}

func (i PublicationListArray) ToPublicationListArrayOutput() PublicationListArrayOutput {
	return i.ToPublicationListArrayOutputWithContext(context.Background())
}

func (i PublicationListArray) ToPublicationListArrayOutputWithContext(ctx context.Context) PublicationListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationListArrayOutput)
}

// PublicationListMapInput is an input type that accepts PublicationListMap and PublicationListMapOutput values.
// You can construct a concrete instance of `PublicationListMapInput` via:
//
//	PublicationListMap{ "key": PublicationListArgs{...} }
type PublicationListMapInput interface {
	pulumi.Input

	ToPublicationListMapOutput() PublicationListMapOutput
	ToPublicationListMapOutputWithContext(context.Context) PublicationListMapOutput
}

type PublicationListMap map[string]PublicationListInput

func (PublicationListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicationList)(nil)).Elem()
}

func (i PublicationListMap) ToPublicationListMapOutput() PublicationListMapOutput {
	return i.ToPublicationListMapOutputWithContext(context.Background())
}

func (i PublicationListMap) ToPublicationListMapOutputWithContext(ctx context.Context) PublicationListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicationListMapOutput)
}

type PublicationListOutput struct{ *pulumi.OutputState }

func (PublicationListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicationList)(nil)).Elem()
}

func (o PublicationListOutput) ToPublicationListOutput() PublicationListOutput {
	return o
}

func (o PublicationListOutput) ToPublicationListOutputWithContext(ctx context.Context) PublicationListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PublicationListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicationList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of publications. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PublicationListOutput) Items() PublicationTypeArrayOutput {
	return o.ApplyT(func(v *PublicationList) PublicationTypeArrayOutput { return v.Items }).(PublicationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PublicationListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicationList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PublicationListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PublicationList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PublicationListArrayOutput struct{ *pulumi.OutputState }

func (PublicationListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicationList)(nil)).Elem()
}

func (o PublicationListArrayOutput) ToPublicationListArrayOutput() PublicationListArrayOutput {
	return o
}

func (o PublicationListArrayOutput) ToPublicationListArrayOutputWithContext(ctx context.Context) PublicationListArrayOutput {
	return o
}

func (o PublicationListArrayOutput) Index(i pulumi.IntInput) PublicationListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicationList {
		return vs[0].([]*PublicationList)[vs[1].(int)]
	}).(PublicationListOutput)
}

type PublicationListMapOutput struct{ *pulumi.OutputState }

func (PublicationListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicationList)(nil)).Elem()
}

func (o PublicationListMapOutput) ToPublicationListMapOutput() PublicationListMapOutput {
	return o
}

func (o PublicationListMapOutput) ToPublicationListMapOutputWithContext(ctx context.Context) PublicationListMapOutput {
	return o
}

func (o PublicationListMapOutput) MapIndex(k pulumi.StringInput) PublicationListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicationList {
		return vs[0].(map[string]*PublicationList)[vs[1].(string)]
	}).(PublicationListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationListInput)(nil)).Elem(), &PublicationList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationListArrayInput)(nil)).Elem(), PublicationListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicationListMapInput)(nil)).Elem(), PublicationListMap{})
	pulumi.RegisterOutputType(PublicationListOutput{})
	pulumi.RegisterOutputType(PublicationListArrayOutput{})
	pulumi.RegisterOutputType(PublicationListMapOutput{})
}
