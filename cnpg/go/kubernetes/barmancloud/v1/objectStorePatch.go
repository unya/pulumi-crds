// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ObjectStore is the Schema for the objectstores API.
type ObjectStorePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ObjectStoreSpecPatchPtrOutput   `pulumi:"spec"`
	Status   ObjectStoreStatusPatchPtrOutput `pulumi:"status"`
}

// NewObjectStorePatch registers a new resource with the given unique name, arguments, and options.
func NewObjectStorePatch(ctx *pulumi.Context,
	name string, args *ObjectStorePatchArgs, opts ...pulumi.ResourceOption) (*ObjectStorePatch, error) {
	if args == nil {
		args = &ObjectStorePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("barmancloud.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ObjectStore")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ObjectStorePatch
	err := ctx.RegisterResource("kubernetes:barmancloud.cnpg.io/v1:ObjectStorePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectStorePatch gets an existing ObjectStorePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectStorePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectStorePatchState, opts ...pulumi.ResourceOption) (*ObjectStorePatch, error) {
	var resource ObjectStorePatch
	err := ctx.ReadResource("kubernetes:barmancloud.cnpg.io/v1:ObjectStorePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectStorePatch resources.
type objectStorePatchState struct {
}

type ObjectStorePatchState struct {
}

func (ObjectStorePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStorePatchState)(nil)).Elem()
}

type objectStorePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ObjectStoreSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a ObjectStorePatch resource.
type ObjectStorePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ObjectStoreSpecPatchPtrInput
}

func (ObjectStorePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStorePatchArgs)(nil)).Elem()
}

type ObjectStorePatchInput interface {
	pulumi.Input

	ToObjectStorePatchOutput() ObjectStorePatchOutput
	ToObjectStorePatchOutputWithContext(ctx context.Context) ObjectStorePatchOutput
}

func (*ObjectStorePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStorePatch)(nil)).Elem()
}

func (i *ObjectStorePatch) ToObjectStorePatchOutput() ObjectStorePatchOutput {
	return i.ToObjectStorePatchOutputWithContext(context.Background())
}

func (i *ObjectStorePatch) ToObjectStorePatchOutputWithContext(ctx context.Context) ObjectStorePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStorePatchOutput)
}

// ObjectStorePatchArrayInput is an input type that accepts ObjectStorePatchArray and ObjectStorePatchArrayOutput values.
// You can construct a concrete instance of `ObjectStorePatchArrayInput` via:
//
//	ObjectStorePatchArray{ ObjectStorePatchArgs{...} }
type ObjectStorePatchArrayInput interface {
	pulumi.Input

	ToObjectStorePatchArrayOutput() ObjectStorePatchArrayOutput
	ToObjectStorePatchArrayOutputWithContext(context.Context) ObjectStorePatchArrayOutput
}

type ObjectStorePatchArray []ObjectStorePatchInput

func (ObjectStorePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStorePatch)(nil)).Elem()
}

func (i ObjectStorePatchArray) ToObjectStorePatchArrayOutput() ObjectStorePatchArrayOutput {
	return i.ToObjectStorePatchArrayOutputWithContext(context.Background())
}

func (i ObjectStorePatchArray) ToObjectStorePatchArrayOutputWithContext(ctx context.Context) ObjectStorePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStorePatchArrayOutput)
}

// ObjectStorePatchMapInput is an input type that accepts ObjectStorePatchMap and ObjectStorePatchMapOutput values.
// You can construct a concrete instance of `ObjectStorePatchMapInput` via:
//
//	ObjectStorePatchMap{ "key": ObjectStorePatchArgs{...} }
type ObjectStorePatchMapInput interface {
	pulumi.Input

	ToObjectStorePatchMapOutput() ObjectStorePatchMapOutput
	ToObjectStorePatchMapOutputWithContext(context.Context) ObjectStorePatchMapOutput
}

type ObjectStorePatchMap map[string]ObjectStorePatchInput

func (ObjectStorePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStorePatch)(nil)).Elem()
}

func (i ObjectStorePatchMap) ToObjectStorePatchMapOutput() ObjectStorePatchMapOutput {
	return i.ToObjectStorePatchMapOutputWithContext(context.Background())
}

func (i ObjectStorePatchMap) ToObjectStorePatchMapOutputWithContext(ctx context.Context) ObjectStorePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStorePatchMapOutput)
}

type ObjectStorePatchOutput struct{ *pulumi.OutputState }

func (ObjectStorePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStorePatch)(nil)).Elem()
}

func (o ObjectStorePatchOutput) ToObjectStorePatchOutput() ObjectStorePatchOutput {
	return o
}

func (o ObjectStorePatchOutput) ToObjectStorePatchOutputWithContext(ctx context.Context) ObjectStorePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ObjectStorePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectStorePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectStorePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectStorePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectStorePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ObjectStorePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ObjectStorePatchOutput) Spec() ObjectStoreSpecPatchPtrOutput {
	return o.ApplyT(func(v *ObjectStorePatch) ObjectStoreSpecPatchPtrOutput { return v.Spec }).(ObjectStoreSpecPatchPtrOutput)
}

func (o ObjectStorePatchOutput) Status() ObjectStoreStatusPatchPtrOutput {
	return o.ApplyT(func(v *ObjectStorePatch) ObjectStoreStatusPatchPtrOutput { return v.Status }).(ObjectStoreStatusPatchPtrOutput)
}

type ObjectStorePatchArrayOutput struct{ *pulumi.OutputState }

func (ObjectStorePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStorePatch)(nil)).Elem()
}

func (o ObjectStorePatchArrayOutput) ToObjectStorePatchArrayOutput() ObjectStorePatchArrayOutput {
	return o
}

func (o ObjectStorePatchArrayOutput) ToObjectStorePatchArrayOutputWithContext(ctx context.Context) ObjectStorePatchArrayOutput {
	return o
}

func (o ObjectStorePatchArrayOutput) Index(i pulumi.IntInput) ObjectStorePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectStorePatch {
		return vs[0].([]*ObjectStorePatch)[vs[1].(int)]
	}).(ObjectStorePatchOutput)
}

type ObjectStorePatchMapOutput struct{ *pulumi.OutputState }

func (ObjectStorePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStorePatch)(nil)).Elem()
}

func (o ObjectStorePatchMapOutput) ToObjectStorePatchMapOutput() ObjectStorePatchMapOutput {
	return o
}

func (o ObjectStorePatchMapOutput) ToObjectStorePatchMapOutputWithContext(ctx context.Context) ObjectStorePatchMapOutput {
	return o
}

func (o ObjectStorePatchMapOutput) MapIndex(k pulumi.StringInput) ObjectStorePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectStorePatch {
		return vs[0].(map[string]*ObjectStorePatch)[vs[1].(string)]
	}).(ObjectStorePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStorePatchInput)(nil)).Elem(), &ObjectStorePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStorePatchArrayInput)(nil)).Elem(), ObjectStorePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStorePatchMapInput)(nil)).Elem(), ObjectStorePatchMap{})
	pulumi.RegisterOutputType(ObjectStorePatchOutput{})
	pulumi.RegisterOutputType(ObjectStorePatchArrayOutput{})
	pulumi.RegisterOutputType(ObjectStorePatchMapOutput{})
}
