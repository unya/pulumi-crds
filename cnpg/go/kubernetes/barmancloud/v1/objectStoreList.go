// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ObjectStoreList is a list of ObjectStore
type ObjectStoreList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of objectstores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ObjectStoreTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewObjectStoreList registers a new resource with the given unique name, arguments, and options.
func NewObjectStoreList(ctx *pulumi.Context,
	name string, args *ObjectStoreListArgs, opts ...pulumi.ResourceOption) (*ObjectStoreList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("barmancloud.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ObjectStoreList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ObjectStoreList
	err := ctx.RegisterResource("kubernetes:barmancloud.cnpg.io/v1:ObjectStoreList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectStoreList gets an existing ObjectStoreList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectStoreList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectStoreListState, opts ...pulumi.ResourceOption) (*ObjectStoreList, error) {
	var resource ObjectStoreList
	err := ctx.ReadResource("kubernetes:barmancloud.cnpg.io/v1:ObjectStoreList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectStoreList resources.
type objectStoreListState struct {
}

type ObjectStoreListState struct {
}

func (ObjectStoreListState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreListState)(nil)).Elem()
}

type objectStoreListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of objectstores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ObjectStoreType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ObjectStoreList resource.
type ObjectStoreListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of objectstores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ObjectStoreTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ObjectStoreListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreListArgs)(nil)).Elem()
}

type ObjectStoreListInput interface {
	pulumi.Input

	ToObjectStoreListOutput() ObjectStoreListOutput
	ToObjectStoreListOutputWithContext(ctx context.Context) ObjectStoreListOutput
}

func (*ObjectStoreList) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStoreList)(nil)).Elem()
}

func (i *ObjectStoreList) ToObjectStoreListOutput() ObjectStoreListOutput {
	return i.ToObjectStoreListOutputWithContext(context.Background())
}

func (i *ObjectStoreList) ToObjectStoreListOutputWithContext(ctx context.Context) ObjectStoreListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreListOutput)
}

// ObjectStoreListArrayInput is an input type that accepts ObjectStoreListArray and ObjectStoreListArrayOutput values.
// You can construct a concrete instance of `ObjectStoreListArrayInput` via:
//
//	ObjectStoreListArray{ ObjectStoreListArgs{...} }
type ObjectStoreListArrayInput interface {
	pulumi.Input

	ToObjectStoreListArrayOutput() ObjectStoreListArrayOutput
	ToObjectStoreListArrayOutputWithContext(context.Context) ObjectStoreListArrayOutput
}

type ObjectStoreListArray []ObjectStoreListInput

func (ObjectStoreListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStoreList)(nil)).Elem()
}

func (i ObjectStoreListArray) ToObjectStoreListArrayOutput() ObjectStoreListArrayOutput {
	return i.ToObjectStoreListArrayOutputWithContext(context.Background())
}

func (i ObjectStoreListArray) ToObjectStoreListArrayOutputWithContext(ctx context.Context) ObjectStoreListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreListArrayOutput)
}

// ObjectStoreListMapInput is an input type that accepts ObjectStoreListMap and ObjectStoreListMapOutput values.
// You can construct a concrete instance of `ObjectStoreListMapInput` via:
//
//	ObjectStoreListMap{ "key": ObjectStoreListArgs{...} }
type ObjectStoreListMapInput interface {
	pulumi.Input

	ToObjectStoreListMapOutput() ObjectStoreListMapOutput
	ToObjectStoreListMapOutputWithContext(context.Context) ObjectStoreListMapOutput
}

type ObjectStoreListMap map[string]ObjectStoreListInput

func (ObjectStoreListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStoreList)(nil)).Elem()
}

func (i ObjectStoreListMap) ToObjectStoreListMapOutput() ObjectStoreListMapOutput {
	return i.ToObjectStoreListMapOutputWithContext(context.Background())
}

func (i ObjectStoreListMap) ToObjectStoreListMapOutputWithContext(ctx context.Context) ObjectStoreListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreListMapOutput)
}

type ObjectStoreListOutput struct{ *pulumi.OutputState }

func (ObjectStoreListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStoreList)(nil)).Elem()
}

func (o ObjectStoreListOutput) ToObjectStoreListOutput() ObjectStoreListOutput {
	return o
}

func (o ObjectStoreListOutput) ToObjectStoreListOutputWithContext(ctx context.Context) ObjectStoreListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ObjectStoreListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStoreList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of objectstores. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ObjectStoreListOutput) Items() ObjectStoreTypeArrayOutput {
	return o.ApplyT(func(v *ObjectStoreList) ObjectStoreTypeArrayOutput { return v.Items }).(ObjectStoreTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectStoreListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStoreList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectStoreListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ObjectStoreList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ObjectStoreListArrayOutput struct{ *pulumi.OutputState }

func (ObjectStoreListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStoreList)(nil)).Elem()
}

func (o ObjectStoreListArrayOutput) ToObjectStoreListArrayOutput() ObjectStoreListArrayOutput {
	return o
}

func (o ObjectStoreListArrayOutput) ToObjectStoreListArrayOutputWithContext(ctx context.Context) ObjectStoreListArrayOutput {
	return o
}

func (o ObjectStoreListArrayOutput) Index(i pulumi.IntInput) ObjectStoreListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectStoreList {
		return vs[0].([]*ObjectStoreList)[vs[1].(int)]
	}).(ObjectStoreListOutput)
}

type ObjectStoreListMapOutput struct{ *pulumi.OutputState }

func (ObjectStoreListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStoreList)(nil)).Elem()
}

func (o ObjectStoreListMapOutput) ToObjectStoreListMapOutput() ObjectStoreListMapOutput {
	return o
}

func (o ObjectStoreListMapOutput) ToObjectStoreListMapOutputWithContext(ctx context.Context) ObjectStoreListMapOutput {
	return o
}

func (o ObjectStoreListMapOutput) MapIndex(k pulumi.StringInput) ObjectStoreListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectStoreList {
		return vs[0].(map[string]*ObjectStoreList)[vs[1].(string)]
	}).(ObjectStoreListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreListInput)(nil)).Elem(), &ObjectStoreList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreListArrayInput)(nil)).Elem(), ObjectStoreListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreListMapInput)(nil)).Elem(), ObjectStoreListMap{})
	pulumi.RegisterOutputType(ObjectStoreListOutput{})
	pulumi.RegisterOutputType(ObjectStoreListArrayOutput{})
	pulumi.RegisterOutputType(ObjectStoreListMapOutput{})
}
