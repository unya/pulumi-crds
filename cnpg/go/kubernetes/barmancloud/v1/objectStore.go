// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ObjectStore is the Schema for the objectstores API.
type ObjectStore struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     ObjectStoreSpecOutput      `pulumi:"spec"`
	Status   ObjectStoreStatusPtrOutput `pulumi:"status"`
}

// NewObjectStore registers a new resource with the given unique name, arguments, and options.
func NewObjectStore(ctx *pulumi.Context,
	name string, args *ObjectStoreArgs, opts ...pulumi.ResourceOption) (*ObjectStore, error) {
	if args == nil {
		args = &ObjectStoreArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("barmancloud.cnpg.io/v1")
	args.Kind = pulumi.StringPtr("ObjectStore")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ObjectStore
	err := ctx.RegisterResource("kubernetes:barmancloud.cnpg.io/v1:ObjectStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectStore gets an existing ObjectStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectStoreState, opts ...pulumi.ResourceOption) (*ObjectStore, error) {
	var resource ObjectStore
	err := ctx.ReadResource("kubernetes:barmancloud.cnpg.io/v1:ObjectStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectStore resources.
type objectStoreState struct {
}

type ObjectStoreState struct {
}

func (ObjectStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreState)(nil)).Elem()
}

type objectStoreArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ObjectStoreSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a ObjectStore resource.
type ObjectStoreArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ObjectStoreSpecPtrInput
}

func (ObjectStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectStoreArgs)(nil)).Elem()
}

type ObjectStoreInput interface {
	pulumi.Input

	ToObjectStoreOutput() ObjectStoreOutput
	ToObjectStoreOutputWithContext(ctx context.Context) ObjectStoreOutput
}

func (*ObjectStore) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStore)(nil)).Elem()
}

func (i *ObjectStore) ToObjectStoreOutput() ObjectStoreOutput {
	return i.ToObjectStoreOutputWithContext(context.Background())
}

func (i *ObjectStore) ToObjectStoreOutputWithContext(ctx context.Context) ObjectStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreOutput)
}

// ObjectStoreArrayInput is an input type that accepts ObjectStoreArray and ObjectStoreArrayOutput values.
// You can construct a concrete instance of `ObjectStoreArrayInput` via:
//
//	ObjectStoreArray{ ObjectStoreArgs{...} }
type ObjectStoreArrayInput interface {
	pulumi.Input

	ToObjectStoreArrayOutput() ObjectStoreArrayOutput
	ToObjectStoreArrayOutputWithContext(context.Context) ObjectStoreArrayOutput
}

type ObjectStoreArray []ObjectStoreInput

func (ObjectStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStore)(nil)).Elem()
}

func (i ObjectStoreArray) ToObjectStoreArrayOutput() ObjectStoreArrayOutput {
	return i.ToObjectStoreArrayOutputWithContext(context.Background())
}

func (i ObjectStoreArray) ToObjectStoreArrayOutputWithContext(ctx context.Context) ObjectStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreArrayOutput)
}

// ObjectStoreMapInput is an input type that accepts ObjectStoreMap and ObjectStoreMapOutput values.
// You can construct a concrete instance of `ObjectStoreMapInput` via:
//
//	ObjectStoreMap{ "key": ObjectStoreArgs{...} }
type ObjectStoreMapInput interface {
	pulumi.Input

	ToObjectStoreMapOutput() ObjectStoreMapOutput
	ToObjectStoreMapOutputWithContext(context.Context) ObjectStoreMapOutput
}

type ObjectStoreMap map[string]ObjectStoreInput

func (ObjectStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStore)(nil)).Elem()
}

func (i ObjectStoreMap) ToObjectStoreMapOutput() ObjectStoreMapOutput {
	return i.ToObjectStoreMapOutputWithContext(context.Background())
}

func (i ObjectStoreMap) ToObjectStoreMapOutputWithContext(ctx context.Context) ObjectStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectStoreMapOutput)
}

type ObjectStoreOutput struct{ *pulumi.OutputState }

func (ObjectStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectStore)(nil)).Elem()
}

func (o ObjectStoreOutput) ToObjectStoreOutput() ObjectStoreOutput {
	return o
}

func (o ObjectStoreOutput) ToObjectStoreOutputWithContext(ctx context.Context) ObjectStoreOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ObjectStoreOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ObjectStoreOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectStore) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectStoreOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ObjectStore) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ObjectStoreOutput) Spec() ObjectStoreSpecOutput {
	return o.ApplyT(func(v *ObjectStore) ObjectStoreSpecOutput { return v.Spec }).(ObjectStoreSpecOutput)
}

func (o ObjectStoreOutput) Status() ObjectStoreStatusPtrOutput {
	return o.ApplyT(func(v *ObjectStore) ObjectStoreStatusPtrOutput { return v.Status }).(ObjectStoreStatusPtrOutput)
}

type ObjectStoreArrayOutput struct{ *pulumi.OutputState }

func (ObjectStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectStore)(nil)).Elem()
}

func (o ObjectStoreArrayOutput) ToObjectStoreArrayOutput() ObjectStoreArrayOutput {
	return o
}

func (o ObjectStoreArrayOutput) ToObjectStoreArrayOutputWithContext(ctx context.Context) ObjectStoreArrayOutput {
	return o
}

func (o ObjectStoreArrayOutput) Index(i pulumi.IntInput) ObjectStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectStore {
		return vs[0].([]*ObjectStore)[vs[1].(int)]
	}).(ObjectStoreOutput)
}

type ObjectStoreMapOutput struct{ *pulumi.OutputState }

func (ObjectStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectStore)(nil)).Elem()
}

func (o ObjectStoreMapOutput) ToObjectStoreMapOutput() ObjectStoreMapOutput {
	return o
}

func (o ObjectStoreMapOutput) ToObjectStoreMapOutputWithContext(ctx context.Context) ObjectStoreMapOutput {
	return o
}

func (o ObjectStoreMapOutput) MapIndex(k pulumi.StringInput) ObjectStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectStore {
		return vs[0].(map[string]*ObjectStore)[vs[1].(string)]
	}).(ObjectStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreInput)(nil)).Elem(), &ObjectStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreArrayInput)(nil)).Elem(), ObjectStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectStoreMapInput)(nil)).Elem(), ObjectStoreMap{})
	pulumi.RegisterOutputType(ObjectStoreOutput{})
	pulumi.RegisterOutputType(ObjectStoreArrayOutput{})
	pulumi.RegisterOutputType(ObjectStoreMapOutput{})
}
