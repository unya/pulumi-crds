// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpoint struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     DNSEndpointSpecOutput      `pulumi:"spec"`
	Status   DNSEndpointStatusPtrOutput `pulumi:"status"`
}

// NewDNSEndpoint registers a new resource with the given unique name, arguments, and options.
func NewDNSEndpoint(ctx *pulumi.Context,
	name string, args *DNSEndpointArgs, opts ...pulumi.ResourceOption) (*DNSEndpoint, error) {
	if args == nil {
		args = &DNSEndpointArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("externaldns.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("DNSEndpoint")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DNSEndpoint
	err := ctx.RegisterResource("kubernetes:externaldns.k8s.io/v1alpha1:DNSEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSEndpoint gets an existing DNSEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSEndpointState, opts ...pulumi.ResourceOption) (*DNSEndpoint, error) {
	var resource DNSEndpoint
	err := ctx.ReadResource("kubernetes:externaldns.k8s.io/v1alpha1:DNSEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSEndpoint resources.
type dnsendpointState struct {
}

type DNSEndpointState struct {
}

func (DNSEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsendpointState)(nil)).Elem()
}

type dnsendpointArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *DNSEndpointSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a DNSEndpoint resource.
type DNSEndpointArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     DNSEndpointSpecPtrInput
}

func (DNSEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsendpointArgs)(nil)).Elem()
}

type DNSEndpointInput interface {
	pulumi.Input

	ToDNSEndpointOutput() DNSEndpointOutput
	ToDNSEndpointOutputWithContext(ctx context.Context) DNSEndpointOutput
}

func (*DNSEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpoint)(nil)).Elem()
}

func (i *DNSEndpoint) ToDNSEndpointOutput() DNSEndpointOutput {
	return i.ToDNSEndpointOutputWithContext(context.Background())
}

func (i *DNSEndpoint) ToDNSEndpointOutputWithContext(ctx context.Context) DNSEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointOutput)
}

// DNSEndpointArrayInput is an input type that accepts DNSEndpointArray and DNSEndpointArrayOutput values.
// You can construct a concrete instance of `DNSEndpointArrayInput` via:
//
//	DNSEndpointArray{ DNSEndpointArgs{...} }
type DNSEndpointArrayInput interface {
	pulumi.Input

	ToDNSEndpointArrayOutput() DNSEndpointArrayOutput
	ToDNSEndpointArrayOutputWithContext(context.Context) DNSEndpointArrayOutput
}

type DNSEndpointArray []DNSEndpointInput

func (DNSEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSEndpoint)(nil)).Elem()
}

func (i DNSEndpointArray) ToDNSEndpointArrayOutput() DNSEndpointArrayOutput {
	return i.ToDNSEndpointArrayOutputWithContext(context.Background())
}

func (i DNSEndpointArray) ToDNSEndpointArrayOutputWithContext(ctx context.Context) DNSEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointArrayOutput)
}

// DNSEndpointMapInput is an input type that accepts DNSEndpointMap and DNSEndpointMapOutput values.
// You can construct a concrete instance of `DNSEndpointMapInput` via:
//
//	DNSEndpointMap{ "key": DNSEndpointArgs{...} }
type DNSEndpointMapInput interface {
	pulumi.Input

	ToDNSEndpointMapOutput() DNSEndpointMapOutput
	ToDNSEndpointMapOutputWithContext(context.Context) DNSEndpointMapOutput
}

type DNSEndpointMap map[string]DNSEndpointInput

func (DNSEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSEndpoint)(nil)).Elem()
}

func (i DNSEndpointMap) ToDNSEndpointMapOutput() DNSEndpointMapOutput {
	return i.ToDNSEndpointMapOutputWithContext(context.Background())
}

func (i DNSEndpointMap) ToDNSEndpointMapOutputWithContext(ctx context.Context) DNSEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointMapOutput)
}

type DNSEndpointOutput struct{ *pulumi.OutputState }

func (DNSEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpoint)(nil)).Elem()
}

func (o DNSEndpointOutput) ToDNSEndpointOutput() DNSEndpointOutput {
	return o
}

func (o DNSEndpointOutput) ToDNSEndpointOutputWithContext(ctx context.Context) DNSEndpointOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DNSEndpointOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSEndpoint) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSEndpoint) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DNSEndpointOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *DNSEndpoint) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o DNSEndpointOutput) Spec() DNSEndpointSpecOutput {
	return o.ApplyT(func(v *DNSEndpoint) DNSEndpointSpecOutput { return v.Spec }).(DNSEndpointSpecOutput)
}

func (o DNSEndpointOutput) Status() DNSEndpointStatusPtrOutput {
	return o.ApplyT(func(v *DNSEndpoint) DNSEndpointStatusPtrOutput { return v.Status }).(DNSEndpointStatusPtrOutput)
}

type DNSEndpointArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSEndpoint)(nil)).Elem()
}

func (o DNSEndpointArrayOutput) ToDNSEndpointArrayOutput() DNSEndpointArrayOutput {
	return o
}

func (o DNSEndpointArrayOutput) ToDNSEndpointArrayOutputWithContext(ctx context.Context) DNSEndpointArrayOutput {
	return o
}

func (o DNSEndpointArrayOutput) Index(i pulumi.IntInput) DNSEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DNSEndpoint {
		return vs[0].([]*DNSEndpoint)[vs[1].(int)]
	}).(DNSEndpointOutput)
}

type DNSEndpointMapOutput struct{ *pulumi.OutputState }

func (DNSEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSEndpoint)(nil)).Elem()
}

func (o DNSEndpointMapOutput) ToDNSEndpointMapOutput() DNSEndpointMapOutput {
	return o
}

func (o DNSEndpointMapOutput) ToDNSEndpointMapOutputWithContext(ctx context.Context) DNSEndpointMapOutput {
	return o
}

func (o DNSEndpointMapOutput) MapIndex(k pulumi.StringInput) DNSEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DNSEndpoint {
		return vs[0].(map[string]*DNSEndpoint)[vs[1].(string)]
	}).(DNSEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointInput)(nil)).Elem(), &DNSEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointArrayInput)(nil)).Elem(), DNSEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointMapInput)(nil)).Elem(), DNSEndpointMap{})
	pulumi.RegisterOutputType(DNSEndpointOutput{})
	pulumi.RegisterOutputType(DNSEndpointArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointMapOutput{})
}
