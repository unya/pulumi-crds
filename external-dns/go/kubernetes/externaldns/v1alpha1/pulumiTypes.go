// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpointType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *DNSEndpointSpec   `pulumi:"spec"`
	Status   *DNSEndpointStatus `pulumi:"status"`
}

// DNSEndpointTypeInput is an input type that accepts DNSEndpointTypeArgs and DNSEndpointTypeOutput values.
// You can construct a concrete instance of `DNSEndpointTypeInput` via:
//
//	DNSEndpointTypeArgs{...}
type DNSEndpointTypeInput interface {
	pulumi.Input

	ToDNSEndpointTypeOutput() DNSEndpointTypeOutput
	ToDNSEndpointTypeOutputWithContext(context.Context) DNSEndpointTypeOutput
}

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpointTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     DNSEndpointSpecPtrInput   `pulumi:"spec"`
	Status   DNSEndpointStatusPtrInput `pulumi:"status"`
}

func (DNSEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointType)(nil)).Elem()
}

func (i DNSEndpointTypeArgs) ToDNSEndpointTypeOutput() DNSEndpointTypeOutput {
	return i.ToDNSEndpointTypeOutputWithContext(context.Background())
}

func (i DNSEndpointTypeArgs) ToDNSEndpointTypeOutputWithContext(ctx context.Context) DNSEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointTypeOutput)
}

// DNSEndpointTypeArrayInput is an input type that accepts DNSEndpointTypeArray and DNSEndpointTypeArrayOutput values.
// You can construct a concrete instance of `DNSEndpointTypeArrayInput` via:
//
//	DNSEndpointTypeArray{ DNSEndpointTypeArgs{...} }
type DNSEndpointTypeArrayInput interface {
	pulumi.Input

	ToDNSEndpointTypeArrayOutput() DNSEndpointTypeArrayOutput
	ToDNSEndpointTypeArrayOutputWithContext(context.Context) DNSEndpointTypeArrayOutput
}

type DNSEndpointTypeArray []DNSEndpointTypeInput

func (DNSEndpointTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointType)(nil)).Elem()
}

func (i DNSEndpointTypeArray) ToDNSEndpointTypeArrayOutput() DNSEndpointTypeArrayOutput {
	return i.ToDNSEndpointTypeArrayOutputWithContext(context.Background())
}

func (i DNSEndpointTypeArray) ToDNSEndpointTypeArrayOutputWithContext(ctx context.Context) DNSEndpointTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointTypeArrayOutput)
}

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpointTypeOutput struct{ *pulumi.OutputState }

func (DNSEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointType)(nil)).Elem()
}

func (o DNSEndpointTypeOutput) ToDNSEndpointTypeOutput() DNSEndpointTypeOutput {
	return o
}

func (o DNSEndpointTypeOutput) ToDNSEndpointTypeOutputWithContext(ctx context.Context) DNSEndpointTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DNSEndpointTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DNSEndpointTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o DNSEndpointTypeOutput) Spec() DNSEndpointSpecPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *DNSEndpointSpec { return v.Spec }).(DNSEndpointSpecPtrOutput)
}

func (o DNSEndpointTypeOutput) Status() DNSEndpointStatusPtrOutput {
	return o.ApplyT(func(v DNSEndpointType) *DNSEndpointStatus { return v.Status }).(DNSEndpointStatusPtrOutput)
}

type DNSEndpointTypeArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointType)(nil)).Elem()
}

func (o DNSEndpointTypeArrayOutput) ToDNSEndpointTypeArrayOutput() DNSEndpointTypeArrayOutput {
	return o
}

func (o DNSEndpointTypeArrayOutput) ToDNSEndpointTypeArrayOutputWithContext(ctx context.Context) DNSEndpointTypeArrayOutput {
	return o
}

func (o DNSEndpointTypeArrayOutput) Index(i pulumi.IntInput) DNSEndpointTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSEndpointType {
		return vs[0].([]DNSEndpointType)[vs[1].(int)]
	}).(DNSEndpointTypeOutput)
}

// DNSEndpointList is a list of DNSEndpoint
type DNSEndpointListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []DNSEndpointType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// DNSEndpointListTypeInput is an input type that accepts DNSEndpointListTypeArgs and DNSEndpointListTypeOutput values.
// You can construct a concrete instance of `DNSEndpointListTypeInput` via:
//
//	DNSEndpointListTypeArgs{...}
type DNSEndpointListTypeInput interface {
	pulumi.Input

	ToDNSEndpointListTypeOutput() DNSEndpointListTypeOutput
	ToDNSEndpointListTypeOutputWithContext(context.Context) DNSEndpointListTypeOutput
}

// DNSEndpointList is a list of DNSEndpoint
type DNSEndpointListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items DNSEndpointTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (DNSEndpointListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointListType)(nil)).Elem()
}

func (i DNSEndpointListTypeArgs) ToDNSEndpointListTypeOutput() DNSEndpointListTypeOutput {
	return i.ToDNSEndpointListTypeOutputWithContext(context.Background())
}

func (i DNSEndpointListTypeArgs) ToDNSEndpointListTypeOutputWithContext(ctx context.Context) DNSEndpointListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointListTypeOutput)
}

// DNSEndpointList is a list of DNSEndpoint
type DNSEndpointListTypeOutput struct{ *pulumi.OutputState }

func (DNSEndpointListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointListType)(nil)).Elem()
}

func (o DNSEndpointListTypeOutput) ToDNSEndpointListTypeOutput() DNSEndpointListTypeOutput {
	return o
}

func (o DNSEndpointListTypeOutput) ToDNSEndpointListTypeOutputWithContext(ctx context.Context) DNSEndpointListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DNSEndpointListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o DNSEndpointListTypeOutput) Items() DNSEndpointTypeArrayOutput {
	return o.ApplyT(func(v DNSEndpointListType) []DNSEndpointType { return v.Items }).(DNSEndpointTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v DNSEndpointListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpointPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *DNSEndpointSpecPatch   `pulumi:"spec"`
	Status   *DNSEndpointStatusPatch `pulumi:"status"`
}

// DNSEndpointPatchTypeInput is an input type that accepts DNSEndpointPatchTypeArgs and DNSEndpointPatchTypeOutput values.
// You can construct a concrete instance of `DNSEndpointPatchTypeInput` via:
//
//	DNSEndpointPatchTypeArgs{...}
type DNSEndpointPatchTypeInput interface {
	pulumi.Input

	ToDNSEndpointPatchTypeOutput() DNSEndpointPatchTypeOutput
	ToDNSEndpointPatchTypeOutputWithContext(context.Context) DNSEndpointPatchTypeOutput
}

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpointPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     DNSEndpointSpecPatchPtrInput   `pulumi:"spec"`
	Status   DNSEndpointStatusPatchPtrInput `pulumi:"status"`
}

func (DNSEndpointPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointPatchType)(nil)).Elem()
}

func (i DNSEndpointPatchTypeArgs) ToDNSEndpointPatchTypeOutput() DNSEndpointPatchTypeOutput {
	return i.ToDNSEndpointPatchTypeOutputWithContext(context.Background())
}

func (i DNSEndpointPatchTypeArgs) ToDNSEndpointPatchTypeOutputWithContext(ctx context.Context) DNSEndpointPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointPatchTypeOutput)
}

// DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
// The user-specified CRD should also have the status sub-resource.
type DNSEndpointPatchTypeOutput struct{ *pulumi.OutputState }

func (DNSEndpointPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointPatchType)(nil)).Elem()
}

func (o DNSEndpointPatchTypeOutput) ToDNSEndpointPatchTypeOutput() DNSEndpointPatchTypeOutput {
	return o
}

func (o DNSEndpointPatchTypeOutput) ToDNSEndpointPatchTypeOutputWithContext(ctx context.Context) DNSEndpointPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DNSEndpointPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DNSEndpointPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v DNSEndpointPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o DNSEndpointPatchTypeOutput) Spec() DNSEndpointSpecPatchPtrOutput {
	return o.ApplyT(func(v DNSEndpointPatchType) *DNSEndpointSpecPatch { return v.Spec }).(DNSEndpointSpecPatchPtrOutput)
}

func (o DNSEndpointPatchTypeOutput) Status() DNSEndpointStatusPatchPtrOutput {
	return o.ApplyT(func(v DNSEndpointPatchType) *DNSEndpointStatusPatch { return v.Status }).(DNSEndpointStatusPatchPtrOutput)
}

// DNSEndpointSpec defines the desired state of DNSEndpoint
type DNSEndpointSpec struct {
	Endpoints []DNSEndpointSpecEndpoints `pulumi:"endpoints"`
}

// DNSEndpointSpecInput is an input type that accepts DNSEndpointSpecArgs and DNSEndpointSpecOutput values.
// You can construct a concrete instance of `DNSEndpointSpecInput` via:
//
//	DNSEndpointSpecArgs{...}
type DNSEndpointSpecInput interface {
	pulumi.Input

	ToDNSEndpointSpecOutput() DNSEndpointSpecOutput
	ToDNSEndpointSpecOutputWithContext(context.Context) DNSEndpointSpecOutput
}

// DNSEndpointSpec defines the desired state of DNSEndpoint
type DNSEndpointSpecArgs struct {
	Endpoints DNSEndpointSpecEndpointsArrayInput `pulumi:"endpoints"`
}

func (DNSEndpointSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpec)(nil)).Elem()
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecOutput() DNSEndpointSpecOutput {
	return i.ToDNSEndpointSpecOutputWithContext(context.Background())
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecOutputWithContext(ctx context.Context) DNSEndpointSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecOutput)
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return i.ToDNSEndpointSpecPtrOutputWithContext(context.Background())
}

func (i DNSEndpointSpecArgs) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecOutput).ToDNSEndpointSpecPtrOutputWithContext(ctx)
}

// DNSEndpointSpecPtrInput is an input type that accepts DNSEndpointSpecArgs, DNSEndpointSpecPtr and DNSEndpointSpecPtrOutput values.
// You can construct a concrete instance of `DNSEndpointSpecPtrInput` via:
//
//	        DNSEndpointSpecArgs{...}
//
//	or:
//
//	        nil
type DNSEndpointSpecPtrInput interface {
	pulumi.Input

	ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput
	ToDNSEndpointSpecPtrOutputWithContext(context.Context) DNSEndpointSpecPtrOutput
}

type dnsendpointSpecPtrType DNSEndpointSpecArgs

func DNSEndpointSpecPtr(v *DNSEndpointSpecArgs) DNSEndpointSpecPtrInput {
	return (*dnsendpointSpecPtrType)(v)
}

func (*dnsendpointSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointSpec)(nil)).Elem()
}

func (i *dnsendpointSpecPtrType) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return i.ToDNSEndpointSpecPtrOutputWithContext(context.Background())
}

func (i *dnsendpointSpecPtrType) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecPtrOutput)
}

// DNSEndpointSpec defines the desired state of DNSEndpoint
type DNSEndpointSpecOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpec)(nil)).Elem()
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecOutput() DNSEndpointSpecOutput {
	return o
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecOutputWithContext(ctx context.Context) DNSEndpointSpecOutput {
	return o
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return o.ToDNSEndpointSpecPtrOutputWithContext(context.Background())
}

func (o DNSEndpointSpecOutput) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DNSEndpointSpec) *DNSEndpointSpec {
		return &v
	}).(DNSEndpointSpecPtrOutput)
}

func (o DNSEndpointSpecOutput) Endpoints() DNSEndpointSpecEndpointsArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpec) []DNSEndpointSpecEndpoints { return v.Endpoints }).(DNSEndpointSpecEndpointsArrayOutput)
}

type DNSEndpointSpecPtrOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointSpec)(nil)).Elem()
}

func (o DNSEndpointSpecPtrOutput) ToDNSEndpointSpecPtrOutput() DNSEndpointSpecPtrOutput {
	return o
}

func (o DNSEndpointSpecPtrOutput) ToDNSEndpointSpecPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPtrOutput {
	return o
}

func (o DNSEndpointSpecPtrOutput) Elem() DNSEndpointSpecOutput {
	return o.ApplyT(func(v *DNSEndpointSpec) DNSEndpointSpec {
		if v != nil {
			return *v
		}
		var ret DNSEndpointSpec
		return ret
	}).(DNSEndpointSpecOutput)
}

func (o DNSEndpointSpecPtrOutput) Endpoints() DNSEndpointSpecEndpointsArrayOutput {
	return o.ApplyT(func(v *DNSEndpointSpec) []DNSEndpointSpecEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(DNSEndpointSpecEndpointsArrayOutput)
}

// Endpoint is a high-level way of a connection between a service and an IP
type DNSEndpointSpecEndpoints struct {
	// The hostname of the DNS record
	DnsName *string `pulumi:"dnsName"`
	// Labels stores labels defined for the Endpoint
	Labels map[string]string `pulumi:"labels"`
	// ProviderSpecific stores provider specific config
	ProviderSpecific []DNSEndpointSpecEndpointsProviderSpecific `pulumi:"providerSpecific"`
	// TTL for the record
	RecordTTL *int `pulumi:"recordTTL"`
	// RecordType type of record, e.g. CNAME, A, AAAA, SRV, TXT etc
	RecordType *string `pulumi:"recordType"`
	// Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
	SetIdentifier *string `pulumi:"setIdentifier"`
	// The targets the DNS record points to
	Targets []string `pulumi:"targets"`
}

// DNSEndpointSpecEndpointsInput is an input type that accepts DNSEndpointSpecEndpointsArgs and DNSEndpointSpecEndpointsOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsInput` via:
//
//	DNSEndpointSpecEndpointsArgs{...}
type DNSEndpointSpecEndpointsInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsOutput() DNSEndpointSpecEndpointsOutput
	ToDNSEndpointSpecEndpointsOutputWithContext(context.Context) DNSEndpointSpecEndpointsOutput
}

// Endpoint is a high-level way of a connection between a service and an IP
type DNSEndpointSpecEndpointsArgs struct {
	// The hostname of the DNS record
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// Labels stores labels defined for the Endpoint
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// ProviderSpecific stores provider specific config
	ProviderSpecific DNSEndpointSpecEndpointsProviderSpecificArrayInput `pulumi:"providerSpecific"`
	// TTL for the record
	RecordTTL pulumi.IntPtrInput `pulumi:"recordTTL"`
	// RecordType type of record, e.g. CNAME, A, AAAA, SRV, TXT etc
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
	SetIdentifier pulumi.StringPtrInput `pulumi:"setIdentifier"`
	// The targets the DNS record points to
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (DNSEndpointSpecEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsArgs) ToDNSEndpointSpecEndpointsOutput() DNSEndpointSpecEndpointsOutput {
	return i.ToDNSEndpointSpecEndpointsOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsArgs) ToDNSEndpointSpecEndpointsOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsOutput)
}

// DNSEndpointSpecEndpointsArrayInput is an input type that accepts DNSEndpointSpecEndpointsArray and DNSEndpointSpecEndpointsArrayOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsArrayInput` via:
//
//	DNSEndpointSpecEndpointsArray{ DNSEndpointSpecEndpointsArgs{...} }
type DNSEndpointSpecEndpointsArrayInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsArrayOutput() DNSEndpointSpecEndpointsArrayOutput
	ToDNSEndpointSpecEndpointsArrayOutputWithContext(context.Context) DNSEndpointSpecEndpointsArrayOutput
}

type DNSEndpointSpecEndpointsArray []DNSEndpointSpecEndpointsInput

func (DNSEndpointSpecEndpointsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsArray) ToDNSEndpointSpecEndpointsArrayOutput() DNSEndpointSpecEndpointsArrayOutput {
	return i.ToDNSEndpointSpecEndpointsArrayOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsArray) ToDNSEndpointSpecEndpointsArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsArrayOutput)
}

// Endpoint is a high-level way of a connection between a service and an IP
type DNSEndpointSpecEndpointsOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsOutput) ToDNSEndpointSpecEndpointsOutput() DNSEndpointSpecEndpointsOutput {
	return o
}

func (o DNSEndpointSpecEndpointsOutput) ToDNSEndpointSpecEndpointsOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsOutput {
	return o
}

// The hostname of the DNS record
func (o DNSEndpointSpecEndpointsOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// Labels stores labels defined for the Endpoint
func (o DNSEndpointSpecEndpointsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// ProviderSpecific stores provider specific config
func (o DNSEndpointSpecEndpointsOutput) ProviderSpecific() DNSEndpointSpecEndpointsProviderSpecificArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) []DNSEndpointSpecEndpointsProviderSpecific { return v.ProviderSpecific }).(DNSEndpointSpecEndpointsProviderSpecificArrayOutput)
}

// TTL for the record
func (o DNSEndpointSpecEndpointsOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *int { return v.RecordTTL }).(pulumi.IntPtrOutput)
}

// RecordType type of record, e.g. CNAME, A, AAAA, SRV, TXT etc
func (o DNSEndpointSpecEndpointsOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
func (o DNSEndpointSpecEndpointsOutput) SetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) *string { return v.SetIdentifier }).(pulumi.StringPtrOutput)
}

// The targets the DNS record points to
func (o DNSEndpointSpecEndpointsOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpoints) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type DNSEndpointSpecEndpointsArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpoints)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsArrayOutput) ToDNSEndpointSpecEndpointsArrayOutput() DNSEndpointSpecEndpointsArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsArrayOutput) ToDNSEndpointSpecEndpointsArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsArrayOutput) Index(i pulumi.IntInput) DNSEndpointSpecEndpointsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSEndpointSpecEndpoints {
		return vs[0].([]DNSEndpointSpecEndpoints)[vs[1].(int)]
	}).(DNSEndpointSpecEndpointsOutput)
}

// Endpoint is a high-level way of a connection between a service and an IP
type DNSEndpointSpecEndpointsPatch struct {
	// The hostname of the DNS record
	DnsName *string `pulumi:"dnsName"`
	// Labels stores labels defined for the Endpoint
	Labels map[string]string `pulumi:"labels"`
	// ProviderSpecific stores provider specific config
	ProviderSpecific []DNSEndpointSpecEndpointsProviderSpecificPatch `pulumi:"providerSpecific"`
	// TTL for the record
	RecordTTL *int `pulumi:"recordTTL"`
	// RecordType type of record, e.g. CNAME, A, AAAA, SRV, TXT etc
	RecordType *string `pulumi:"recordType"`
	// Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
	SetIdentifier *string `pulumi:"setIdentifier"`
	// The targets the DNS record points to
	Targets []string `pulumi:"targets"`
}

// DNSEndpointSpecEndpointsPatchInput is an input type that accepts DNSEndpointSpecEndpointsPatchArgs and DNSEndpointSpecEndpointsPatchOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsPatchInput` via:
//
//	DNSEndpointSpecEndpointsPatchArgs{...}
type DNSEndpointSpecEndpointsPatchInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsPatchOutput() DNSEndpointSpecEndpointsPatchOutput
	ToDNSEndpointSpecEndpointsPatchOutputWithContext(context.Context) DNSEndpointSpecEndpointsPatchOutput
}

// Endpoint is a high-level way of a connection between a service and an IP
type DNSEndpointSpecEndpointsPatchArgs struct {
	// The hostname of the DNS record
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// Labels stores labels defined for the Endpoint
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// ProviderSpecific stores provider specific config
	ProviderSpecific DNSEndpointSpecEndpointsProviderSpecificPatchArrayInput `pulumi:"providerSpecific"`
	// TTL for the record
	RecordTTL pulumi.IntPtrInput `pulumi:"recordTTL"`
	// RecordType type of record, e.g. CNAME, A, AAAA, SRV, TXT etc
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
	SetIdentifier pulumi.StringPtrInput `pulumi:"setIdentifier"`
	// The targets the DNS record points to
	Targets pulumi.StringArrayInput `pulumi:"targets"`
}

func (DNSEndpointSpecEndpointsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsPatch)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsPatchArgs) ToDNSEndpointSpecEndpointsPatchOutput() DNSEndpointSpecEndpointsPatchOutput {
	return i.ToDNSEndpointSpecEndpointsPatchOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsPatchArgs) ToDNSEndpointSpecEndpointsPatchOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsPatchOutput)
}

// DNSEndpointSpecEndpointsPatchArrayInput is an input type that accepts DNSEndpointSpecEndpointsPatchArray and DNSEndpointSpecEndpointsPatchArrayOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsPatchArrayInput` via:
//
//	DNSEndpointSpecEndpointsPatchArray{ DNSEndpointSpecEndpointsPatchArgs{...} }
type DNSEndpointSpecEndpointsPatchArrayInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsPatchArrayOutput() DNSEndpointSpecEndpointsPatchArrayOutput
	ToDNSEndpointSpecEndpointsPatchArrayOutputWithContext(context.Context) DNSEndpointSpecEndpointsPatchArrayOutput
}

type DNSEndpointSpecEndpointsPatchArray []DNSEndpointSpecEndpointsPatchInput

func (DNSEndpointSpecEndpointsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpointsPatch)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsPatchArray) ToDNSEndpointSpecEndpointsPatchArrayOutput() DNSEndpointSpecEndpointsPatchArrayOutput {
	return i.ToDNSEndpointSpecEndpointsPatchArrayOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsPatchArray) ToDNSEndpointSpecEndpointsPatchArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsPatchArrayOutput)
}

// Endpoint is a high-level way of a connection between a service and an IP
type DNSEndpointSpecEndpointsPatchOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsPatch)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsPatchOutput) ToDNSEndpointSpecEndpointsPatchOutput() DNSEndpointSpecEndpointsPatchOutput {
	return o
}

func (o DNSEndpointSpecEndpointsPatchOutput) ToDNSEndpointSpecEndpointsPatchOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsPatchOutput {
	return o
}

// The hostname of the DNS record
func (o DNSEndpointSpecEndpointsPatchOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) *string { return v.DnsName }).(pulumi.StringPtrOutput)
}

// Labels stores labels defined for the Endpoint
func (o DNSEndpointSpecEndpointsPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// ProviderSpecific stores provider specific config
func (o DNSEndpointSpecEndpointsPatchOutput) ProviderSpecific() DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) []DNSEndpointSpecEndpointsProviderSpecificPatch {
		return v.ProviderSpecific
	}).(DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput)
}

// TTL for the record
func (o DNSEndpointSpecEndpointsPatchOutput) RecordTTL() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) *int { return v.RecordTTL }).(pulumi.IntPtrOutput)
}

// RecordType type of record, e.g. CNAME, A, AAAA, SRV, TXT etc
func (o DNSEndpointSpecEndpointsPatchOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// Identifier to distinguish multiple records with the same name and type (e.g. Route53 records with routing policies other than 'simple')
func (o DNSEndpointSpecEndpointsPatchOutput) SetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) *string { return v.SetIdentifier }).(pulumi.StringPtrOutput)
}

// The targets the DNS record points to
func (o DNSEndpointSpecEndpointsPatchOutput) Targets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsPatch) []string { return v.Targets }).(pulumi.StringArrayOutput)
}

type DNSEndpointSpecEndpointsPatchArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpointsPatch)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsPatchArrayOutput) ToDNSEndpointSpecEndpointsPatchArrayOutput() DNSEndpointSpecEndpointsPatchArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsPatchArrayOutput) ToDNSEndpointSpecEndpointsPatchArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsPatchArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsPatchArrayOutput) Index(i pulumi.IntInput) DNSEndpointSpecEndpointsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSEndpointSpecEndpointsPatch {
		return vs[0].([]DNSEndpointSpecEndpointsPatch)[vs[1].(int)]
	}).(DNSEndpointSpecEndpointsPatchOutput)
}

// ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
type DNSEndpointSpecEndpointsProviderSpecific struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// DNSEndpointSpecEndpointsProviderSpecificInput is an input type that accepts DNSEndpointSpecEndpointsProviderSpecificArgs and DNSEndpointSpecEndpointsProviderSpecificOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsProviderSpecificInput` via:
//
//	DNSEndpointSpecEndpointsProviderSpecificArgs{...}
type DNSEndpointSpecEndpointsProviderSpecificInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsProviderSpecificOutput() DNSEndpointSpecEndpointsProviderSpecificOutput
	ToDNSEndpointSpecEndpointsProviderSpecificOutputWithContext(context.Context) DNSEndpointSpecEndpointsProviderSpecificOutput
}

// ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
type DNSEndpointSpecEndpointsProviderSpecificArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DNSEndpointSpecEndpointsProviderSpecificArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecific)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsProviderSpecificArgs) ToDNSEndpointSpecEndpointsProviderSpecificOutput() DNSEndpointSpecEndpointsProviderSpecificOutput {
	return i.ToDNSEndpointSpecEndpointsProviderSpecificOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsProviderSpecificArgs) ToDNSEndpointSpecEndpointsProviderSpecificOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsProviderSpecificOutput)
}

// DNSEndpointSpecEndpointsProviderSpecificArrayInput is an input type that accepts DNSEndpointSpecEndpointsProviderSpecificArray and DNSEndpointSpecEndpointsProviderSpecificArrayOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsProviderSpecificArrayInput` via:
//
//	DNSEndpointSpecEndpointsProviderSpecificArray{ DNSEndpointSpecEndpointsProviderSpecificArgs{...} }
type DNSEndpointSpecEndpointsProviderSpecificArrayInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsProviderSpecificArrayOutput() DNSEndpointSpecEndpointsProviderSpecificArrayOutput
	ToDNSEndpointSpecEndpointsProviderSpecificArrayOutputWithContext(context.Context) DNSEndpointSpecEndpointsProviderSpecificArrayOutput
}

type DNSEndpointSpecEndpointsProviderSpecificArray []DNSEndpointSpecEndpointsProviderSpecificInput

func (DNSEndpointSpecEndpointsProviderSpecificArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpointsProviderSpecific)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsProviderSpecificArray) ToDNSEndpointSpecEndpointsProviderSpecificArrayOutput() DNSEndpointSpecEndpointsProviderSpecificArrayOutput {
	return i.ToDNSEndpointSpecEndpointsProviderSpecificArrayOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsProviderSpecificArray) ToDNSEndpointSpecEndpointsProviderSpecificArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsProviderSpecificArrayOutput)
}

// ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
type DNSEndpointSpecEndpointsProviderSpecificOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsProviderSpecificOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecific)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsProviderSpecificOutput) ToDNSEndpointSpecEndpointsProviderSpecificOutput() DNSEndpointSpecEndpointsProviderSpecificOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificOutput) ToDNSEndpointSpecEndpointsProviderSpecificOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsProviderSpecific) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DNSEndpointSpecEndpointsProviderSpecificOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsProviderSpecific) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DNSEndpointSpecEndpointsProviderSpecificArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsProviderSpecificArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpointsProviderSpecific)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsProviderSpecificArrayOutput) ToDNSEndpointSpecEndpointsProviderSpecificArrayOutput() DNSEndpointSpecEndpointsProviderSpecificArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificArrayOutput) ToDNSEndpointSpecEndpointsProviderSpecificArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificArrayOutput) Index(i pulumi.IntInput) DNSEndpointSpecEndpointsProviderSpecificOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSEndpointSpecEndpointsProviderSpecific {
		return vs[0].([]DNSEndpointSpecEndpointsProviderSpecific)[vs[1].(int)]
	}).(DNSEndpointSpecEndpointsProviderSpecificOutput)
}

// ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
type DNSEndpointSpecEndpointsProviderSpecificPatch struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// DNSEndpointSpecEndpointsProviderSpecificPatchInput is an input type that accepts DNSEndpointSpecEndpointsProviderSpecificPatchArgs and DNSEndpointSpecEndpointsProviderSpecificPatchOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsProviderSpecificPatchInput` via:
//
//	DNSEndpointSpecEndpointsProviderSpecificPatchArgs{...}
type DNSEndpointSpecEndpointsProviderSpecificPatchInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsProviderSpecificPatchOutput() DNSEndpointSpecEndpointsProviderSpecificPatchOutput
	ToDNSEndpointSpecEndpointsProviderSpecificPatchOutputWithContext(context.Context) DNSEndpointSpecEndpointsProviderSpecificPatchOutput
}

// ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
type DNSEndpointSpecEndpointsProviderSpecificPatchArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DNSEndpointSpecEndpointsProviderSpecificPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecificPatch)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsProviderSpecificPatchArgs) ToDNSEndpointSpecEndpointsProviderSpecificPatchOutput() DNSEndpointSpecEndpointsProviderSpecificPatchOutput {
	return i.ToDNSEndpointSpecEndpointsProviderSpecificPatchOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsProviderSpecificPatchArgs) ToDNSEndpointSpecEndpointsProviderSpecificPatchOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsProviderSpecificPatchOutput)
}

// DNSEndpointSpecEndpointsProviderSpecificPatchArrayInput is an input type that accepts DNSEndpointSpecEndpointsProviderSpecificPatchArray and DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput values.
// You can construct a concrete instance of `DNSEndpointSpecEndpointsProviderSpecificPatchArrayInput` via:
//
//	DNSEndpointSpecEndpointsProviderSpecificPatchArray{ DNSEndpointSpecEndpointsProviderSpecificPatchArgs{...} }
type DNSEndpointSpecEndpointsProviderSpecificPatchArrayInput interface {
	pulumi.Input

	ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput() DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput
	ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutputWithContext(context.Context) DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput
}

type DNSEndpointSpecEndpointsProviderSpecificPatchArray []DNSEndpointSpecEndpointsProviderSpecificPatchInput

func (DNSEndpointSpecEndpointsProviderSpecificPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpointsProviderSpecificPatch)(nil)).Elem()
}

func (i DNSEndpointSpecEndpointsProviderSpecificPatchArray) ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput() DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput {
	return i.ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutputWithContext(context.Background())
}

func (i DNSEndpointSpecEndpointsProviderSpecificPatchArray) ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput)
}

// ProviderSpecificProperty holds the name and value of a configuration which is specific to individual DNS providers
type DNSEndpointSpecEndpointsProviderSpecificPatchOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsProviderSpecificPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecificPatch)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchOutput) ToDNSEndpointSpecEndpointsProviderSpecificPatchOutput() DNSEndpointSpecEndpointsProviderSpecificPatchOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchOutput) ToDNSEndpointSpecEndpointsProviderSpecificPatchOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificPatchOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsProviderSpecificPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DNSEndpointSpecEndpointsProviderSpecificPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSEndpointSpecEndpointsProviderSpecificPatch)(nil)).Elem()
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput) ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput() DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput) ToDNSEndpointSpecEndpointsProviderSpecificPatchArrayOutputWithContext(ctx context.Context) DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput {
	return o
}

func (o DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput) Index(i pulumi.IntInput) DNSEndpointSpecEndpointsProviderSpecificPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSEndpointSpecEndpointsProviderSpecificPatch {
		return vs[0].([]DNSEndpointSpecEndpointsProviderSpecificPatch)[vs[1].(int)]
	}).(DNSEndpointSpecEndpointsProviderSpecificPatchOutput)
}

// DNSEndpointSpec defines the desired state of DNSEndpoint
type DNSEndpointSpecPatch struct {
	Endpoints []DNSEndpointSpecEndpointsPatch `pulumi:"endpoints"`
}

// DNSEndpointSpecPatchInput is an input type that accepts DNSEndpointSpecPatchArgs and DNSEndpointSpecPatchOutput values.
// You can construct a concrete instance of `DNSEndpointSpecPatchInput` via:
//
//	DNSEndpointSpecPatchArgs{...}
type DNSEndpointSpecPatchInput interface {
	pulumi.Input

	ToDNSEndpointSpecPatchOutput() DNSEndpointSpecPatchOutput
	ToDNSEndpointSpecPatchOutputWithContext(context.Context) DNSEndpointSpecPatchOutput
}

// DNSEndpointSpec defines the desired state of DNSEndpoint
type DNSEndpointSpecPatchArgs struct {
	Endpoints DNSEndpointSpecEndpointsPatchArrayInput `pulumi:"endpoints"`
}

func (DNSEndpointSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecPatch)(nil)).Elem()
}

func (i DNSEndpointSpecPatchArgs) ToDNSEndpointSpecPatchOutput() DNSEndpointSpecPatchOutput {
	return i.ToDNSEndpointSpecPatchOutputWithContext(context.Background())
}

func (i DNSEndpointSpecPatchArgs) ToDNSEndpointSpecPatchOutputWithContext(ctx context.Context) DNSEndpointSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecPatchOutput)
}

func (i DNSEndpointSpecPatchArgs) ToDNSEndpointSpecPatchPtrOutput() DNSEndpointSpecPatchPtrOutput {
	return i.ToDNSEndpointSpecPatchPtrOutputWithContext(context.Background())
}

func (i DNSEndpointSpecPatchArgs) ToDNSEndpointSpecPatchPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecPatchOutput).ToDNSEndpointSpecPatchPtrOutputWithContext(ctx)
}

// DNSEndpointSpecPatchPtrInput is an input type that accepts DNSEndpointSpecPatchArgs, DNSEndpointSpecPatchPtr and DNSEndpointSpecPatchPtrOutput values.
// You can construct a concrete instance of `DNSEndpointSpecPatchPtrInput` via:
//
//	        DNSEndpointSpecPatchArgs{...}
//
//	or:
//
//	        nil
type DNSEndpointSpecPatchPtrInput interface {
	pulumi.Input

	ToDNSEndpointSpecPatchPtrOutput() DNSEndpointSpecPatchPtrOutput
	ToDNSEndpointSpecPatchPtrOutputWithContext(context.Context) DNSEndpointSpecPatchPtrOutput
}

type dnsendpointSpecPatchPtrType DNSEndpointSpecPatchArgs

func DNSEndpointSpecPatchPtr(v *DNSEndpointSpecPatchArgs) DNSEndpointSpecPatchPtrInput {
	return (*dnsendpointSpecPatchPtrType)(v)
}

func (*dnsendpointSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointSpecPatch)(nil)).Elem()
}

func (i *dnsendpointSpecPatchPtrType) ToDNSEndpointSpecPatchPtrOutput() DNSEndpointSpecPatchPtrOutput {
	return i.ToDNSEndpointSpecPatchPtrOutputWithContext(context.Background())
}

func (i *dnsendpointSpecPatchPtrType) ToDNSEndpointSpecPatchPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointSpecPatchPtrOutput)
}

// DNSEndpointSpec defines the desired state of DNSEndpoint
type DNSEndpointSpecPatchOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointSpecPatch)(nil)).Elem()
}

func (o DNSEndpointSpecPatchOutput) ToDNSEndpointSpecPatchOutput() DNSEndpointSpecPatchOutput {
	return o
}

func (o DNSEndpointSpecPatchOutput) ToDNSEndpointSpecPatchOutputWithContext(ctx context.Context) DNSEndpointSpecPatchOutput {
	return o
}

func (o DNSEndpointSpecPatchOutput) ToDNSEndpointSpecPatchPtrOutput() DNSEndpointSpecPatchPtrOutput {
	return o.ToDNSEndpointSpecPatchPtrOutputWithContext(context.Background())
}

func (o DNSEndpointSpecPatchOutput) ToDNSEndpointSpecPatchPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DNSEndpointSpecPatch) *DNSEndpointSpecPatch {
		return &v
	}).(DNSEndpointSpecPatchPtrOutput)
}

func (o DNSEndpointSpecPatchOutput) Endpoints() DNSEndpointSpecEndpointsPatchArrayOutput {
	return o.ApplyT(func(v DNSEndpointSpecPatch) []DNSEndpointSpecEndpointsPatch { return v.Endpoints }).(DNSEndpointSpecEndpointsPatchArrayOutput)
}

type DNSEndpointSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (DNSEndpointSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointSpecPatch)(nil)).Elem()
}

func (o DNSEndpointSpecPatchPtrOutput) ToDNSEndpointSpecPatchPtrOutput() DNSEndpointSpecPatchPtrOutput {
	return o
}

func (o DNSEndpointSpecPatchPtrOutput) ToDNSEndpointSpecPatchPtrOutputWithContext(ctx context.Context) DNSEndpointSpecPatchPtrOutput {
	return o
}

func (o DNSEndpointSpecPatchPtrOutput) Elem() DNSEndpointSpecPatchOutput {
	return o.ApplyT(func(v *DNSEndpointSpecPatch) DNSEndpointSpecPatch {
		if v != nil {
			return *v
		}
		var ret DNSEndpointSpecPatch
		return ret
	}).(DNSEndpointSpecPatchOutput)
}

func (o DNSEndpointSpecPatchPtrOutput) Endpoints() DNSEndpointSpecEndpointsPatchArrayOutput {
	return o.ApplyT(func(v *DNSEndpointSpecPatch) []DNSEndpointSpecEndpointsPatch {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(DNSEndpointSpecEndpointsPatchArrayOutput)
}

// DNSEndpointStatus defines the observed state of DNSEndpoint
type DNSEndpointStatus struct {
	// The generation observed by the external-dns controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// DNSEndpointStatusInput is an input type that accepts DNSEndpointStatusArgs and DNSEndpointStatusOutput values.
// You can construct a concrete instance of `DNSEndpointStatusInput` via:
//
//	DNSEndpointStatusArgs{...}
type DNSEndpointStatusInput interface {
	pulumi.Input

	ToDNSEndpointStatusOutput() DNSEndpointStatusOutput
	ToDNSEndpointStatusOutputWithContext(context.Context) DNSEndpointStatusOutput
}

// DNSEndpointStatus defines the observed state of DNSEndpoint
type DNSEndpointStatusArgs struct {
	// The generation observed by the external-dns controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (DNSEndpointStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointStatus)(nil)).Elem()
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusOutput() DNSEndpointStatusOutput {
	return i.ToDNSEndpointStatusOutputWithContext(context.Background())
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusOutputWithContext(ctx context.Context) DNSEndpointStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusOutput)
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return i.ToDNSEndpointStatusPtrOutputWithContext(context.Background())
}

func (i DNSEndpointStatusArgs) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusOutput).ToDNSEndpointStatusPtrOutputWithContext(ctx)
}

// DNSEndpointStatusPtrInput is an input type that accepts DNSEndpointStatusArgs, DNSEndpointStatusPtr and DNSEndpointStatusPtrOutput values.
// You can construct a concrete instance of `DNSEndpointStatusPtrInput` via:
//
//	        DNSEndpointStatusArgs{...}
//
//	or:
//
//	        nil
type DNSEndpointStatusPtrInput interface {
	pulumi.Input

	ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput
	ToDNSEndpointStatusPtrOutputWithContext(context.Context) DNSEndpointStatusPtrOutput
}

type dnsendpointStatusPtrType DNSEndpointStatusArgs

func DNSEndpointStatusPtr(v *DNSEndpointStatusArgs) DNSEndpointStatusPtrInput {
	return (*dnsendpointStatusPtrType)(v)
}

func (*dnsendpointStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointStatus)(nil)).Elem()
}

func (i *dnsendpointStatusPtrType) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return i.ToDNSEndpointStatusPtrOutputWithContext(context.Background())
}

func (i *dnsendpointStatusPtrType) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusPtrOutput)
}

// DNSEndpointStatus defines the observed state of DNSEndpoint
type DNSEndpointStatusOutput struct{ *pulumi.OutputState }

func (DNSEndpointStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointStatus)(nil)).Elem()
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusOutput() DNSEndpointStatusOutput {
	return o
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusOutputWithContext(ctx context.Context) DNSEndpointStatusOutput {
	return o
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return o.ToDNSEndpointStatusPtrOutputWithContext(context.Background())
}

func (o DNSEndpointStatusOutput) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DNSEndpointStatus) *DNSEndpointStatus {
		return &v
	}).(DNSEndpointStatusPtrOutput)
}

// The generation observed by the external-dns controller.
func (o DNSEndpointStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DNSEndpointStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type DNSEndpointStatusPtrOutput struct{ *pulumi.OutputState }

func (DNSEndpointStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointStatus)(nil)).Elem()
}

func (o DNSEndpointStatusPtrOutput) ToDNSEndpointStatusPtrOutput() DNSEndpointStatusPtrOutput {
	return o
}

func (o DNSEndpointStatusPtrOutput) ToDNSEndpointStatusPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPtrOutput {
	return o
}

func (o DNSEndpointStatusPtrOutput) Elem() DNSEndpointStatusOutput {
	return o.ApplyT(func(v *DNSEndpointStatus) DNSEndpointStatus {
		if v != nil {
			return *v
		}
		var ret DNSEndpointStatus
		return ret
	}).(DNSEndpointStatusOutput)
}

// The generation observed by the external-dns controller.
func (o DNSEndpointStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DNSEndpointStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// DNSEndpointStatus defines the observed state of DNSEndpoint
type DNSEndpointStatusPatch struct {
	// The generation observed by the external-dns controller.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// DNSEndpointStatusPatchInput is an input type that accepts DNSEndpointStatusPatchArgs and DNSEndpointStatusPatchOutput values.
// You can construct a concrete instance of `DNSEndpointStatusPatchInput` via:
//
//	DNSEndpointStatusPatchArgs{...}
type DNSEndpointStatusPatchInput interface {
	pulumi.Input

	ToDNSEndpointStatusPatchOutput() DNSEndpointStatusPatchOutput
	ToDNSEndpointStatusPatchOutputWithContext(context.Context) DNSEndpointStatusPatchOutput
}

// DNSEndpointStatus defines the observed state of DNSEndpoint
type DNSEndpointStatusPatchArgs struct {
	// The generation observed by the external-dns controller.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (DNSEndpointStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointStatusPatch)(nil)).Elem()
}

func (i DNSEndpointStatusPatchArgs) ToDNSEndpointStatusPatchOutput() DNSEndpointStatusPatchOutput {
	return i.ToDNSEndpointStatusPatchOutputWithContext(context.Background())
}

func (i DNSEndpointStatusPatchArgs) ToDNSEndpointStatusPatchOutputWithContext(ctx context.Context) DNSEndpointStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusPatchOutput)
}

func (i DNSEndpointStatusPatchArgs) ToDNSEndpointStatusPatchPtrOutput() DNSEndpointStatusPatchPtrOutput {
	return i.ToDNSEndpointStatusPatchPtrOutputWithContext(context.Background())
}

func (i DNSEndpointStatusPatchArgs) ToDNSEndpointStatusPatchPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusPatchOutput).ToDNSEndpointStatusPatchPtrOutputWithContext(ctx)
}

// DNSEndpointStatusPatchPtrInput is an input type that accepts DNSEndpointStatusPatchArgs, DNSEndpointStatusPatchPtr and DNSEndpointStatusPatchPtrOutput values.
// You can construct a concrete instance of `DNSEndpointStatusPatchPtrInput` via:
//
//	        DNSEndpointStatusPatchArgs{...}
//
//	or:
//
//	        nil
type DNSEndpointStatusPatchPtrInput interface {
	pulumi.Input

	ToDNSEndpointStatusPatchPtrOutput() DNSEndpointStatusPatchPtrOutput
	ToDNSEndpointStatusPatchPtrOutputWithContext(context.Context) DNSEndpointStatusPatchPtrOutput
}

type dnsendpointStatusPatchPtrType DNSEndpointStatusPatchArgs

func DNSEndpointStatusPatchPtr(v *DNSEndpointStatusPatchArgs) DNSEndpointStatusPatchPtrInput {
	return (*dnsendpointStatusPatchPtrType)(v)
}

func (*dnsendpointStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointStatusPatch)(nil)).Elem()
}

func (i *dnsendpointStatusPatchPtrType) ToDNSEndpointStatusPatchPtrOutput() DNSEndpointStatusPatchPtrOutput {
	return i.ToDNSEndpointStatusPatchPtrOutputWithContext(context.Background())
}

func (i *dnsendpointStatusPatchPtrType) ToDNSEndpointStatusPatchPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointStatusPatchPtrOutput)
}

// DNSEndpointStatus defines the observed state of DNSEndpoint
type DNSEndpointStatusPatchOutput struct{ *pulumi.OutputState }

func (DNSEndpointStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSEndpointStatusPatch)(nil)).Elem()
}

func (o DNSEndpointStatusPatchOutput) ToDNSEndpointStatusPatchOutput() DNSEndpointStatusPatchOutput {
	return o
}

func (o DNSEndpointStatusPatchOutput) ToDNSEndpointStatusPatchOutputWithContext(ctx context.Context) DNSEndpointStatusPatchOutput {
	return o
}

func (o DNSEndpointStatusPatchOutput) ToDNSEndpointStatusPatchPtrOutput() DNSEndpointStatusPatchPtrOutput {
	return o.ToDNSEndpointStatusPatchPtrOutputWithContext(context.Background())
}

func (o DNSEndpointStatusPatchOutput) ToDNSEndpointStatusPatchPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DNSEndpointStatusPatch) *DNSEndpointStatusPatch {
		return &v
	}).(DNSEndpointStatusPatchPtrOutput)
}

// The generation observed by the external-dns controller.
func (o DNSEndpointStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DNSEndpointStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type DNSEndpointStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (DNSEndpointStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointStatusPatch)(nil)).Elem()
}

func (o DNSEndpointStatusPatchPtrOutput) ToDNSEndpointStatusPatchPtrOutput() DNSEndpointStatusPatchPtrOutput {
	return o
}

func (o DNSEndpointStatusPatchPtrOutput) ToDNSEndpointStatusPatchPtrOutputWithContext(ctx context.Context) DNSEndpointStatusPatchPtrOutput {
	return o
}

func (o DNSEndpointStatusPatchPtrOutput) Elem() DNSEndpointStatusPatchOutput {
	return o.ApplyT(func(v *DNSEndpointStatusPatch) DNSEndpointStatusPatch {
		if v != nil {
			return *v
		}
		var ret DNSEndpointStatusPatch
		return ret
	}).(DNSEndpointStatusPatchOutput)
}

// The generation observed by the external-dns controller.
func (o DNSEndpointStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DNSEndpointStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointTypeInput)(nil)).Elem(), DNSEndpointTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointTypeArrayInput)(nil)).Elem(), DNSEndpointTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointListTypeInput)(nil)).Elem(), DNSEndpointListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointPatchTypeInput)(nil)).Elem(), DNSEndpointPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecInput)(nil)).Elem(), DNSEndpointSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecPtrInput)(nil)).Elem(), DNSEndpointSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsInput)(nil)).Elem(), DNSEndpointSpecEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsArrayInput)(nil)).Elem(), DNSEndpointSpecEndpointsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsPatchInput)(nil)).Elem(), DNSEndpointSpecEndpointsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsPatchArrayInput)(nil)).Elem(), DNSEndpointSpecEndpointsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecificInput)(nil)).Elem(), DNSEndpointSpecEndpointsProviderSpecificArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecificArrayInput)(nil)).Elem(), DNSEndpointSpecEndpointsProviderSpecificArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecificPatchInput)(nil)).Elem(), DNSEndpointSpecEndpointsProviderSpecificPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecEndpointsProviderSpecificPatchArrayInput)(nil)).Elem(), DNSEndpointSpecEndpointsProviderSpecificPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecPatchInput)(nil)).Elem(), DNSEndpointSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointSpecPatchPtrInput)(nil)).Elem(), DNSEndpointSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointStatusInput)(nil)).Elem(), DNSEndpointStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointStatusPtrInput)(nil)).Elem(), DNSEndpointStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointStatusPatchInput)(nil)).Elem(), DNSEndpointStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointStatusPatchPtrInput)(nil)).Elem(), DNSEndpointStatusPatchArgs{})
	pulumi.RegisterOutputType(DNSEndpointTypeOutput{})
	pulumi.RegisterOutputType(DNSEndpointTypeArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointListTypeOutput{})
	pulumi.RegisterOutputType(DNSEndpointPatchTypeOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecPtrOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsPatchOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsPatchArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsProviderSpecificOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsProviderSpecificArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsProviderSpecificPatchOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecEndpointsProviderSpecificPatchArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecPatchOutput{})
	pulumi.RegisterOutputType(DNSEndpointSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(DNSEndpointStatusOutput{})
	pulumi.RegisterOutputType(DNSEndpointStatusPtrOutput{})
	pulumi.RegisterOutputType(DNSEndpointStatusPatchOutput{})
	pulumi.RegisterOutputType(DNSEndpointStatusPatchPtrOutput{})
}
