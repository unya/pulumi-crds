// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNSEndpointList is a list of DNSEndpoint
type DNSEndpointList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items DNSEndpointTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewDNSEndpointList registers a new resource with the given unique name, arguments, and options.
func NewDNSEndpointList(ctx *pulumi.Context,
	name string, args *DNSEndpointListArgs, opts ...pulumi.ResourceOption) (*DNSEndpointList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("externaldns.k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("DNSEndpointList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DNSEndpointList
	err := ctx.RegisterResource("kubernetes:externaldns.k8s.io/v1alpha1:DNSEndpointList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSEndpointList gets an existing DNSEndpointList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSEndpointList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSEndpointListState, opts ...pulumi.ResourceOption) (*DNSEndpointList, error) {
	var resource DNSEndpointList
	err := ctx.ReadResource("kubernetes:externaldns.k8s.io/v1alpha1:DNSEndpointList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSEndpointList resources.
type dnsendpointListState struct {
}

type DNSEndpointListState struct {
}

func (DNSEndpointListState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsendpointListState)(nil)).Elem()
}

type dnsendpointListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []DNSEndpointType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a DNSEndpointList resource.
type DNSEndpointListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items DNSEndpointTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (DNSEndpointListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsendpointListArgs)(nil)).Elem()
}

type DNSEndpointListInput interface {
	pulumi.Input

	ToDNSEndpointListOutput() DNSEndpointListOutput
	ToDNSEndpointListOutputWithContext(ctx context.Context) DNSEndpointListOutput
}

func (*DNSEndpointList) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointList)(nil)).Elem()
}

func (i *DNSEndpointList) ToDNSEndpointListOutput() DNSEndpointListOutput {
	return i.ToDNSEndpointListOutputWithContext(context.Background())
}

func (i *DNSEndpointList) ToDNSEndpointListOutputWithContext(ctx context.Context) DNSEndpointListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointListOutput)
}

// DNSEndpointListArrayInput is an input type that accepts DNSEndpointListArray and DNSEndpointListArrayOutput values.
// You can construct a concrete instance of `DNSEndpointListArrayInput` via:
//
//	DNSEndpointListArray{ DNSEndpointListArgs{...} }
type DNSEndpointListArrayInput interface {
	pulumi.Input

	ToDNSEndpointListArrayOutput() DNSEndpointListArrayOutput
	ToDNSEndpointListArrayOutputWithContext(context.Context) DNSEndpointListArrayOutput
}

type DNSEndpointListArray []DNSEndpointListInput

func (DNSEndpointListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSEndpointList)(nil)).Elem()
}

func (i DNSEndpointListArray) ToDNSEndpointListArrayOutput() DNSEndpointListArrayOutput {
	return i.ToDNSEndpointListArrayOutputWithContext(context.Background())
}

func (i DNSEndpointListArray) ToDNSEndpointListArrayOutputWithContext(ctx context.Context) DNSEndpointListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointListArrayOutput)
}

// DNSEndpointListMapInput is an input type that accepts DNSEndpointListMap and DNSEndpointListMapOutput values.
// You can construct a concrete instance of `DNSEndpointListMapInput` via:
//
//	DNSEndpointListMap{ "key": DNSEndpointListArgs{...} }
type DNSEndpointListMapInput interface {
	pulumi.Input

	ToDNSEndpointListMapOutput() DNSEndpointListMapOutput
	ToDNSEndpointListMapOutputWithContext(context.Context) DNSEndpointListMapOutput
}

type DNSEndpointListMap map[string]DNSEndpointListInput

func (DNSEndpointListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSEndpointList)(nil)).Elem()
}

func (i DNSEndpointListMap) ToDNSEndpointListMapOutput() DNSEndpointListMapOutput {
	return i.ToDNSEndpointListMapOutputWithContext(context.Background())
}

func (i DNSEndpointListMap) ToDNSEndpointListMapOutputWithContext(ctx context.Context) DNSEndpointListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSEndpointListMapOutput)
}

type DNSEndpointListOutput struct{ *pulumi.OutputState }

func (DNSEndpointListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSEndpointList)(nil)).Elem()
}

func (o DNSEndpointListOutput) ToDNSEndpointListOutput() DNSEndpointListOutput {
	return o
}

func (o DNSEndpointListOutput) ToDNSEndpointListOutputWithContext(ctx context.Context) DNSEndpointListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DNSEndpointListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSEndpointList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of dnsendpoints. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o DNSEndpointListOutput) Items() DNSEndpointTypeArrayOutput {
	return o.ApplyT(func(v *DNSEndpointList) DNSEndpointTypeArrayOutput { return v.Items }).(DNSEndpointTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *DNSEndpointList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DNSEndpointListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *DNSEndpointList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type DNSEndpointListArrayOutput struct{ *pulumi.OutputState }

func (DNSEndpointListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSEndpointList)(nil)).Elem()
}

func (o DNSEndpointListArrayOutput) ToDNSEndpointListArrayOutput() DNSEndpointListArrayOutput {
	return o
}

func (o DNSEndpointListArrayOutput) ToDNSEndpointListArrayOutputWithContext(ctx context.Context) DNSEndpointListArrayOutput {
	return o
}

func (o DNSEndpointListArrayOutput) Index(i pulumi.IntInput) DNSEndpointListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DNSEndpointList {
		return vs[0].([]*DNSEndpointList)[vs[1].(int)]
	}).(DNSEndpointListOutput)
}

type DNSEndpointListMapOutput struct{ *pulumi.OutputState }

func (DNSEndpointListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSEndpointList)(nil)).Elem()
}

func (o DNSEndpointListMapOutput) ToDNSEndpointListMapOutput() DNSEndpointListMapOutput {
	return o
}

func (o DNSEndpointListMapOutput) ToDNSEndpointListMapOutputWithContext(ctx context.Context) DNSEndpointListMapOutput {
	return o
}

func (o DNSEndpointListMapOutput) MapIndex(k pulumi.StringInput) DNSEndpointListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DNSEndpointList {
		return vs[0].(map[string]*DNSEndpointList)[vs[1].(string)]
	}).(DNSEndpointListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointListInput)(nil)).Elem(), &DNSEndpointList{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointListArrayInput)(nil)).Elem(), DNSEndpointListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSEndpointListMapInput)(nil)).Elem(), DNSEndpointListMap{})
	pulumi.RegisterOutputType(DNSEndpointListOutput{})
	pulumi.RegisterOutputType(DNSEndpointListArrayOutput{})
	pulumi.RegisterOutputType(DNSEndpointListMapOutput{})
}
