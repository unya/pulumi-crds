// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EventSourceList is a list of EventSource
type EventSourceList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EventSourceTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewEventSourceList registers a new resource with the given unique name, arguments, and options.
func NewEventSourceList(ctx *pulumi.Context,
	name string, args *EventSourceListArgs, opts ...pulumi.ResourceOption) (*EventSourceList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("EventSourceList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EventSourceList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:EventSourceList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourceList gets an existing EventSourceList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourceList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourceListState, opts ...pulumi.ResourceOption) (*EventSourceList, error) {
	var resource EventSourceList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:EventSourceList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSourceList resources.
type eventSourceListState struct {
}

type EventSourceListState struct {
}

func (EventSourceListState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceListState)(nil)).Elem()
}

type eventSourceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EventSourceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a EventSourceList resource.
type EventSourceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EventSourceTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (EventSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceListArgs)(nil)).Elem()
}

type EventSourceListInput interface {
	pulumi.Input

	ToEventSourceListOutput() EventSourceListOutput
	ToEventSourceListOutputWithContext(ctx context.Context) EventSourceListOutput
}

func (*EventSourceList) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceList)(nil)).Elem()
}

func (i *EventSourceList) ToEventSourceListOutput() EventSourceListOutput {
	return i.ToEventSourceListOutputWithContext(context.Background())
}

func (i *EventSourceList) ToEventSourceListOutputWithContext(ctx context.Context) EventSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceListOutput)
}

// EventSourceListArrayInput is an input type that accepts EventSourceListArray and EventSourceListArrayOutput values.
// You can construct a concrete instance of `EventSourceListArrayInput` via:
//
//	EventSourceListArray{ EventSourceListArgs{...} }
type EventSourceListArrayInput interface {
	pulumi.Input

	ToEventSourceListArrayOutput() EventSourceListArrayOutput
	ToEventSourceListArrayOutputWithContext(context.Context) EventSourceListArrayOutput
}

type EventSourceListArray []EventSourceListInput

func (EventSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourceList)(nil)).Elem()
}

func (i EventSourceListArray) ToEventSourceListArrayOutput() EventSourceListArrayOutput {
	return i.ToEventSourceListArrayOutputWithContext(context.Background())
}

func (i EventSourceListArray) ToEventSourceListArrayOutputWithContext(ctx context.Context) EventSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceListArrayOutput)
}

// EventSourceListMapInput is an input type that accepts EventSourceListMap and EventSourceListMapOutput values.
// You can construct a concrete instance of `EventSourceListMapInput` via:
//
//	EventSourceListMap{ "key": EventSourceListArgs{...} }
type EventSourceListMapInput interface {
	pulumi.Input

	ToEventSourceListMapOutput() EventSourceListMapOutput
	ToEventSourceListMapOutputWithContext(context.Context) EventSourceListMapOutput
}

type EventSourceListMap map[string]EventSourceListInput

func (EventSourceListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourceList)(nil)).Elem()
}

func (i EventSourceListMap) ToEventSourceListMapOutput() EventSourceListMapOutput {
	return i.ToEventSourceListMapOutputWithContext(context.Background())
}

func (i EventSourceListMap) ToEventSourceListMapOutputWithContext(ctx context.Context) EventSourceListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceListMapOutput)
}

type EventSourceListOutput struct{ *pulumi.OutputState }

func (EventSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourceList)(nil)).Elem()
}

func (o EventSourceListOutput) ToEventSourceListOutput() EventSourceListOutput {
	return o
}

func (o EventSourceListOutput) ToEventSourceListOutputWithContext(ctx context.Context) EventSourceListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventSourceListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EventSourceListOutput) Items() EventSourceTypeArrayOutput {
	return o.ApplyT(func(v *EventSourceList) EventSourceTypeArrayOutput { return v.Items }).(EventSourceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourceListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSourceList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourceListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *EventSourceList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type EventSourceListArrayOutput struct{ *pulumi.OutputState }

func (EventSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourceList)(nil)).Elem()
}

func (o EventSourceListArrayOutput) ToEventSourceListArrayOutput() EventSourceListArrayOutput {
	return o
}

func (o EventSourceListArrayOutput) ToEventSourceListArrayOutputWithContext(ctx context.Context) EventSourceListArrayOutput {
	return o
}

func (o EventSourceListArrayOutput) Index(i pulumi.IntInput) EventSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventSourceList {
		return vs[0].([]*EventSourceList)[vs[1].(int)]
	}).(EventSourceListOutput)
}

type EventSourceListMapOutput struct{ *pulumi.OutputState }

func (EventSourceListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourceList)(nil)).Elem()
}

func (o EventSourceListMapOutput) ToEventSourceListMapOutput() EventSourceListMapOutput {
	return o
}

func (o EventSourceListMapOutput) ToEventSourceListMapOutputWithContext(ctx context.Context) EventSourceListMapOutput {
	return o
}

func (o EventSourceListMapOutput) MapIndex(k pulumi.StringInput) EventSourceListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventSourceList {
		return vs[0].(map[string]*EventSourceList)[vs[1].(string)]
	}).(EventSourceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceListInput)(nil)).Elem(), &EventSourceList{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceListArrayInput)(nil)).Elem(), EventSourceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceListMapInput)(nil)).Elem(), EventSourceListMap{})
	pulumi.RegisterOutputType(EventSourceListOutput{})
	pulumi.RegisterOutputType(EventSourceListArrayOutput{})
	pulumi.RegisterOutputType(EventSourceListMapOutput{})
}
