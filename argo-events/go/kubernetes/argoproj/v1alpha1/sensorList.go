// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SensorList is a list of Sensor
type SensorList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SensorTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSensorList registers a new resource with the given unique name, arguments, and options.
func NewSensorList(ctx *pulumi.Context,
	name string, args *SensorListArgs, opts ...pulumi.ResourceOption) (*SensorList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("SensorList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SensorList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:SensorList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorList gets an existing SensorList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorListState, opts ...pulumi.ResourceOption) (*SensorList, error) {
	var resource SensorList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:SensorList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorList resources.
type sensorListState struct {
}

type SensorListState struct {
}

func (SensorListState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorListState)(nil)).Elem()
}

type sensorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SensorType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SensorList resource.
type SensorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SensorTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SensorListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorListArgs)(nil)).Elem()
}

type SensorListInput interface {
	pulumi.Input

	ToSensorListOutput() SensorListOutput
	ToSensorListOutputWithContext(ctx context.Context) SensorListOutput
}

func (*SensorList) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorList)(nil)).Elem()
}

func (i *SensorList) ToSensorListOutput() SensorListOutput {
	return i.ToSensorListOutputWithContext(context.Background())
}

func (i *SensorList) ToSensorListOutputWithContext(ctx context.Context) SensorListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorListOutput)
}

// SensorListArrayInput is an input type that accepts SensorListArray and SensorListArrayOutput values.
// You can construct a concrete instance of `SensorListArrayInput` via:
//
//	SensorListArray{ SensorListArgs{...} }
type SensorListArrayInput interface {
	pulumi.Input

	ToSensorListArrayOutput() SensorListArrayOutput
	ToSensorListArrayOutputWithContext(context.Context) SensorListArrayOutput
}

type SensorListArray []SensorListInput

func (SensorListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorList)(nil)).Elem()
}

func (i SensorListArray) ToSensorListArrayOutput() SensorListArrayOutput {
	return i.ToSensorListArrayOutputWithContext(context.Background())
}

func (i SensorListArray) ToSensorListArrayOutputWithContext(ctx context.Context) SensorListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorListArrayOutput)
}

// SensorListMapInput is an input type that accepts SensorListMap and SensorListMapOutput values.
// You can construct a concrete instance of `SensorListMapInput` via:
//
//	SensorListMap{ "key": SensorListArgs{...} }
type SensorListMapInput interface {
	pulumi.Input

	ToSensorListMapOutput() SensorListMapOutput
	ToSensorListMapOutputWithContext(context.Context) SensorListMapOutput
}

type SensorListMap map[string]SensorListInput

func (SensorListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorList)(nil)).Elem()
}

func (i SensorListMap) ToSensorListMapOutput() SensorListMapOutput {
	return i.ToSensorListMapOutputWithContext(context.Background())
}

func (i SensorListMap) ToSensorListMapOutputWithContext(ctx context.Context) SensorListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorListMapOutput)
}

type SensorListOutput struct{ *pulumi.OutputState }

func (SensorListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorList)(nil)).Elem()
}

func (o SensorListOutput) ToSensorListOutput() SensorListOutput {
	return o
}

func (o SensorListOutput) ToSensorListOutputWithContext(ctx context.Context) SensorListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SensorListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SensorListOutput) Items() SensorTypeArrayOutput {
	return o.ApplyT(func(v *SensorList) SensorTypeArrayOutput { return v.Items }).(SensorTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SensorList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SensorList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SensorListArrayOutput struct{ *pulumi.OutputState }

func (SensorListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorList)(nil)).Elem()
}

func (o SensorListArrayOutput) ToSensorListArrayOutput() SensorListArrayOutput {
	return o
}

func (o SensorListArrayOutput) ToSensorListArrayOutputWithContext(ctx context.Context) SensorListArrayOutput {
	return o
}

func (o SensorListArrayOutput) Index(i pulumi.IntInput) SensorListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorList {
		return vs[0].([]*SensorList)[vs[1].(int)]
	}).(SensorListOutput)
}

type SensorListMapOutput struct{ *pulumi.OutputState }

func (SensorListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorList)(nil)).Elem()
}

func (o SensorListMapOutput) ToSensorListMapOutput() SensorListMapOutput {
	return o
}

func (o SensorListMapOutput) ToSensorListMapOutputWithContext(ctx context.Context) SensorListMapOutput {
	return o
}

func (o SensorListMapOutput) MapIndex(k pulumi.StringInput) SensorListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorList {
		return vs[0].(map[string]*SensorList)[vs[1].(string)]
	}).(SensorListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorListInput)(nil)).Elem(), &SensorList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorListArrayInput)(nil)).Elem(), SensorListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorListMapInput)(nil)).Elem(), SensorListMap{})
	pulumi.RegisterOutputType(SensorListOutput{})
	pulumi.RegisterOutputType(SensorListArrayOutput{})
	pulumi.RegisterOutputType(SensorListMapOutput{})
}
