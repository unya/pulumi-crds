// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EventSource struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput        `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewEventSource registers a new resource with the given unique name, arguments, and options.
func NewEventSource(ctx *pulumi.Context,
	name string, args *EventSourceArgs, opts ...pulumi.ResourceOption) (*EventSource, error) {
	if args == nil {
		args = &EventSourceArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("EventSource")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EventSource
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:EventSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSource gets an existing EventSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourceState, opts ...pulumi.ResourceOption) (*EventSource, error) {
	var resource EventSource
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:EventSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSource resources.
type eventSourceState struct {
}

type EventSourceState struct {
}

func (EventSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceState)(nil)).Elem()
}

type eventSourceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
}

// The set of arguments for constructing a EventSource resource.
type EventSourceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     pulumi.MapInput
}

func (EventSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourceArgs)(nil)).Elem()
}

type EventSourceInput interface {
	pulumi.Input

	ToEventSourceOutput() EventSourceOutput
	ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput
}

func (*EventSource) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSource)(nil)).Elem()
}

func (i *EventSource) ToEventSourceOutput() EventSourceOutput {
	return i.ToEventSourceOutputWithContext(context.Background())
}

func (i *EventSource) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceOutput)
}

// EventSourceArrayInput is an input type that accepts EventSourceArray and EventSourceArrayOutput values.
// You can construct a concrete instance of `EventSourceArrayInput` via:
//
//	EventSourceArray{ EventSourceArgs{...} }
type EventSourceArrayInput interface {
	pulumi.Input

	ToEventSourceArrayOutput() EventSourceArrayOutput
	ToEventSourceArrayOutputWithContext(context.Context) EventSourceArrayOutput
}

type EventSourceArray []EventSourceInput

func (EventSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSource)(nil)).Elem()
}

func (i EventSourceArray) ToEventSourceArrayOutput() EventSourceArrayOutput {
	return i.ToEventSourceArrayOutputWithContext(context.Background())
}

func (i EventSourceArray) ToEventSourceArrayOutputWithContext(ctx context.Context) EventSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceArrayOutput)
}

// EventSourceMapInput is an input type that accepts EventSourceMap and EventSourceMapOutput values.
// You can construct a concrete instance of `EventSourceMapInput` via:
//
//	EventSourceMap{ "key": EventSourceArgs{...} }
type EventSourceMapInput interface {
	pulumi.Input

	ToEventSourceMapOutput() EventSourceMapOutput
	ToEventSourceMapOutputWithContext(context.Context) EventSourceMapOutput
}

type EventSourceMap map[string]EventSourceInput

func (EventSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSource)(nil)).Elem()
}

func (i EventSourceMap) ToEventSourceMapOutput() EventSourceMapOutput {
	return i.ToEventSourceMapOutputWithContext(context.Background())
}

func (i EventSourceMap) ToEventSourceMapOutputWithContext(ctx context.Context) EventSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceMapOutput)
}

type EventSourceOutput struct{ *pulumi.OutputState }

func (EventSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSource)(nil)).Elem()
}

func (o EventSourceOutput) ToEventSourceOutput() EventSourceOutput {
	return o
}

func (o EventSourceOutput) ToEventSourceOutputWithContext(ctx context.Context) EventSourceOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventSourceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSource) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EventSource) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventSourceOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *EventSource) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o EventSourceOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *EventSource) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o EventSourceOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *EventSource) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type EventSourceArrayOutput struct{ *pulumi.OutputState }

func (EventSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSource)(nil)).Elem()
}

func (o EventSourceArrayOutput) ToEventSourceArrayOutput() EventSourceArrayOutput {
	return o
}

func (o EventSourceArrayOutput) ToEventSourceArrayOutputWithContext(ctx context.Context) EventSourceArrayOutput {
	return o
}

func (o EventSourceArrayOutput) Index(i pulumi.IntInput) EventSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventSource {
		return vs[0].([]*EventSource)[vs[1].(int)]
	}).(EventSourceOutput)
}

type EventSourceMapOutput struct{ *pulumi.OutputState }

func (EventSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSource)(nil)).Elem()
}

func (o EventSourceMapOutput) ToEventSourceMapOutput() EventSourceMapOutput {
	return o
}

func (o EventSourceMapOutput) ToEventSourceMapOutputWithContext(ctx context.Context) EventSourceMapOutput {
	return o
}

func (o EventSourceMapOutput) MapIndex(k pulumi.StringInput) EventSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventSource {
		return vs[0].(map[string]*EventSource)[vs[1].(string)]
	}).(EventSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceInput)(nil)).Elem(), &EventSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceArrayInput)(nil)).Elem(), EventSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceMapInput)(nil)).Elem(), EventSourceMap{})
	pulumi.RegisterOutputType(EventSourceOutput{})
	pulumi.RegisterOutputType(EventSourceArrayOutput{})
	pulumi.RegisterOutputType(EventSourceMapOutput{})
}
