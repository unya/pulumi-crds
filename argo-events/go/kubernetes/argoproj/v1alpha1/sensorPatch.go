// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type SensorPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput                `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewSensorPatch registers a new resource with the given unique name, arguments, and options.
func NewSensorPatch(ctx *pulumi.Context,
	name string, args *SensorPatchArgs, opts ...pulumi.ResourceOption) (*SensorPatch, error) {
	if args == nil {
		args = &SensorPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Sensor")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SensorPatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:SensorPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensorPatch gets an existing SensorPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensorPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorPatchState, opts ...pulumi.ResourceOption) (*SensorPatch, error) {
	var resource SensorPatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:SensorPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SensorPatch resources.
type sensorPatchState struct {
}

type SensorPatchState struct {
}

func (SensorPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorPatchState)(nil)).Elem()
}

type sensorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
}

// The set of arguments for constructing a SensorPatch resource.
type SensorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     pulumi.MapInput
}

func (SensorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorPatchArgs)(nil)).Elem()
}

type SensorPatchInput interface {
	pulumi.Input

	ToSensorPatchOutput() SensorPatchOutput
	ToSensorPatchOutputWithContext(ctx context.Context) SensorPatchOutput
}

func (*SensorPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorPatch)(nil)).Elem()
}

func (i *SensorPatch) ToSensorPatchOutput() SensorPatchOutput {
	return i.ToSensorPatchOutputWithContext(context.Background())
}

func (i *SensorPatch) ToSensorPatchOutputWithContext(ctx context.Context) SensorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorPatchOutput)
}

// SensorPatchArrayInput is an input type that accepts SensorPatchArray and SensorPatchArrayOutput values.
// You can construct a concrete instance of `SensorPatchArrayInput` via:
//
//	SensorPatchArray{ SensorPatchArgs{...} }
type SensorPatchArrayInput interface {
	pulumi.Input

	ToSensorPatchArrayOutput() SensorPatchArrayOutput
	ToSensorPatchArrayOutputWithContext(context.Context) SensorPatchArrayOutput
}

type SensorPatchArray []SensorPatchInput

func (SensorPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorPatch)(nil)).Elem()
}

func (i SensorPatchArray) ToSensorPatchArrayOutput() SensorPatchArrayOutput {
	return i.ToSensorPatchArrayOutputWithContext(context.Background())
}

func (i SensorPatchArray) ToSensorPatchArrayOutputWithContext(ctx context.Context) SensorPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorPatchArrayOutput)
}

// SensorPatchMapInput is an input type that accepts SensorPatchMap and SensorPatchMapOutput values.
// You can construct a concrete instance of `SensorPatchMapInput` via:
//
//	SensorPatchMap{ "key": SensorPatchArgs{...} }
type SensorPatchMapInput interface {
	pulumi.Input

	ToSensorPatchMapOutput() SensorPatchMapOutput
	ToSensorPatchMapOutputWithContext(context.Context) SensorPatchMapOutput
}

type SensorPatchMap map[string]SensorPatchInput

func (SensorPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorPatch)(nil)).Elem()
}

func (i SensorPatchMap) ToSensorPatchMapOutput() SensorPatchMapOutput {
	return i.ToSensorPatchMapOutputWithContext(context.Background())
}

func (i SensorPatchMap) ToSensorPatchMapOutputWithContext(ctx context.Context) SensorPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorPatchMapOutput)
}

type SensorPatchOutput struct{ *pulumi.OutputState }

func (SensorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SensorPatch)(nil)).Elem()
}

func (o SensorPatchOutput) ToSensorPatchOutput() SensorPatchOutput {
	return o
}

func (o SensorPatchOutput) ToSensorPatchOutputWithContext(ctx context.Context) SensorPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SensorPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensorPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SensorPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SensorPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SensorPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SensorPatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *SensorPatch) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o SensorPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *SensorPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type SensorPatchArrayOutput struct{ *pulumi.OutputState }

func (SensorPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SensorPatch)(nil)).Elem()
}

func (o SensorPatchArrayOutput) ToSensorPatchArrayOutput() SensorPatchArrayOutput {
	return o
}

func (o SensorPatchArrayOutput) ToSensorPatchArrayOutputWithContext(ctx context.Context) SensorPatchArrayOutput {
	return o
}

func (o SensorPatchArrayOutput) Index(i pulumi.IntInput) SensorPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SensorPatch {
		return vs[0].([]*SensorPatch)[vs[1].(int)]
	}).(SensorPatchOutput)
}

type SensorPatchMapOutput struct{ *pulumi.OutputState }

func (SensorPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SensorPatch)(nil)).Elem()
}

func (o SensorPatchMapOutput) ToSensorPatchMapOutput() SensorPatchMapOutput {
	return o
}

func (o SensorPatchMapOutput) ToSensorPatchMapOutputWithContext(ctx context.Context) SensorPatchMapOutput {
	return o
}

func (o SensorPatchMapOutput) MapIndex(k pulumi.StringInput) SensorPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SensorPatch {
		return vs[0].(map[string]*SensorPatch)[vs[1].(string)]
	}).(SensorPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorPatchInput)(nil)).Elem(), &SensorPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorPatchArrayInput)(nil)).Elem(), SensorPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorPatchMapInput)(nil)).Elem(), SensorPatchMap{})
	pulumi.RegisterOutputType(SensorPatchOutput{})
	pulumi.RegisterOutputType(SensorPatchArrayOutput{})
	pulumi.RegisterOutputType(SensorPatchMapOutput{})
}
