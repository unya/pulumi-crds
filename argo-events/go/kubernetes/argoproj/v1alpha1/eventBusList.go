// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EventBusList is a list of EventBus
type EventBusList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EventBusTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewEventBusList registers a new resource with the given unique name, arguments, and options.
func NewEventBusList(ctx *pulumi.Context,
	name string, args *EventBusListArgs, opts ...pulumi.ResourceOption) (*EventBusList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("EventBusList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EventBusList
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:EventBusList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventBusList gets an existing EventBusList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventBusList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventBusListState, opts ...pulumi.ResourceOption) (*EventBusList, error) {
	var resource EventBusList
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:EventBusList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventBusList resources.
type eventBusListState struct {
}

type EventBusListState struct {
}

func (EventBusListState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusListState)(nil)).Elem()
}

type eventBusListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EventBusType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a EventBusList resource.
type EventBusListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EventBusTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (EventBusListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusListArgs)(nil)).Elem()
}

type EventBusListInput interface {
	pulumi.Input

	ToEventBusListOutput() EventBusListOutput
	ToEventBusListOutputWithContext(ctx context.Context) EventBusListOutput
}

func (*EventBusList) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBusList)(nil)).Elem()
}

func (i *EventBusList) ToEventBusListOutput() EventBusListOutput {
	return i.ToEventBusListOutputWithContext(context.Background())
}

func (i *EventBusList) ToEventBusListOutputWithContext(ctx context.Context) EventBusListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusListOutput)
}

// EventBusListArrayInput is an input type that accepts EventBusListArray and EventBusListArrayOutput values.
// You can construct a concrete instance of `EventBusListArrayInput` via:
//
//	EventBusListArray{ EventBusListArgs{...} }
type EventBusListArrayInput interface {
	pulumi.Input

	ToEventBusListArrayOutput() EventBusListArrayOutput
	ToEventBusListArrayOutputWithContext(context.Context) EventBusListArrayOutput
}

type EventBusListArray []EventBusListInput

func (EventBusListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventBusList)(nil)).Elem()
}

func (i EventBusListArray) ToEventBusListArrayOutput() EventBusListArrayOutput {
	return i.ToEventBusListArrayOutputWithContext(context.Background())
}

func (i EventBusListArray) ToEventBusListArrayOutputWithContext(ctx context.Context) EventBusListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusListArrayOutput)
}

// EventBusListMapInput is an input type that accepts EventBusListMap and EventBusListMapOutput values.
// You can construct a concrete instance of `EventBusListMapInput` via:
//
//	EventBusListMap{ "key": EventBusListArgs{...} }
type EventBusListMapInput interface {
	pulumi.Input

	ToEventBusListMapOutput() EventBusListMapOutput
	ToEventBusListMapOutputWithContext(context.Context) EventBusListMapOutput
}

type EventBusListMap map[string]EventBusListInput

func (EventBusListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventBusList)(nil)).Elem()
}

func (i EventBusListMap) ToEventBusListMapOutput() EventBusListMapOutput {
	return i.ToEventBusListMapOutputWithContext(context.Background())
}

func (i EventBusListMap) ToEventBusListMapOutputWithContext(ctx context.Context) EventBusListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusListMapOutput)
}

type EventBusListOutput struct{ *pulumi.OutputState }

func (EventBusListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBusList)(nil)).Elem()
}

func (o EventBusListOutput) ToEventBusListOutput() EventBusListOutput {
	return o
}

func (o EventBusListOutput) ToEventBusListOutputWithContext(ctx context.Context) EventBusListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventBusListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EventBusList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EventBusListOutput) Items() EventBusTypeArrayOutput {
	return o.ApplyT(func(v *EventBusList) EventBusTypeArrayOutput { return v.Items }).(EventBusTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *EventBusList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *EventBusList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type EventBusListArrayOutput struct{ *pulumi.OutputState }

func (EventBusListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventBusList)(nil)).Elem()
}

func (o EventBusListArrayOutput) ToEventBusListArrayOutput() EventBusListArrayOutput {
	return o
}

func (o EventBusListArrayOutput) ToEventBusListArrayOutputWithContext(ctx context.Context) EventBusListArrayOutput {
	return o
}

func (o EventBusListArrayOutput) Index(i pulumi.IntInput) EventBusListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventBusList {
		return vs[0].([]*EventBusList)[vs[1].(int)]
	}).(EventBusListOutput)
}

type EventBusListMapOutput struct{ *pulumi.OutputState }

func (EventBusListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventBusList)(nil)).Elem()
}

func (o EventBusListMapOutput) ToEventBusListMapOutput() EventBusListMapOutput {
	return o
}

func (o EventBusListMapOutput) ToEventBusListMapOutputWithContext(ctx context.Context) EventBusListMapOutput {
	return o
}

func (o EventBusListMapOutput) MapIndex(k pulumi.StringInput) EventBusListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventBusList {
		return vs[0].(map[string]*EventBusList)[vs[1].(string)]
	}).(EventBusListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusListInput)(nil)).Elem(), &EventBusList{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusListArrayInput)(nil)).Elem(), EventBusListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusListMapInput)(nil)).Elem(), EventBusListMap{})
	pulumi.RegisterOutputType(EventBusListOutput{})
	pulumi.RegisterOutputType(EventBusListArrayOutput{})
	pulumi.RegisterOutputType(EventBusListMapOutput{})
}
