// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Sensor struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput        `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewSensor registers a new resource with the given unique name, arguments, and options.
func NewSensor(ctx *pulumi.Context,
	name string, args *SensorArgs, opts ...pulumi.ResourceOption) (*Sensor, error) {
	if args == nil {
		args = &SensorArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Sensor")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Sensor
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:Sensor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSensor gets an existing Sensor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSensor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SensorState, opts ...pulumi.ResourceOption) (*Sensor, error) {
	var resource Sensor
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:Sensor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sensor resources.
type sensorState struct {
}

type SensorState struct {
}

func (SensorState) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorState)(nil)).Elem()
}

type sensorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
}

// The set of arguments for constructing a Sensor resource.
type SensorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     pulumi.MapInput
}

func (SensorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sensorArgs)(nil)).Elem()
}

type SensorInput interface {
	pulumi.Input

	ToSensorOutput() SensorOutput
	ToSensorOutputWithContext(ctx context.Context) SensorOutput
}

func (*Sensor) ElementType() reflect.Type {
	return reflect.TypeOf((**Sensor)(nil)).Elem()
}

func (i *Sensor) ToSensorOutput() SensorOutput {
	return i.ToSensorOutputWithContext(context.Background())
}

func (i *Sensor) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorOutput)
}

// SensorArrayInput is an input type that accepts SensorArray and SensorArrayOutput values.
// You can construct a concrete instance of `SensorArrayInput` via:
//
//	SensorArray{ SensorArgs{...} }
type SensorArrayInput interface {
	pulumi.Input

	ToSensorArrayOutput() SensorArrayOutput
	ToSensorArrayOutputWithContext(context.Context) SensorArrayOutput
}

type SensorArray []SensorInput

func (SensorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sensor)(nil)).Elem()
}

func (i SensorArray) ToSensorArrayOutput() SensorArrayOutput {
	return i.ToSensorArrayOutputWithContext(context.Background())
}

func (i SensorArray) ToSensorArrayOutputWithContext(ctx context.Context) SensorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorArrayOutput)
}

// SensorMapInput is an input type that accepts SensorMap and SensorMapOutput values.
// You can construct a concrete instance of `SensorMapInput` via:
//
//	SensorMap{ "key": SensorArgs{...} }
type SensorMapInput interface {
	pulumi.Input

	ToSensorMapOutput() SensorMapOutput
	ToSensorMapOutputWithContext(context.Context) SensorMapOutput
}

type SensorMap map[string]SensorInput

func (SensorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sensor)(nil)).Elem()
}

func (i SensorMap) ToSensorMapOutput() SensorMapOutput {
	return i.ToSensorMapOutputWithContext(context.Background())
}

func (i SensorMap) ToSensorMapOutputWithContext(ctx context.Context) SensorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorMapOutput)
}

type SensorOutput struct{ *pulumi.OutputState }

func (SensorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sensor)(nil)).Elem()
}

func (o SensorOutput) ToSensorOutput() SensorOutput {
	return o
}

func (o SensorOutput) ToSensorOutputWithContext(ctx context.Context) SensorOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SensorOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Sensor) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SensorOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Sensor) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SensorOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *Sensor) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o SensorOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *Sensor) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type SensorArrayOutput struct{ *pulumi.OutputState }

func (SensorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sensor)(nil)).Elem()
}

func (o SensorArrayOutput) ToSensorArrayOutput() SensorArrayOutput {
	return o
}

func (o SensorArrayOutput) ToSensorArrayOutputWithContext(ctx context.Context) SensorArrayOutput {
	return o
}

func (o SensorArrayOutput) Index(i pulumi.IntInput) SensorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sensor {
		return vs[0].([]*Sensor)[vs[1].(int)]
	}).(SensorOutput)
}

type SensorMapOutput struct{ *pulumi.OutputState }

func (SensorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sensor)(nil)).Elem()
}

func (o SensorMapOutput) ToSensorMapOutput() SensorMapOutput {
	return o
}

func (o SensorMapOutput) ToSensorMapOutputWithContext(ctx context.Context) SensorMapOutput {
	return o
}

func (o SensorMapOutput) MapIndex(k pulumi.StringInput) SensorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sensor {
		return vs[0].(map[string]*Sensor)[vs[1].(string)]
	}).(SensorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SensorInput)(nil)).Elem(), &Sensor{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorArrayInput)(nil)).Elem(), SensorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorMapInput)(nil)).Elem(), SensorMap{})
	pulumi.RegisterOutputType(SensorOutput{})
	pulumi.RegisterOutputType(SensorArrayOutput{})
	pulumi.RegisterOutputType(SensorMapOutput{})
}
