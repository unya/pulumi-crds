// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type EventBusPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput                `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewEventBusPatch registers a new resource with the given unique name, arguments, and options.
func NewEventBusPatch(ctx *pulumi.Context,
	name string, args *EventBusPatchArgs, opts ...pulumi.ResourceOption) (*EventBusPatch, error) {
	if args == nil {
		args = &EventBusPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("EventBus")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EventBusPatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:EventBusPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventBusPatch gets an existing EventBusPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventBusPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventBusPatchState, opts ...pulumi.ResourceOption) (*EventBusPatch, error) {
	var resource EventBusPatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:EventBusPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventBusPatch resources.
type eventBusPatchState struct {
}

type EventBusPatchState struct {
}

func (EventBusPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusPatchState)(nil)).Elem()
}

type eventBusPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
}

// The set of arguments for constructing a EventBusPatch resource.
type EventBusPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     pulumi.MapInput
}

func (EventBusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventBusPatchArgs)(nil)).Elem()
}

type EventBusPatchInput interface {
	pulumi.Input

	ToEventBusPatchOutput() EventBusPatchOutput
	ToEventBusPatchOutputWithContext(ctx context.Context) EventBusPatchOutput
}

func (*EventBusPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBusPatch)(nil)).Elem()
}

func (i *EventBusPatch) ToEventBusPatchOutput() EventBusPatchOutput {
	return i.ToEventBusPatchOutputWithContext(context.Background())
}

func (i *EventBusPatch) ToEventBusPatchOutputWithContext(ctx context.Context) EventBusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusPatchOutput)
}

// EventBusPatchArrayInput is an input type that accepts EventBusPatchArray and EventBusPatchArrayOutput values.
// You can construct a concrete instance of `EventBusPatchArrayInput` via:
//
//	EventBusPatchArray{ EventBusPatchArgs{...} }
type EventBusPatchArrayInput interface {
	pulumi.Input

	ToEventBusPatchArrayOutput() EventBusPatchArrayOutput
	ToEventBusPatchArrayOutputWithContext(context.Context) EventBusPatchArrayOutput
}

type EventBusPatchArray []EventBusPatchInput

func (EventBusPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventBusPatch)(nil)).Elem()
}

func (i EventBusPatchArray) ToEventBusPatchArrayOutput() EventBusPatchArrayOutput {
	return i.ToEventBusPatchArrayOutputWithContext(context.Background())
}

func (i EventBusPatchArray) ToEventBusPatchArrayOutputWithContext(ctx context.Context) EventBusPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusPatchArrayOutput)
}

// EventBusPatchMapInput is an input type that accepts EventBusPatchMap and EventBusPatchMapOutput values.
// You can construct a concrete instance of `EventBusPatchMapInput` via:
//
//	EventBusPatchMap{ "key": EventBusPatchArgs{...} }
type EventBusPatchMapInput interface {
	pulumi.Input

	ToEventBusPatchMapOutput() EventBusPatchMapOutput
	ToEventBusPatchMapOutputWithContext(context.Context) EventBusPatchMapOutput
}

type EventBusPatchMap map[string]EventBusPatchInput

func (EventBusPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventBusPatch)(nil)).Elem()
}

func (i EventBusPatchMap) ToEventBusPatchMapOutput() EventBusPatchMapOutput {
	return i.ToEventBusPatchMapOutputWithContext(context.Background())
}

func (i EventBusPatchMap) ToEventBusPatchMapOutputWithContext(ctx context.Context) EventBusPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusPatchMapOutput)
}

type EventBusPatchOutput struct{ *pulumi.OutputState }

func (EventBusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventBusPatch)(nil)).Elem()
}

func (o EventBusPatchOutput) ToEventBusPatchOutput() EventBusPatchOutput {
	return o
}

func (o EventBusPatchOutput) ToEventBusPatchOutputWithContext(ctx context.Context) EventBusPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventBusPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventBusPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventBusPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventBusPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *EventBusPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o EventBusPatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *EventBusPatch) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o EventBusPatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *EventBusPatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type EventBusPatchArrayOutput struct{ *pulumi.OutputState }

func (EventBusPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventBusPatch)(nil)).Elem()
}

func (o EventBusPatchArrayOutput) ToEventBusPatchArrayOutput() EventBusPatchArrayOutput {
	return o
}

func (o EventBusPatchArrayOutput) ToEventBusPatchArrayOutputWithContext(ctx context.Context) EventBusPatchArrayOutput {
	return o
}

func (o EventBusPatchArrayOutput) Index(i pulumi.IntInput) EventBusPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventBusPatch {
		return vs[0].([]*EventBusPatch)[vs[1].(int)]
	}).(EventBusPatchOutput)
}

type EventBusPatchMapOutput struct{ *pulumi.OutputState }

func (EventBusPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventBusPatch)(nil)).Elem()
}

func (o EventBusPatchMapOutput) ToEventBusPatchMapOutput() EventBusPatchMapOutput {
	return o
}

func (o EventBusPatchMapOutput) ToEventBusPatchMapOutputWithContext(ctx context.Context) EventBusPatchMapOutput {
	return o
}

func (o EventBusPatchMapOutput) MapIndex(k pulumi.StringInput) EventBusPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventBusPatch {
		return vs[0].(map[string]*EventBusPatch)[vs[1].(string)]
	}).(EventBusPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusPatchInput)(nil)).Elem(), &EventBusPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusPatchArrayInput)(nil)).Elem(), EventBusPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusPatchMapInput)(nil)).Elem(), EventBusPatchMap{})
	pulumi.RegisterOutputType(EventBusPatchOutput{})
	pulumi.RegisterOutputType(EventBusPatchArrayOutput{})
	pulumi.RegisterOutputType(EventBusPatchMapOutput{})
}
