// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type EventSourcePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     pulumi.MapOutput                `pulumi:"spec"`
	Status   pulumi.MapOutput                `pulumi:"status"`
}

// NewEventSourcePatch registers a new resource with the given unique name, arguments, and options.
func NewEventSourcePatch(ctx *pulumi.Context,
	name string, args *EventSourcePatchArgs, opts ...pulumi.ResourceOption) (*EventSourcePatch, error) {
	if args == nil {
		args = &EventSourcePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("argoproj.io/v1alpha1")
	args.Kind = pulumi.StringPtr("EventSource")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EventSourcePatch
	err := ctx.RegisterResource("kubernetes:argoproj.io/v1alpha1:EventSourcePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourcePatch gets an existing EventSourcePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourcePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventSourcePatchState, opts ...pulumi.ResourceOption) (*EventSourcePatch, error) {
	var resource EventSourcePatch
	err := ctx.ReadResource("kubernetes:argoproj.io/v1alpha1:EventSourcePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventSourcePatch resources.
type eventSourcePatchState struct {
}

type EventSourcePatchState struct {
}

func (EventSourcePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourcePatchState)(nil)).Elem()
}

type eventSourcePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
}

// The set of arguments for constructing a EventSourcePatch resource.
type EventSourcePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     pulumi.MapInput
}

func (EventSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventSourcePatchArgs)(nil)).Elem()
}

type EventSourcePatchInput interface {
	pulumi.Input

	ToEventSourcePatchOutput() EventSourcePatchOutput
	ToEventSourcePatchOutputWithContext(ctx context.Context) EventSourcePatchOutput
}

func (*EventSourcePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourcePatch)(nil)).Elem()
}

func (i *EventSourcePatch) ToEventSourcePatchOutput() EventSourcePatchOutput {
	return i.ToEventSourcePatchOutputWithContext(context.Background())
}

func (i *EventSourcePatch) ToEventSourcePatchOutputWithContext(ctx context.Context) EventSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchOutput)
}

// EventSourcePatchArrayInput is an input type that accepts EventSourcePatchArray and EventSourcePatchArrayOutput values.
// You can construct a concrete instance of `EventSourcePatchArrayInput` via:
//
//	EventSourcePatchArray{ EventSourcePatchArgs{...} }
type EventSourcePatchArrayInput interface {
	pulumi.Input

	ToEventSourcePatchArrayOutput() EventSourcePatchArrayOutput
	ToEventSourcePatchArrayOutputWithContext(context.Context) EventSourcePatchArrayOutput
}

type EventSourcePatchArray []EventSourcePatchInput

func (EventSourcePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourcePatch)(nil)).Elem()
}

func (i EventSourcePatchArray) ToEventSourcePatchArrayOutput() EventSourcePatchArrayOutput {
	return i.ToEventSourcePatchArrayOutputWithContext(context.Background())
}

func (i EventSourcePatchArray) ToEventSourcePatchArrayOutputWithContext(ctx context.Context) EventSourcePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchArrayOutput)
}

// EventSourcePatchMapInput is an input type that accepts EventSourcePatchMap and EventSourcePatchMapOutput values.
// You can construct a concrete instance of `EventSourcePatchMapInput` via:
//
//	EventSourcePatchMap{ "key": EventSourcePatchArgs{...} }
type EventSourcePatchMapInput interface {
	pulumi.Input

	ToEventSourcePatchMapOutput() EventSourcePatchMapOutput
	ToEventSourcePatchMapOutputWithContext(context.Context) EventSourcePatchMapOutput
}

type EventSourcePatchMap map[string]EventSourcePatchInput

func (EventSourcePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourcePatch)(nil)).Elem()
}

func (i EventSourcePatchMap) ToEventSourcePatchMapOutput() EventSourcePatchMapOutput {
	return i.ToEventSourcePatchMapOutputWithContext(context.Background())
}

func (i EventSourcePatchMap) ToEventSourcePatchMapOutputWithContext(ctx context.Context) EventSourcePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchMapOutput)
}

type EventSourcePatchOutput struct{ *pulumi.OutputState }

func (EventSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventSourcePatch)(nil)).Elem()
}

func (o EventSourcePatchOutput) ToEventSourcePatchOutput() EventSourcePatchOutput {
	return o
}

func (o EventSourcePatchOutput) ToEventSourcePatchOutputWithContext(ctx context.Context) EventSourcePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventSourcePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourcePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventSourcePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventSourcePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *EventSourcePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o EventSourcePatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v *EventSourcePatch) pulumi.MapOutput { return v.Spec }).(pulumi.MapOutput)
}

func (o EventSourcePatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *EventSourcePatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type EventSourcePatchArrayOutput struct{ *pulumi.OutputState }

func (EventSourcePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventSourcePatch)(nil)).Elem()
}

func (o EventSourcePatchArrayOutput) ToEventSourcePatchArrayOutput() EventSourcePatchArrayOutput {
	return o
}

func (o EventSourcePatchArrayOutput) ToEventSourcePatchArrayOutputWithContext(ctx context.Context) EventSourcePatchArrayOutput {
	return o
}

func (o EventSourcePatchArrayOutput) Index(i pulumi.IntInput) EventSourcePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventSourcePatch {
		return vs[0].([]*EventSourcePatch)[vs[1].(int)]
	}).(EventSourcePatchOutput)
}

type EventSourcePatchMapOutput struct{ *pulumi.OutputState }

func (EventSourcePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventSourcePatch)(nil)).Elem()
}

func (o EventSourcePatchMapOutput) ToEventSourcePatchMapOutput() EventSourcePatchMapOutput {
	return o
}

func (o EventSourcePatchMapOutput) ToEventSourcePatchMapOutputWithContext(ctx context.Context) EventSourcePatchMapOutput {
	return o
}

func (o EventSourcePatchMapOutput) MapIndex(k pulumi.StringInput) EventSourcePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventSourcePatch {
		return vs[0].(map[string]*EventSourcePatch)[vs[1].(string)]
	}).(EventSourcePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePatchInput)(nil)).Elem(), &EventSourcePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePatchArrayInput)(nil)).Elem(), EventSourcePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePatchMapInput)(nil)).Elem(), EventSourcePatchMap{})
	pulumi.RegisterOutputType(EventSourcePatchOutput{})
	pulumi.RegisterOutputType(EventSourcePatchArrayOutput{})
	pulumi.RegisterOutputType(EventSourcePatchMapOutput{})
}
