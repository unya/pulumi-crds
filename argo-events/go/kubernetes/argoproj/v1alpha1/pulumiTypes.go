// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type EventBusType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
	Status   map[string]interface{} `pulumi:"status"`
}

// EventBusTypeInput is an input type that accepts EventBusTypeArgs and EventBusTypeOutput values.
// You can construct a concrete instance of `EventBusTypeInput` via:
//
//	EventBusTypeArgs{...}
type EventBusTypeInput interface {
	pulumi.Input

	ToEventBusTypeOutput() EventBusTypeOutput
	ToEventBusTypeOutputWithContext(context.Context) EventBusTypeOutput
}

type EventBusTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput           `pulumi:"spec"`
	Status   pulumi.MapInput           `pulumi:"status"`
}

func (EventBusTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusType)(nil)).Elem()
}

func (i EventBusTypeArgs) ToEventBusTypeOutput() EventBusTypeOutput {
	return i.ToEventBusTypeOutputWithContext(context.Background())
}

func (i EventBusTypeArgs) ToEventBusTypeOutputWithContext(ctx context.Context) EventBusTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusTypeOutput)
}

// EventBusTypeArrayInput is an input type that accepts EventBusTypeArray and EventBusTypeArrayOutput values.
// You can construct a concrete instance of `EventBusTypeArrayInput` via:
//
//	EventBusTypeArray{ EventBusTypeArgs{...} }
type EventBusTypeArrayInput interface {
	pulumi.Input

	ToEventBusTypeArrayOutput() EventBusTypeArrayOutput
	ToEventBusTypeArrayOutputWithContext(context.Context) EventBusTypeArrayOutput
}

type EventBusTypeArray []EventBusTypeInput

func (EventBusTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventBusType)(nil)).Elem()
}

func (i EventBusTypeArray) ToEventBusTypeArrayOutput() EventBusTypeArrayOutput {
	return i.ToEventBusTypeArrayOutputWithContext(context.Background())
}

func (i EventBusTypeArray) ToEventBusTypeArrayOutputWithContext(ctx context.Context) EventBusTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusTypeArrayOutput)
}

type EventBusTypeOutput struct{ *pulumi.OutputState }

func (EventBusTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusType)(nil)).Elem()
}

func (o EventBusTypeOutput) ToEventBusTypeOutput() EventBusTypeOutput {
	return o
}

func (o EventBusTypeOutput) ToEventBusTypeOutputWithContext(ctx context.Context) EventBusTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventBusTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventBusType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventBusType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventBusTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v EventBusType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o EventBusTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v EventBusType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o EventBusTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v EventBusType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type EventBusTypeArrayOutput struct{ *pulumi.OutputState }

func (EventBusTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventBusType)(nil)).Elem()
}

func (o EventBusTypeArrayOutput) ToEventBusTypeArrayOutput() EventBusTypeArrayOutput {
	return o
}

func (o EventBusTypeArrayOutput) ToEventBusTypeArrayOutputWithContext(ctx context.Context) EventBusTypeArrayOutput {
	return o
}

func (o EventBusTypeArrayOutput) Index(i pulumi.IntInput) EventBusTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventBusType {
		return vs[0].([]EventBusType)[vs[1].(int)]
	}).(EventBusTypeOutput)
}

// EventBusList is a list of EventBus
type EventBusListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EventBusType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// EventBusListTypeInput is an input type that accepts EventBusListTypeArgs and EventBusListTypeOutput values.
// You can construct a concrete instance of `EventBusListTypeInput` via:
//
//	EventBusListTypeArgs{...}
type EventBusListTypeInput interface {
	pulumi.Input

	ToEventBusListTypeOutput() EventBusListTypeOutput
	ToEventBusListTypeOutputWithContext(context.Context) EventBusListTypeOutput
}

// EventBusList is a list of EventBus
type EventBusListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EventBusTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (EventBusListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusListType)(nil)).Elem()
}

func (i EventBusListTypeArgs) ToEventBusListTypeOutput() EventBusListTypeOutput {
	return i.ToEventBusListTypeOutputWithContext(context.Background())
}

func (i EventBusListTypeArgs) ToEventBusListTypeOutputWithContext(ctx context.Context) EventBusListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusListTypeOutput)
}

// EventBusList is a list of EventBus
type EventBusListTypeOutput struct{ *pulumi.OutputState }

func (EventBusListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusListType)(nil)).Elem()
}

func (o EventBusListTypeOutput) ToEventBusListTypeOutput() EventBusListTypeOutput {
	return o
}

func (o EventBusListTypeOutput) ToEventBusListTypeOutputWithContext(ctx context.Context) EventBusListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventBusListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventBusListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of eventbus. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EventBusListTypeOutput) Items() EventBusTypeArrayOutput {
	return o.ApplyT(func(v EventBusListType) []EventBusType { return v.Items }).(EventBusTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventBusListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v EventBusListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type EventBusPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
	Status   map[string]interface{}  `pulumi:"status"`
}

// EventBusPatchTypeInput is an input type that accepts EventBusPatchTypeArgs and EventBusPatchTypeOutput values.
// You can construct a concrete instance of `EventBusPatchTypeInput` via:
//
//	EventBusPatchTypeArgs{...}
type EventBusPatchTypeInput interface {
	pulumi.Input

	ToEventBusPatchTypeOutput() EventBusPatchTypeOutput
	ToEventBusPatchTypeOutputWithContext(context.Context) EventBusPatchTypeOutput
}

type EventBusPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput                `pulumi:"spec"`
	Status   pulumi.MapInput                `pulumi:"status"`
}

func (EventBusPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusPatchType)(nil)).Elem()
}

func (i EventBusPatchTypeArgs) ToEventBusPatchTypeOutput() EventBusPatchTypeOutput {
	return i.ToEventBusPatchTypeOutputWithContext(context.Background())
}

func (i EventBusPatchTypeArgs) ToEventBusPatchTypeOutputWithContext(ctx context.Context) EventBusPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventBusPatchTypeOutput)
}

type EventBusPatchTypeOutput struct{ *pulumi.OutputState }

func (EventBusPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventBusPatchType)(nil)).Elem()
}

func (o EventBusPatchTypeOutput) ToEventBusPatchTypeOutput() EventBusPatchTypeOutput {
	return o
}

func (o EventBusPatchTypeOutput) ToEventBusPatchTypeOutputWithContext(ctx context.Context) EventBusPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventBusPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventBusPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventBusPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventBusPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventBusPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v EventBusPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o EventBusPatchTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v EventBusPatchType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o EventBusPatchTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v EventBusPatchType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type EventSourceType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
	Status   map[string]interface{} `pulumi:"status"`
}

// EventSourceTypeInput is an input type that accepts EventSourceTypeArgs and EventSourceTypeOutput values.
// You can construct a concrete instance of `EventSourceTypeInput` via:
//
//	EventSourceTypeArgs{...}
type EventSourceTypeInput interface {
	pulumi.Input

	ToEventSourceTypeOutput() EventSourceTypeOutput
	ToEventSourceTypeOutputWithContext(context.Context) EventSourceTypeOutput
}

type EventSourceTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput           `pulumi:"spec"`
	Status   pulumi.MapInput           `pulumi:"status"`
}

func (EventSourceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceType)(nil)).Elem()
}

func (i EventSourceTypeArgs) ToEventSourceTypeOutput() EventSourceTypeOutput {
	return i.ToEventSourceTypeOutputWithContext(context.Background())
}

func (i EventSourceTypeArgs) ToEventSourceTypeOutputWithContext(ctx context.Context) EventSourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceTypeOutput)
}

// EventSourceTypeArrayInput is an input type that accepts EventSourceTypeArray and EventSourceTypeArrayOutput values.
// You can construct a concrete instance of `EventSourceTypeArrayInput` via:
//
//	EventSourceTypeArray{ EventSourceTypeArgs{...} }
type EventSourceTypeArrayInput interface {
	pulumi.Input

	ToEventSourceTypeArrayOutput() EventSourceTypeArrayOutput
	ToEventSourceTypeArrayOutputWithContext(context.Context) EventSourceTypeArrayOutput
}

type EventSourceTypeArray []EventSourceTypeInput

func (EventSourceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceType)(nil)).Elem()
}

func (i EventSourceTypeArray) ToEventSourceTypeArrayOutput() EventSourceTypeArrayOutput {
	return i.ToEventSourceTypeArrayOutputWithContext(context.Background())
}

func (i EventSourceTypeArray) ToEventSourceTypeArrayOutputWithContext(ctx context.Context) EventSourceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceTypeArrayOutput)
}

type EventSourceTypeOutput struct{ *pulumi.OutputState }

func (EventSourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceType)(nil)).Elem()
}

func (o EventSourceTypeOutput) ToEventSourceTypeOutput() EventSourceTypeOutput {
	return o
}

func (o EventSourceTypeOutput) ToEventSourceTypeOutputWithContext(ctx context.Context) EventSourceTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventSourceTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourceTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventSourceTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v EventSourceType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o EventSourceTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v EventSourceType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o EventSourceTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v EventSourceType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type EventSourceTypeArrayOutput struct{ *pulumi.OutputState }

func (EventSourceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventSourceType)(nil)).Elem()
}

func (o EventSourceTypeArrayOutput) ToEventSourceTypeArrayOutput() EventSourceTypeArrayOutput {
	return o
}

func (o EventSourceTypeArrayOutput) ToEventSourceTypeArrayOutputWithContext(ctx context.Context) EventSourceTypeArrayOutput {
	return o
}

func (o EventSourceTypeArrayOutput) Index(i pulumi.IntInput) EventSourceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventSourceType {
		return vs[0].([]EventSourceType)[vs[1].(int)]
	}).(EventSourceTypeOutput)
}

// EventSourceList is a list of EventSource
type EventSourceListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []EventSourceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// EventSourceListTypeInput is an input type that accepts EventSourceListTypeArgs and EventSourceListTypeOutput values.
// You can construct a concrete instance of `EventSourceListTypeInput` via:
//
//	EventSourceListTypeArgs{...}
type EventSourceListTypeInput interface {
	pulumi.Input

	ToEventSourceListTypeOutput() EventSourceListTypeOutput
	ToEventSourceListTypeOutputWithContext(context.Context) EventSourceListTypeOutput
}

// EventSourceList is a list of EventSource
type EventSourceListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items EventSourceTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (EventSourceListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceListType)(nil)).Elem()
}

func (i EventSourceListTypeArgs) ToEventSourceListTypeOutput() EventSourceListTypeOutput {
	return i.ToEventSourceListTypeOutputWithContext(context.Background())
}

func (i EventSourceListTypeArgs) ToEventSourceListTypeOutputWithContext(ctx context.Context) EventSourceListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourceListTypeOutput)
}

// EventSourceList is a list of EventSource
type EventSourceListTypeOutput struct{ *pulumi.OutputState }

func (EventSourceListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourceListType)(nil)).Elem()
}

func (o EventSourceListTypeOutput) ToEventSourceListTypeOutput() EventSourceListTypeOutput {
	return o
}

func (o EventSourceListTypeOutput) ToEventSourceListTypeOutputWithContext(ctx context.Context) EventSourceListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventSourceListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of eventsources. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o EventSourceListTypeOutput) Items() EventSourceTypeArrayOutput {
	return o.ApplyT(func(v EventSourceListType) []EventSourceType { return v.Items }).(EventSourceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourceListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourceListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourceListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v EventSourceListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type EventSourcePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
	Status   map[string]interface{}  `pulumi:"status"`
}

// EventSourcePatchTypeInput is an input type that accepts EventSourcePatchTypeArgs and EventSourcePatchTypeOutput values.
// You can construct a concrete instance of `EventSourcePatchTypeInput` via:
//
//	EventSourcePatchTypeArgs{...}
type EventSourcePatchTypeInput interface {
	pulumi.Input

	ToEventSourcePatchTypeOutput() EventSourcePatchTypeOutput
	ToEventSourcePatchTypeOutputWithContext(context.Context) EventSourcePatchTypeOutput
}

type EventSourcePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput                `pulumi:"spec"`
	Status   pulumi.MapInput                `pulumi:"status"`
}

func (EventSourcePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourcePatchType)(nil)).Elem()
}

func (i EventSourcePatchTypeArgs) ToEventSourcePatchTypeOutput() EventSourcePatchTypeOutput {
	return i.ToEventSourcePatchTypeOutputWithContext(context.Background())
}

func (i EventSourcePatchTypeArgs) ToEventSourcePatchTypeOutputWithContext(ctx context.Context) EventSourcePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventSourcePatchTypeOutput)
}

type EventSourcePatchTypeOutput struct{ *pulumi.OutputState }

func (EventSourcePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventSourcePatchType)(nil)).Elem()
}

func (o EventSourcePatchTypeOutput) ToEventSourcePatchTypeOutput() EventSourcePatchTypeOutput {
	return o
}

func (o EventSourcePatchTypeOutput) ToEventSourcePatchTypeOutputWithContext(ctx context.Context) EventSourcePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o EventSourcePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourcePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o EventSourcePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventSourcePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o EventSourcePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v EventSourcePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o EventSourcePatchTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v EventSourcePatchType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o EventSourcePatchTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v EventSourcePatchType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type SensorType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     map[string]interface{} `pulumi:"spec"`
	Status   map[string]interface{} `pulumi:"status"`
}

// SensorTypeInput is an input type that accepts SensorTypeArgs and SensorTypeOutput values.
// You can construct a concrete instance of `SensorTypeInput` via:
//
//	SensorTypeArgs{...}
type SensorTypeInput interface {
	pulumi.Input

	ToSensorTypeOutput() SensorTypeOutput
	ToSensorTypeOutputWithContext(context.Context) SensorTypeOutput
}

type SensorTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput           `pulumi:"spec"`
	Status   pulumi.MapInput           `pulumi:"status"`
}

func (SensorTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorType)(nil)).Elem()
}

func (i SensorTypeArgs) ToSensorTypeOutput() SensorTypeOutput {
	return i.ToSensorTypeOutputWithContext(context.Background())
}

func (i SensorTypeArgs) ToSensorTypeOutputWithContext(ctx context.Context) SensorTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorTypeOutput)
}

// SensorTypeArrayInput is an input type that accepts SensorTypeArray and SensorTypeArrayOutput values.
// You can construct a concrete instance of `SensorTypeArrayInput` via:
//
//	SensorTypeArray{ SensorTypeArgs{...} }
type SensorTypeArrayInput interface {
	pulumi.Input

	ToSensorTypeArrayOutput() SensorTypeArrayOutput
	ToSensorTypeArrayOutputWithContext(context.Context) SensorTypeArrayOutput
}

type SensorTypeArray []SensorTypeInput

func (SensorTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorType)(nil)).Elem()
}

func (i SensorTypeArray) ToSensorTypeArrayOutput() SensorTypeArrayOutput {
	return i.ToSensorTypeArrayOutputWithContext(context.Background())
}

func (i SensorTypeArray) ToSensorTypeArrayOutputWithContext(ctx context.Context) SensorTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorTypeArrayOutput)
}

type SensorTypeOutput struct{ *pulumi.OutputState }

func (SensorTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorType)(nil)).Elem()
}

func (o SensorTypeOutput) ToSensorTypeOutput() SensorTypeOutput {
	return o
}

func (o SensorTypeOutput) ToSensorTypeOutputWithContext(ctx context.Context) SensorTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SensorTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SensorTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v SensorType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o SensorTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v SensorType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o SensorTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v SensorType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type SensorTypeArrayOutput struct{ *pulumi.OutputState }

func (SensorTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SensorType)(nil)).Elem()
}

func (o SensorTypeArrayOutput) ToSensorTypeArrayOutput() SensorTypeArrayOutput {
	return o
}

func (o SensorTypeArrayOutput) ToSensorTypeArrayOutputWithContext(ctx context.Context) SensorTypeArrayOutput {
	return o
}

func (o SensorTypeArrayOutput) Index(i pulumi.IntInput) SensorTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SensorType {
		return vs[0].([]SensorType)[vs[1].(int)]
	}).(SensorTypeOutput)
}

// SensorList is a list of Sensor
type SensorListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SensorType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// SensorListTypeInput is an input type that accepts SensorListTypeArgs and SensorListTypeOutput values.
// You can construct a concrete instance of `SensorListTypeInput` via:
//
//	SensorListTypeArgs{...}
type SensorListTypeInput interface {
	pulumi.Input

	ToSensorListTypeOutput() SensorListTypeOutput
	ToSensorListTypeOutputWithContext(context.Context) SensorListTypeOutput
}

// SensorList is a list of Sensor
type SensorListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SensorTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (SensorListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorListType)(nil)).Elem()
}

func (i SensorListTypeArgs) ToSensorListTypeOutput() SensorListTypeOutput {
	return i.ToSensorListTypeOutputWithContext(context.Background())
}

func (i SensorListTypeArgs) ToSensorListTypeOutputWithContext(ctx context.Context) SensorListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorListTypeOutput)
}

// SensorList is a list of Sensor
type SensorListTypeOutput struct{ *pulumi.OutputState }

func (SensorListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorListType)(nil)).Elem()
}

func (o SensorListTypeOutput) ToSensorListTypeOutput() SensorListTypeOutput {
	return o
}

func (o SensorListTypeOutput) ToSensorListTypeOutputWithContext(ctx context.Context) SensorListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SensorListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of sensors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SensorListTypeOutput) Items() SensorTypeArrayOutput {
	return o.ApplyT(func(v SensorListType) []SensorType { return v.Items }).(SensorTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v SensorListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type SensorPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     map[string]interface{}  `pulumi:"spec"`
	Status   map[string]interface{}  `pulumi:"status"`
}

// SensorPatchTypeInput is an input type that accepts SensorPatchTypeArgs and SensorPatchTypeOutput values.
// You can construct a concrete instance of `SensorPatchTypeInput` via:
//
//	SensorPatchTypeArgs{...}
type SensorPatchTypeInput interface {
	pulumi.Input

	ToSensorPatchTypeOutput() SensorPatchTypeOutput
	ToSensorPatchTypeOutputWithContext(context.Context) SensorPatchTypeOutput
}

type SensorPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     pulumi.MapInput                `pulumi:"spec"`
	Status   pulumi.MapInput                `pulumi:"status"`
}

func (SensorPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorPatchType)(nil)).Elem()
}

func (i SensorPatchTypeArgs) ToSensorPatchTypeOutput() SensorPatchTypeOutput {
	return i.ToSensorPatchTypeOutputWithContext(context.Background())
}

func (i SensorPatchTypeArgs) ToSensorPatchTypeOutputWithContext(ctx context.Context) SensorPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SensorPatchTypeOutput)
}

type SensorPatchTypeOutput struct{ *pulumi.OutputState }

func (SensorPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SensorPatchType)(nil)).Elem()
}

func (o SensorPatchTypeOutput) ToSensorPatchTypeOutput() SensorPatchTypeOutput {
	return o
}

func (o SensorPatchTypeOutput) ToSensorPatchTypeOutputWithContext(ctx context.Context) SensorPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SensorPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SensorPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SensorPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SensorPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v SensorPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SensorPatchTypeOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v SensorPatchType) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o SensorPatchTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v SensorPatchType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusTypeInput)(nil)).Elem(), EventBusTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusTypeArrayInput)(nil)).Elem(), EventBusTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusListTypeInput)(nil)).Elem(), EventBusListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventBusPatchTypeInput)(nil)).Elem(), EventBusPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceTypeInput)(nil)).Elem(), EventSourceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceTypeArrayInput)(nil)).Elem(), EventSourceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourceListTypeInput)(nil)).Elem(), EventSourceListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventSourcePatchTypeInput)(nil)).Elem(), EventSourcePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorTypeInput)(nil)).Elem(), SensorTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorTypeArrayInput)(nil)).Elem(), SensorTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorListTypeInput)(nil)).Elem(), SensorListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SensorPatchTypeInput)(nil)).Elem(), SensorPatchTypeArgs{})
	pulumi.RegisterOutputType(EventBusTypeOutput{})
	pulumi.RegisterOutputType(EventBusTypeArrayOutput{})
	pulumi.RegisterOutputType(EventBusListTypeOutput{})
	pulumi.RegisterOutputType(EventBusPatchTypeOutput{})
	pulumi.RegisterOutputType(EventSourceTypeOutput{})
	pulumi.RegisterOutputType(EventSourceTypeArrayOutput{})
	pulumi.RegisterOutputType(EventSourceListTypeOutput{})
	pulumi.RegisterOutputType(EventSourcePatchTypeOutput{})
	pulumi.RegisterOutputType(SensorTypeOutput{})
	pulumi.RegisterOutputType(SensorTypeArrayOutput{})
	pulumi.RegisterOutputType(SensorListTypeOutput{})
	pulumi.RegisterOutputType(SensorPatchTypeOutput{})
}
