// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ImagePolicySpec   `pulumi:"spec"`
	Status   *ImagePolicyStatus `pulumi:"status"`
}

// ImagePolicyTypeInput is an input type that accepts ImagePolicyTypeArgs and ImagePolicyTypeOutput values.
// You can construct a concrete instance of `ImagePolicyTypeInput` via:
//
//	ImagePolicyTypeArgs{...}
type ImagePolicyTypeInput interface {
	pulumi.Input

	ToImagePolicyTypeOutput() ImagePolicyTypeOutput
	ToImagePolicyTypeOutputWithContext(context.Context) ImagePolicyTypeOutput
}

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     ImagePolicySpecPtrInput   `pulumi:"spec"`
	Status   ImagePolicyStatusPtrInput `pulumi:"status"`
}

func (ImagePolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyType)(nil)).Elem()
}

func (i ImagePolicyTypeArgs) ToImagePolicyTypeOutput() ImagePolicyTypeOutput {
	return i.ToImagePolicyTypeOutputWithContext(context.Background())
}

func (i ImagePolicyTypeArgs) ToImagePolicyTypeOutputWithContext(ctx context.Context) ImagePolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyTypeOutput)
}

// ImagePolicyTypeArrayInput is an input type that accepts ImagePolicyTypeArray and ImagePolicyTypeArrayOutput values.
// You can construct a concrete instance of `ImagePolicyTypeArrayInput` via:
//
//	ImagePolicyTypeArray{ ImagePolicyTypeArgs{...} }
type ImagePolicyTypeArrayInput interface {
	pulumi.Input

	ToImagePolicyTypeArrayOutput() ImagePolicyTypeArrayOutput
	ToImagePolicyTypeArrayOutputWithContext(context.Context) ImagePolicyTypeArrayOutput
}

type ImagePolicyTypeArray []ImagePolicyTypeInput

func (ImagePolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePolicyType)(nil)).Elem()
}

func (i ImagePolicyTypeArray) ToImagePolicyTypeArrayOutput() ImagePolicyTypeArrayOutput {
	return i.ToImagePolicyTypeArrayOutputWithContext(context.Background())
}

func (i ImagePolicyTypeArray) ToImagePolicyTypeArrayOutputWithContext(ctx context.Context) ImagePolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyTypeArrayOutput)
}

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyTypeOutput struct{ *pulumi.OutputState }

func (ImagePolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyType)(nil)).Elem()
}

func (o ImagePolicyTypeOutput) ToImagePolicyTypeOutput() ImagePolicyTypeOutput {
	return o
}

func (o ImagePolicyTypeOutput) ToImagePolicyTypeOutputWithContext(ctx context.Context) ImagePolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImagePolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImagePolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ImagePolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ImagePolicyTypeOutput) Spec() ImagePolicySpecPtrOutput {
	return o.ApplyT(func(v ImagePolicyType) *ImagePolicySpec { return v.Spec }).(ImagePolicySpecPtrOutput)
}

func (o ImagePolicyTypeOutput) Status() ImagePolicyStatusPtrOutput {
	return o.ApplyT(func(v ImagePolicyType) *ImagePolicyStatus { return v.Status }).(ImagePolicyStatusPtrOutput)
}

type ImagePolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (ImagePolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePolicyType)(nil)).Elem()
}

func (o ImagePolicyTypeArrayOutput) ToImagePolicyTypeArrayOutput() ImagePolicyTypeArrayOutput {
	return o
}

func (o ImagePolicyTypeArrayOutput) ToImagePolicyTypeArrayOutputWithContext(ctx context.Context) ImagePolicyTypeArrayOutput {
	return o
}

func (o ImagePolicyTypeArrayOutput) Index(i pulumi.IntInput) ImagePolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagePolicyType {
		return vs[0].([]ImagePolicyType)[vs[1].(int)]
	}).(ImagePolicyTypeOutput)
}

// ImagePolicyList is a list of ImagePolicy
type ImagePolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ImagePolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ImagePolicyListTypeInput is an input type that accepts ImagePolicyListTypeArgs and ImagePolicyListTypeOutput values.
// You can construct a concrete instance of `ImagePolicyListTypeInput` via:
//
//	ImagePolicyListTypeArgs{...}
type ImagePolicyListTypeInput interface {
	pulumi.Input

	ToImagePolicyListTypeOutput() ImagePolicyListTypeOutput
	ToImagePolicyListTypeOutputWithContext(context.Context) ImagePolicyListTypeOutput
}

// ImagePolicyList is a list of ImagePolicy
type ImagePolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImagePolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ImagePolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyListType)(nil)).Elem()
}

func (i ImagePolicyListTypeArgs) ToImagePolicyListTypeOutput() ImagePolicyListTypeOutput {
	return i.ToImagePolicyListTypeOutputWithContext(context.Background())
}

func (i ImagePolicyListTypeArgs) ToImagePolicyListTypeOutputWithContext(ctx context.Context) ImagePolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyListTypeOutput)
}

// ImagePolicyList is a list of ImagePolicy
type ImagePolicyListTypeOutput struct{ *pulumi.OutputState }

func (ImagePolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyListType)(nil)).Elem()
}

func (o ImagePolicyListTypeOutput) ToImagePolicyListTypeOutput() ImagePolicyListTypeOutput {
	return o
}

func (o ImagePolicyListTypeOutput) ToImagePolicyListTypeOutputWithContext(ctx context.Context) ImagePolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImagePolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ImagePolicyListTypeOutput) Items() ImagePolicyTypeArrayOutput {
	return o.ApplyT(func(v ImagePolicyListType) []ImagePolicyType { return v.Items }).(ImagePolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ImagePolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ImagePolicySpecPatch   `pulumi:"spec"`
	Status   *ImagePolicyStatusPatch `pulumi:"status"`
}

// ImagePolicyPatchTypeInput is an input type that accepts ImagePolicyPatchTypeArgs and ImagePolicyPatchTypeOutput values.
// You can construct a concrete instance of `ImagePolicyPatchTypeInput` via:
//
//	ImagePolicyPatchTypeArgs{...}
type ImagePolicyPatchTypeInput interface {
	pulumi.Input

	ToImagePolicyPatchTypeOutput() ImagePolicyPatchTypeOutput
	ToImagePolicyPatchTypeOutputWithContext(context.Context) ImagePolicyPatchTypeOutput
}

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     ImagePolicySpecPatchPtrInput   `pulumi:"spec"`
	Status   ImagePolicyStatusPatchPtrInput `pulumi:"status"`
}

func (ImagePolicyPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyPatchType)(nil)).Elem()
}

func (i ImagePolicyPatchTypeArgs) ToImagePolicyPatchTypeOutput() ImagePolicyPatchTypeOutput {
	return i.ToImagePolicyPatchTypeOutputWithContext(context.Background())
}

func (i ImagePolicyPatchTypeArgs) ToImagePolicyPatchTypeOutputWithContext(ctx context.Context) ImagePolicyPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyPatchTypeOutput)
}

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyPatchTypeOutput struct{ *pulumi.OutputState }

func (ImagePolicyPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyPatchType)(nil)).Elem()
}

func (o ImagePolicyPatchTypeOutput) ToImagePolicyPatchTypeOutput() ImagePolicyPatchTypeOutput {
	return o
}

func (o ImagePolicyPatchTypeOutput) ToImagePolicyPatchTypeOutputWithContext(ctx context.Context) ImagePolicyPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImagePolicyPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImagePolicyPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicyPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ImagePolicyPatchTypeOutput) Spec() ImagePolicySpecPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicyPatchType) *ImagePolicySpecPatch { return v.Spec }).(ImagePolicySpecPatchPtrOutput)
}

func (o ImagePolicyPatchTypeOutput) Status() ImagePolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicyPatchType) *ImagePolicyStatusPatch { return v.Status }).(ImagePolicyStatusPatchPtrOutput)
}

// ImagePolicySpec defines the parameters for calculating the
// ImagePolicy.
type ImagePolicySpec struct {
	// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
	//
	// Never: The digest field will always be set to the empty string.
	//
	// IfNotPresent: The digest field will be set to the digest of the elected
	// latest image if the field is empty and the image did not change.
	//
	// Always: The digest field will always be set to the digest of the elected
	// latest image.
	//
	// Default: Never.
	DigestReflectionPolicy *string                            `pulumi:"digestReflectionPolicy"`
	FilterTags             *ImagePolicySpecFilterTags         `pulumi:"filterTags"`
	ImageRepositoryRef     *ImagePolicySpecImageRepositoryRef `pulumi:"imageRepositoryRef"`
	// Interval is the length of time to wait between
	// refreshing the digest of the latest tag when the
	// reflection policy is set to "Always".
	//
	// Defaults to 10m.
	Interval *string                `pulumi:"interval"`
	Policy   *ImagePolicySpecPolicy `pulumi:"policy"`
}

// ImagePolicySpecInput is an input type that accepts ImagePolicySpecArgs and ImagePolicySpecOutput values.
// You can construct a concrete instance of `ImagePolicySpecInput` via:
//
//	ImagePolicySpecArgs{...}
type ImagePolicySpecInput interface {
	pulumi.Input

	ToImagePolicySpecOutput() ImagePolicySpecOutput
	ToImagePolicySpecOutputWithContext(context.Context) ImagePolicySpecOutput
}

// ImagePolicySpec defines the parameters for calculating the
// ImagePolicy.
type ImagePolicySpecArgs struct {
	// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
	//
	// Never: The digest field will always be set to the empty string.
	//
	// IfNotPresent: The digest field will be set to the digest of the elected
	// latest image if the field is empty and the image did not change.
	//
	// Always: The digest field will always be set to the digest of the elected
	// latest image.
	//
	// Default: Never.
	DigestReflectionPolicy pulumi.StringPtrInput                     `pulumi:"digestReflectionPolicy"`
	FilterTags             ImagePolicySpecFilterTagsPtrInput         `pulumi:"filterTags"`
	ImageRepositoryRef     ImagePolicySpecImageRepositoryRefPtrInput `pulumi:"imageRepositoryRef"`
	// Interval is the length of time to wait between
	// refreshing the digest of the latest tag when the
	// reflection policy is set to "Always".
	//
	// Defaults to 10m.
	Interval pulumi.StringPtrInput         `pulumi:"interval"`
	Policy   ImagePolicySpecPolicyPtrInput `pulumi:"policy"`
}

func (ImagePolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpec)(nil)).Elem()
}

func (i ImagePolicySpecArgs) ToImagePolicySpecOutput() ImagePolicySpecOutput {
	return i.ToImagePolicySpecOutputWithContext(context.Background())
}

func (i ImagePolicySpecArgs) ToImagePolicySpecOutputWithContext(ctx context.Context) ImagePolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecOutput)
}

func (i ImagePolicySpecArgs) ToImagePolicySpecPtrOutput() ImagePolicySpecPtrOutput {
	return i.ToImagePolicySpecPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecArgs) ToImagePolicySpecPtrOutputWithContext(ctx context.Context) ImagePolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecOutput).ToImagePolicySpecPtrOutputWithContext(ctx)
}

// ImagePolicySpecPtrInput is an input type that accepts ImagePolicySpecArgs, ImagePolicySpecPtr and ImagePolicySpecPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPtrInput` via:
//
//	        ImagePolicySpecArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPtrOutput() ImagePolicySpecPtrOutput
	ToImagePolicySpecPtrOutputWithContext(context.Context) ImagePolicySpecPtrOutput
}

type imagePolicySpecPtrType ImagePolicySpecArgs

func ImagePolicySpecPtr(v *ImagePolicySpecArgs) ImagePolicySpecPtrInput {
	return (*imagePolicySpecPtrType)(v)
}

func (*imagePolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpec)(nil)).Elem()
}

func (i *imagePolicySpecPtrType) ToImagePolicySpecPtrOutput() ImagePolicySpecPtrOutput {
	return i.ToImagePolicySpecPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPtrType) ToImagePolicySpecPtrOutputWithContext(ctx context.Context) ImagePolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPtrOutput)
}

// ImagePolicySpec defines the parameters for calculating the
// ImagePolicy.
type ImagePolicySpecOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpec)(nil)).Elem()
}

func (o ImagePolicySpecOutput) ToImagePolicySpecOutput() ImagePolicySpecOutput {
	return o
}

func (o ImagePolicySpecOutput) ToImagePolicySpecOutputWithContext(ctx context.Context) ImagePolicySpecOutput {
	return o
}

func (o ImagePolicySpecOutput) ToImagePolicySpecPtrOutput() ImagePolicySpecPtrOutput {
	return o.ToImagePolicySpecPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecOutput) ToImagePolicySpecPtrOutputWithContext(ctx context.Context) ImagePolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpec) *ImagePolicySpec {
		return &v
	}).(ImagePolicySpecPtrOutput)
}

// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
//
// Never: The digest field will always be set to the empty string.
//
// IfNotPresent: The digest field will be set to the digest of the elected
// latest image if the field is empty and the image did not change.
//
// Always: The digest field will always be set to the digest of the elected
// latest image.
//
// Default: Never.
func (o ImagePolicySpecOutput) DigestReflectionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpec) *string { return v.DigestReflectionPolicy }).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecOutput) FilterTags() ImagePolicySpecFilterTagsPtrOutput {
	return o.ApplyT(func(v ImagePolicySpec) *ImagePolicySpecFilterTags { return v.FilterTags }).(ImagePolicySpecFilterTagsPtrOutput)
}

func (o ImagePolicySpecOutput) ImageRepositoryRef() ImagePolicySpecImageRepositoryRefPtrOutput {
	return o.ApplyT(func(v ImagePolicySpec) *ImagePolicySpecImageRepositoryRef { return v.ImageRepositoryRef }).(ImagePolicySpecImageRepositoryRefPtrOutput)
}

// Interval is the length of time to wait between
// refreshing the digest of the latest tag when the
// reflection policy is set to "Always".
//
// Defaults to 10m.
func (o ImagePolicySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecOutput) Policy() ImagePolicySpecPolicyPtrOutput {
	return o.ApplyT(func(v ImagePolicySpec) *ImagePolicySpecPolicy { return v.Policy }).(ImagePolicySpecPolicyPtrOutput)
}

type ImagePolicySpecPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpec)(nil)).Elem()
}

func (o ImagePolicySpecPtrOutput) ToImagePolicySpecPtrOutput() ImagePolicySpecPtrOutput {
	return o
}

func (o ImagePolicySpecPtrOutput) ToImagePolicySpecPtrOutputWithContext(ctx context.Context) ImagePolicySpecPtrOutput {
	return o
}

func (o ImagePolicySpecPtrOutput) Elem() ImagePolicySpecOutput {
	return o.ApplyT(func(v *ImagePolicySpec) ImagePolicySpec {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpec
		return ret
	}).(ImagePolicySpecOutput)
}

// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
//
// Never: The digest field will always be set to the empty string.
//
// IfNotPresent: The digest field will be set to the digest of the elected
// latest image if the field is empty and the image did not change.
//
// Always: The digest field will always be set to the digest of the elected
// latest image.
//
// Default: Never.
func (o ImagePolicySpecPtrOutput) DigestReflectionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.DigestReflectionPolicy
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecPtrOutput) FilterTags() ImagePolicySpecFilterTagsPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpec) *ImagePolicySpecFilterTags {
		if v == nil {
			return nil
		}
		return v.FilterTags
	}).(ImagePolicySpecFilterTagsPtrOutput)
}

func (o ImagePolicySpecPtrOutput) ImageRepositoryRef() ImagePolicySpecImageRepositoryRefPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpec) *ImagePolicySpecImageRepositoryRef {
		if v == nil {
			return nil
		}
		return v.ImageRepositoryRef
	}).(ImagePolicySpecImageRepositoryRefPtrOutput)
}

// Interval is the length of time to wait between
// refreshing the digest of the latest tag when the
// reflection policy is set to "Always".
//
// Defaults to 10m.
func (o ImagePolicySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecPtrOutput) Policy() ImagePolicySpecPolicyPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpec) *ImagePolicySpecPolicy {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(ImagePolicySpecPolicyPtrOutput)
}

// FilterTags enables filtering for only a subset of tags based on a set of
// rules. If no rules are provided, all the tags from the repository will be
// ordered and compared.
type ImagePolicySpecFilterTags struct {
	// Extract allows a capture group to be extracted from the specified regular
	// expression pattern, useful before tag evaluation.
	Extract *string `pulumi:"extract"`
	// Pattern specifies a regular expression pattern used to filter for image
	// tags.
	Pattern *string `pulumi:"pattern"`
}

// ImagePolicySpecFilterTagsInput is an input type that accepts ImagePolicySpecFilterTagsArgs and ImagePolicySpecFilterTagsOutput values.
// You can construct a concrete instance of `ImagePolicySpecFilterTagsInput` via:
//
//	ImagePolicySpecFilterTagsArgs{...}
type ImagePolicySpecFilterTagsInput interface {
	pulumi.Input

	ToImagePolicySpecFilterTagsOutput() ImagePolicySpecFilterTagsOutput
	ToImagePolicySpecFilterTagsOutputWithContext(context.Context) ImagePolicySpecFilterTagsOutput
}

// FilterTags enables filtering for only a subset of tags based on a set of
// rules. If no rules are provided, all the tags from the repository will be
// ordered and compared.
type ImagePolicySpecFilterTagsArgs struct {
	// Extract allows a capture group to be extracted from the specified regular
	// expression pattern, useful before tag evaluation.
	Extract pulumi.StringPtrInput `pulumi:"extract"`
	// Pattern specifies a regular expression pattern used to filter for image
	// tags.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (ImagePolicySpecFilterTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecFilterTags)(nil)).Elem()
}

func (i ImagePolicySpecFilterTagsArgs) ToImagePolicySpecFilterTagsOutput() ImagePolicySpecFilterTagsOutput {
	return i.ToImagePolicySpecFilterTagsOutputWithContext(context.Background())
}

func (i ImagePolicySpecFilterTagsArgs) ToImagePolicySpecFilterTagsOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecFilterTagsOutput)
}

func (i ImagePolicySpecFilterTagsArgs) ToImagePolicySpecFilterTagsPtrOutput() ImagePolicySpecFilterTagsPtrOutput {
	return i.ToImagePolicySpecFilterTagsPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecFilterTagsArgs) ToImagePolicySpecFilterTagsPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecFilterTagsOutput).ToImagePolicySpecFilterTagsPtrOutputWithContext(ctx)
}

// ImagePolicySpecFilterTagsPtrInput is an input type that accepts ImagePolicySpecFilterTagsArgs, ImagePolicySpecFilterTagsPtr and ImagePolicySpecFilterTagsPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecFilterTagsPtrInput` via:
//
//	        ImagePolicySpecFilterTagsArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecFilterTagsPtrInput interface {
	pulumi.Input

	ToImagePolicySpecFilterTagsPtrOutput() ImagePolicySpecFilterTagsPtrOutput
	ToImagePolicySpecFilterTagsPtrOutputWithContext(context.Context) ImagePolicySpecFilterTagsPtrOutput
}

type imagePolicySpecFilterTagsPtrType ImagePolicySpecFilterTagsArgs

func ImagePolicySpecFilterTagsPtr(v *ImagePolicySpecFilterTagsArgs) ImagePolicySpecFilterTagsPtrInput {
	return (*imagePolicySpecFilterTagsPtrType)(v)
}

func (*imagePolicySpecFilterTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecFilterTags)(nil)).Elem()
}

func (i *imagePolicySpecFilterTagsPtrType) ToImagePolicySpecFilterTagsPtrOutput() ImagePolicySpecFilterTagsPtrOutput {
	return i.ToImagePolicySpecFilterTagsPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecFilterTagsPtrType) ToImagePolicySpecFilterTagsPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecFilterTagsPtrOutput)
}

// FilterTags enables filtering for only a subset of tags based on a set of
// rules. If no rules are provided, all the tags from the repository will be
// ordered and compared.
type ImagePolicySpecFilterTagsOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecFilterTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecFilterTags)(nil)).Elem()
}

func (o ImagePolicySpecFilterTagsOutput) ToImagePolicySpecFilterTagsOutput() ImagePolicySpecFilterTagsOutput {
	return o
}

func (o ImagePolicySpecFilterTagsOutput) ToImagePolicySpecFilterTagsOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsOutput {
	return o
}

func (o ImagePolicySpecFilterTagsOutput) ToImagePolicySpecFilterTagsPtrOutput() ImagePolicySpecFilterTagsPtrOutput {
	return o.ToImagePolicySpecFilterTagsPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecFilterTagsOutput) ToImagePolicySpecFilterTagsPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecFilterTags) *ImagePolicySpecFilterTags {
		return &v
	}).(ImagePolicySpecFilterTagsPtrOutput)
}

// Extract allows a capture group to be extracted from the specified regular
// expression pattern, useful before tag evaluation.
func (o ImagePolicySpecFilterTagsOutput) Extract() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecFilterTags) *string { return v.Extract }).(pulumi.StringPtrOutput)
}

// Pattern specifies a regular expression pattern used to filter for image
// tags.
func (o ImagePolicySpecFilterTagsOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecFilterTags) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecFilterTagsPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecFilterTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecFilterTags)(nil)).Elem()
}

func (o ImagePolicySpecFilterTagsPtrOutput) ToImagePolicySpecFilterTagsPtrOutput() ImagePolicySpecFilterTagsPtrOutput {
	return o
}

func (o ImagePolicySpecFilterTagsPtrOutput) ToImagePolicySpecFilterTagsPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPtrOutput {
	return o
}

func (o ImagePolicySpecFilterTagsPtrOutput) Elem() ImagePolicySpecFilterTagsOutput {
	return o.ApplyT(func(v *ImagePolicySpecFilterTags) ImagePolicySpecFilterTags {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecFilterTags
		return ret
	}).(ImagePolicySpecFilterTagsOutput)
}

// Extract allows a capture group to be extracted from the specified regular
// expression pattern, useful before tag evaluation.
func (o ImagePolicySpecFilterTagsPtrOutput) Extract() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecFilterTags) *string {
		if v == nil {
			return nil
		}
		return v.Extract
	}).(pulumi.StringPtrOutput)
}

// Pattern specifies a regular expression pattern used to filter for image
// tags.
func (o ImagePolicySpecFilterTagsPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecFilterTags) *string {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(pulumi.StringPtrOutput)
}

// FilterTags enables filtering for only a subset of tags based on a set of
// rules. If no rules are provided, all the tags from the repository will be
// ordered and compared.
type ImagePolicySpecFilterTagsPatch struct {
	// Extract allows a capture group to be extracted from the specified regular
	// expression pattern, useful before tag evaluation.
	Extract *string `pulumi:"extract"`
	// Pattern specifies a regular expression pattern used to filter for image
	// tags.
	Pattern *string `pulumi:"pattern"`
}

// ImagePolicySpecFilterTagsPatchInput is an input type that accepts ImagePolicySpecFilterTagsPatchArgs and ImagePolicySpecFilterTagsPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecFilterTagsPatchInput` via:
//
//	ImagePolicySpecFilterTagsPatchArgs{...}
type ImagePolicySpecFilterTagsPatchInput interface {
	pulumi.Input

	ToImagePolicySpecFilterTagsPatchOutput() ImagePolicySpecFilterTagsPatchOutput
	ToImagePolicySpecFilterTagsPatchOutputWithContext(context.Context) ImagePolicySpecFilterTagsPatchOutput
}

// FilterTags enables filtering for only a subset of tags based on a set of
// rules. If no rules are provided, all the tags from the repository will be
// ordered and compared.
type ImagePolicySpecFilterTagsPatchArgs struct {
	// Extract allows a capture group to be extracted from the specified regular
	// expression pattern, useful before tag evaluation.
	Extract pulumi.StringPtrInput `pulumi:"extract"`
	// Pattern specifies a regular expression pattern used to filter for image
	// tags.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (ImagePolicySpecFilterTagsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecFilterTagsPatch)(nil)).Elem()
}

func (i ImagePolicySpecFilterTagsPatchArgs) ToImagePolicySpecFilterTagsPatchOutput() ImagePolicySpecFilterTagsPatchOutput {
	return i.ToImagePolicySpecFilterTagsPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecFilterTagsPatchArgs) ToImagePolicySpecFilterTagsPatchOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecFilterTagsPatchOutput)
}

func (i ImagePolicySpecFilterTagsPatchArgs) ToImagePolicySpecFilterTagsPatchPtrOutput() ImagePolicySpecFilterTagsPatchPtrOutput {
	return i.ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecFilterTagsPatchArgs) ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecFilterTagsPatchOutput).ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecFilterTagsPatchPtrInput is an input type that accepts ImagePolicySpecFilterTagsPatchArgs, ImagePolicySpecFilterTagsPatchPtr and ImagePolicySpecFilterTagsPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecFilterTagsPatchPtrInput` via:
//
//	        ImagePolicySpecFilterTagsPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecFilterTagsPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecFilterTagsPatchPtrOutput() ImagePolicySpecFilterTagsPatchPtrOutput
	ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(context.Context) ImagePolicySpecFilterTagsPatchPtrOutput
}

type imagePolicySpecFilterTagsPatchPtrType ImagePolicySpecFilterTagsPatchArgs

func ImagePolicySpecFilterTagsPatchPtr(v *ImagePolicySpecFilterTagsPatchArgs) ImagePolicySpecFilterTagsPatchPtrInput {
	return (*imagePolicySpecFilterTagsPatchPtrType)(v)
}

func (*imagePolicySpecFilterTagsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecFilterTagsPatch)(nil)).Elem()
}

func (i *imagePolicySpecFilterTagsPatchPtrType) ToImagePolicySpecFilterTagsPatchPtrOutput() ImagePolicySpecFilterTagsPatchPtrOutput {
	return i.ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecFilterTagsPatchPtrType) ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecFilterTagsPatchPtrOutput)
}

// FilterTags enables filtering for only a subset of tags based on a set of
// rules. If no rules are provided, all the tags from the repository will be
// ordered and compared.
type ImagePolicySpecFilterTagsPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecFilterTagsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecFilterTagsPatch)(nil)).Elem()
}

func (o ImagePolicySpecFilterTagsPatchOutput) ToImagePolicySpecFilterTagsPatchOutput() ImagePolicySpecFilterTagsPatchOutput {
	return o
}

func (o ImagePolicySpecFilterTagsPatchOutput) ToImagePolicySpecFilterTagsPatchOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPatchOutput {
	return o
}

func (o ImagePolicySpecFilterTagsPatchOutput) ToImagePolicySpecFilterTagsPatchPtrOutput() ImagePolicySpecFilterTagsPatchPtrOutput {
	return o.ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecFilterTagsPatchOutput) ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecFilterTagsPatch) *ImagePolicySpecFilterTagsPatch {
		return &v
	}).(ImagePolicySpecFilterTagsPatchPtrOutput)
}

// Extract allows a capture group to be extracted from the specified regular
// expression pattern, useful before tag evaluation.
func (o ImagePolicySpecFilterTagsPatchOutput) Extract() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecFilterTagsPatch) *string { return v.Extract }).(pulumi.StringPtrOutput)
}

// Pattern specifies a regular expression pattern used to filter for image
// tags.
func (o ImagePolicySpecFilterTagsPatchOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecFilterTagsPatch) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecFilterTagsPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecFilterTagsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecFilterTagsPatch)(nil)).Elem()
}

func (o ImagePolicySpecFilterTagsPatchPtrOutput) ToImagePolicySpecFilterTagsPatchPtrOutput() ImagePolicySpecFilterTagsPatchPtrOutput {
	return o
}

func (o ImagePolicySpecFilterTagsPatchPtrOutput) ToImagePolicySpecFilterTagsPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecFilterTagsPatchPtrOutput {
	return o
}

func (o ImagePolicySpecFilterTagsPatchPtrOutput) Elem() ImagePolicySpecFilterTagsPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecFilterTagsPatch) ImagePolicySpecFilterTagsPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecFilterTagsPatch
		return ret
	}).(ImagePolicySpecFilterTagsPatchOutput)
}

// Extract allows a capture group to be extracted from the specified regular
// expression pattern, useful before tag evaluation.
func (o ImagePolicySpecFilterTagsPatchPtrOutput) Extract() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecFilterTagsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Extract
	}).(pulumi.StringPtrOutput)
}

// Pattern specifies a regular expression pattern used to filter for image
// tags.
func (o ImagePolicySpecFilterTagsPatchPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecFilterTagsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(pulumi.StringPtrOutput)
}

// ImageRepositoryRef points at the object specifying the image
// being scanned
type ImagePolicySpecImageRepositoryRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace *string `pulumi:"namespace"`
}

// ImagePolicySpecImageRepositoryRefInput is an input type that accepts ImagePolicySpecImageRepositoryRefArgs and ImagePolicySpecImageRepositoryRefOutput values.
// You can construct a concrete instance of `ImagePolicySpecImageRepositoryRefInput` via:
//
//	ImagePolicySpecImageRepositoryRefArgs{...}
type ImagePolicySpecImageRepositoryRefInput interface {
	pulumi.Input

	ToImagePolicySpecImageRepositoryRefOutput() ImagePolicySpecImageRepositoryRefOutput
	ToImagePolicySpecImageRepositoryRefOutputWithContext(context.Context) ImagePolicySpecImageRepositoryRefOutput
}

// ImageRepositoryRef points at the object specifying the image
// being scanned
type ImagePolicySpecImageRepositoryRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ImagePolicySpecImageRepositoryRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecImageRepositoryRef)(nil)).Elem()
}

func (i ImagePolicySpecImageRepositoryRefArgs) ToImagePolicySpecImageRepositoryRefOutput() ImagePolicySpecImageRepositoryRefOutput {
	return i.ToImagePolicySpecImageRepositoryRefOutputWithContext(context.Background())
}

func (i ImagePolicySpecImageRepositoryRefArgs) ToImagePolicySpecImageRepositoryRefOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecImageRepositoryRefOutput)
}

func (i ImagePolicySpecImageRepositoryRefArgs) ToImagePolicySpecImageRepositoryRefPtrOutput() ImagePolicySpecImageRepositoryRefPtrOutput {
	return i.ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecImageRepositoryRefArgs) ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecImageRepositoryRefOutput).ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(ctx)
}

// ImagePolicySpecImageRepositoryRefPtrInput is an input type that accepts ImagePolicySpecImageRepositoryRefArgs, ImagePolicySpecImageRepositoryRefPtr and ImagePolicySpecImageRepositoryRefPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecImageRepositoryRefPtrInput` via:
//
//	        ImagePolicySpecImageRepositoryRefArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecImageRepositoryRefPtrInput interface {
	pulumi.Input

	ToImagePolicySpecImageRepositoryRefPtrOutput() ImagePolicySpecImageRepositoryRefPtrOutput
	ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(context.Context) ImagePolicySpecImageRepositoryRefPtrOutput
}

type imagePolicySpecImageRepositoryRefPtrType ImagePolicySpecImageRepositoryRefArgs

func ImagePolicySpecImageRepositoryRefPtr(v *ImagePolicySpecImageRepositoryRefArgs) ImagePolicySpecImageRepositoryRefPtrInput {
	return (*imagePolicySpecImageRepositoryRefPtrType)(v)
}

func (*imagePolicySpecImageRepositoryRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecImageRepositoryRef)(nil)).Elem()
}

func (i *imagePolicySpecImageRepositoryRefPtrType) ToImagePolicySpecImageRepositoryRefPtrOutput() ImagePolicySpecImageRepositoryRefPtrOutput {
	return i.ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecImageRepositoryRefPtrType) ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecImageRepositoryRefPtrOutput)
}

// ImageRepositoryRef points at the object specifying the image
// being scanned
type ImagePolicySpecImageRepositoryRefOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecImageRepositoryRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecImageRepositoryRef)(nil)).Elem()
}

func (o ImagePolicySpecImageRepositoryRefOutput) ToImagePolicySpecImageRepositoryRefOutput() ImagePolicySpecImageRepositoryRefOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefOutput) ToImagePolicySpecImageRepositoryRefOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefOutput) ToImagePolicySpecImageRepositoryRefPtrOutput() ImagePolicySpecImageRepositoryRefPtrOutput {
	return o.ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecImageRepositoryRefOutput) ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecImageRepositoryRef) *ImagePolicySpecImageRepositoryRef {
		return &v
	}).(ImagePolicySpecImageRepositoryRefPtrOutput)
}

// Name of the referent.
func (o ImagePolicySpecImageRepositoryRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecImageRepositoryRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o ImagePolicySpecImageRepositoryRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecImageRepositoryRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecImageRepositoryRefPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecImageRepositoryRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecImageRepositoryRef)(nil)).Elem()
}

func (o ImagePolicySpecImageRepositoryRefPtrOutput) ToImagePolicySpecImageRepositoryRefPtrOutput() ImagePolicySpecImageRepositoryRefPtrOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefPtrOutput) ToImagePolicySpecImageRepositoryRefPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPtrOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefPtrOutput) Elem() ImagePolicySpecImageRepositoryRefOutput {
	return o.ApplyT(func(v *ImagePolicySpecImageRepositoryRef) ImagePolicySpecImageRepositoryRef {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecImageRepositoryRef
		return ret
	}).(ImagePolicySpecImageRepositoryRefOutput)
}

// Name of the referent.
func (o ImagePolicySpecImageRepositoryRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecImageRepositoryRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o ImagePolicySpecImageRepositoryRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecImageRepositoryRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ImageRepositoryRef points at the object specifying the image
// being scanned
type ImagePolicySpecImageRepositoryRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace *string `pulumi:"namespace"`
}

// ImagePolicySpecImageRepositoryRefPatchInput is an input type that accepts ImagePolicySpecImageRepositoryRefPatchArgs and ImagePolicySpecImageRepositoryRefPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecImageRepositoryRefPatchInput` via:
//
//	ImagePolicySpecImageRepositoryRefPatchArgs{...}
type ImagePolicySpecImageRepositoryRefPatchInput interface {
	pulumi.Input

	ToImagePolicySpecImageRepositoryRefPatchOutput() ImagePolicySpecImageRepositoryRefPatchOutput
	ToImagePolicySpecImageRepositoryRefPatchOutputWithContext(context.Context) ImagePolicySpecImageRepositoryRefPatchOutput
}

// ImageRepositoryRef points at the object specifying the image
// being scanned
type ImagePolicySpecImageRepositoryRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ImagePolicySpecImageRepositoryRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecImageRepositoryRefPatch)(nil)).Elem()
}

func (i ImagePolicySpecImageRepositoryRefPatchArgs) ToImagePolicySpecImageRepositoryRefPatchOutput() ImagePolicySpecImageRepositoryRefPatchOutput {
	return i.ToImagePolicySpecImageRepositoryRefPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecImageRepositoryRefPatchArgs) ToImagePolicySpecImageRepositoryRefPatchOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecImageRepositoryRefPatchOutput)
}

func (i ImagePolicySpecImageRepositoryRefPatchArgs) ToImagePolicySpecImageRepositoryRefPatchPtrOutput() ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return i.ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecImageRepositoryRefPatchArgs) ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecImageRepositoryRefPatchOutput).ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecImageRepositoryRefPatchPtrInput is an input type that accepts ImagePolicySpecImageRepositoryRefPatchArgs, ImagePolicySpecImageRepositoryRefPatchPtr and ImagePolicySpecImageRepositoryRefPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecImageRepositoryRefPatchPtrInput` via:
//
//	        ImagePolicySpecImageRepositoryRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecImageRepositoryRefPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecImageRepositoryRefPatchPtrOutput() ImagePolicySpecImageRepositoryRefPatchPtrOutput
	ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(context.Context) ImagePolicySpecImageRepositoryRefPatchPtrOutput
}

type imagePolicySpecImageRepositoryRefPatchPtrType ImagePolicySpecImageRepositoryRefPatchArgs

func ImagePolicySpecImageRepositoryRefPatchPtr(v *ImagePolicySpecImageRepositoryRefPatchArgs) ImagePolicySpecImageRepositoryRefPatchPtrInput {
	return (*imagePolicySpecImageRepositoryRefPatchPtrType)(v)
}

func (*imagePolicySpecImageRepositoryRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecImageRepositoryRefPatch)(nil)).Elem()
}

func (i *imagePolicySpecImageRepositoryRefPatchPtrType) ToImagePolicySpecImageRepositoryRefPatchPtrOutput() ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return i.ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecImageRepositoryRefPatchPtrType) ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecImageRepositoryRefPatchPtrOutput)
}

// ImageRepositoryRef points at the object specifying the image
// being scanned
type ImagePolicySpecImageRepositoryRefPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecImageRepositoryRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecImageRepositoryRefPatch)(nil)).Elem()
}

func (o ImagePolicySpecImageRepositoryRefPatchOutput) ToImagePolicySpecImageRepositoryRefPatchOutput() ImagePolicySpecImageRepositoryRefPatchOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefPatchOutput) ToImagePolicySpecImageRepositoryRefPatchOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPatchOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefPatchOutput) ToImagePolicySpecImageRepositoryRefPatchPtrOutput() ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return o.ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecImageRepositoryRefPatchOutput) ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecImageRepositoryRefPatch) *ImagePolicySpecImageRepositoryRefPatch {
		return &v
	}).(ImagePolicySpecImageRepositoryRefPatchPtrOutput)
}

// Name of the referent.
func (o ImagePolicySpecImageRepositoryRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecImageRepositoryRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o ImagePolicySpecImageRepositoryRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecImageRepositoryRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecImageRepositoryRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecImageRepositoryRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecImageRepositoryRefPatch)(nil)).Elem()
}

func (o ImagePolicySpecImageRepositoryRefPatchPtrOutput) ToImagePolicySpecImageRepositoryRefPatchPtrOutput() ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefPatchPtrOutput) ToImagePolicySpecImageRepositoryRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return o
}

func (o ImagePolicySpecImageRepositoryRefPatchPtrOutput) Elem() ImagePolicySpecImageRepositoryRefPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecImageRepositoryRefPatch) ImagePolicySpecImageRepositoryRefPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecImageRepositoryRefPatch
		return ret
	}).(ImagePolicySpecImageRepositoryRefPatchOutput)
}

// Name of the referent.
func (o ImagePolicySpecImageRepositoryRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecImageRepositoryRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o ImagePolicySpecImageRepositoryRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecImageRepositoryRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ImagePolicySpec defines the parameters for calculating the
// ImagePolicy.
type ImagePolicySpecPatch struct {
	// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
	//
	// Never: The digest field will always be set to the empty string.
	//
	// IfNotPresent: The digest field will be set to the digest of the elected
	// latest image if the field is empty and the image did not change.
	//
	// Always: The digest field will always be set to the digest of the elected
	// latest image.
	//
	// Default: Never.
	DigestReflectionPolicy *string                                 `pulumi:"digestReflectionPolicy"`
	FilterTags             *ImagePolicySpecFilterTagsPatch         `pulumi:"filterTags"`
	ImageRepositoryRef     *ImagePolicySpecImageRepositoryRefPatch `pulumi:"imageRepositoryRef"`
	// Interval is the length of time to wait between
	// refreshing the digest of the latest tag when the
	// reflection policy is set to "Always".
	//
	// Defaults to 10m.
	Interval *string                     `pulumi:"interval"`
	Policy   *ImagePolicySpecPolicyPatch `pulumi:"policy"`
}

// ImagePolicySpecPatchInput is an input type that accepts ImagePolicySpecPatchArgs and ImagePolicySpecPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecPatchInput` via:
//
//	ImagePolicySpecPatchArgs{...}
type ImagePolicySpecPatchInput interface {
	pulumi.Input

	ToImagePolicySpecPatchOutput() ImagePolicySpecPatchOutput
	ToImagePolicySpecPatchOutputWithContext(context.Context) ImagePolicySpecPatchOutput
}

// ImagePolicySpec defines the parameters for calculating the
// ImagePolicy.
type ImagePolicySpecPatchArgs struct {
	// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
	//
	// Never: The digest field will always be set to the empty string.
	//
	// IfNotPresent: The digest field will be set to the digest of the elected
	// latest image if the field is empty and the image did not change.
	//
	// Always: The digest field will always be set to the digest of the elected
	// latest image.
	//
	// Default: Never.
	DigestReflectionPolicy pulumi.StringPtrInput                          `pulumi:"digestReflectionPolicy"`
	FilterTags             ImagePolicySpecFilterTagsPatchPtrInput         `pulumi:"filterTags"`
	ImageRepositoryRef     ImagePolicySpecImageRepositoryRefPatchPtrInput `pulumi:"imageRepositoryRef"`
	// Interval is the length of time to wait between
	// refreshing the digest of the latest tag when the
	// reflection policy is set to "Always".
	//
	// Defaults to 10m.
	Interval pulumi.StringPtrInput              `pulumi:"interval"`
	Policy   ImagePolicySpecPolicyPatchPtrInput `pulumi:"policy"`
}

func (ImagePolicySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPatch)(nil)).Elem()
}

func (i ImagePolicySpecPatchArgs) ToImagePolicySpecPatchOutput() ImagePolicySpecPatchOutput {
	return i.ToImagePolicySpecPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecPatchArgs) ToImagePolicySpecPatchOutputWithContext(ctx context.Context) ImagePolicySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPatchOutput)
}

func (i ImagePolicySpecPatchArgs) ToImagePolicySpecPatchPtrOutput() ImagePolicySpecPatchPtrOutput {
	return i.ToImagePolicySpecPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPatchArgs) ToImagePolicySpecPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPatchOutput).ToImagePolicySpecPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecPatchPtrInput is an input type that accepts ImagePolicySpecPatchArgs, ImagePolicySpecPatchPtr and ImagePolicySpecPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPatchPtrInput` via:
//
//	        ImagePolicySpecPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPatchPtrOutput() ImagePolicySpecPatchPtrOutput
	ToImagePolicySpecPatchPtrOutputWithContext(context.Context) ImagePolicySpecPatchPtrOutput
}

type imagePolicySpecPatchPtrType ImagePolicySpecPatchArgs

func ImagePolicySpecPatchPtr(v *ImagePolicySpecPatchArgs) ImagePolicySpecPatchPtrInput {
	return (*imagePolicySpecPatchPtrType)(v)
}

func (*imagePolicySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPatch)(nil)).Elem()
}

func (i *imagePolicySpecPatchPtrType) ToImagePolicySpecPatchPtrOutput() ImagePolicySpecPatchPtrOutput {
	return i.ToImagePolicySpecPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPatchPtrType) ToImagePolicySpecPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPatchPtrOutput)
}

// ImagePolicySpec defines the parameters for calculating the
// ImagePolicy.
type ImagePolicySpecPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPatch)(nil)).Elem()
}

func (o ImagePolicySpecPatchOutput) ToImagePolicySpecPatchOutput() ImagePolicySpecPatchOutput {
	return o
}

func (o ImagePolicySpecPatchOutput) ToImagePolicySpecPatchOutputWithContext(ctx context.Context) ImagePolicySpecPatchOutput {
	return o
}

func (o ImagePolicySpecPatchOutput) ToImagePolicySpecPatchPtrOutput() ImagePolicySpecPatchPtrOutput {
	return o.ToImagePolicySpecPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPatchOutput) ToImagePolicySpecPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPatch) *ImagePolicySpecPatch {
		return &v
	}).(ImagePolicySpecPatchPtrOutput)
}

// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
//
// Never: The digest field will always be set to the empty string.
//
// IfNotPresent: The digest field will be set to the digest of the elected
// latest image if the field is empty and the image did not change.
//
// Always: The digest field will always be set to the digest of the elected
// latest image.
//
// Default: Never.
func (o ImagePolicySpecPatchOutput) DigestReflectionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPatch) *string { return v.DigestReflectionPolicy }).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecPatchOutput) FilterTags() ImagePolicySpecFilterTagsPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPatch) *ImagePolicySpecFilterTagsPatch { return v.FilterTags }).(ImagePolicySpecFilterTagsPatchPtrOutput)
}

func (o ImagePolicySpecPatchOutput) ImageRepositoryRef() ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPatch) *ImagePolicySpecImageRepositoryRefPatch { return v.ImageRepositoryRef }).(ImagePolicySpecImageRepositoryRefPatchPtrOutput)
}

// Interval is the length of time to wait between
// refreshing the digest of the latest tag when the
// reflection policy is set to "Always".
//
// Defaults to 10m.
func (o ImagePolicySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecPatchOutput) Policy() ImagePolicySpecPolicyPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPatch) *ImagePolicySpecPolicyPatch { return v.Policy }).(ImagePolicySpecPolicyPatchPtrOutput)
}

type ImagePolicySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPatch)(nil)).Elem()
}

func (o ImagePolicySpecPatchPtrOutput) ToImagePolicySpecPatchPtrOutput() ImagePolicySpecPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPatchPtrOutput) ToImagePolicySpecPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPatchPtrOutput) Elem() ImagePolicySpecPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecPatch) ImagePolicySpecPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPatch
		return ret
	}).(ImagePolicySpecPatchOutput)
}

// DigestReflectionPolicy governs the setting of the `.status.latestRef.digest` field.
//
// Never: The digest field will always be set to the empty string.
//
// IfNotPresent: The digest field will be set to the digest of the elected
// latest image if the field is empty and the image did not change.
//
// Always: The digest field will always be set to the digest of the elected
// latest image.
//
// Default: Never.
func (o ImagePolicySpecPatchPtrOutput) DigestReflectionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.DigestReflectionPolicy
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecPatchPtrOutput) FilterTags() ImagePolicySpecFilterTagsPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPatch) *ImagePolicySpecFilterTagsPatch {
		if v == nil {
			return nil
		}
		return v.FilterTags
	}).(ImagePolicySpecFilterTagsPatchPtrOutput)
}

func (o ImagePolicySpecPatchPtrOutput) ImageRepositoryRef() ImagePolicySpecImageRepositoryRefPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPatch) *ImagePolicySpecImageRepositoryRefPatch {
		if v == nil {
			return nil
		}
		return v.ImageRepositoryRef
	}).(ImagePolicySpecImageRepositoryRefPatchPtrOutput)
}

// Interval is the length of time to wait between
// refreshing the digest of the latest tag when the
// reflection policy is set to "Always".
//
// Defaults to 10m.
func (o ImagePolicySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicySpecPatchPtrOutput) Policy() ImagePolicySpecPolicyPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPatch) *ImagePolicySpecPolicyPatch {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(ImagePolicySpecPolicyPatchPtrOutput)
}

// Policy gives the particulars of the policy to be followed in
// selecting the most recent image
type ImagePolicySpecPolicy struct {
	Alphabetical *ImagePolicySpecPolicyAlphabetical `pulumi:"alphabetical"`
	Numerical    *ImagePolicySpecPolicyNumerical    `pulumi:"numerical"`
	Semver       *ImagePolicySpecPolicySemver       `pulumi:"semver"`
}

// ImagePolicySpecPolicyInput is an input type that accepts ImagePolicySpecPolicyArgs and ImagePolicySpecPolicyOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyInput` via:
//
//	ImagePolicySpecPolicyArgs{...}
type ImagePolicySpecPolicyInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyOutput() ImagePolicySpecPolicyOutput
	ToImagePolicySpecPolicyOutputWithContext(context.Context) ImagePolicySpecPolicyOutput
}

// Policy gives the particulars of the policy to be followed in
// selecting the most recent image
type ImagePolicySpecPolicyArgs struct {
	Alphabetical ImagePolicySpecPolicyAlphabeticalPtrInput `pulumi:"alphabetical"`
	Numerical    ImagePolicySpecPolicyNumericalPtrInput    `pulumi:"numerical"`
	Semver       ImagePolicySpecPolicySemverPtrInput       `pulumi:"semver"`
}

func (ImagePolicySpecPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicy)(nil)).Elem()
}

func (i ImagePolicySpecPolicyArgs) ToImagePolicySpecPolicyOutput() ImagePolicySpecPolicyOutput {
	return i.ToImagePolicySpecPolicyOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyArgs) ToImagePolicySpecPolicyOutputWithContext(ctx context.Context) ImagePolicySpecPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyOutput)
}

func (i ImagePolicySpecPolicyArgs) ToImagePolicySpecPolicyPtrOutput() ImagePolicySpecPolicyPtrOutput {
	return i.ToImagePolicySpecPolicyPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyArgs) ToImagePolicySpecPolicyPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyOutput).ToImagePolicySpecPolicyPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicyPtrInput is an input type that accepts ImagePolicySpecPolicyArgs, ImagePolicySpecPolicyPtr and ImagePolicySpecPolicyPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyPtrInput` via:
//
//	        ImagePolicySpecPolicyArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicyPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyPtrOutput() ImagePolicySpecPolicyPtrOutput
	ToImagePolicySpecPolicyPtrOutputWithContext(context.Context) ImagePolicySpecPolicyPtrOutput
}

type imagePolicySpecPolicyPtrType ImagePolicySpecPolicyArgs

func ImagePolicySpecPolicyPtr(v *ImagePolicySpecPolicyArgs) ImagePolicySpecPolicyPtrInput {
	return (*imagePolicySpecPolicyPtrType)(v)
}

func (*imagePolicySpecPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicy)(nil)).Elem()
}

func (i *imagePolicySpecPolicyPtrType) ToImagePolicySpecPolicyPtrOutput() ImagePolicySpecPolicyPtrOutput {
	return i.ToImagePolicySpecPolicyPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicyPtrType) ToImagePolicySpecPolicyPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyPtrOutput)
}

// Policy gives the particulars of the policy to be followed in
// selecting the most recent image
type ImagePolicySpecPolicyOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicy)(nil)).Elem()
}

func (o ImagePolicySpecPolicyOutput) ToImagePolicySpecPolicyOutput() ImagePolicySpecPolicyOutput {
	return o
}

func (o ImagePolicySpecPolicyOutput) ToImagePolicySpecPolicyOutputWithContext(ctx context.Context) ImagePolicySpecPolicyOutput {
	return o
}

func (o ImagePolicySpecPolicyOutput) ToImagePolicySpecPolicyPtrOutput() ImagePolicySpecPolicyPtrOutput {
	return o.ToImagePolicySpecPolicyPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicyOutput) ToImagePolicySpecPolicyPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicy) *ImagePolicySpecPolicy {
		return &v
	}).(ImagePolicySpecPolicyPtrOutput)
}

func (o ImagePolicySpecPolicyOutput) Alphabetical() ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicy) *ImagePolicySpecPolicyAlphabetical { return v.Alphabetical }).(ImagePolicySpecPolicyAlphabeticalPtrOutput)
}

func (o ImagePolicySpecPolicyOutput) Numerical() ImagePolicySpecPolicyNumericalPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicy) *ImagePolicySpecPolicyNumerical { return v.Numerical }).(ImagePolicySpecPolicyNumericalPtrOutput)
}

func (o ImagePolicySpecPolicyOutput) Semver() ImagePolicySpecPolicySemverPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicy) *ImagePolicySpecPolicySemver { return v.Semver }).(ImagePolicySpecPolicySemverPtrOutput)
}

type ImagePolicySpecPolicyPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicy)(nil)).Elem()
}

func (o ImagePolicySpecPolicyPtrOutput) ToImagePolicySpecPolicyPtrOutput() ImagePolicySpecPolicyPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyPtrOutput) ToImagePolicySpecPolicyPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyPtrOutput) Elem() ImagePolicySpecPolicyOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicy) ImagePolicySpecPolicy {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicy
		return ret
	}).(ImagePolicySpecPolicyOutput)
}

func (o ImagePolicySpecPolicyPtrOutput) Alphabetical() ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicy) *ImagePolicySpecPolicyAlphabetical {
		if v == nil {
			return nil
		}
		return v.Alphabetical
	}).(ImagePolicySpecPolicyAlphabeticalPtrOutput)
}

func (o ImagePolicySpecPolicyPtrOutput) Numerical() ImagePolicySpecPolicyNumericalPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicy) *ImagePolicySpecPolicyNumerical {
		if v == nil {
			return nil
		}
		return v.Numerical
	}).(ImagePolicySpecPolicyNumericalPtrOutput)
}

func (o ImagePolicySpecPolicyPtrOutput) Semver() ImagePolicySpecPolicySemverPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicy) *ImagePolicySpecPolicySemver {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(ImagePolicySpecPolicySemverPtrOutput)
}

// Alphabetical set of rules to use for alphabetical ordering of the tags.
type ImagePolicySpecPolicyAlphabetical struct {
	// Order specifies the sorting order of the tags. Given the letters of the
	// alphabet as tags, ascending order would select Z, and descending order
	// would select A.
	Order *string `pulumi:"order"`
}

// ImagePolicySpecPolicyAlphabeticalInput is an input type that accepts ImagePolicySpecPolicyAlphabeticalArgs and ImagePolicySpecPolicyAlphabeticalOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyAlphabeticalInput` via:
//
//	ImagePolicySpecPolicyAlphabeticalArgs{...}
type ImagePolicySpecPolicyAlphabeticalInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyAlphabeticalOutput() ImagePolicySpecPolicyAlphabeticalOutput
	ToImagePolicySpecPolicyAlphabeticalOutputWithContext(context.Context) ImagePolicySpecPolicyAlphabeticalOutput
}

// Alphabetical set of rules to use for alphabetical ordering of the tags.
type ImagePolicySpecPolicyAlphabeticalArgs struct {
	// Order specifies the sorting order of the tags. Given the letters of the
	// alphabet as tags, ascending order would select Z, and descending order
	// would select A.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (ImagePolicySpecPolicyAlphabeticalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyAlphabetical)(nil)).Elem()
}

func (i ImagePolicySpecPolicyAlphabeticalArgs) ToImagePolicySpecPolicyAlphabeticalOutput() ImagePolicySpecPolicyAlphabeticalOutput {
	return i.ToImagePolicySpecPolicyAlphabeticalOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyAlphabeticalArgs) ToImagePolicySpecPolicyAlphabeticalOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyAlphabeticalOutput)
}

func (i ImagePolicySpecPolicyAlphabeticalArgs) ToImagePolicySpecPolicyAlphabeticalPtrOutput() ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return i.ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyAlphabeticalArgs) ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyAlphabeticalOutput).ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicyAlphabeticalPtrInput is an input type that accepts ImagePolicySpecPolicyAlphabeticalArgs, ImagePolicySpecPolicyAlphabeticalPtr and ImagePolicySpecPolicyAlphabeticalPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyAlphabeticalPtrInput` via:
//
//	        ImagePolicySpecPolicyAlphabeticalArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicyAlphabeticalPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyAlphabeticalPtrOutput() ImagePolicySpecPolicyAlphabeticalPtrOutput
	ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(context.Context) ImagePolicySpecPolicyAlphabeticalPtrOutput
}

type imagePolicySpecPolicyAlphabeticalPtrType ImagePolicySpecPolicyAlphabeticalArgs

func ImagePolicySpecPolicyAlphabeticalPtr(v *ImagePolicySpecPolicyAlphabeticalArgs) ImagePolicySpecPolicyAlphabeticalPtrInput {
	return (*imagePolicySpecPolicyAlphabeticalPtrType)(v)
}

func (*imagePolicySpecPolicyAlphabeticalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyAlphabetical)(nil)).Elem()
}

func (i *imagePolicySpecPolicyAlphabeticalPtrType) ToImagePolicySpecPolicyAlphabeticalPtrOutput() ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return i.ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicyAlphabeticalPtrType) ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyAlphabeticalPtrOutput)
}

// Alphabetical set of rules to use for alphabetical ordering of the tags.
type ImagePolicySpecPolicyAlphabeticalOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyAlphabeticalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyAlphabetical)(nil)).Elem()
}

func (o ImagePolicySpecPolicyAlphabeticalOutput) ToImagePolicySpecPolicyAlphabeticalOutput() ImagePolicySpecPolicyAlphabeticalOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalOutput) ToImagePolicySpecPolicyAlphabeticalOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalOutput) ToImagePolicySpecPolicyAlphabeticalPtrOutput() ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return o.ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicyAlphabeticalOutput) ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicyAlphabetical) *ImagePolicySpecPolicyAlphabetical {
		return &v
	}).(ImagePolicySpecPolicyAlphabeticalPtrOutput)
}

// Order specifies the sorting order of the tags. Given the letters of the
// alphabet as tags, ascending order would select Z, and descending order
// would select A.
func (o ImagePolicySpecPolicyAlphabeticalOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyAlphabetical) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecPolicyAlphabeticalPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyAlphabeticalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyAlphabetical)(nil)).Elem()
}

func (o ImagePolicySpecPolicyAlphabeticalPtrOutput) ToImagePolicySpecPolicyAlphabeticalPtrOutput() ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalPtrOutput) ToImagePolicySpecPolicyAlphabeticalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalPtrOutput) Elem() ImagePolicySpecPolicyAlphabeticalOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyAlphabetical) ImagePolicySpecPolicyAlphabetical {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicyAlphabetical
		return ret
	}).(ImagePolicySpecPolicyAlphabeticalOutput)
}

// Order specifies the sorting order of the tags. Given the letters of the
// alphabet as tags, ascending order would select Z, and descending order
// would select A.
func (o ImagePolicySpecPolicyAlphabeticalPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyAlphabetical) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Alphabetical set of rules to use for alphabetical ordering of the tags.
type ImagePolicySpecPolicyAlphabeticalPatch struct {
	// Order specifies the sorting order of the tags. Given the letters of the
	// alphabet as tags, ascending order would select Z, and descending order
	// would select A.
	Order *string `pulumi:"order"`
}

// ImagePolicySpecPolicyAlphabeticalPatchInput is an input type that accepts ImagePolicySpecPolicyAlphabeticalPatchArgs and ImagePolicySpecPolicyAlphabeticalPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyAlphabeticalPatchInput` via:
//
//	ImagePolicySpecPolicyAlphabeticalPatchArgs{...}
type ImagePolicySpecPolicyAlphabeticalPatchInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyAlphabeticalPatchOutput() ImagePolicySpecPolicyAlphabeticalPatchOutput
	ToImagePolicySpecPolicyAlphabeticalPatchOutputWithContext(context.Context) ImagePolicySpecPolicyAlphabeticalPatchOutput
}

// Alphabetical set of rules to use for alphabetical ordering of the tags.
type ImagePolicySpecPolicyAlphabeticalPatchArgs struct {
	// Order specifies the sorting order of the tags. Given the letters of the
	// alphabet as tags, ascending order would select Z, and descending order
	// would select A.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (ImagePolicySpecPolicyAlphabeticalPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyAlphabeticalPatch)(nil)).Elem()
}

func (i ImagePolicySpecPolicyAlphabeticalPatchArgs) ToImagePolicySpecPolicyAlphabeticalPatchOutput() ImagePolicySpecPolicyAlphabeticalPatchOutput {
	return i.ToImagePolicySpecPolicyAlphabeticalPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyAlphabeticalPatchArgs) ToImagePolicySpecPolicyAlphabeticalPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyAlphabeticalPatchOutput)
}

func (i ImagePolicySpecPolicyAlphabeticalPatchArgs) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutput() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return i.ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyAlphabeticalPatchArgs) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyAlphabeticalPatchOutput).ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicyAlphabeticalPatchPtrInput is an input type that accepts ImagePolicySpecPolicyAlphabeticalPatchArgs, ImagePolicySpecPolicyAlphabeticalPatchPtr and ImagePolicySpecPolicyAlphabeticalPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyAlphabeticalPatchPtrInput` via:
//
//	        ImagePolicySpecPolicyAlphabeticalPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicyAlphabeticalPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyAlphabeticalPatchPtrOutput() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput
	ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(context.Context) ImagePolicySpecPolicyAlphabeticalPatchPtrOutput
}

type imagePolicySpecPolicyAlphabeticalPatchPtrType ImagePolicySpecPolicyAlphabeticalPatchArgs

func ImagePolicySpecPolicyAlphabeticalPatchPtr(v *ImagePolicySpecPolicyAlphabeticalPatchArgs) ImagePolicySpecPolicyAlphabeticalPatchPtrInput {
	return (*imagePolicySpecPolicyAlphabeticalPatchPtrType)(v)
}

func (*imagePolicySpecPolicyAlphabeticalPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyAlphabeticalPatch)(nil)).Elem()
}

func (i *imagePolicySpecPolicyAlphabeticalPatchPtrType) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutput() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return i.ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicyAlphabeticalPatchPtrType) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyAlphabeticalPatchPtrOutput)
}

// Alphabetical set of rules to use for alphabetical ordering of the tags.
type ImagePolicySpecPolicyAlphabeticalPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyAlphabeticalPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyAlphabeticalPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicyAlphabeticalPatchOutput) ToImagePolicySpecPolicyAlphabeticalPatchOutput() ImagePolicySpecPolicyAlphabeticalPatchOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalPatchOutput) ToImagePolicySpecPolicyAlphabeticalPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPatchOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalPatchOutput) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutput() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return o.ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicyAlphabeticalPatchOutput) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicyAlphabeticalPatch) *ImagePolicySpecPolicyAlphabeticalPatch {
		return &v
	}).(ImagePolicySpecPolicyAlphabeticalPatchPtrOutput)
}

// Order specifies the sorting order of the tags. Given the letters of the
// alphabet as tags, ascending order would select Z, and descending order
// would select A.
func (o ImagePolicySpecPolicyAlphabeticalPatchOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyAlphabeticalPatch) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecPolicyAlphabeticalPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyAlphabeticalPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyAlphabeticalPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicyAlphabeticalPatchPtrOutput) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutput() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalPatchPtrOutput) ToImagePolicySpecPolicyAlphabeticalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyAlphabeticalPatchPtrOutput) Elem() ImagePolicySpecPolicyAlphabeticalPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyAlphabeticalPatch) ImagePolicySpecPolicyAlphabeticalPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicyAlphabeticalPatch
		return ret
	}).(ImagePolicySpecPolicyAlphabeticalPatchOutput)
}

// Order specifies the sorting order of the tags. Given the letters of the
// alphabet as tags, ascending order would select Z, and descending order
// would select A.
func (o ImagePolicySpecPolicyAlphabeticalPatchPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyAlphabeticalPatch) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Numerical set of rules to use for numerical ordering of the tags.
type ImagePolicySpecPolicyNumerical struct {
	// Order specifies the sorting order of the tags. Given the integer values
	// from 0 to 9 as tags, ascending order would select 9, and descending order
	// would select 0.
	Order *string `pulumi:"order"`
}

// ImagePolicySpecPolicyNumericalInput is an input type that accepts ImagePolicySpecPolicyNumericalArgs and ImagePolicySpecPolicyNumericalOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyNumericalInput` via:
//
//	ImagePolicySpecPolicyNumericalArgs{...}
type ImagePolicySpecPolicyNumericalInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyNumericalOutput() ImagePolicySpecPolicyNumericalOutput
	ToImagePolicySpecPolicyNumericalOutputWithContext(context.Context) ImagePolicySpecPolicyNumericalOutput
}

// Numerical set of rules to use for numerical ordering of the tags.
type ImagePolicySpecPolicyNumericalArgs struct {
	// Order specifies the sorting order of the tags. Given the integer values
	// from 0 to 9 as tags, ascending order would select 9, and descending order
	// would select 0.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (ImagePolicySpecPolicyNumericalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyNumerical)(nil)).Elem()
}

func (i ImagePolicySpecPolicyNumericalArgs) ToImagePolicySpecPolicyNumericalOutput() ImagePolicySpecPolicyNumericalOutput {
	return i.ToImagePolicySpecPolicyNumericalOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyNumericalArgs) ToImagePolicySpecPolicyNumericalOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyNumericalOutput)
}

func (i ImagePolicySpecPolicyNumericalArgs) ToImagePolicySpecPolicyNumericalPtrOutput() ImagePolicySpecPolicyNumericalPtrOutput {
	return i.ToImagePolicySpecPolicyNumericalPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyNumericalArgs) ToImagePolicySpecPolicyNumericalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyNumericalOutput).ToImagePolicySpecPolicyNumericalPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicyNumericalPtrInput is an input type that accepts ImagePolicySpecPolicyNumericalArgs, ImagePolicySpecPolicyNumericalPtr and ImagePolicySpecPolicyNumericalPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyNumericalPtrInput` via:
//
//	        ImagePolicySpecPolicyNumericalArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicyNumericalPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyNumericalPtrOutput() ImagePolicySpecPolicyNumericalPtrOutput
	ToImagePolicySpecPolicyNumericalPtrOutputWithContext(context.Context) ImagePolicySpecPolicyNumericalPtrOutput
}

type imagePolicySpecPolicyNumericalPtrType ImagePolicySpecPolicyNumericalArgs

func ImagePolicySpecPolicyNumericalPtr(v *ImagePolicySpecPolicyNumericalArgs) ImagePolicySpecPolicyNumericalPtrInput {
	return (*imagePolicySpecPolicyNumericalPtrType)(v)
}

func (*imagePolicySpecPolicyNumericalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyNumerical)(nil)).Elem()
}

func (i *imagePolicySpecPolicyNumericalPtrType) ToImagePolicySpecPolicyNumericalPtrOutput() ImagePolicySpecPolicyNumericalPtrOutput {
	return i.ToImagePolicySpecPolicyNumericalPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicyNumericalPtrType) ToImagePolicySpecPolicyNumericalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyNumericalPtrOutput)
}

// Numerical set of rules to use for numerical ordering of the tags.
type ImagePolicySpecPolicyNumericalOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyNumericalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyNumerical)(nil)).Elem()
}

func (o ImagePolicySpecPolicyNumericalOutput) ToImagePolicySpecPolicyNumericalOutput() ImagePolicySpecPolicyNumericalOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalOutput) ToImagePolicySpecPolicyNumericalOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalOutput) ToImagePolicySpecPolicyNumericalPtrOutput() ImagePolicySpecPolicyNumericalPtrOutput {
	return o.ToImagePolicySpecPolicyNumericalPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicyNumericalOutput) ToImagePolicySpecPolicyNumericalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicyNumerical) *ImagePolicySpecPolicyNumerical {
		return &v
	}).(ImagePolicySpecPolicyNumericalPtrOutput)
}

// Order specifies the sorting order of the tags. Given the integer values
// from 0 to 9 as tags, ascending order would select 9, and descending order
// would select 0.
func (o ImagePolicySpecPolicyNumericalOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyNumerical) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecPolicyNumericalPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyNumericalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyNumerical)(nil)).Elem()
}

func (o ImagePolicySpecPolicyNumericalPtrOutput) ToImagePolicySpecPolicyNumericalPtrOutput() ImagePolicySpecPolicyNumericalPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalPtrOutput) ToImagePolicySpecPolicyNumericalPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalPtrOutput) Elem() ImagePolicySpecPolicyNumericalOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyNumerical) ImagePolicySpecPolicyNumerical {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicyNumerical
		return ret
	}).(ImagePolicySpecPolicyNumericalOutput)
}

// Order specifies the sorting order of the tags. Given the integer values
// from 0 to 9 as tags, ascending order would select 9, and descending order
// would select 0.
func (o ImagePolicySpecPolicyNumericalPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyNumerical) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Numerical set of rules to use for numerical ordering of the tags.
type ImagePolicySpecPolicyNumericalPatch struct {
	// Order specifies the sorting order of the tags. Given the integer values
	// from 0 to 9 as tags, ascending order would select 9, and descending order
	// would select 0.
	Order *string `pulumi:"order"`
}

// ImagePolicySpecPolicyNumericalPatchInput is an input type that accepts ImagePolicySpecPolicyNumericalPatchArgs and ImagePolicySpecPolicyNumericalPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyNumericalPatchInput` via:
//
//	ImagePolicySpecPolicyNumericalPatchArgs{...}
type ImagePolicySpecPolicyNumericalPatchInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyNumericalPatchOutput() ImagePolicySpecPolicyNumericalPatchOutput
	ToImagePolicySpecPolicyNumericalPatchOutputWithContext(context.Context) ImagePolicySpecPolicyNumericalPatchOutput
}

// Numerical set of rules to use for numerical ordering of the tags.
type ImagePolicySpecPolicyNumericalPatchArgs struct {
	// Order specifies the sorting order of the tags. Given the integer values
	// from 0 to 9 as tags, ascending order would select 9, and descending order
	// would select 0.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (ImagePolicySpecPolicyNumericalPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyNumericalPatch)(nil)).Elem()
}

func (i ImagePolicySpecPolicyNumericalPatchArgs) ToImagePolicySpecPolicyNumericalPatchOutput() ImagePolicySpecPolicyNumericalPatchOutput {
	return i.ToImagePolicySpecPolicyNumericalPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyNumericalPatchArgs) ToImagePolicySpecPolicyNumericalPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyNumericalPatchOutput)
}

func (i ImagePolicySpecPolicyNumericalPatchArgs) ToImagePolicySpecPolicyNumericalPatchPtrOutput() ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return i.ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyNumericalPatchArgs) ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyNumericalPatchOutput).ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicyNumericalPatchPtrInput is an input type that accepts ImagePolicySpecPolicyNumericalPatchArgs, ImagePolicySpecPolicyNumericalPatchPtr and ImagePolicySpecPolicyNumericalPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyNumericalPatchPtrInput` via:
//
//	        ImagePolicySpecPolicyNumericalPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicyNumericalPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyNumericalPatchPtrOutput() ImagePolicySpecPolicyNumericalPatchPtrOutput
	ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(context.Context) ImagePolicySpecPolicyNumericalPatchPtrOutput
}

type imagePolicySpecPolicyNumericalPatchPtrType ImagePolicySpecPolicyNumericalPatchArgs

func ImagePolicySpecPolicyNumericalPatchPtr(v *ImagePolicySpecPolicyNumericalPatchArgs) ImagePolicySpecPolicyNumericalPatchPtrInput {
	return (*imagePolicySpecPolicyNumericalPatchPtrType)(v)
}

func (*imagePolicySpecPolicyNumericalPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyNumericalPatch)(nil)).Elem()
}

func (i *imagePolicySpecPolicyNumericalPatchPtrType) ToImagePolicySpecPolicyNumericalPatchPtrOutput() ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return i.ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicyNumericalPatchPtrType) ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyNumericalPatchPtrOutput)
}

// Numerical set of rules to use for numerical ordering of the tags.
type ImagePolicySpecPolicyNumericalPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyNumericalPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyNumericalPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicyNumericalPatchOutput) ToImagePolicySpecPolicyNumericalPatchOutput() ImagePolicySpecPolicyNumericalPatchOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalPatchOutput) ToImagePolicySpecPolicyNumericalPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPatchOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalPatchOutput) ToImagePolicySpecPolicyNumericalPatchPtrOutput() ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return o.ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicyNumericalPatchOutput) ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicyNumericalPatch) *ImagePolicySpecPolicyNumericalPatch {
		return &v
	}).(ImagePolicySpecPolicyNumericalPatchPtrOutput)
}

// Order specifies the sorting order of the tags. Given the integer values
// from 0 to 9 as tags, ascending order would select 9, and descending order
// would select 0.
func (o ImagePolicySpecPolicyNumericalPatchOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyNumericalPatch) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecPolicyNumericalPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyNumericalPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyNumericalPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicyNumericalPatchPtrOutput) ToImagePolicySpecPolicyNumericalPatchPtrOutput() ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalPatchPtrOutput) ToImagePolicySpecPolicyNumericalPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyNumericalPatchPtrOutput) Elem() ImagePolicySpecPolicyNumericalPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyNumericalPatch) ImagePolicySpecPolicyNumericalPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicyNumericalPatch
		return ret
	}).(ImagePolicySpecPolicyNumericalPatchOutput)
}

// Order specifies the sorting order of the tags. Given the integer values
// from 0 to 9 as tags, ascending order would select 9, and descending order
// would select 0.
func (o ImagePolicySpecPolicyNumericalPatchPtrOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyNumericalPatch) *string {
		if v == nil {
			return nil
		}
		return v.Order
	}).(pulumi.StringPtrOutput)
}

// Policy gives the particulars of the policy to be followed in
// selecting the most recent image
type ImagePolicySpecPolicyPatch struct {
	Alphabetical *ImagePolicySpecPolicyAlphabeticalPatch `pulumi:"alphabetical"`
	Numerical    *ImagePolicySpecPolicyNumericalPatch    `pulumi:"numerical"`
	Semver       *ImagePolicySpecPolicySemverPatch       `pulumi:"semver"`
}

// ImagePolicySpecPolicyPatchInput is an input type that accepts ImagePolicySpecPolicyPatchArgs and ImagePolicySpecPolicyPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyPatchInput` via:
//
//	ImagePolicySpecPolicyPatchArgs{...}
type ImagePolicySpecPolicyPatchInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyPatchOutput() ImagePolicySpecPolicyPatchOutput
	ToImagePolicySpecPolicyPatchOutputWithContext(context.Context) ImagePolicySpecPolicyPatchOutput
}

// Policy gives the particulars of the policy to be followed in
// selecting the most recent image
type ImagePolicySpecPolicyPatchArgs struct {
	Alphabetical ImagePolicySpecPolicyAlphabeticalPatchPtrInput `pulumi:"alphabetical"`
	Numerical    ImagePolicySpecPolicyNumericalPatchPtrInput    `pulumi:"numerical"`
	Semver       ImagePolicySpecPolicySemverPatchPtrInput       `pulumi:"semver"`
}

func (ImagePolicySpecPolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyPatch)(nil)).Elem()
}

func (i ImagePolicySpecPolicyPatchArgs) ToImagePolicySpecPolicyPatchOutput() ImagePolicySpecPolicyPatchOutput {
	return i.ToImagePolicySpecPolicyPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyPatchArgs) ToImagePolicySpecPolicyPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyPatchOutput)
}

func (i ImagePolicySpecPolicyPatchArgs) ToImagePolicySpecPolicyPatchPtrOutput() ImagePolicySpecPolicyPatchPtrOutput {
	return i.ToImagePolicySpecPolicyPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicyPatchArgs) ToImagePolicySpecPolicyPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyPatchOutput).ToImagePolicySpecPolicyPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicyPatchPtrInput is an input type that accepts ImagePolicySpecPolicyPatchArgs, ImagePolicySpecPolicyPatchPtr and ImagePolicySpecPolicyPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicyPatchPtrInput` via:
//
//	        ImagePolicySpecPolicyPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicyPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicyPatchPtrOutput() ImagePolicySpecPolicyPatchPtrOutput
	ToImagePolicySpecPolicyPatchPtrOutputWithContext(context.Context) ImagePolicySpecPolicyPatchPtrOutput
}

type imagePolicySpecPolicyPatchPtrType ImagePolicySpecPolicyPatchArgs

func ImagePolicySpecPolicyPatchPtr(v *ImagePolicySpecPolicyPatchArgs) ImagePolicySpecPolicyPatchPtrInput {
	return (*imagePolicySpecPolicyPatchPtrType)(v)
}

func (*imagePolicySpecPolicyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyPatch)(nil)).Elem()
}

func (i *imagePolicySpecPolicyPatchPtrType) ToImagePolicySpecPolicyPatchPtrOutput() ImagePolicySpecPolicyPatchPtrOutput {
	return i.ToImagePolicySpecPolicyPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicyPatchPtrType) ToImagePolicySpecPolicyPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicyPatchPtrOutput)
}

// Policy gives the particulars of the policy to be followed in
// selecting the most recent image
type ImagePolicySpecPolicyPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicyPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicyPatchOutput) ToImagePolicySpecPolicyPatchOutput() ImagePolicySpecPolicyPatchOutput {
	return o
}

func (o ImagePolicySpecPolicyPatchOutput) ToImagePolicySpecPolicyPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPatchOutput {
	return o
}

func (o ImagePolicySpecPolicyPatchOutput) ToImagePolicySpecPolicyPatchPtrOutput() ImagePolicySpecPolicyPatchPtrOutput {
	return o.ToImagePolicySpecPolicyPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicyPatchOutput) ToImagePolicySpecPolicyPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicyPatch {
		return &v
	}).(ImagePolicySpecPolicyPatchPtrOutput)
}

func (o ImagePolicySpecPolicyPatchOutput) Alphabetical() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicyAlphabeticalPatch { return v.Alphabetical }).(ImagePolicySpecPolicyAlphabeticalPatchPtrOutput)
}

func (o ImagePolicySpecPolicyPatchOutput) Numerical() ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicyNumericalPatch { return v.Numerical }).(ImagePolicySpecPolicyNumericalPatchPtrOutput)
}

func (o ImagePolicySpecPolicyPatchOutput) Semver() ImagePolicySpecPolicySemverPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicySemverPatch { return v.Semver }).(ImagePolicySpecPolicySemverPatchPtrOutput)
}

type ImagePolicySpecPolicyPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicyPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicyPatchPtrOutput) ToImagePolicySpecPolicyPatchPtrOutput() ImagePolicySpecPolicyPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyPatchPtrOutput) ToImagePolicySpecPolicyPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicyPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicyPatchPtrOutput) Elem() ImagePolicySpecPolicyPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyPatch) ImagePolicySpecPolicyPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicyPatch
		return ret
	}).(ImagePolicySpecPolicyPatchOutput)
}

func (o ImagePolicySpecPolicyPatchPtrOutput) Alphabetical() ImagePolicySpecPolicyAlphabeticalPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicyAlphabeticalPatch {
		if v == nil {
			return nil
		}
		return v.Alphabetical
	}).(ImagePolicySpecPolicyAlphabeticalPatchPtrOutput)
}

func (o ImagePolicySpecPolicyPatchPtrOutput) Numerical() ImagePolicySpecPolicyNumericalPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicyNumericalPatch {
		if v == nil {
			return nil
		}
		return v.Numerical
	}).(ImagePolicySpecPolicyNumericalPatchPtrOutput)
}

func (o ImagePolicySpecPolicyPatchPtrOutput) Semver() ImagePolicySpecPolicySemverPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicyPatch) *ImagePolicySpecPolicySemverPatch {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(ImagePolicySpecPolicySemverPatchPtrOutput)
}

// SemVer gives a semantic version range to check against the tags
// available.
type ImagePolicySpecPolicySemver struct {
	// Range gives a semver range for the image tag; the highest
	// version within the range that's a tag yields the latest image.
	Range *string `pulumi:"range"`
}

// ImagePolicySpecPolicySemverInput is an input type that accepts ImagePolicySpecPolicySemverArgs and ImagePolicySpecPolicySemverOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicySemverInput` via:
//
//	ImagePolicySpecPolicySemverArgs{...}
type ImagePolicySpecPolicySemverInput interface {
	pulumi.Input

	ToImagePolicySpecPolicySemverOutput() ImagePolicySpecPolicySemverOutput
	ToImagePolicySpecPolicySemverOutputWithContext(context.Context) ImagePolicySpecPolicySemverOutput
}

// SemVer gives a semantic version range to check against the tags
// available.
type ImagePolicySpecPolicySemverArgs struct {
	// Range gives a semver range for the image tag; the highest
	// version within the range that's a tag yields the latest image.
	Range pulumi.StringPtrInput `pulumi:"range"`
}

func (ImagePolicySpecPolicySemverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicySemver)(nil)).Elem()
}

func (i ImagePolicySpecPolicySemverArgs) ToImagePolicySpecPolicySemverOutput() ImagePolicySpecPolicySemverOutput {
	return i.ToImagePolicySpecPolicySemverOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicySemverArgs) ToImagePolicySpecPolicySemverOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicySemverOutput)
}

func (i ImagePolicySpecPolicySemverArgs) ToImagePolicySpecPolicySemverPtrOutput() ImagePolicySpecPolicySemverPtrOutput {
	return i.ToImagePolicySpecPolicySemverPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicySemverArgs) ToImagePolicySpecPolicySemverPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicySemverOutput).ToImagePolicySpecPolicySemverPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicySemverPtrInput is an input type that accepts ImagePolicySpecPolicySemverArgs, ImagePolicySpecPolicySemverPtr and ImagePolicySpecPolicySemverPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicySemverPtrInput` via:
//
//	        ImagePolicySpecPolicySemverArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicySemverPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicySemverPtrOutput() ImagePolicySpecPolicySemverPtrOutput
	ToImagePolicySpecPolicySemverPtrOutputWithContext(context.Context) ImagePolicySpecPolicySemverPtrOutput
}

type imagePolicySpecPolicySemverPtrType ImagePolicySpecPolicySemverArgs

func ImagePolicySpecPolicySemverPtr(v *ImagePolicySpecPolicySemverArgs) ImagePolicySpecPolicySemverPtrInput {
	return (*imagePolicySpecPolicySemverPtrType)(v)
}

func (*imagePolicySpecPolicySemverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicySemver)(nil)).Elem()
}

func (i *imagePolicySpecPolicySemverPtrType) ToImagePolicySpecPolicySemverPtrOutput() ImagePolicySpecPolicySemverPtrOutput {
	return i.ToImagePolicySpecPolicySemverPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicySemverPtrType) ToImagePolicySpecPolicySemverPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicySemverPtrOutput)
}

// SemVer gives a semantic version range to check against the tags
// available.
type ImagePolicySpecPolicySemverOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicySemverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicySemver)(nil)).Elem()
}

func (o ImagePolicySpecPolicySemverOutput) ToImagePolicySpecPolicySemverOutput() ImagePolicySpecPolicySemverOutput {
	return o
}

func (o ImagePolicySpecPolicySemverOutput) ToImagePolicySpecPolicySemverOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverOutput {
	return o
}

func (o ImagePolicySpecPolicySemverOutput) ToImagePolicySpecPolicySemverPtrOutput() ImagePolicySpecPolicySemverPtrOutput {
	return o.ToImagePolicySpecPolicySemverPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicySemverOutput) ToImagePolicySpecPolicySemverPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicySemver) *ImagePolicySpecPolicySemver {
		return &v
	}).(ImagePolicySpecPolicySemverPtrOutput)
}

// Range gives a semver range for the image tag; the highest
// version within the range that's a tag yields the latest image.
func (o ImagePolicySpecPolicySemverOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicySemver) *string { return v.Range }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecPolicySemverPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicySemverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicySemver)(nil)).Elem()
}

func (o ImagePolicySpecPolicySemverPtrOutput) ToImagePolicySpecPolicySemverPtrOutput() ImagePolicySpecPolicySemverPtrOutput {
	return o
}

func (o ImagePolicySpecPolicySemverPtrOutput) ToImagePolicySpecPolicySemverPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPtrOutput {
	return o
}

func (o ImagePolicySpecPolicySemverPtrOutput) Elem() ImagePolicySpecPolicySemverOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicySemver) ImagePolicySpecPolicySemver {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicySemver
		return ret
	}).(ImagePolicySpecPolicySemverOutput)
}

// Range gives a semver range for the image tag; the highest
// version within the range that's a tag yields the latest image.
func (o ImagePolicySpecPolicySemverPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicySemver) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// SemVer gives a semantic version range to check against the tags
// available.
type ImagePolicySpecPolicySemverPatch struct {
	// Range gives a semver range for the image tag; the highest
	// version within the range that's a tag yields the latest image.
	Range *string `pulumi:"range"`
}

// ImagePolicySpecPolicySemverPatchInput is an input type that accepts ImagePolicySpecPolicySemverPatchArgs and ImagePolicySpecPolicySemverPatchOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicySemverPatchInput` via:
//
//	ImagePolicySpecPolicySemverPatchArgs{...}
type ImagePolicySpecPolicySemverPatchInput interface {
	pulumi.Input

	ToImagePolicySpecPolicySemverPatchOutput() ImagePolicySpecPolicySemverPatchOutput
	ToImagePolicySpecPolicySemverPatchOutputWithContext(context.Context) ImagePolicySpecPolicySemverPatchOutput
}

// SemVer gives a semantic version range to check against the tags
// available.
type ImagePolicySpecPolicySemverPatchArgs struct {
	// Range gives a semver range for the image tag; the highest
	// version within the range that's a tag yields the latest image.
	Range pulumi.StringPtrInput `pulumi:"range"`
}

func (ImagePolicySpecPolicySemverPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicySemverPatch)(nil)).Elem()
}

func (i ImagePolicySpecPolicySemverPatchArgs) ToImagePolicySpecPolicySemverPatchOutput() ImagePolicySpecPolicySemverPatchOutput {
	return i.ToImagePolicySpecPolicySemverPatchOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicySemverPatchArgs) ToImagePolicySpecPolicySemverPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicySemverPatchOutput)
}

func (i ImagePolicySpecPolicySemverPatchArgs) ToImagePolicySpecPolicySemverPatchPtrOutput() ImagePolicySpecPolicySemverPatchPtrOutput {
	return i.ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicySpecPolicySemverPatchArgs) ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicySemverPatchOutput).ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(ctx)
}

// ImagePolicySpecPolicySemverPatchPtrInput is an input type that accepts ImagePolicySpecPolicySemverPatchArgs, ImagePolicySpecPolicySemverPatchPtr and ImagePolicySpecPolicySemverPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicySpecPolicySemverPatchPtrInput` via:
//
//	        ImagePolicySpecPolicySemverPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicySpecPolicySemverPatchPtrInput interface {
	pulumi.Input

	ToImagePolicySpecPolicySemverPatchPtrOutput() ImagePolicySpecPolicySemverPatchPtrOutput
	ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(context.Context) ImagePolicySpecPolicySemverPatchPtrOutput
}

type imagePolicySpecPolicySemverPatchPtrType ImagePolicySpecPolicySemverPatchArgs

func ImagePolicySpecPolicySemverPatchPtr(v *ImagePolicySpecPolicySemverPatchArgs) ImagePolicySpecPolicySemverPatchPtrInput {
	return (*imagePolicySpecPolicySemverPatchPtrType)(v)
}

func (*imagePolicySpecPolicySemverPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicySemverPatch)(nil)).Elem()
}

func (i *imagePolicySpecPolicySemverPatchPtrType) ToImagePolicySpecPolicySemverPatchPtrOutput() ImagePolicySpecPolicySemverPatchPtrOutput {
	return i.ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicySpecPolicySemverPatchPtrType) ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicySpecPolicySemverPatchPtrOutput)
}

// SemVer gives a semantic version range to check against the tags
// available.
type ImagePolicySpecPolicySemverPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicySemverPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicySpecPolicySemverPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicySemverPatchOutput) ToImagePolicySpecPolicySemverPatchOutput() ImagePolicySpecPolicySemverPatchOutput {
	return o
}

func (o ImagePolicySpecPolicySemverPatchOutput) ToImagePolicySpecPolicySemverPatchOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPatchOutput {
	return o
}

func (o ImagePolicySpecPolicySemverPatchOutput) ToImagePolicySpecPolicySemverPatchPtrOutput() ImagePolicySpecPolicySemverPatchPtrOutput {
	return o.ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicySpecPolicySemverPatchOutput) ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicySpecPolicySemverPatch) *ImagePolicySpecPolicySemverPatch {
		return &v
	}).(ImagePolicySpecPolicySemverPatchPtrOutput)
}

// Range gives a semver range for the image tag; the highest
// version within the range that's a tag yields the latest image.
func (o ImagePolicySpecPolicySemverPatchOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicySpecPolicySemverPatch) *string { return v.Range }).(pulumi.StringPtrOutput)
}

type ImagePolicySpecPolicySemverPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicySpecPolicySemverPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicySpecPolicySemverPatch)(nil)).Elem()
}

func (o ImagePolicySpecPolicySemverPatchPtrOutput) ToImagePolicySpecPolicySemverPatchPtrOutput() ImagePolicySpecPolicySemverPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicySemverPatchPtrOutput) ToImagePolicySpecPolicySemverPatchPtrOutputWithContext(ctx context.Context) ImagePolicySpecPolicySemverPatchPtrOutput {
	return o
}

func (o ImagePolicySpecPolicySemverPatchPtrOutput) Elem() ImagePolicySpecPolicySemverPatchOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicySemverPatch) ImagePolicySpecPolicySemverPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicySpecPolicySemverPatch
		return ret
	}).(ImagePolicySpecPolicySemverPatchOutput)
}

// Range gives a semver range for the image tag; the highest
// version within the range that's a tag yields the latest image.
func (o ImagePolicySpecPolicySemverPatchPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicySpecPolicySemverPatch) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// ImagePolicyStatus defines the observed state of ImagePolicy
type ImagePolicyStatus struct {
	Conditions []ImagePolicyStatusConditions `pulumi:"conditions"`
	// LatestImage gives the first in the list of images scanned by
	// the image repository, when filtered and ordered according to
	// the policy.
	//
	// Deprecated: Replaced by the composite "latestRef" field.
	LatestImage        *string                     `pulumi:"latestImage"`
	LatestRef          *ImagePolicyStatusLatestRef `pulumi:"latestRef"`
	ObservedGeneration *int                        `pulumi:"observedGeneration"`
	// ObservedPreviousImage is the observed previous LatestImage. It is used
	// to keep track of the previous and current images.
	//
	// Deprecated: Replaced by the composite "observedPreviousRef" field.
	ObservedPreviousImage *string                               `pulumi:"observedPreviousImage"`
	ObservedPreviousRef   *ImagePolicyStatusObservedPreviousRef `pulumi:"observedPreviousRef"`
}

// ImagePolicyStatusInput is an input type that accepts ImagePolicyStatusArgs and ImagePolicyStatusOutput values.
// You can construct a concrete instance of `ImagePolicyStatusInput` via:
//
//	ImagePolicyStatusArgs{...}
type ImagePolicyStatusInput interface {
	pulumi.Input

	ToImagePolicyStatusOutput() ImagePolicyStatusOutput
	ToImagePolicyStatusOutputWithContext(context.Context) ImagePolicyStatusOutput
}

// ImagePolicyStatus defines the observed state of ImagePolicy
type ImagePolicyStatusArgs struct {
	Conditions ImagePolicyStatusConditionsArrayInput `pulumi:"conditions"`
	// LatestImage gives the first in the list of images scanned by
	// the image repository, when filtered and ordered according to
	// the policy.
	//
	// Deprecated: Replaced by the composite "latestRef" field.
	LatestImage        pulumi.StringPtrInput              `pulumi:"latestImage"`
	LatestRef          ImagePolicyStatusLatestRefPtrInput `pulumi:"latestRef"`
	ObservedGeneration pulumi.IntPtrInput                 `pulumi:"observedGeneration"`
	// ObservedPreviousImage is the observed previous LatestImage. It is used
	// to keep track of the previous and current images.
	//
	// Deprecated: Replaced by the composite "observedPreviousRef" field.
	ObservedPreviousImage pulumi.StringPtrInput                        `pulumi:"observedPreviousImage"`
	ObservedPreviousRef   ImagePolicyStatusObservedPreviousRefPtrInput `pulumi:"observedPreviousRef"`
}

func (ImagePolicyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatus)(nil)).Elem()
}

func (i ImagePolicyStatusArgs) ToImagePolicyStatusOutput() ImagePolicyStatusOutput {
	return i.ToImagePolicyStatusOutputWithContext(context.Background())
}

func (i ImagePolicyStatusArgs) ToImagePolicyStatusOutputWithContext(ctx context.Context) ImagePolicyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusOutput)
}

func (i ImagePolicyStatusArgs) ToImagePolicyStatusPtrOutput() ImagePolicyStatusPtrOutput {
	return i.ToImagePolicyStatusPtrOutputWithContext(context.Background())
}

func (i ImagePolicyStatusArgs) ToImagePolicyStatusPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusOutput).ToImagePolicyStatusPtrOutputWithContext(ctx)
}

// ImagePolicyStatusPtrInput is an input type that accepts ImagePolicyStatusArgs, ImagePolicyStatusPtr and ImagePolicyStatusPtrOutput values.
// You can construct a concrete instance of `ImagePolicyStatusPtrInput` via:
//
//	        ImagePolicyStatusArgs{...}
//
//	or:
//
//	        nil
type ImagePolicyStatusPtrInput interface {
	pulumi.Input

	ToImagePolicyStatusPtrOutput() ImagePolicyStatusPtrOutput
	ToImagePolicyStatusPtrOutputWithContext(context.Context) ImagePolicyStatusPtrOutput
}

type imagePolicyStatusPtrType ImagePolicyStatusArgs

func ImagePolicyStatusPtr(v *ImagePolicyStatusArgs) ImagePolicyStatusPtrInput {
	return (*imagePolicyStatusPtrType)(v)
}

func (*imagePolicyStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatus)(nil)).Elem()
}

func (i *imagePolicyStatusPtrType) ToImagePolicyStatusPtrOutput() ImagePolicyStatusPtrOutput {
	return i.ToImagePolicyStatusPtrOutputWithContext(context.Background())
}

func (i *imagePolicyStatusPtrType) ToImagePolicyStatusPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusPtrOutput)
}

// ImagePolicyStatus defines the observed state of ImagePolicy
type ImagePolicyStatusOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatus)(nil)).Elem()
}

func (o ImagePolicyStatusOutput) ToImagePolicyStatusOutput() ImagePolicyStatusOutput {
	return o
}

func (o ImagePolicyStatusOutput) ToImagePolicyStatusOutputWithContext(ctx context.Context) ImagePolicyStatusOutput {
	return o
}

func (o ImagePolicyStatusOutput) ToImagePolicyStatusPtrOutput() ImagePolicyStatusPtrOutput {
	return o.ToImagePolicyStatusPtrOutputWithContext(context.Background())
}

func (o ImagePolicyStatusOutput) ToImagePolicyStatusPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicyStatus) *ImagePolicyStatus {
		return &v
	}).(ImagePolicyStatusPtrOutput)
}

func (o ImagePolicyStatusOutput) Conditions() ImagePolicyStatusConditionsArrayOutput {
	return o.ApplyT(func(v ImagePolicyStatus) []ImagePolicyStatusConditions { return v.Conditions }).(ImagePolicyStatusConditionsArrayOutput)
}

// LatestImage gives the first in the list of images scanned by
// the image repository, when filtered and ordered according to
// the policy.
//
// Deprecated: Replaced by the composite "latestRef" field.
func (o ImagePolicyStatusOutput) LatestImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatus) *string { return v.LatestImage }).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusOutput) LatestRef() ImagePolicyStatusLatestRefPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatus) *ImagePolicyStatusLatestRef { return v.LatestRef }).(ImagePolicyStatusLatestRefPtrOutput)
}

func (o ImagePolicyStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedPreviousImage is the observed previous LatestImage. It is used
// to keep track of the previous and current images.
//
// Deprecated: Replaced by the composite "observedPreviousRef" field.
func (o ImagePolicyStatusOutput) ObservedPreviousImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatus) *string { return v.ObservedPreviousImage }).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusOutput) ObservedPreviousRef() ImagePolicyStatusObservedPreviousRefPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatus) *ImagePolicyStatusObservedPreviousRef { return v.ObservedPreviousRef }).(ImagePolicyStatusObservedPreviousRefPtrOutput)
}

type ImagePolicyStatusPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatus)(nil)).Elem()
}

func (o ImagePolicyStatusPtrOutput) ToImagePolicyStatusPtrOutput() ImagePolicyStatusPtrOutput {
	return o
}

func (o ImagePolicyStatusPtrOutput) ToImagePolicyStatusPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPtrOutput {
	return o
}

func (o ImagePolicyStatusPtrOutput) Elem() ImagePolicyStatusOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) ImagePolicyStatus {
		if v != nil {
			return *v
		}
		var ret ImagePolicyStatus
		return ret
	}).(ImagePolicyStatusOutput)
}

func (o ImagePolicyStatusPtrOutput) Conditions() ImagePolicyStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) []ImagePolicyStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ImagePolicyStatusConditionsArrayOutput)
}

// LatestImage gives the first in the list of images scanned by
// the image repository, when filtered and ordered according to
// the policy.
//
// Deprecated: Replaced by the composite "latestRef" field.
func (o ImagePolicyStatusPtrOutput) LatestImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) *string {
		if v == nil {
			return nil
		}
		return v.LatestImage
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusPtrOutput) LatestRef() ImagePolicyStatusLatestRefPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) *ImagePolicyStatusLatestRef {
		if v == nil {
			return nil
		}
		return v.LatestRef
	}).(ImagePolicyStatusLatestRefPtrOutput)
}

func (o ImagePolicyStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedPreviousImage is the observed previous LatestImage. It is used
// to keep track of the previous and current images.
//
// Deprecated: Replaced by the composite "observedPreviousRef" field.
func (o ImagePolicyStatusPtrOutput) ObservedPreviousImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedPreviousImage
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusPtrOutput) ObservedPreviousRef() ImagePolicyStatusObservedPreviousRefPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatus) *ImagePolicyStatusObservedPreviousRef {
		if v == nil {
			return nil
		}
		return v.ObservedPreviousRef
	}).(ImagePolicyStatusObservedPreviousRefPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImagePolicyStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ImagePolicyStatusConditionsInput is an input type that accepts ImagePolicyStatusConditionsArgs and ImagePolicyStatusConditionsOutput values.
// You can construct a concrete instance of `ImagePolicyStatusConditionsInput` via:
//
//	ImagePolicyStatusConditionsArgs{...}
type ImagePolicyStatusConditionsInput interface {
	pulumi.Input

	ToImagePolicyStatusConditionsOutput() ImagePolicyStatusConditionsOutput
	ToImagePolicyStatusConditionsOutputWithContext(context.Context) ImagePolicyStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImagePolicyStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ImagePolicyStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusConditions)(nil)).Elem()
}

func (i ImagePolicyStatusConditionsArgs) ToImagePolicyStatusConditionsOutput() ImagePolicyStatusConditionsOutput {
	return i.ToImagePolicyStatusConditionsOutputWithContext(context.Background())
}

func (i ImagePolicyStatusConditionsArgs) ToImagePolicyStatusConditionsOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusConditionsOutput)
}

// ImagePolicyStatusConditionsArrayInput is an input type that accepts ImagePolicyStatusConditionsArray and ImagePolicyStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ImagePolicyStatusConditionsArrayInput` via:
//
//	ImagePolicyStatusConditionsArray{ ImagePolicyStatusConditionsArgs{...} }
type ImagePolicyStatusConditionsArrayInput interface {
	pulumi.Input

	ToImagePolicyStatusConditionsArrayOutput() ImagePolicyStatusConditionsArrayOutput
	ToImagePolicyStatusConditionsArrayOutputWithContext(context.Context) ImagePolicyStatusConditionsArrayOutput
}

type ImagePolicyStatusConditionsArray []ImagePolicyStatusConditionsInput

func (ImagePolicyStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePolicyStatusConditions)(nil)).Elem()
}

func (i ImagePolicyStatusConditionsArray) ToImagePolicyStatusConditionsArrayOutput() ImagePolicyStatusConditionsArrayOutput {
	return i.ToImagePolicyStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ImagePolicyStatusConditionsArray) ToImagePolicyStatusConditionsArrayOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImagePolicyStatusConditionsOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusConditions)(nil)).Elem()
}

func (o ImagePolicyStatusConditionsOutput) ToImagePolicyStatusConditionsOutput() ImagePolicyStatusConditionsOutput {
	return o
}

func (o ImagePolicyStatusConditionsOutput) ToImagePolicyStatusConditionsOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ImagePolicyStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ImagePolicyStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ImagePolicyStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ImagePolicyStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ImagePolicyStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ImagePolicyStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImagePolicyStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePolicyStatusConditions)(nil)).Elem()
}

func (o ImagePolicyStatusConditionsArrayOutput) ToImagePolicyStatusConditionsArrayOutput() ImagePolicyStatusConditionsArrayOutput {
	return o
}

func (o ImagePolicyStatusConditionsArrayOutput) ToImagePolicyStatusConditionsArrayOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsArrayOutput {
	return o
}

func (o ImagePolicyStatusConditionsArrayOutput) Index(i pulumi.IntInput) ImagePolicyStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagePolicyStatusConditions {
		return vs[0].([]ImagePolicyStatusConditions)[vs[1].(int)]
	}).(ImagePolicyStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImagePolicyStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ImagePolicyStatusConditionsPatchInput is an input type that accepts ImagePolicyStatusConditionsPatchArgs and ImagePolicyStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ImagePolicyStatusConditionsPatchInput` via:
//
//	ImagePolicyStatusConditionsPatchArgs{...}
type ImagePolicyStatusConditionsPatchInput interface {
	pulumi.Input

	ToImagePolicyStatusConditionsPatchOutput() ImagePolicyStatusConditionsPatchOutput
	ToImagePolicyStatusConditionsPatchOutputWithContext(context.Context) ImagePolicyStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImagePolicyStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ImagePolicyStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusConditionsPatch)(nil)).Elem()
}

func (i ImagePolicyStatusConditionsPatchArgs) ToImagePolicyStatusConditionsPatchOutput() ImagePolicyStatusConditionsPatchOutput {
	return i.ToImagePolicyStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ImagePolicyStatusConditionsPatchArgs) ToImagePolicyStatusConditionsPatchOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusConditionsPatchOutput)
}

// ImagePolicyStatusConditionsPatchArrayInput is an input type that accepts ImagePolicyStatusConditionsPatchArray and ImagePolicyStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ImagePolicyStatusConditionsPatchArrayInput` via:
//
//	ImagePolicyStatusConditionsPatchArray{ ImagePolicyStatusConditionsPatchArgs{...} }
type ImagePolicyStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToImagePolicyStatusConditionsPatchArrayOutput() ImagePolicyStatusConditionsPatchArrayOutput
	ToImagePolicyStatusConditionsPatchArrayOutputWithContext(context.Context) ImagePolicyStatusConditionsPatchArrayOutput
}

type ImagePolicyStatusConditionsPatchArray []ImagePolicyStatusConditionsPatchInput

func (ImagePolicyStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePolicyStatusConditionsPatch)(nil)).Elem()
}

func (i ImagePolicyStatusConditionsPatchArray) ToImagePolicyStatusConditionsPatchArrayOutput() ImagePolicyStatusConditionsPatchArrayOutput {
	return i.ToImagePolicyStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ImagePolicyStatusConditionsPatchArray) ToImagePolicyStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImagePolicyStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusConditionsPatch)(nil)).Elem()
}

func (o ImagePolicyStatusConditionsPatchOutput) ToImagePolicyStatusConditionsPatchOutput() ImagePolicyStatusConditionsPatchOutput {
	return o
}

func (o ImagePolicyStatusConditionsPatchOutput) ToImagePolicyStatusConditionsPatchOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ImagePolicyStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ImagePolicyStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ImagePolicyStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ImagePolicyStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ImagePolicyStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ImagePolicyStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImagePolicyStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagePolicyStatusConditionsPatch)(nil)).Elem()
}

func (o ImagePolicyStatusConditionsPatchArrayOutput) ToImagePolicyStatusConditionsPatchArrayOutput() ImagePolicyStatusConditionsPatchArrayOutput {
	return o
}

func (o ImagePolicyStatusConditionsPatchArrayOutput) ToImagePolicyStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ImagePolicyStatusConditionsPatchArrayOutput {
	return o
}

func (o ImagePolicyStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ImagePolicyStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagePolicyStatusConditionsPatch {
		return vs[0].([]ImagePolicyStatusConditionsPatch)[vs[1].(int)]
	}).(ImagePolicyStatusConditionsPatchOutput)
}

// LatestRef gives the first in the list of images scanned by
// the image repository, when filtered and ordered according
// to the policy.
type ImagePolicyStatusLatestRef struct {
	// Digest is the image's digest.
	Digest *string `pulumi:"digest"`
	// Name is the bare image's name.
	Name *string `pulumi:"name"`
	// Tag is the image's tag.
	Tag *string `pulumi:"tag"`
}

// ImagePolicyStatusLatestRefInput is an input type that accepts ImagePolicyStatusLatestRefArgs and ImagePolicyStatusLatestRefOutput values.
// You can construct a concrete instance of `ImagePolicyStatusLatestRefInput` via:
//
//	ImagePolicyStatusLatestRefArgs{...}
type ImagePolicyStatusLatestRefInput interface {
	pulumi.Input

	ToImagePolicyStatusLatestRefOutput() ImagePolicyStatusLatestRefOutput
	ToImagePolicyStatusLatestRefOutputWithContext(context.Context) ImagePolicyStatusLatestRefOutput
}

// LatestRef gives the first in the list of images scanned by
// the image repository, when filtered and ordered according
// to the policy.
type ImagePolicyStatusLatestRefArgs struct {
	// Digest is the image's digest.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is the bare image's name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tag is the image's tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ImagePolicyStatusLatestRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusLatestRef)(nil)).Elem()
}

func (i ImagePolicyStatusLatestRefArgs) ToImagePolicyStatusLatestRefOutput() ImagePolicyStatusLatestRefOutput {
	return i.ToImagePolicyStatusLatestRefOutputWithContext(context.Background())
}

func (i ImagePolicyStatusLatestRefArgs) ToImagePolicyStatusLatestRefOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusLatestRefOutput)
}

func (i ImagePolicyStatusLatestRefArgs) ToImagePolicyStatusLatestRefPtrOutput() ImagePolicyStatusLatestRefPtrOutput {
	return i.ToImagePolicyStatusLatestRefPtrOutputWithContext(context.Background())
}

func (i ImagePolicyStatusLatestRefArgs) ToImagePolicyStatusLatestRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusLatestRefOutput).ToImagePolicyStatusLatestRefPtrOutputWithContext(ctx)
}

// ImagePolicyStatusLatestRefPtrInput is an input type that accepts ImagePolicyStatusLatestRefArgs, ImagePolicyStatusLatestRefPtr and ImagePolicyStatusLatestRefPtrOutput values.
// You can construct a concrete instance of `ImagePolicyStatusLatestRefPtrInput` via:
//
//	        ImagePolicyStatusLatestRefArgs{...}
//
//	or:
//
//	        nil
type ImagePolicyStatusLatestRefPtrInput interface {
	pulumi.Input

	ToImagePolicyStatusLatestRefPtrOutput() ImagePolicyStatusLatestRefPtrOutput
	ToImagePolicyStatusLatestRefPtrOutputWithContext(context.Context) ImagePolicyStatusLatestRefPtrOutput
}

type imagePolicyStatusLatestRefPtrType ImagePolicyStatusLatestRefArgs

func ImagePolicyStatusLatestRefPtr(v *ImagePolicyStatusLatestRefArgs) ImagePolicyStatusLatestRefPtrInput {
	return (*imagePolicyStatusLatestRefPtrType)(v)
}

func (*imagePolicyStatusLatestRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusLatestRef)(nil)).Elem()
}

func (i *imagePolicyStatusLatestRefPtrType) ToImagePolicyStatusLatestRefPtrOutput() ImagePolicyStatusLatestRefPtrOutput {
	return i.ToImagePolicyStatusLatestRefPtrOutputWithContext(context.Background())
}

func (i *imagePolicyStatusLatestRefPtrType) ToImagePolicyStatusLatestRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusLatestRefPtrOutput)
}

// LatestRef gives the first in the list of images scanned by
// the image repository, when filtered and ordered according
// to the policy.
type ImagePolicyStatusLatestRefOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusLatestRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusLatestRef)(nil)).Elem()
}

func (o ImagePolicyStatusLatestRefOutput) ToImagePolicyStatusLatestRefOutput() ImagePolicyStatusLatestRefOutput {
	return o
}

func (o ImagePolicyStatusLatestRefOutput) ToImagePolicyStatusLatestRefOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefOutput {
	return o
}

func (o ImagePolicyStatusLatestRefOutput) ToImagePolicyStatusLatestRefPtrOutput() ImagePolicyStatusLatestRefPtrOutput {
	return o.ToImagePolicyStatusLatestRefPtrOutputWithContext(context.Background())
}

func (o ImagePolicyStatusLatestRefOutput) ToImagePolicyStatusLatestRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicyStatusLatestRef) *ImagePolicyStatusLatestRef {
		return &v
	}).(ImagePolicyStatusLatestRefPtrOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusLatestRefOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusLatestRef) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusLatestRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusLatestRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusLatestRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusLatestRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImagePolicyStatusLatestRefPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusLatestRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusLatestRef)(nil)).Elem()
}

func (o ImagePolicyStatusLatestRefPtrOutput) ToImagePolicyStatusLatestRefPtrOutput() ImagePolicyStatusLatestRefPtrOutput {
	return o
}

func (o ImagePolicyStatusLatestRefPtrOutput) ToImagePolicyStatusLatestRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPtrOutput {
	return o
}

func (o ImagePolicyStatusLatestRefPtrOutput) Elem() ImagePolicyStatusLatestRefOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRef) ImagePolicyStatusLatestRef {
		if v != nil {
			return *v
		}
		var ret ImagePolicyStatusLatestRef
		return ret
	}).(ImagePolicyStatusLatestRefOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusLatestRefPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRef) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusLatestRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusLatestRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// LatestRef gives the first in the list of images scanned by
// the image repository, when filtered and ordered according
// to the policy.
type ImagePolicyStatusLatestRefPatch struct {
	// Digest is the image's digest.
	Digest *string `pulumi:"digest"`
	// Name is the bare image's name.
	Name *string `pulumi:"name"`
	// Tag is the image's tag.
	Tag *string `pulumi:"tag"`
}

// ImagePolicyStatusLatestRefPatchInput is an input type that accepts ImagePolicyStatusLatestRefPatchArgs and ImagePolicyStatusLatestRefPatchOutput values.
// You can construct a concrete instance of `ImagePolicyStatusLatestRefPatchInput` via:
//
//	ImagePolicyStatusLatestRefPatchArgs{...}
type ImagePolicyStatusLatestRefPatchInput interface {
	pulumi.Input

	ToImagePolicyStatusLatestRefPatchOutput() ImagePolicyStatusLatestRefPatchOutput
	ToImagePolicyStatusLatestRefPatchOutputWithContext(context.Context) ImagePolicyStatusLatestRefPatchOutput
}

// LatestRef gives the first in the list of images scanned by
// the image repository, when filtered and ordered according
// to the policy.
type ImagePolicyStatusLatestRefPatchArgs struct {
	// Digest is the image's digest.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is the bare image's name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tag is the image's tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ImagePolicyStatusLatestRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusLatestRefPatch)(nil)).Elem()
}

func (i ImagePolicyStatusLatestRefPatchArgs) ToImagePolicyStatusLatestRefPatchOutput() ImagePolicyStatusLatestRefPatchOutput {
	return i.ToImagePolicyStatusLatestRefPatchOutputWithContext(context.Background())
}

func (i ImagePolicyStatusLatestRefPatchArgs) ToImagePolicyStatusLatestRefPatchOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusLatestRefPatchOutput)
}

func (i ImagePolicyStatusLatestRefPatchArgs) ToImagePolicyStatusLatestRefPatchPtrOutput() ImagePolicyStatusLatestRefPatchPtrOutput {
	return i.ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicyStatusLatestRefPatchArgs) ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusLatestRefPatchOutput).ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(ctx)
}

// ImagePolicyStatusLatestRefPatchPtrInput is an input type that accepts ImagePolicyStatusLatestRefPatchArgs, ImagePolicyStatusLatestRefPatchPtr and ImagePolicyStatusLatestRefPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicyStatusLatestRefPatchPtrInput` via:
//
//	        ImagePolicyStatusLatestRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicyStatusLatestRefPatchPtrInput interface {
	pulumi.Input

	ToImagePolicyStatusLatestRefPatchPtrOutput() ImagePolicyStatusLatestRefPatchPtrOutput
	ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(context.Context) ImagePolicyStatusLatestRefPatchPtrOutput
}

type imagePolicyStatusLatestRefPatchPtrType ImagePolicyStatusLatestRefPatchArgs

func ImagePolicyStatusLatestRefPatchPtr(v *ImagePolicyStatusLatestRefPatchArgs) ImagePolicyStatusLatestRefPatchPtrInput {
	return (*imagePolicyStatusLatestRefPatchPtrType)(v)
}

func (*imagePolicyStatusLatestRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusLatestRefPatch)(nil)).Elem()
}

func (i *imagePolicyStatusLatestRefPatchPtrType) ToImagePolicyStatusLatestRefPatchPtrOutput() ImagePolicyStatusLatestRefPatchPtrOutput {
	return i.ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicyStatusLatestRefPatchPtrType) ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusLatestRefPatchPtrOutput)
}

// LatestRef gives the first in the list of images scanned by
// the image repository, when filtered and ordered according
// to the policy.
type ImagePolicyStatusLatestRefPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusLatestRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusLatestRefPatch)(nil)).Elem()
}

func (o ImagePolicyStatusLatestRefPatchOutput) ToImagePolicyStatusLatestRefPatchOutput() ImagePolicyStatusLatestRefPatchOutput {
	return o
}

func (o ImagePolicyStatusLatestRefPatchOutput) ToImagePolicyStatusLatestRefPatchOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPatchOutput {
	return o
}

func (o ImagePolicyStatusLatestRefPatchOutput) ToImagePolicyStatusLatestRefPatchPtrOutput() ImagePolicyStatusLatestRefPatchPtrOutput {
	return o.ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicyStatusLatestRefPatchOutput) ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicyStatusLatestRefPatch) *ImagePolicyStatusLatestRefPatch {
		return &v
	}).(ImagePolicyStatusLatestRefPatchPtrOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusLatestRefPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusLatestRefPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusLatestRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusLatestRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusLatestRefPatchOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusLatestRefPatch) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImagePolicyStatusLatestRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusLatestRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusLatestRefPatch)(nil)).Elem()
}

func (o ImagePolicyStatusLatestRefPatchPtrOutput) ToImagePolicyStatusLatestRefPatchPtrOutput() ImagePolicyStatusLatestRefPatchPtrOutput {
	return o
}

func (o ImagePolicyStatusLatestRefPatchPtrOutput) ToImagePolicyStatusLatestRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusLatestRefPatchPtrOutput {
	return o
}

func (o ImagePolicyStatusLatestRefPatchPtrOutput) Elem() ImagePolicyStatusLatestRefPatchOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRefPatch) ImagePolicyStatusLatestRefPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicyStatusLatestRefPatch
		return ret
	}).(ImagePolicyStatusLatestRefPatchOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusLatestRefPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusLatestRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusLatestRefPatchPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusLatestRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// ObservedPreviousRef is the observed previous LatestRef. It is used
// to keep track of the previous and current images.
type ImagePolicyStatusObservedPreviousRef struct {
	// Digest is the image's digest.
	Digest *string `pulumi:"digest"`
	// Name is the bare image's name.
	Name *string `pulumi:"name"`
	// Tag is the image's tag.
	Tag *string `pulumi:"tag"`
}

// ImagePolicyStatusObservedPreviousRefInput is an input type that accepts ImagePolicyStatusObservedPreviousRefArgs and ImagePolicyStatusObservedPreviousRefOutput values.
// You can construct a concrete instance of `ImagePolicyStatusObservedPreviousRefInput` via:
//
//	ImagePolicyStatusObservedPreviousRefArgs{...}
type ImagePolicyStatusObservedPreviousRefInput interface {
	pulumi.Input

	ToImagePolicyStatusObservedPreviousRefOutput() ImagePolicyStatusObservedPreviousRefOutput
	ToImagePolicyStatusObservedPreviousRefOutputWithContext(context.Context) ImagePolicyStatusObservedPreviousRefOutput
}

// ObservedPreviousRef is the observed previous LatestRef. It is used
// to keep track of the previous and current images.
type ImagePolicyStatusObservedPreviousRefArgs struct {
	// Digest is the image's digest.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is the bare image's name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tag is the image's tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ImagePolicyStatusObservedPreviousRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusObservedPreviousRef)(nil)).Elem()
}

func (i ImagePolicyStatusObservedPreviousRefArgs) ToImagePolicyStatusObservedPreviousRefOutput() ImagePolicyStatusObservedPreviousRefOutput {
	return i.ToImagePolicyStatusObservedPreviousRefOutputWithContext(context.Background())
}

func (i ImagePolicyStatusObservedPreviousRefArgs) ToImagePolicyStatusObservedPreviousRefOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusObservedPreviousRefOutput)
}

func (i ImagePolicyStatusObservedPreviousRefArgs) ToImagePolicyStatusObservedPreviousRefPtrOutput() ImagePolicyStatusObservedPreviousRefPtrOutput {
	return i.ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(context.Background())
}

func (i ImagePolicyStatusObservedPreviousRefArgs) ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusObservedPreviousRefOutput).ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(ctx)
}

// ImagePolicyStatusObservedPreviousRefPtrInput is an input type that accepts ImagePolicyStatusObservedPreviousRefArgs, ImagePolicyStatusObservedPreviousRefPtr and ImagePolicyStatusObservedPreviousRefPtrOutput values.
// You can construct a concrete instance of `ImagePolicyStatusObservedPreviousRefPtrInput` via:
//
//	        ImagePolicyStatusObservedPreviousRefArgs{...}
//
//	or:
//
//	        nil
type ImagePolicyStatusObservedPreviousRefPtrInput interface {
	pulumi.Input

	ToImagePolicyStatusObservedPreviousRefPtrOutput() ImagePolicyStatusObservedPreviousRefPtrOutput
	ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(context.Context) ImagePolicyStatusObservedPreviousRefPtrOutput
}

type imagePolicyStatusObservedPreviousRefPtrType ImagePolicyStatusObservedPreviousRefArgs

func ImagePolicyStatusObservedPreviousRefPtr(v *ImagePolicyStatusObservedPreviousRefArgs) ImagePolicyStatusObservedPreviousRefPtrInput {
	return (*imagePolicyStatusObservedPreviousRefPtrType)(v)
}

func (*imagePolicyStatusObservedPreviousRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusObservedPreviousRef)(nil)).Elem()
}

func (i *imagePolicyStatusObservedPreviousRefPtrType) ToImagePolicyStatusObservedPreviousRefPtrOutput() ImagePolicyStatusObservedPreviousRefPtrOutput {
	return i.ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(context.Background())
}

func (i *imagePolicyStatusObservedPreviousRefPtrType) ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusObservedPreviousRefPtrOutput)
}

// ObservedPreviousRef is the observed previous LatestRef. It is used
// to keep track of the previous and current images.
type ImagePolicyStatusObservedPreviousRefOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusObservedPreviousRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusObservedPreviousRef)(nil)).Elem()
}

func (o ImagePolicyStatusObservedPreviousRefOutput) ToImagePolicyStatusObservedPreviousRefOutput() ImagePolicyStatusObservedPreviousRefOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefOutput) ToImagePolicyStatusObservedPreviousRefOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefOutput) ToImagePolicyStatusObservedPreviousRefPtrOutput() ImagePolicyStatusObservedPreviousRefPtrOutput {
	return o.ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(context.Background())
}

func (o ImagePolicyStatusObservedPreviousRefOutput) ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicyStatusObservedPreviousRef) *ImagePolicyStatusObservedPreviousRef {
		return &v
	}).(ImagePolicyStatusObservedPreviousRefPtrOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusObservedPreviousRefOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusObservedPreviousRef) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusObservedPreviousRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusObservedPreviousRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusObservedPreviousRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusObservedPreviousRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImagePolicyStatusObservedPreviousRefPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusObservedPreviousRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusObservedPreviousRef)(nil)).Elem()
}

func (o ImagePolicyStatusObservedPreviousRefPtrOutput) ToImagePolicyStatusObservedPreviousRefPtrOutput() ImagePolicyStatusObservedPreviousRefPtrOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefPtrOutput) ToImagePolicyStatusObservedPreviousRefPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPtrOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefPtrOutput) Elem() ImagePolicyStatusObservedPreviousRefOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRef) ImagePolicyStatusObservedPreviousRef {
		if v != nil {
			return *v
		}
		var ret ImagePolicyStatusObservedPreviousRef
		return ret
	}).(ImagePolicyStatusObservedPreviousRefOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusObservedPreviousRefPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRef) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusObservedPreviousRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusObservedPreviousRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// ObservedPreviousRef is the observed previous LatestRef. It is used
// to keep track of the previous and current images.
type ImagePolicyStatusObservedPreviousRefPatch struct {
	// Digest is the image's digest.
	Digest *string `pulumi:"digest"`
	// Name is the bare image's name.
	Name *string `pulumi:"name"`
	// Tag is the image's tag.
	Tag *string `pulumi:"tag"`
}

// ImagePolicyStatusObservedPreviousRefPatchInput is an input type that accepts ImagePolicyStatusObservedPreviousRefPatchArgs and ImagePolicyStatusObservedPreviousRefPatchOutput values.
// You can construct a concrete instance of `ImagePolicyStatusObservedPreviousRefPatchInput` via:
//
//	ImagePolicyStatusObservedPreviousRefPatchArgs{...}
type ImagePolicyStatusObservedPreviousRefPatchInput interface {
	pulumi.Input

	ToImagePolicyStatusObservedPreviousRefPatchOutput() ImagePolicyStatusObservedPreviousRefPatchOutput
	ToImagePolicyStatusObservedPreviousRefPatchOutputWithContext(context.Context) ImagePolicyStatusObservedPreviousRefPatchOutput
}

// ObservedPreviousRef is the observed previous LatestRef. It is used
// to keep track of the previous and current images.
type ImagePolicyStatusObservedPreviousRefPatchArgs struct {
	// Digest is the image's digest.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is the bare image's name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tag is the image's tag.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ImagePolicyStatusObservedPreviousRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusObservedPreviousRefPatch)(nil)).Elem()
}

func (i ImagePolicyStatusObservedPreviousRefPatchArgs) ToImagePolicyStatusObservedPreviousRefPatchOutput() ImagePolicyStatusObservedPreviousRefPatchOutput {
	return i.ToImagePolicyStatusObservedPreviousRefPatchOutputWithContext(context.Background())
}

func (i ImagePolicyStatusObservedPreviousRefPatchArgs) ToImagePolicyStatusObservedPreviousRefPatchOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusObservedPreviousRefPatchOutput)
}

func (i ImagePolicyStatusObservedPreviousRefPatchArgs) ToImagePolicyStatusObservedPreviousRefPatchPtrOutput() ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return i.ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicyStatusObservedPreviousRefPatchArgs) ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusObservedPreviousRefPatchOutput).ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(ctx)
}

// ImagePolicyStatusObservedPreviousRefPatchPtrInput is an input type that accepts ImagePolicyStatusObservedPreviousRefPatchArgs, ImagePolicyStatusObservedPreviousRefPatchPtr and ImagePolicyStatusObservedPreviousRefPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicyStatusObservedPreviousRefPatchPtrInput` via:
//
//	        ImagePolicyStatusObservedPreviousRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicyStatusObservedPreviousRefPatchPtrInput interface {
	pulumi.Input

	ToImagePolicyStatusObservedPreviousRefPatchPtrOutput() ImagePolicyStatusObservedPreviousRefPatchPtrOutput
	ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(context.Context) ImagePolicyStatusObservedPreviousRefPatchPtrOutput
}

type imagePolicyStatusObservedPreviousRefPatchPtrType ImagePolicyStatusObservedPreviousRefPatchArgs

func ImagePolicyStatusObservedPreviousRefPatchPtr(v *ImagePolicyStatusObservedPreviousRefPatchArgs) ImagePolicyStatusObservedPreviousRefPatchPtrInput {
	return (*imagePolicyStatusObservedPreviousRefPatchPtrType)(v)
}

func (*imagePolicyStatusObservedPreviousRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusObservedPreviousRefPatch)(nil)).Elem()
}

func (i *imagePolicyStatusObservedPreviousRefPatchPtrType) ToImagePolicyStatusObservedPreviousRefPatchPtrOutput() ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return i.ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicyStatusObservedPreviousRefPatchPtrType) ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusObservedPreviousRefPatchPtrOutput)
}

// ObservedPreviousRef is the observed previous LatestRef. It is used
// to keep track of the previous and current images.
type ImagePolicyStatusObservedPreviousRefPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusObservedPreviousRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusObservedPreviousRefPatch)(nil)).Elem()
}

func (o ImagePolicyStatusObservedPreviousRefPatchOutput) ToImagePolicyStatusObservedPreviousRefPatchOutput() ImagePolicyStatusObservedPreviousRefPatchOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefPatchOutput) ToImagePolicyStatusObservedPreviousRefPatchOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPatchOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefPatchOutput) ToImagePolicyStatusObservedPreviousRefPatchPtrOutput() ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return o.ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicyStatusObservedPreviousRefPatchOutput) ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicyStatusObservedPreviousRefPatch) *ImagePolicyStatusObservedPreviousRefPatch {
		return &v
	}).(ImagePolicyStatusObservedPreviousRefPatchPtrOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusObservedPreviousRefPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusObservedPreviousRefPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusObservedPreviousRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusObservedPreviousRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusObservedPreviousRefPatchOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusObservedPreviousRefPatch) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImagePolicyStatusObservedPreviousRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusObservedPreviousRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusObservedPreviousRefPatch)(nil)).Elem()
}

func (o ImagePolicyStatusObservedPreviousRefPatchPtrOutput) ToImagePolicyStatusObservedPreviousRefPatchPtrOutput() ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefPatchPtrOutput) ToImagePolicyStatusObservedPreviousRefPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return o
}

func (o ImagePolicyStatusObservedPreviousRefPatchPtrOutput) Elem() ImagePolicyStatusObservedPreviousRefPatchOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRefPatch) ImagePolicyStatusObservedPreviousRefPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicyStatusObservedPreviousRefPatch
		return ret
	}).(ImagePolicyStatusObservedPreviousRefPatchOutput)
}

// Digest is the image's digest.
func (o ImagePolicyStatusObservedPreviousRefPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// Name is the bare image's name.
func (o ImagePolicyStatusObservedPreviousRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Tag is the image's tag.
func (o ImagePolicyStatusObservedPreviousRefPatchPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusObservedPreviousRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// ImagePolicyStatus defines the observed state of ImagePolicy
type ImagePolicyStatusPatch struct {
	Conditions []ImagePolicyStatusConditionsPatch `pulumi:"conditions"`
	// LatestImage gives the first in the list of images scanned by
	// the image repository, when filtered and ordered according to
	// the policy.
	//
	// Deprecated: Replaced by the composite "latestRef" field.
	LatestImage        *string                          `pulumi:"latestImage"`
	LatestRef          *ImagePolicyStatusLatestRefPatch `pulumi:"latestRef"`
	ObservedGeneration *int                             `pulumi:"observedGeneration"`
	// ObservedPreviousImage is the observed previous LatestImage. It is used
	// to keep track of the previous and current images.
	//
	// Deprecated: Replaced by the composite "observedPreviousRef" field.
	ObservedPreviousImage *string                                    `pulumi:"observedPreviousImage"`
	ObservedPreviousRef   *ImagePolicyStatusObservedPreviousRefPatch `pulumi:"observedPreviousRef"`
}

// ImagePolicyStatusPatchInput is an input type that accepts ImagePolicyStatusPatchArgs and ImagePolicyStatusPatchOutput values.
// You can construct a concrete instance of `ImagePolicyStatusPatchInput` via:
//
//	ImagePolicyStatusPatchArgs{...}
type ImagePolicyStatusPatchInput interface {
	pulumi.Input

	ToImagePolicyStatusPatchOutput() ImagePolicyStatusPatchOutput
	ToImagePolicyStatusPatchOutputWithContext(context.Context) ImagePolicyStatusPatchOutput
}

// ImagePolicyStatus defines the observed state of ImagePolicy
type ImagePolicyStatusPatchArgs struct {
	Conditions ImagePolicyStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LatestImage gives the first in the list of images scanned by
	// the image repository, when filtered and ordered according to
	// the policy.
	//
	// Deprecated: Replaced by the composite "latestRef" field.
	LatestImage        pulumi.StringPtrInput                   `pulumi:"latestImage"`
	LatestRef          ImagePolicyStatusLatestRefPatchPtrInput `pulumi:"latestRef"`
	ObservedGeneration pulumi.IntPtrInput                      `pulumi:"observedGeneration"`
	// ObservedPreviousImage is the observed previous LatestImage. It is used
	// to keep track of the previous and current images.
	//
	// Deprecated: Replaced by the composite "observedPreviousRef" field.
	ObservedPreviousImage pulumi.StringPtrInput                             `pulumi:"observedPreviousImage"`
	ObservedPreviousRef   ImagePolicyStatusObservedPreviousRefPatchPtrInput `pulumi:"observedPreviousRef"`
}

func (ImagePolicyStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusPatch)(nil)).Elem()
}

func (i ImagePolicyStatusPatchArgs) ToImagePolicyStatusPatchOutput() ImagePolicyStatusPatchOutput {
	return i.ToImagePolicyStatusPatchOutputWithContext(context.Background())
}

func (i ImagePolicyStatusPatchArgs) ToImagePolicyStatusPatchOutputWithContext(ctx context.Context) ImagePolicyStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusPatchOutput)
}

func (i ImagePolicyStatusPatchArgs) ToImagePolicyStatusPatchPtrOutput() ImagePolicyStatusPatchPtrOutput {
	return i.ToImagePolicyStatusPatchPtrOutputWithContext(context.Background())
}

func (i ImagePolicyStatusPatchArgs) ToImagePolicyStatusPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusPatchOutput).ToImagePolicyStatusPatchPtrOutputWithContext(ctx)
}

// ImagePolicyStatusPatchPtrInput is an input type that accepts ImagePolicyStatusPatchArgs, ImagePolicyStatusPatchPtr and ImagePolicyStatusPatchPtrOutput values.
// You can construct a concrete instance of `ImagePolicyStatusPatchPtrInput` via:
//
//	        ImagePolicyStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ImagePolicyStatusPatchPtrInput interface {
	pulumi.Input

	ToImagePolicyStatusPatchPtrOutput() ImagePolicyStatusPatchPtrOutput
	ToImagePolicyStatusPatchPtrOutputWithContext(context.Context) ImagePolicyStatusPatchPtrOutput
}

type imagePolicyStatusPatchPtrType ImagePolicyStatusPatchArgs

func ImagePolicyStatusPatchPtr(v *ImagePolicyStatusPatchArgs) ImagePolicyStatusPatchPtrInput {
	return (*imagePolicyStatusPatchPtrType)(v)
}

func (*imagePolicyStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusPatch)(nil)).Elem()
}

func (i *imagePolicyStatusPatchPtrType) ToImagePolicyStatusPatchPtrOutput() ImagePolicyStatusPatchPtrOutput {
	return i.ToImagePolicyStatusPatchPtrOutputWithContext(context.Background())
}

func (i *imagePolicyStatusPatchPtrType) ToImagePolicyStatusPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyStatusPatchPtrOutput)
}

// ImagePolicyStatus defines the observed state of ImagePolicy
type ImagePolicyStatusPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagePolicyStatusPatch)(nil)).Elem()
}

func (o ImagePolicyStatusPatchOutput) ToImagePolicyStatusPatchOutput() ImagePolicyStatusPatchOutput {
	return o
}

func (o ImagePolicyStatusPatchOutput) ToImagePolicyStatusPatchOutputWithContext(ctx context.Context) ImagePolicyStatusPatchOutput {
	return o
}

func (o ImagePolicyStatusPatchOutput) ToImagePolicyStatusPatchPtrOutput() ImagePolicyStatusPatchPtrOutput {
	return o.ToImagePolicyStatusPatchPtrOutputWithContext(context.Background())
}

func (o ImagePolicyStatusPatchOutput) ToImagePolicyStatusPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImagePolicyStatusPatch) *ImagePolicyStatusPatch {
		return &v
	}).(ImagePolicyStatusPatchPtrOutput)
}

func (o ImagePolicyStatusPatchOutput) Conditions() ImagePolicyStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ImagePolicyStatusPatch) []ImagePolicyStatusConditionsPatch { return v.Conditions }).(ImagePolicyStatusConditionsPatchArrayOutput)
}

// LatestImage gives the first in the list of images scanned by
// the image repository, when filtered and ordered according to
// the policy.
//
// Deprecated: Replaced by the composite "latestRef" field.
func (o ImagePolicyStatusPatchOutput) LatestImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusPatch) *string { return v.LatestImage }).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusPatchOutput) LatestRef() ImagePolicyStatusLatestRefPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusPatch) *ImagePolicyStatusLatestRefPatch { return v.LatestRef }).(ImagePolicyStatusLatestRefPatchPtrOutput)
}

func (o ImagePolicyStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedPreviousImage is the observed previous LatestImage. It is used
// to keep track of the previous and current images.
//
// Deprecated: Replaced by the composite "observedPreviousRef" field.
func (o ImagePolicyStatusPatchOutput) ObservedPreviousImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusPatch) *string { return v.ObservedPreviousImage }).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusPatchOutput) ObservedPreviousRef() ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return o.ApplyT(func(v ImagePolicyStatusPatch) *ImagePolicyStatusObservedPreviousRefPatch {
		return v.ObservedPreviousRef
	}).(ImagePolicyStatusObservedPreviousRefPatchPtrOutput)
}

type ImagePolicyStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ImagePolicyStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyStatusPatch)(nil)).Elem()
}

func (o ImagePolicyStatusPatchPtrOutput) ToImagePolicyStatusPatchPtrOutput() ImagePolicyStatusPatchPtrOutput {
	return o
}

func (o ImagePolicyStatusPatchPtrOutput) ToImagePolicyStatusPatchPtrOutputWithContext(ctx context.Context) ImagePolicyStatusPatchPtrOutput {
	return o
}

func (o ImagePolicyStatusPatchPtrOutput) Elem() ImagePolicyStatusPatchOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) ImagePolicyStatusPatch {
		if v != nil {
			return *v
		}
		var ret ImagePolicyStatusPatch
		return ret
	}).(ImagePolicyStatusPatchOutput)
}

func (o ImagePolicyStatusPatchPtrOutput) Conditions() ImagePolicyStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) []ImagePolicyStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ImagePolicyStatusConditionsPatchArrayOutput)
}

// LatestImage gives the first in the list of images scanned by
// the image repository, when filtered and ordered according to
// the policy.
//
// Deprecated: Replaced by the composite "latestRef" field.
func (o ImagePolicyStatusPatchPtrOutput) LatestImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LatestImage
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusPatchPtrOutput) LatestRef() ImagePolicyStatusLatestRefPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) *ImagePolicyStatusLatestRefPatch {
		if v == nil {
			return nil
		}
		return v.LatestRef
	}).(ImagePolicyStatusLatestRefPatchPtrOutput)
}

func (o ImagePolicyStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedPreviousImage is the observed previous LatestImage. It is used
// to keep track of the previous and current images.
//
// Deprecated: Replaced by the composite "observedPreviousRef" field.
func (o ImagePolicyStatusPatchPtrOutput) ObservedPreviousImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedPreviousImage
	}).(pulumi.StringPtrOutput)
}

func (o ImagePolicyStatusPatchPtrOutput) ObservedPreviousRef() ImagePolicyStatusObservedPreviousRefPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicyStatusPatch) *ImagePolicyStatusObservedPreviousRefPatch {
		if v == nil {
			return nil
		}
		return v.ObservedPreviousRef
	}).(ImagePolicyStatusObservedPreviousRefPatchPtrOutput)
}

// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *ImageRepositorySpec   `pulumi:"spec"`
	Status   *ImageRepositoryStatus `pulumi:"status"`
}

// ImageRepositoryTypeInput is an input type that accepts ImageRepositoryTypeArgs and ImageRepositoryTypeOutput values.
// You can construct a concrete instance of `ImageRepositoryTypeInput` via:
//
//	ImageRepositoryTypeArgs{...}
type ImageRepositoryTypeInput interface {
	pulumi.Input

	ToImageRepositoryTypeOutput() ImageRepositoryTypeOutput
	ToImageRepositoryTypeOutputWithContext(context.Context) ImageRepositoryTypeOutput
}

// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput     `pulumi:"metadata"`
	Spec     ImageRepositorySpecPtrInput   `pulumi:"spec"`
	Status   ImageRepositoryStatusPtrInput `pulumi:"status"`
}

func (ImageRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryType)(nil)).Elem()
}

func (i ImageRepositoryTypeArgs) ToImageRepositoryTypeOutput() ImageRepositoryTypeOutput {
	return i.ToImageRepositoryTypeOutputWithContext(context.Background())
}

func (i ImageRepositoryTypeArgs) ToImageRepositoryTypeOutputWithContext(ctx context.Context) ImageRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryTypeOutput)
}

// ImageRepositoryTypeArrayInput is an input type that accepts ImageRepositoryTypeArray and ImageRepositoryTypeArrayOutput values.
// You can construct a concrete instance of `ImageRepositoryTypeArrayInput` via:
//
//	ImageRepositoryTypeArray{ ImageRepositoryTypeArgs{...} }
type ImageRepositoryTypeArrayInput interface {
	pulumi.Input

	ToImageRepositoryTypeArrayOutput() ImageRepositoryTypeArrayOutput
	ToImageRepositoryTypeArrayOutputWithContext(context.Context) ImageRepositoryTypeArrayOutput
}

type ImageRepositoryTypeArray []ImageRepositoryTypeInput

func (ImageRepositoryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositoryType)(nil)).Elem()
}

func (i ImageRepositoryTypeArray) ToImageRepositoryTypeArrayOutput() ImageRepositoryTypeArrayOutput {
	return i.ToImageRepositoryTypeArrayOutputWithContext(context.Background())
}

func (i ImageRepositoryTypeArray) ToImageRepositoryTypeArrayOutputWithContext(ctx context.Context) ImageRepositoryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryTypeArrayOutput)
}

// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryTypeOutput struct{ *pulumi.OutputState }

func (ImageRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryType)(nil)).Elem()
}

func (o ImageRepositoryTypeOutput) ToImageRepositoryTypeOutput() ImageRepositoryTypeOutput {
	return o
}

func (o ImageRepositoryTypeOutput) ToImageRepositoryTypeOutputWithContext(ctx context.Context) ImageRepositoryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImageRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ImageRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ImageRepositoryTypeOutput) Spec() ImageRepositorySpecPtrOutput {
	return o.ApplyT(func(v ImageRepositoryType) *ImageRepositorySpec { return v.Spec }).(ImageRepositorySpecPtrOutput)
}

func (o ImageRepositoryTypeOutput) Status() ImageRepositoryStatusPtrOutput {
	return o.ApplyT(func(v ImageRepositoryType) *ImageRepositoryStatus { return v.Status }).(ImageRepositoryStatusPtrOutput)
}

type ImageRepositoryTypeArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositoryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositoryType)(nil)).Elem()
}

func (o ImageRepositoryTypeArrayOutput) ToImageRepositoryTypeArrayOutput() ImageRepositoryTypeArrayOutput {
	return o
}

func (o ImageRepositoryTypeArrayOutput) ToImageRepositoryTypeArrayOutputWithContext(ctx context.Context) ImageRepositoryTypeArrayOutput {
	return o
}

func (o ImageRepositoryTypeArrayOutput) Index(i pulumi.IntInput) ImageRepositoryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRepositoryType {
		return vs[0].([]ImageRepositoryType)[vs[1].(int)]
	}).(ImageRepositoryTypeOutput)
}

// ImageRepositoryList is a list of ImageRepository
type ImageRepositoryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ImageRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ImageRepositoryListTypeInput is an input type that accepts ImageRepositoryListTypeArgs and ImageRepositoryListTypeOutput values.
// You can construct a concrete instance of `ImageRepositoryListTypeInput` via:
//
//	ImageRepositoryListTypeArgs{...}
type ImageRepositoryListTypeInput interface {
	pulumi.Input

	ToImageRepositoryListTypeOutput() ImageRepositoryListTypeOutput
	ToImageRepositoryListTypeOutputWithContext(context.Context) ImageRepositoryListTypeOutput
}

// ImageRepositoryList is a list of ImageRepository
type ImageRepositoryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImageRepositoryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ImageRepositoryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryListType)(nil)).Elem()
}

func (i ImageRepositoryListTypeArgs) ToImageRepositoryListTypeOutput() ImageRepositoryListTypeOutput {
	return i.ToImageRepositoryListTypeOutputWithContext(context.Background())
}

func (i ImageRepositoryListTypeArgs) ToImageRepositoryListTypeOutputWithContext(ctx context.Context) ImageRepositoryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryListTypeOutput)
}

// ImageRepositoryList is a list of ImageRepository
type ImageRepositoryListTypeOutput struct{ *pulumi.OutputState }

func (ImageRepositoryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryListType)(nil)).Elem()
}

func (o ImageRepositoryListTypeOutput) ToImageRepositoryListTypeOutput() ImageRepositoryListTypeOutput {
	return o
}

func (o ImageRepositoryListTypeOutput) ToImageRepositoryListTypeOutputWithContext(ctx context.Context) ImageRepositoryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageRepositoryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ImageRepositoryListTypeOutput) Items() ImageRepositoryTypeArrayOutput {
	return o.ApplyT(func(v ImageRepositoryListType) []ImageRepositoryType { return v.Items }).(ImageRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ImageRepositoryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch     `pulumi:"metadata"`
	Spec     *ImageRepositorySpecPatch   `pulumi:"spec"`
	Status   *ImageRepositoryStatusPatch `pulumi:"status"`
}

// ImageRepositoryPatchTypeInput is an input type that accepts ImageRepositoryPatchTypeArgs and ImageRepositoryPatchTypeOutput values.
// You can construct a concrete instance of `ImageRepositoryPatchTypeInput` via:
//
//	ImageRepositoryPatchTypeArgs{...}
type ImageRepositoryPatchTypeInput interface {
	pulumi.Input

	ToImageRepositoryPatchTypeOutput() ImageRepositoryPatchTypeOutput
	ToImageRepositoryPatchTypeOutputWithContext(context.Context) ImageRepositoryPatchTypeOutput
}

// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput     `pulumi:"metadata"`
	Spec     ImageRepositorySpecPatchPtrInput   `pulumi:"spec"`
	Status   ImageRepositoryStatusPatchPtrInput `pulumi:"status"`
}

func (ImageRepositoryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryPatchType)(nil)).Elem()
}

func (i ImageRepositoryPatchTypeArgs) ToImageRepositoryPatchTypeOutput() ImageRepositoryPatchTypeOutput {
	return i.ToImageRepositoryPatchTypeOutputWithContext(context.Background())
}

func (i ImageRepositoryPatchTypeArgs) ToImageRepositoryPatchTypeOutputWithContext(ctx context.Context) ImageRepositoryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryPatchTypeOutput)
}

// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryPatchTypeOutput struct{ *pulumi.OutputState }

func (ImageRepositoryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryPatchType)(nil)).Elem()
}

func (o ImageRepositoryPatchTypeOutput) ToImageRepositoryPatchTypeOutput() ImageRepositoryPatchTypeOutput {
	return o
}

func (o ImageRepositoryPatchTypeOutput) ToImageRepositoryPatchTypeOutputWithContext(ctx context.Context) ImageRepositoryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageRepositoryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImageRepositoryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositoryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ImageRepositoryPatchTypeOutput) Spec() ImageRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositoryPatchType) *ImageRepositorySpecPatch { return v.Spec }).(ImageRepositorySpecPatchPtrOutput)
}

func (o ImageRepositoryPatchTypeOutput) Status() ImageRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositoryPatchType) *ImageRepositoryStatusPatch { return v.Status }).(ImageRepositoryStatusPatchPtrOutput)
}

// ImageRepositorySpec defines the parameters for scanning an image
// repository, e.g., `fluxcd/flux`.
type ImageRepositorySpec struct {
	AccessFrom    *ImageRepositorySpecAccessFrom    `pulumi:"accessFrom"`
	CertSecretRef *ImageRepositorySpecCertSecretRef `pulumi:"certSecretRef"`
	// ExclusionList is a list of regex strings used to exclude certain tags
	// from being stored in the database.
	ExclusionList []string `pulumi:"exclusionList"`
	// Image is the name of the image repository
	Image *string `pulumi:"image"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure *bool `pulumi:"insecure"`
	// Interval is the length of time to wait between
	// scans of the image repository.
	Interval *string `pulumi:"interval"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       *string                            `pulumi:"provider"`
	ProxySecretRef *ImageRepositorySpecProxySecretRef `pulumi:"proxySecretRef"`
	SecretRef      *ImageRepositorySpecSecretRef      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend subsequent image scans.
	// It does not apply to already started scans. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for image scanning.
	// Defaults to 'Interval' duration.
	Timeout *string `pulumi:"timeout"`
}

// ImageRepositorySpecInput is an input type that accepts ImageRepositorySpecArgs and ImageRepositorySpecOutput values.
// You can construct a concrete instance of `ImageRepositorySpecInput` via:
//
//	ImageRepositorySpecArgs{...}
type ImageRepositorySpecInput interface {
	pulumi.Input

	ToImageRepositorySpecOutput() ImageRepositorySpecOutput
	ToImageRepositorySpecOutputWithContext(context.Context) ImageRepositorySpecOutput
}

// ImageRepositorySpec defines the parameters for scanning an image
// repository, e.g., `fluxcd/flux`.
type ImageRepositorySpecArgs struct {
	AccessFrom    ImageRepositorySpecAccessFromPtrInput    `pulumi:"accessFrom"`
	CertSecretRef ImageRepositorySpecCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// ExclusionList is a list of regex strings used to exclude certain tags
	// from being stored in the database.
	ExclusionList pulumi.StringArrayInput `pulumi:"exclusionList"`
	// Image is the name of the image repository
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval is the length of time to wait between
	// scans of the image repository.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       pulumi.StringPtrInput                     `pulumi:"provider"`
	ProxySecretRef ImageRepositorySpecProxySecretRefPtrInput `pulumi:"proxySecretRef"`
	SecretRef      ImageRepositorySpecSecretRefPtrInput      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend subsequent image scans.
	// It does not apply to already started scans. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for image scanning.
	// Defaults to 'Interval' duration.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ImageRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpec)(nil)).Elem()
}

func (i ImageRepositorySpecArgs) ToImageRepositorySpecOutput() ImageRepositorySpecOutput {
	return i.ToImageRepositorySpecOutputWithContext(context.Background())
}

func (i ImageRepositorySpecArgs) ToImageRepositorySpecOutputWithContext(ctx context.Context) ImageRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecOutput)
}

func (i ImageRepositorySpecArgs) ToImageRepositorySpecPtrOutput() ImageRepositorySpecPtrOutput {
	return i.ToImageRepositorySpecPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecArgs) ToImageRepositorySpecPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecOutput).ToImageRepositorySpecPtrOutputWithContext(ctx)
}

// ImageRepositorySpecPtrInput is an input type that accepts ImageRepositorySpecArgs, ImageRepositorySpecPtr and ImageRepositorySpecPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecPtrInput` via:
//
//	        ImageRepositorySpecArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecPtrOutput() ImageRepositorySpecPtrOutput
	ToImageRepositorySpecPtrOutputWithContext(context.Context) ImageRepositorySpecPtrOutput
}

type imageRepositorySpecPtrType ImageRepositorySpecArgs

func ImageRepositorySpecPtr(v *ImageRepositorySpecArgs) ImageRepositorySpecPtrInput {
	return (*imageRepositorySpecPtrType)(v)
}

func (*imageRepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpec)(nil)).Elem()
}

func (i *imageRepositorySpecPtrType) ToImageRepositorySpecPtrOutput() ImageRepositorySpecPtrOutput {
	return i.ToImageRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecPtrType) ToImageRepositorySpecPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecPtrOutput)
}

// ImageRepositorySpec defines the parameters for scanning an image
// repository, e.g., `fluxcd/flux`.
type ImageRepositorySpecOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpec)(nil)).Elem()
}

func (o ImageRepositorySpecOutput) ToImageRepositorySpecOutput() ImageRepositorySpecOutput {
	return o
}

func (o ImageRepositorySpecOutput) ToImageRepositorySpecOutputWithContext(ctx context.Context) ImageRepositorySpecOutput {
	return o
}

func (o ImageRepositorySpecOutput) ToImageRepositorySpecPtrOutput() ImageRepositorySpecPtrOutput {
	return o.ToImageRepositorySpecPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecOutput) ToImageRepositorySpecPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpec) *ImageRepositorySpec {
		return &v
	}).(ImageRepositorySpecPtrOutput)
}

func (o ImageRepositorySpecOutput) AccessFrom() ImageRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *ImageRepositorySpecAccessFrom { return v.AccessFrom }).(ImageRepositorySpecAccessFromPtrOutput)
}

func (o ImageRepositorySpecOutput) CertSecretRef() ImageRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *ImageRepositorySpecCertSecretRef { return v.CertSecretRef }).(ImageRepositorySpecCertSecretRefPtrOutput)
}

// ExclusionList is a list of regex strings used to exclude certain tags
// from being stored in the database.
func (o ImageRepositorySpecOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRepositorySpec) []string { return v.ExclusionList }).(pulumi.StringArrayOutput)
}

// Image is the name of the image repository
func (o ImageRepositorySpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o ImageRepositorySpecOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval is the length of time to wait between
// scans of the image repository.
func (o ImageRepositorySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o ImageRepositorySpecOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o ImageRepositorySpecOutput) ProxySecretRef() ImageRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *ImageRepositorySpecProxySecretRef { return v.ProxySecretRef }).(ImageRepositorySpecProxySecretRefPtrOutput)
}

func (o ImageRepositorySpecOutput) SecretRef() ImageRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *ImageRepositorySpecSecretRef { return v.SecretRef }).(ImageRepositorySpecSecretRefPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets.
func (o ImageRepositorySpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend subsequent image scans.
// It does not apply to already started scans. Defaults to false.
func (o ImageRepositorySpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for image scanning.
// Defaults to 'Interval' duration.
func (o ImageRepositorySpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpec)(nil)).Elem()
}

func (o ImageRepositorySpecPtrOutput) ToImageRepositorySpecPtrOutput() ImageRepositorySpecPtrOutput {
	return o
}

func (o ImageRepositorySpecPtrOutput) ToImageRepositorySpecPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPtrOutput {
	return o
}

func (o ImageRepositorySpecPtrOutput) Elem() ImageRepositorySpecOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) ImageRepositorySpec {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpec
		return ret
	}).(ImageRepositorySpecOutput)
}

func (o ImageRepositorySpecPtrOutput) AccessFrom() ImageRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *ImageRepositorySpecAccessFrom {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(ImageRepositorySpecAccessFromPtrOutput)
}

func (o ImageRepositorySpecPtrOutput) CertSecretRef() ImageRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *ImageRepositorySpecCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(ImageRepositorySpecCertSecretRefPtrOutput)
}

// ExclusionList is a list of regex strings used to exclude certain tags
// from being stored in the database.
func (o ImageRepositorySpecPtrOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) []string {
		if v == nil {
			return nil
		}
		return v.ExclusionList
	}).(pulumi.StringArrayOutput)
}

// Image is the name of the image repository
func (o ImageRepositorySpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o ImageRepositorySpecPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval is the length of time to wait between
// scans of the image repository.
func (o ImageRepositorySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o ImageRepositorySpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositorySpecPtrOutput) ProxySecretRef() ImageRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *ImageRepositorySpecProxySecretRef {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(ImageRepositorySpecProxySecretRefPtrOutput)
}

func (o ImageRepositorySpecPtrOutput) SecretRef() ImageRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *ImageRepositorySpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ImageRepositorySpecSecretRefPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets.
func (o ImageRepositorySpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend subsequent image scans.
// It does not apply to already started scans. Defaults to false.
func (o ImageRepositorySpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for image scanning.
// Defaults to 'Interval' duration.
func (o ImageRepositorySpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// AccessFrom defines an ACL for allowing cross-namespace references
// to the ImageRepository object based on the caller's namespace labels.
type ImageRepositorySpecAccessFrom struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []ImageRepositorySpecAccessFromNamespaceSelectors `pulumi:"namespaceSelectors"`
}

// ImageRepositorySpecAccessFromInput is an input type that accepts ImageRepositorySpecAccessFromArgs and ImageRepositorySpecAccessFromOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromInput` via:
//
//	ImageRepositorySpecAccessFromArgs{...}
type ImageRepositorySpecAccessFromInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromOutput() ImageRepositorySpecAccessFromOutput
	ToImageRepositorySpecAccessFromOutputWithContext(context.Context) ImageRepositorySpecAccessFromOutput
}

// AccessFrom defines an ACL for allowing cross-namespace references
// to the ImageRepository object based on the caller's namespace labels.
type ImageRepositorySpecAccessFromArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors ImageRepositorySpecAccessFromNamespaceSelectorsArrayInput `pulumi:"namespaceSelectors"`
}

func (ImageRepositorySpecAccessFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFrom)(nil)).Elem()
}

func (i ImageRepositorySpecAccessFromArgs) ToImageRepositorySpecAccessFromOutput() ImageRepositorySpecAccessFromOutput {
	return i.ToImageRepositorySpecAccessFromOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromArgs) ToImageRepositorySpecAccessFromOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromOutput)
}

func (i ImageRepositorySpecAccessFromArgs) ToImageRepositorySpecAccessFromPtrOutput() ImageRepositorySpecAccessFromPtrOutput {
	return i.ToImageRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromArgs) ToImageRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromOutput).ToImageRepositorySpecAccessFromPtrOutputWithContext(ctx)
}

// ImageRepositorySpecAccessFromPtrInput is an input type that accepts ImageRepositorySpecAccessFromArgs, ImageRepositorySpecAccessFromPtr and ImageRepositorySpecAccessFromPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromPtrInput` via:
//
//	        ImageRepositorySpecAccessFromArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecAccessFromPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromPtrOutput() ImageRepositorySpecAccessFromPtrOutput
	ToImageRepositorySpecAccessFromPtrOutputWithContext(context.Context) ImageRepositorySpecAccessFromPtrOutput
}

type imageRepositorySpecAccessFromPtrType ImageRepositorySpecAccessFromArgs

func ImageRepositorySpecAccessFromPtr(v *ImageRepositorySpecAccessFromArgs) ImageRepositorySpecAccessFromPtrInput {
	return (*imageRepositorySpecAccessFromPtrType)(v)
}

func (*imageRepositorySpecAccessFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecAccessFrom)(nil)).Elem()
}

func (i *imageRepositorySpecAccessFromPtrType) ToImageRepositorySpecAccessFromPtrOutput() ImageRepositorySpecAccessFromPtrOutput {
	return i.ToImageRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecAccessFromPtrType) ToImageRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromPtrOutput)
}

// AccessFrom defines an ACL for allowing cross-namespace references
// to the ImageRepository object based on the caller's namespace labels.
type ImageRepositorySpecAccessFromOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFrom)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromOutput) ToImageRepositorySpecAccessFromOutput() ImageRepositorySpecAccessFromOutput {
	return o
}

func (o ImageRepositorySpecAccessFromOutput) ToImageRepositorySpecAccessFromOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromOutput {
	return o
}

func (o ImageRepositorySpecAccessFromOutput) ToImageRepositorySpecAccessFromPtrOutput() ImageRepositorySpecAccessFromPtrOutput {
	return o.ToImageRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecAccessFromOutput) ToImageRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecAccessFrom) *ImageRepositorySpecAccessFrom {
		return &v
	}).(ImageRepositorySpecAccessFromPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o ImageRepositorySpecAccessFromOutput) NamespaceSelectors() ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v ImageRepositorySpecAccessFrom) []ImageRepositorySpecAccessFromNamespaceSelectors {
		return v.NamespaceSelectors
	}).(ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

type ImageRepositorySpecAccessFromPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecAccessFrom)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromPtrOutput) ToImageRepositorySpecAccessFromPtrOutput() ImageRepositorySpecAccessFromPtrOutput {
	return o
}

func (o ImageRepositorySpecAccessFromPtrOutput) ToImageRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPtrOutput {
	return o
}

func (o ImageRepositorySpecAccessFromPtrOutput) Elem() ImageRepositorySpecAccessFromOutput {
	return o.ApplyT(func(v *ImageRepositorySpecAccessFrom) ImageRepositorySpecAccessFrom {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecAccessFrom
		return ret
	}).(ImageRepositorySpecAccessFromOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o ImageRepositorySpecAccessFromPtrOutput) NamespaceSelectors() ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v *ImageRepositorySpecAccessFrom) []ImageRepositorySpecAccessFromNamespaceSelectors {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type ImageRepositorySpecAccessFromNamespaceSelectors struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ImageRepositorySpecAccessFromNamespaceSelectorsInput is an input type that accepts ImageRepositorySpecAccessFromNamespaceSelectorsArgs and ImageRepositorySpecAccessFromNamespaceSelectorsOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromNamespaceSelectorsInput` via:
//
//	ImageRepositorySpecAccessFromNamespaceSelectorsArgs{...}
type ImageRepositorySpecAccessFromNamespaceSelectorsInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromNamespaceSelectorsOutput() ImageRepositorySpecAccessFromNamespaceSelectorsOutput
	ToImageRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type ImageRepositorySpecAccessFromNamespaceSelectorsArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ImageRepositorySpecAccessFromNamespaceSelectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsArgs) ToImageRepositorySpecAccessFromNamespaceSelectorsOutput() ImageRepositorySpecAccessFromNamespaceSelectorsOutput {
	return i.ToImageRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsArgs) ToImageRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// ImageRepositorySpecAccessFromNamespaceSelectorsArrayInput is an input type that accepts ImageRepositorySpecAccessFromNamespaceSelectorsArray and ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromNamespaceSelectorsArrayInput` via:
//
//	ImageRepositorySpecAccessFromNamespaceSelectorsArray{ ImageRepositorySpecAccessFromNamespaceSelectorsArgs{...} }
type ImageRepositorySpecAccessFromNamespaceSelectorsArrayInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput() ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput
	ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput
}

type ImageRepositorySpecAccessFromNamespaceSelectorsArray []ImageRepositorySpecAccessFromNamespaceSelectorsInput

func (ImageRepositorySpecAccessFromNamespaceSelectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsArray) ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput() ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return i.ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsArray) ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type ImageRepositorySpecAccessFromNamespaceSelectorsOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromNamespaceSelectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsOutput() ImageRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ImageRepositorySpecAccessFromNamespaceSelectorsOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageRepositorySpecAccessFromNamespaceSelectors) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput() ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput) Index(i pulumi.IntInput) ImageRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRepositorySpecAccessFromNamespaceSelectors {
		return vs[0].([]ImageRepositorySpecAccessFromNamespaceSelectors)[vs[1].(int)]
	}).(ImageRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type ImageRepositorySpecAccessFromNamespaceSelectorsPatch struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ImageRepositorySpecAccessFromNamespaceSelectorsPatchInput is an input type that accepts ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs and ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromNamespaceSelectorsPatchInput` via:
//
//	ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...}
type ImageRepositorySpecAccessFromNamespaceSelectorsPatchInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput() ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput
	ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput() ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return i.ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput is an input type that accepts ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray and ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput` via:
//
//	ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray{ ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...} }
type ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
	ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
}

type ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray []ImageRepositorySpecAccessFromNamespaceSelectorsPatchInput

func (ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return i.ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput() ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageRepositorySpecAccessFromNamespaceSelectorsPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) Index(i pulumi.IntInput) ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRepositorySpecAccessFromNamespaceSelectorsPatch {
		return vs[0].([]ImageRepositorySpecAccessFromNamespaceSelectorsPatch)[vs[1].(int)]
	}).(ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// AccessFrom defines an ACL for allowing cross-namespace references
// to the ImageRepository object based on the caller's namespace labels.
type ImageRepositorySpecAccessFromPatch struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []ImageRepositorySpecAccessFromNamespaceSelectorsPatch `pulumi:"namespaceSelectors"`
}

// ImageRepositorySpecAccessFromPatchInput is an input type that accepts ImageRepositorySpecAccessFromPatchArgs and ImageRepositorySpecAccessFromPatchOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromPatchInput` via:
//
//	ImageRepositorySpecAccessFromPatchArgs{...}
type ImageRepositorySpecAccessFromPatchInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromPatchOutput() ImageRepositorySpecAccessFromPatchOutput
	ToImageRepositorySpecAccessFromPatchOutputWithContext(context.Context) ImageRepositorySpecAccessFromPatchOutput
}

// AccessFrom defines an ACL for allowing cross-namespace references
// to the ImageRepository object based on the caller's namespace labels.
type ImageRepositorySpecAccessFromPatchArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput `pulumi:"namespaceSelectors"`
}

func (ImageRepositorySpecAccessFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i ImageRepositorySpecAccessFromPatchArgs) ToImageRepositorySpecAccessFromPatchOutput() ImageRepositorySpecAccessFromPatchOutput {
	return i.ToImageRepositorySpecAccessFromPatchOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromPatchArgs) ToImageRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromPatchOutput)
}

func (i ImageRepositorySpecAccessFromPatchArgs) ToImageRepositorySpecAccessFromPatchPtrOutput() ImageRepositorySpecAccessFromPatchPtrOutput {
	return i.ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecAccessFromPatchArgs) ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromPatchOutput).ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(ctx)
}

// ImageRepositorySpecAccessFromPatchPtrInput is an input type that accepts ImageRepositorySpecAccessFromPatchArgs, ImageRepositorySpecAccessFromPatchPtr and ImageRepositorySpecAccessFromPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecAccessFromPatchPtrInput` via:
//
//	        ImageRepositorySpecAccessFromPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecAccessFromPatchPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecAccessFromPatchPtrOutput() ImageRepositorySpecAccessFromPatchPtrOutput
	ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(context.Context) ImageRepositorySpecAccessFromPatchPtrOutput
}

type imageRepositorySpecAccessFromPatchPtrType ImageRepositorySpecAccessFromPatchArgs

func ImageRepositorySpecAccessFromPatchPtr(v *ImageRepositorySpecAccessFromPatchArgs) ImageRepositorySpecAccessFromPatchPtrInput {
	return (*imageRepositorySpecAccessFromPatchPtrType)(v)
}

func (*imageRepositorySpecAccessFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i *imageRepositorySpecAccessFromPatchPtrType) ToImageRepositorySpecAccessFromPatchPtrOutput() ImageRepositorySpecAccessFromPatchPtrOutput {
	return i.ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecAccessFromPatchPtrType) ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecAccessFromPatchPtrOutput)
}

// AccessFrom defines an ACL for allowing cross-namespace references
// to the ImageRepository object based on the caller's namespace labels.
type ImageRepositorySpecAccessFromPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromPatchOutput) ToImageRepositorySpecAccessFromPatchOutput() ImageRepositorySpecAccessFromPatchOutput {
	return o
}

func (o ImageRepositorySpecAccessFromPatchOutput) ToImageRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPatchOutput {
	return o
}

func (o ImageRepositorySpecAccessFromPatchOutput) ToImageRepositorySpecAccessFromPatchPtrOutput() ImageRepositorySpecAccessFromPatchPtrOutput {
	return o.ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecAccessFromPatchOutput) ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecAccessFromPatch) *ImageRepositorySpecAccessFromPatch {
		return &v
	}).(ImageRepositorySpecAccessFromPatchPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o ImageRepositorySpecAccessFromPatchOutput) NamespaceSelectors() ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v ImageRepositorySpecAccessFromPatch) []ImageRepositorySpecAccessFromNamespaceSelectorsPatch {
		return v.NamespaceSelectors
	}).(ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

type ImageRepositorySpecAccessFromPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecAccessFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o ImageRepositorySpecAccessFromPatchPtrOutput) ToImageRepositorySpecAccessFromPatchPtrOutput() ImageRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecAccessFromPatchPtrOutput) ToImageRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecAccessFromPatchPtrOutput) Elem() ImageRepositorySpecAccessFromPatchOutput {
	return o.ApplyT(func(v *ImageRepositorySpecAccessFromPatch) ImageRepositorySpecAccessFromPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecAccessFromPatch
		return ret
	}).(ImageRepositorySpecAccessFromPatchOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o ImageRepositorySpecAccessFromPatchPtrOutput) NamespaceSelectors() ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v *ImageRepositorySpecAccessFromPatch) []ImageRepositorySpecAccessFromNamespaceSelectorsPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// Note: Support for the `caFile`, `certFile` and `keyFile` keys has
// been deprecated.
type ImageRepositorySpecCertSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageRepositorySpecCertSecretRefInput is an input type that accepts ImageRepositorySpecCertSecretRefArgs and ImageRepositorySpecCertSecretRefOutput values.
// You can construct a concrete instance of `ImageRepositorySpecCertSecretRefInput` via:
//
//	ImageRepositorySpecCertSecretRefArgs{...}
type ImageRepositorySpecCertSecretRefInput interface {
	pulumi.Input

	ToImageRepositorySpecCertSecretRefOutput() ImageRepositorySpecCertSecretRefOutput
	ToImageRepositorySpecCertSecretRefOutputWithContext(context.Context) ImageRepositorySpecCertSecretRefOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// Note: Support for the `caFile`, `certFile` and `keyFile` keys has
// been deprecated.
type ImageRepositorySpecCertSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageRepositorySpecCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecCertSecretRef)(nil)).Elem()
}

func (i ImageRepositorySpecCertSecretRefArgs) ToImageRepositorySpecCertSecretRefOutput() ImageRepositorySpecCertSecretRefOutput {
	return i.ToImageRepositorySpecCertSecretRefOutputWithContext(context.Background())
}

func (i ImageRepositorySpecCertSecretRefArgs) ToImageRepositorySpecCertSecretRefOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecCertSecretRefOutput)
}

func (i ImageRepositorySpecCertSecretRefArgs) ToImageRepositorySpecCertSecretRefPtrOutput() ImageRepositorySpecCertSecretRefPtrOutput {
	return i.ToImageRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecCertSecretRefArgs) ToImageRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecCertSecretRefOutput).ToImageRepositorySpecCertSecretRefPtrOutputWithContext(ctx)
}

// ImageRepositorySpecCertSecretRefPtrInput is an input type that accepts ImageRepositorySpecCertSecretRefArgs, ImageRepositorySpecCertSecretRefPtr and ImageRepositorySpecCertSecretRefPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecCertSecretRefPtrInput` via:
//
//	        ImageRepositorySpecCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecCertSecretRefPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecCertSecretRefPtrOutput() ImageRepositorySpecCertSecretRefPtrOutput
	ToImageRepositorySpecCertSecretRefPtrOutputWithContext(context.Context) ImageRepositorySpecCertSecretRefPtrOutput
}

type imageRepositorySpecCertSecretRefPtrType ImageRepositorySpecCertSecretRefArgs

func ImageRepositorySpecCertSecretRefPtr(v *ImageRepositorySpecCertSecretRefArgs) ImageRepositorySpecCertSecretRefPtrInput {
	return (*imageRepositorySpecCertSecretRefPtrType)(v)
}

func (*imageRepositorySpecCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecCertSecretRef)(nil)).Elem()
}

func (i *imageRepositorySpecCertSecretRefPtrType) ToImageRepositorySpecCertSecretRefPtrOutput() ImageRepositorySpecCertSecretRefPtrOutput {
	return i.ToImageRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecCertSecretRefPtrType) ToImageRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecCertSecretRefPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// Note: Support for the `caFile`, `certFile` and `keyFile` keys has
// been deprecated.
type ImageRepositorySpecCertSecretRefOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecCertSecretRef)(nil)).Elem()
}

func (o ImageRepositorySpecCertSecretRefOutput) ToImageRepositorySpecCertSecretRefOutput() ImageRepositorySpecCertSecretRefOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefOutput) ToImageRepositorySpecCertSecretRefOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefOutput) ToImageRepositorySpecCertSecretRefPtrOutput() ImageRepositorySpecCertSecretRefPtrOutput {
	return o.ToImageRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecCertSecretRefOutput) ToImageRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecCertSecretRef) *ImageRepositorySpecCertSecretRef {
		return &v
	}).(ImageRepositorySpecCertSecretRefPtrOutput)
}

// Name of the referent.
func (o ImageRepositorySpecCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecCertSecretRef)(nil)).Elem()
}

func (o ImageRepositorySpecCertSecretRefPtrOutput) ToImageRepositorySpecCertSecretRefPtrOutput() ImageRepositorySpecCertSecretRefPtrOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefPtrOutput) ToImageRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPtrOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefPtrOutput) Elem() ImageRepositorySpecCertSecretRefOutput {
	return o.ApplyT(func(v *ImageRepositorySpecCertSecretRef) ImageRepositorySpecCertSecretRef {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecCertSecretRef
		return ret
	}).(ImageRepositorySpecCertSecretRefOutput)
}

// Name of the referent.
func (o ImageRepositorySpecCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// Note: Support for the `caFile`, `certFile` and `keyFile` keys has
// been deprecated.
type ImageRepositorySpecCertSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageRepositorySpecCertSecretRefPatchInput is an input type that accepts ImageRepositorySpecCertSecretRefPatchArgs and ImageRepositorySpecCertSecretRefPatchOutput values.
// You can construct a concrete instance of `ImageRepositorySpecCertSecretRefPatchInput` via:
//
//	ImageRepositorySpecCertSecretRefPatchArgs{...}
type ImageRepositorySpecCertSecretRefPatchInput interface {
	pulumi.Input

	ToImageRepositorySpecCertSecretRefPatchOutput() ImageRepositorySpecCertSecretRefPatchOutput
	ToImageRepositorySpecCertSecretRefPatchOutputWithContext(context.Context) ImageRepositorySpecCertSecretRefPatchOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// Note: Support for the `caFile`, `certFile` and `keyFile` keys has
// been deprecated.
type ImageRepositorySpecCertSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageRepositorySpecCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (i ImageRepositorySpecCertSecretRefPatchArgs) ToImageRepositorySpecCertSecretRefPatchOutput() ImageRepositorySpecCertSecretRefPatchOutput {
	return i.ToImageRepositorySpecCertSecretRefPatchOutputWithContext(context.Background())
}

func (i ImageRepositorySpecCertSecretRefPatchArgs) ToImageRepositorySpecCertSecretRefPatchOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecCertSecretRefPatchOutput)
}

func (i ImageRepositorySpecCertSecretRefPatchArgs) ToImageRepositorySpecCertSecretRefPatchPtrOutput() ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return i.ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecCertSecretRefPatchArgs) ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecCertSecretRefPatchOutput).ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx)
}

// ImageRepositorySpecCertSecretRefPatchPtrInput is an input type that accepts ImageRepositorySpecCertSecretRefPatchArgs, ImageRepositorySpecCertSecretRefPatchPtr and ImageRepositorySpecCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecCertSecretRefPatchPtrInput` via:
//
//	        ImageRepositorySpecCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecCertSecretRefPatchPtrOutput() ImageRepositorySpecCertSecretRefPatchPtrOutput
	ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Context) ImageRepositorySpecCertSecretRefPatchPtrOutput
}

type imageRepositorySpecCertSecretRefPatchPtrType ImageRepositorySpecCertSecretRefPatchArgs

func ImageRepositorySpecCertSecretRefPatchPtr(v *ImageRepositorySpecCertSecretRefPatchArgs) ImageRepositorySpecCertSecretRefPatchPtrInput {
	return (*imageRepositorySpecCertSecretRefPatchPtrType)(v)
}

func (*imageRepositorySpecCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (i *imageRepositorySpecCertSecretRefPatchPtrType) ToImageRepositorySpecCertSecretRefPatchPtrOutput() ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return i.ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecCertSecretRefPatchPtrType) ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecCertSecretRefPatchPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// Note: Support for the `caFile`, `certFile` and `keyFile` keys has
// been deprecated.
type ImageRepositorySpecCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (o ImageRepositorySpecCertSecretRefPatchOutput) ToImageRepositorySpecCertSecretRefPatchOutput() ImageRepositorySpecCertSecretRefPatchOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefPatchOutput) ToImageRepositorySpecCertSecretRefPatchOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPatchOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefPatchOutput) ToImageRepositorySpecCertSecretRefPatchPtrOutput() ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecCertSecretRefPatchOutput) ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecCertSecretRefPatch) *ImageRepositorySpecCertSecretRefPatch {
		return &v
	}).(ImageRepositorySpecCertSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ImageRepositorySpecCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (o ImageRepositorySpecCertSecretRefPatchPtrOutput) ToImageRepositorySpecCertSecretRefPatchPtrOutput() ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefPatchPtrOutput) ToImageRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecCertSecretRefPatchPtrOutput) Elem() ImageRepositorySpecCertSecretRefPatchOutput {
	return o.ApplyT(func(v *ImageRepositorySpecCertSecretRefPatch) ImageRepositorySpecCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecCertSecretRefPatch
		return ret
	}).(ImageRepositorySpecCertSecretRefPatchOutput)
}

// Name of the referent.
func (o ImageRepositorySpecCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ImageRepositorySpec defines the parameters for scanning an image
// repository, e.g., `fluxcd/flux`.
type ImageRepositorySpecPatch struct {
	AccessFrom    *ImageRepositorySpecAccessFromPatch    `pulumi:"accessFrom"`
	CertSecretRef *ImageRepositorySpecCertSecretRefPatch `pulumi:"certSecretRef"`
	// ExclusionList is a list of regex strings used to exclude certain tags
	// from being stored in the database.
	ExclusionList []string `pulumi:"exclusionList"`
	// Image is the name of the image repository
	Image *string `pulumi:"image"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure *bool `pulumi:"insecure"`
	// Interval is the length of time to wait between
	// scans of the image repository.
	Interval *string `pulumi:"interval"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       *string                                 `pulumi:"provider"`
	ProxySecretRef *ImageRepositorySpecProxySecretRefPatch `pulumi:"proxySecretRef"`
	SecretRef      *ImageRepositorySpecSecretRefPatch      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend subsequent image scans.
	// It does not apply to already started scans. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for image scanning.
	// Defaults to 'Interval' duration.
	Timeout *string `pulumi:"timeout"`
}

// ImageRepositorySpecPatchInput is an input type that accepts ImageRepositorySpecPatchArgs and ImageRepositorySpecPatchOutput values.
// You can construct a concrete instance of `ImageRepositorySpecPatchInput` via:
//
//	ImageRepositorySpecPatchArgs{...}
type ImageRepositorySpecPatchInput interface {
	pulumi.Input

	ToImageRepositorySpecPatchOutput() ImageRepositorySpecPatchOutput
	ToImageRepositorySpecPatchOutputWithContext(context.Context) ImageRepositorySpecPatchOutput
}

// ImageRepositorySpec defines the parameters for scanning an image
// repository, e.g., `fluxcd/flux`.
type ImageRepositorySpecPatchArgs struct {
	AccessFrom    ImageRepositorySpecAccessFromPatchPtrInput    `pulumi:"accessFrom"`
	CertSecretRef ImageRepositorySpecCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	// ExclusionList is a list of regex strings used to exclude certain tags
	// from being stored in the database.
	ExclusionList pulumi.StringArrayInput `pulumi:"exclusionList"`
	// Image is the name of the image repository
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval is the length of time to wait between
	// scans of the image repository.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       pulumi.StringPtrInput                          `pulumi:"provider"`
	ProxySecretRef ImageRepositorySpecProxySecretRefPatchPtrInput `pulumi:"proxySecretRef"`
	SecretRef      ImageRepositorySpecSecretRefPatchPtrInput      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend subsequent image scans.
	// It does not apply to already started scans. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for image scanning.
	// Defaults to 'Interval' duration.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ImageRepositorySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecPatch)(nil)).Elem()
}

func (i ImageRepositorySpecPatchArgs) ToImageRepositorySpecPatchOutput() ImageRepositorySpecPatchOutput {
	return i.ToImageRepositorySpecPatchOutputWithContext(context.Background())
}

func (i ImageRepositorySpecPatchArgs) ToImageRepositorySpecPatchOutputWithContext(ctx context.Context) ImageRepositorySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecPatchOutput)
}

func (i ImageRepositorySpecPatchArgs) ToImageRepositorySpecPatchPtrOutput() ImageRepositorySpecPatchPtrOutput {
	return i.ToImageRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecPatchArgs) ToImageRepositorySpecPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecPatchOutput).ToImageRepositorySpecPatchPtrOutputWithContext(ctx)
}

// ImageRepositorySpecPatchPtrInput is an input type that accepts ImageRepositorySpecPatchArgs, ImageRepositorySpecPatchPtr and ImageRepositorySpecPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecPatchPtrInput` via:
//
//	        ImageRepositorySpecPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecPatchPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecPatchPtrOutput() ImageRepositorySpecPatchPtrOutput
	ToImageRepositorySpecPatchPtrOutputWithContext(context.Context) ImageRepositorySpecPatchPtrOutput
}

type imageRepositorySpecPatchPtrType ImageRepositorySpecPatchArgs

func ImageRepositorySpecPatchPtr(v *ImageRepositorySpecPatchArgs) ImageRepositorySpecPatchPtrInput {
	return (*imageRepositorySpecPatchPtrType)(v)
}

func (*imageRepositorySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecPatch)(nil)).Elem()
}

func (i *imageRepositorySpecPatchPtrType) ToImageRepositorySpecPatchPtrOutput() ImageRepositorySpecPatchPtrOutput {
	return i.ToImageRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecPatchPtrType) ToImageRepositorySpecPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecPatchPtrOutput)
}

// ImageRepositorySpec defines the parameters for scanning an image
// repository, e.g., `fluxcd/flux`.
type ImageRepositorySpecPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecPatch)(nil)).Elem()
}

func (o ImageRepositorySpecPatchOutput) ToImageRepositorySpecPatchOutput() ImageRepositorySpecPatchOutput {
	return o
}

func (o ImageRepositorySpecPatchOutput) ToImageRepositorySpecPatchOutputWithContext(ctx context.Context) ImageRepositorySpecPatchOutput {
	return o
}

func (o ImageRepositorySpecPatchOutput) ToImageRepositorySpecPatchPtrOutput() ImageRepositorySpecPatchPtrOutput {
	return o.ToImageRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecPatchOutput) ToImageRepositorySpecPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecPatch) *ImageRepositorySpecPatch {
		return &v
	}).(ImageRepositorySpecPatchPtrOutput)
}

func (o ImageRepositorySpecPatchOutput) AccessFrom() ImageRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *ImageRepositorySpecAccessFromPatch { return v.AccessFrom }).(ImageRepositorySpecAccessFromPatchPtrOutput)
}

func (o ImageRepositorySpecPatchOutput) CertSecretRef() ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *ImageRepositorySpecCertSecretRefPatch { return v.CertSecretRef }).(ImageRepositorySpecCertSecretRefPatchPtrOutput)
}

// ExclusionList is a list of regex strings used to exclude certain tags
// from being stored in the database.
func (o ImageRepositorySpecPatchOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) []string { return v.ExclusionList }).(pulumi.StringArrayOutput)
}

// Image is the name of the image repository
func (o ImageRepositorySpecPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o ImageRepositorySpecPatchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval is the length of time to wait between
// scans of the image repository.
func (o ImageRepositorySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o ImageRepositorySpecPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o ImageRepositorySpecPatchOutput) ProxySecretRef() ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *ImageRepositorySpecProxySecretRefPatch { return v.ProxySecretRef }).(ImageRepositorySpecProxySecretRefPatchPtrOutput)
}

func (o ImageRepositorySpecPatchOutput) SecretRef() ImageRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *ImageRepositorySpecSecretRefPatch { return v.SecretRef }).(ImageRepositorySpecSecretRefPatchPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets.
func (o ImageRepositorySpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend subsequent image scans.
// It does not apply to already started scans. Defaults to false.
func (o ImageRepositorySpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for image scanning.
// Defaults to 'Interval' duration.
func (o ImageRepositorySpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecPatch)(nil)).Elem()
}

func (o ImageRepositorySpecPatchPtrOutput) ToImageRepositorySpecPatchPtrOutput() ImageRepositorySpecPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecPatchPtrOutput) ToImageRepositorySpecPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecPatchPtrOutput) Elem() ImageRepositorySpecPatchOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) ImageRepositorySpecPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecPatch
		return ret
	}).(ImageRepositorySpecPatchOutput)
}

func (o ImageRepositorySpecPatchPtrOutput) AccessFrom() ImageRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *ImageRepositorySpecAccessFromPatch {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(ImageRepositorySpecAccessFromPatchPtrOutput)
}

func (o ImageRepositorySpecPatchPtrOutput) CertSecretRef() ImageRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *ImageRepositorySpecCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(ImageRepositorySpecCertSecretRefPatchPtrOutput)
}

// ExclusionList is a list of regex strings used to exclude certain tags
// from being stored in the database.
func (o ImageRepositorySpecPatchPtrOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ExclusionList
	}).(pulumi.StringArrayOutput)
}

// Image is the name of the image repository
func (o ImageRepositorySpecPatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o ImageRepositorySpecPatchPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval is the length of time to wait between
// scans of the image repository.
func (o ImageRepositorySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o ImageRepositorySpecPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositorySpecPatchPtrOutput) ProxySecretRef() ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *ImageRepositorySpecProxySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(ImageRepositorySpecProxySecretRefPatchPtrOutput)
}

func (o ImageRepositorySpecPatchPtrOutput) SecretRef() ImageRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *ImageRepositorySpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ImageRepositorySpecSecretRefPatchPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets.
func (o ImageRepositorySpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend subsequent image scans.
// It does not apply to already started scans. Defaults to false.
func (o ImageRepositorySpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for image scanning.
// Defaults to 'Interval' duration.
func (o ImageRepositorySpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type ImageRepositorySpecProxySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageRepositorySpecProxySecretRefInput is an input type that accepts ImageRepositorySpecProxySecretRefArgs and ImageRepositorySpecProxySecretRefOutput values.
// You can construct a concrete instance of `ImageRepositorySpecProxySecretRefInput` via:
//
//	ImageRepositorySpecProxySecretRefArgs{...}
type ImageRepositorySpecProxySecretRefInput interface {
	pulumi.Input

	ToImageRepositorySpecProxySecretRefOutput() ImageRepositorySpecProxySecretRefOutput
	ToImageRepositorySpecProxySecretRefOutputWithContext(context.Context) ImageRepositorySpecProxySecretRefOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type ImageRepositorySpecProxySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageRepositorySpecProxySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecProxySecretRef)(nil)).Elem()
}

func (i ImageRepositorySpecProxySecretRefArgs) ToImageRepositorySpecProxySecretRefOutput() ImageRepositorySpecProxySecretRefOutput {
	return i.ToImageRepositorySpecProxySecretRefOutputWithContext(context.Background())
}

func (i ImageRepositorySpecProxySecretRefArgs) ToImageRepositorySpecProxySecretRefOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecProxySecretRefOutput)
}

func (i ImageRepositorySpecProxySecretRefArgs) ToImageRepositorySpecProxySecretRefPtrOutput() ImageRepositorySpecProxySecretRefPtrOutput {
	return i.ToImageRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecProxySecretRefArgs) ToImageRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecProxySecretRefOutput).ToImageRepositorySpecProxySecretRefPtrOutputWithContext(ctx)
}

// ImageRepositorySpecProxySecretRefPtrInput is an input type that accepts ImageRepositorySpecProxySecretRefArgs, ImageRepositorySpecProxySecretRefPtr and ImageRepositorySpecProxySecretRefPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecProxySecretRefPtrInput` via:
//
//	        ImageRepositorySpecProxySecretRefArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecProxySecretRefPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecProxySecretRefPtrOutput() ImageRepositorySpecProxySecretRefPtrOutput
	ToImageRepositorySpecProxySecretRefPtrOutputWithContext(context.Context) ImageRepositorySpecProxySecretRefPtrOutput
}

type imageRepositorySpecProxySecretRefPtrType ImageRepositorySpecProxySecretRefArgs

func ImageRepositorySpecProxySecretRefPtr(v *ImageRepositorySpecProxySecretRefArgs) ImageRepositorySpecProxySecretRefPtrInput {
	return (*imageRepositorySpecProxySecretRefPtrType)(v)
}

func (*imageRepositorySpecProxySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecProxySecretRef)(nil)).Elem()
}

func (i *imageRepositorySpecProxySecretRefPtrType) ToImageRepositorySpecProxySecretRefPtrOutput() ImageRepositorySpecProxySecretRefPtrOutput {
	return i.ToImageRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecProxySecretRefPtrType) ToImageRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecProxySecretRefPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type ImageRepositorySpecProxySecretRefOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecProxySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecProxySecretRef)(nil)).Elem()
}

func (o ImageRepositorySpecProxySecretRefOutput) ToImageRepositorySpecProxySecretRefOutput() ImageRepositorySpecProxySecretRefOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefOutput) ToImageRepositorySpecProxySecretRefOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefOutput) ToImageRepositorySpecProxySecretRefPtrOutput() ImageRepositorySpecProxySecretRefPtrOutput {
	return o.ToImageRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecProxySecretRefOutput) ToImageRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecProxySecretRef) *ImageRepositorySpecProxySecretRef {
		return &v
	}).(ImageRepositorySpecProxySecretRefPtrOutput)
}

// Name of the referent.
func (o ImageRepositorySpecProxySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecProxySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecProxySecretRefPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecProxySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecProxySecretRef)(nil)).Elem()
}

func (o ImageRepositorySpecProxySecretRefPtrOutput) ToImageRepositorySpecProxySecretRefPtrOutput() ImageRepositorySpecProxySecretRefPtrOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefPtrOutput) ToImageRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPtrOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefPtrOutput) Elem() ImageRepositorySpecProxySecretRefOutput {
	return o.ApplyT(func(v *ImageRepositorySpecProxySecretRef) ImageRepositorySpecProxySecretRef {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecProxySecretRef
		return ret
	}).(ImageRepositorySpecProxySecretRefOutput)
}

// Name of the referent.
func (o ImageRepositorySpecProxySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecProxySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type ImageRepositorySpecProxySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageRepositorySpecProxySecretRefPatchInput is an input type that accepts ImageRepositorySpecProxySecretRefPatchArgs and ImageRepositorySpecProxySecretRefPatchOutput values.
// You can construct a concrete instance of `ImageRepositorySpecProxySecretRefPatchInput` via:
//
//	ImageRepositorySpecProxySecretRefPatchArgs{...}
type ImageRepositorySpecProxySecretRefPatchInput interface {
	pulumi.Input

	ToImageRepositorySpecProxySecretRefPatchOutput() ImageRepositorySpecProxySecretRefPatchOutput
	ToImageRepositorySpecProxySecretRefPatchOutputWithContext(context.Context) ImageRepositorySpecProxySecretRefPatchOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type ImageRepositorySpecProxySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageRepositorySpecProxySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (i ImageRepositorySpecProxySecretRefPatchArgs) ToImageRepositorySpecProxySecretRefPatchOutput() ImageRepositorySpecProxySecretRefPatchOutput {
	return i.ToImageRepositorySpecProxySecretRefPatchOutputWithContext(context.Background())
}

func (i ImageRepositorySpecProxySecretRefPatchArgs) ToImageRepositorySpecProxySecretRefPatchOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecProxySecretRefPatchOutput)
}

func (i ImageRepositorySpecProxySecretRefPatchArgs) ToImageRepositorySpecProxySecretRefPatchPtrOutput() ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return i.ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecProxySecretRefPatchArgs) ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecProxySecretRefPatchOutput).ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx)
}

// ImageRepositorySpecProxySecretRefPatchPtrInput is an input type that accepts ImageRepositorySpecProxySecretRefPatchArgs, ImageRepositorySpecProxySecretRefPatchPtr and ImageRepositorySpecProxySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecProxySecretRefPatchPtrInput` via:
//
//	        ImageRepositorySpecProxySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecProxySecretRefPatchPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecProxySecretRefPatchPtrOutput() ImageRepositorySpecProxySecretRefPatchPtrOutput
	ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Context) ImageRepositorySpecProxySecretRefPatchPtrOutput
}

type imageRepositorySpecProxySecretRefPatchPtrType ImageRepositorySpecProxySecretRefPatchArgs

func ImageRepositorySpecProxySecretRefPatchPtr(v *ImageRepositorySpecProxySecretRefPatchArgs) ImageRepositorySpecProxySecretRefPatchPtrInput {
	return (*imageRepositorySpecProxySecretRefPatchPtrType)(v)
}

func (*imageRepositorySpecProxySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (i *imageRepositorySpecProxySecretRefPatchPtrType) ToImageRepositorySpecProxySecretRefPatchPtrOutput() ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return i.ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecProxySecretRefPatchPtrType) ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecProxySecretRefPatchPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type ImageRepositorySpecProxySecretRefPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecProxySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (o ImageRepositorySpecProxySecretRefPatchOutput) ToImageRepositorySpecProxySecretRefPatchOutput() ImageRepositorySpecProxySecretRefPatchOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefPatchOutput) ToImageRepositorySpecProxySecretRefPatchOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPatchOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefPatchOutput) ToImageRepositorySpecProxySecretRefPatchPtrOutput() ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecProxySecretRefPatchOutput) ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecProxySecretRefPatch) *ImageRepositorySpecProxySecretRefPatch {
		return &v
	}).(ImageRepositorySpecProxySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ImageRepositorySpecProxySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecProxySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecProxySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecProxySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (o ImageRepositorySpecProxySecretRefPatchPtrOutput) ToImageRepositorySpecProxySecretRefPatchPtrOutput() ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefPatchPtrOutput) ToImageRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecProxySecretRefPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecProxySecretRefPatchPtrOutput) Elem() ImageRepositorySpecProxySecretRefPatchOutput {
	return o.ApplyT(func(v *ImageRepositorySpecProxySecretRefPatch) ImageRepositorySpecProxySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecProxySecretRefPatch
		return ret
	}).(ImageRepositorySpecProxySecretRefPatchOutput)
}

// Name of the referent.
func (o ImageRepositorySpecProxySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecProxySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef can be given the name of a secret containing
// credentials to use for the image registry. The secret should be
// created with `kubectl create secret docker-registry`, or the
// equivalent.
type ImageRepositorySpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageRepositorySpecSecretRefInput is an input type that accepts ImageRepositorySpecSecretRefArgs and ImageRepositorySpecSecretRefOutput values.
// You can construct a concrete instance of `ImageRepositorySpecSecretRefInput` via:
//
//	ImageRepositorySpecSecretRefArgs{...}
type ImageRepositorySpecSecretRefInput interface {
	pulumi.Input

	ToImageRepositorySpecSecretRefOutput() ImageRepositorySpecSecretRefOutput
	ToImageRepositorySpecSecretRefOutputWithContext(context.Context) ImageRepositorySpecSecretRefOutput
}

// SecretRef can be given the name of a secret containing
// credentials to use for the image registry. The secret should be
// created with `kubectl create secret docker-registry`, or the
// equivalent.
type ImageRepositorySpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageRepositorySpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecSecretRef)(nil)).Elem()
}

func (i ImageRepositorySpecSecretRefArgs) ToImageRepositorySpecSecretRefOutput() ImageRepositorySpecSecretRefOutput {
	return i.ToImageRepositorySpecSecretRefOutputWithContext(context.Background())
}

func (i ImageRepositorySpecSecretRefArgs) ToImageRepositorySpecSecretRefOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecSecretRefOutput)
}

func (i ImageRepositorySpecSecretRefArgs) ToImageRepositorySpecSecretRefPtrOutput() ImageRepositorySpecSecretRefPtrOutput {
	return i.ToImageRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecSecretRefArgs) ToImageRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecSecretRefOutput).ToImageRepositorySpecSecretRefPtrOutputWithContext(ctx)
}

// ImageRepositorySpecSecretRefPtrInput is an input type that accepts ImageRepositorySpecSecretRefArgs, ImageRepositorySpecSecretRefPtr and ImageRepositorySpecSecretRefPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecSecretRefPtrInput` via:
//
//	        ImageRepositorySpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecSecretRefPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecSecretRefPtrOutput() ImageRepositorySpecSecretRefPtrOutput
	ToImageRepositorySpecSecretRefPtrOutputWithContext(context.Context) ImageRepositorySpecSecretRefPtrOutput
}

type imageRepositorySpecSecretRefPtrType ImageRepositorySpecSecretRefArgs

func ImageRepositorySpecSecretRefPtr(v *ImageRepositorySpecSecretRefArgs) ImageRepositorySpecSecretRefPtrInput {
	return (*imageRepositorySpecSecretRefPtrType)(v)
}

func (*imageRepositorySpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecSecretRef)(nil)).Elem()
}

func (i *imageRepositorySpecSecretRefPtrType) ToImageRepositorySpecSecretRefPtrOutput() ImageRepositorySpecSecretRefPtrOutput {
	return i.ToImageRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecSecretRefPtrType) ToImageRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecSecretRefPtrOutput)
}

// SecretRef can be given the name of a secret containing
// credentials to use for the image registry. The secret should be
// created with `kubectl create secret docker-registry`, or the
// equivalent.
type ImageRepositorySpecSecretRefOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecSecretRef)(nil)).Elem()
}

func (o ImageRepositorySpecSecretRefOutput) ToImageRepositorySpecSecretRefOutput() ImageRepositorySpecSecretRefOutput {
	return o
}

func (o ImageRepositorySpecSecretRefOutput) ToImageRepositorySpecSecretRefOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefOutput {
	return o
}

func (o ImageRepositorySpecSecretRefOutput) ToImageRepositorySpecSecretRefPtrOutput() ImageRepositorySpecSecretRefPtrOutput {
	return o.ToImageRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecSecretRefOutput) ToImageRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecSecretRef) *ImageRepositorySpecSecretRef {
		return &v
	}).(ImageRepositorySpecSecretRefPtrOutput)
}

// Name of the referent.
func (o ImageRepositorySpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecSecretRef)(nil)).Elem()
}

func (o ImageRepositorySpecSecretRefPtrOutput) ToImageRepositorySpecSecretRefPtrOutput() ImageRepositorySpecSecretRefPtrOutput {
	return o
}

func (o ImageRepositorySpecSecretRefPtrOutput) ToImageRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPtrOutput {
	return o
}

func (o ImageRepositorySpecSecretRefPtrOutput) Elem() ImageRepositorySpecSecretRefOutput {
	return o.ApplyT(func(v *ImageRepositorySpecSecretRef) ImageRepositorySpecSecretRef {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecSecretRef
		return ret
	}).(ImageRepositorySpecSecretRefOutput)
}

// Name of the referent.
func (o ImageRepositorySpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef can be given the name of a secret containing
// credentials to use for the image registry. The secret should be
// created with `kubectl create secret docker-registry`, or the
// equivalent.
type ImageRepositorySpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageRepositorySpecSecretRefPatchInput is an input type that accepts ImageRepositorySpecSecretRefPatchArgs and ImageRepositorySpecSecretRefPatchOutput values.
// You can construct a concrete instance of `ImageRepositorySpecSecretRefPatchInput` via:
//
//	ImageRepositorySpecSecretRefPatchArgs{...}
type ImageRepositorySpecSecretRefPatchInput interface {
	pulumi.Input

	ToImageRepositorySpecSecretRefPatchOutput() ImageRepositorySpecSecretRefPatchOutput
	ToImageRepositorySpecSecretRefPatchOutputWithContext(context.Context) ImageRepositorySpecSecretRefPatchOutput
}

// SecretRef can be given the name of a secret containing
// credentials to use for the image registry. The secret should be
// created with `kubectl create secret docker-registry`, or the
// equivalent.
type ImageRepositorySpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageRepositorySpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i ImageRepositorySpecSecretRefPatchArgs) ToImageRepositorySpecSecretRefPatchOutput() ImageRepositorySpecSecretRefPatchOutput {
	return i.ToImageRepositorySpecSecretRefPatchOutputWithContext(context.Background())
}

func (i ImageRepositorySpecSecretRefPatchArgs) ToImageRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecSecretRefPatchOutput)
}

func (i ImageRepositorySpecSecretRefPatchArgs) ToImageRepositorySpecSecretRefPatchPtrOutput() ImageRepositorySpecSecretRefPatchPtrOutput {
	return i.ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositorySpecSecretRefPatchArgs) ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecSecretRefPatchOutput).ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(ctx)
}

// ImageRepositorySpecSecretRefPatchPtrInput is an input type that accepts ImageRepositorySpecSecretRefPatchArgs, ImageRepositorySpecSecretRefPatchPtr and ImageRepositorySpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositorySpecSecretRefPatchPtrInput` via:
//
//	        ImageRepositorySpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositorySpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToImageRepositorySpecSecretRefPatchPtrOutput() ImageRepositorySpecSecretRefPatchPtrOutput
	ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(context.Context) ImageRepositorySpecSecretRefPatchPtrOutput
}

type imageRepositorySpecSecretRefPatchPtrType ImageRepositorySpecSecretRefPatchArgs

func ImageRepositorySpecSecretRefPatchPtr(v *ImageRepositorySpecSecretRefPatchArgs) ImageRepositorySpecSecretRefPatchPtrInput {
	return (*imageRepositorySpecSecretRefPatchPtrType)(v)
}

func (*imageRepositorySpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i *imageRepositorySpecSecretRefPatchPtrType) ToImageRepositorySpecSecretRefPatchPtrOutput() ImageRepositorySpecSecretRefPatchPtrOutput {
	return i.ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositorySpecSecretRefPatchPtrType) ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositorySpecSecretRefPatchPtrOutput)
}

// SecretRef can be given the name of a secret containing
// credentials to use for the image registry. The secret should be
// created with `kubectl create secret docker-registry`, or the
// equivalent.
type ImageRepositorySpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o ImageRepositorySpecSecretRefPatchOutput) ToImageRepositorySpecSecretRefPatchOutput() ImageRepositorySpecSecretRefPatchOutput {
	return o
}

func (o ImageRepositorySpecSecretRefPatchOutput) ToImageRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPatchOutput {
	return o
}

func (o ImageRepositorySpecSecretRefPatchOutput) ToImageRepositorySpecSecretRefPatchPtrOutput() ImageRepositorySpecSecretRefPatchPtrOutput {
	return o.ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositorySpecSecretRefPatchOutput) ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositorySpecSecretRefPatch) *ImageRepositorySpecSecretRefPatch {
		return &v
	}).(ImageRepositorySpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ImageRepositorySpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositorySpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageRepositorySpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositorySpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o ImageRepositorySpecSecretRefPatchPtrOutput) ToImageRepositorySpecSecretRefPatchPtrOutput() ImageRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecSecretRefPatchPtrOutput) ToImageRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ImageRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o ImageRepositorySpecSecretRefPatchPtrOutput) Elem() ImageRepositorySpecSecretRefPatchOutput {
	return o.ApplyT(func(v *ImageRepositorySpecSecretRefPatch) ImageRepositorySpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositorySpecSecretRefPatch
		return ret
	}).(ImageRepositorySpecSecretRefPatchOutput)
}

// Name of the referent.
func (o ImageRepositorySpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositorySpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ImageRepositoryStatus defines the observed state of ImageRepository
type ImageRepositoryStatus struct {
	// CanonicalName is the name of the image repository with all the
	// implied bits made explicit; e.g., `docker.io/library/alpine`
	// rather than `alpine`.
	CanonicalImageName *string                           `pulumi:"canonicalImageName"`
	Conditions         []ImageRepositoryStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string                              `pulumi:"lastHandledReconcileAt"`
	LastScanResult         *ImageRepositoryStatusLastScanResult `pulumi:"lastScanResult"`
	// ObservedExclusionList is a list of observed exclusion list. It reflects
	// the exclusion rules used for the observed scan result in
	// spec.lastScanResult.
	ObservedExclusionList []string `pulumi:"observedExclusionList"`
	// ObservedGeneration is the last reconciled generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// ImageRepositoryStatusInput is an input type that accepts ImageRepositoryStatusArgs and ImageRepositoryStatusOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusInput` via:
//
//	ImageRepositoryStatusArgs{...}
type ImageRepositoryStatusInput interface {
	pulumi.Input

	ToImageRepositoryStatusOutput() ImageRepositoryStatusOutput
	ToImageRepositoryStatusOutputWithContext(context.Context) ImageRepositoryStatusOutput
}

// ImageRepositoryStatus defines the observed state of ImageRepository
type ImageRepositoryStatusArgs struct {
	// CanonicalName is the name of the image repository with all the
	// implied bits made explicit; e.g., `docker.io/library/alpine`
	// rather than `alpine`.
	CanonicalImageName pulumi.StringPtrInput                     `pulumi:"canonicalImageName"`
	Conditions         ImageRepositoryStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput                       `pulumi:"lastHandledReconcileAt"`
	LastScanResult         ImageRepositoryStatusLastScanResultPtrInput `pulumi:"lastScanResult"`
	// ObservedExclusionList is a list of observed exclusion list. It reflects
	// the exclusion rules used for the observed scan result in
	// spec.lastScanResult.
	ObservedExclusionList pulumi.StringArrayInput `pulumi:"observedExclusionList"`
	// ObservedGeneration is the last reconciled generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (ImageRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatus)(nil)).Elem()
}

func (i ImageRepositoryStatusArgs) ToImageRepositoryStatusOutput() ImageRepositoryStatusOutput {
	return i.ToImageRepositoryStatusOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusArgs) ToImageRepositoryStatusOutputWithContext(ctx context.Context) ImageRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusOutput)
}

func (i ImageRepositoryStatusArgs) ToImageRepositoryStatusPtrOutput() ImageRepositoryStatusPtrOutput {
	return i.ToImageRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusArgs) ToImageRepositoryStatusPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusOutput).ToImageRepositoryStatusPtrOutputWithContext(ctx)
}

// ImageRepositoryStatusPtrInput is an input type that accepts ImageRepositoryStatusArgs, ImageRepositoryStatusPtr and ImageRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusPtrInput` via:
//
//	        ImageRepositoryStatusArgs{...}
//
//	or:
//
//	        nil
type ImageRepositoryStatusPtrInput interface {
	pulumi.Input

	ToImageRepositoryStatusPtrOutput() ImageRepositoryStatusPtrOutput
	ToImageRepositoryStatusPtrOutputWithContext(context.Context) ImageRepositoryStatusPtrOutput
}

type imageRepositoryStatusPtrType ImageRepositoryStatusArgs

func ImageRepositoryStatusPtr(v *ImageRepositoryStatusArgs) ImageRepositoryStatusPtrInput {
	return (*imageRepositoryStatusPtrType)(v)
}

func (*imageRepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatus)(nil)).Elem()
}

func (i *imageRepositoryStatusPtrType) ToImageRepositoryStatusPtrOutput() ImageRepositoryStatusPtrOutput {
	return i.ToImageRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *imageRepositoryStatusPtrType) ToImageRepositoryStatusPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusPtrOutput)
}

// ImageRepositoryStatus defines the observed state of ImageRepository
type ImageRepositoryStatusOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatus)(nil)).Elem()
}

func (o ImageRepositoryStatusOutput) ToImageRepositoryStatusOutput() ImageRepositoryStatusOutput {
	return o
}

func (o ImageRepositoryStatusOutput) ToImageRepositoryStatusOutputWithContext(ctx context.Context) ImageRepositoryStatusOutput {
	return o
}

func (o ImageRepositoryStatusOutput) ToImageRepositoryStatusPtrOutput() ImageRepositoryStatusPtrOutput {
	return o.ToImageRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o ImageRepositoryStatusOutput) ToImageRepositoryStatusPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositoryStatus) *ImageRepositoryStatus {
		return &v
	}).(ImageRepositoryStatusPtrOutput)
}

// CanonicalName is the name of the image repository with all the
// implied bits made explicit; e.g., `docker.io/library/alpine`
// rather than `alpine`.
func (o ImageRepositoryStatusOutput) CanonicalImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatus) *string { return v.CanonicalImageName }).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusOutput) Conditions() ImageRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v ImageRepositoryStatus) []ImageRepositoryStatusConditions { return v.Conditions }).(ImageRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageRepositoryStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusOutput) LastScanResult() ImageRepositoryStatusLastScanResultPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatus) *ImageRepositoryStatusLastScanResult { return v.LastScanResult }).(ImageRepositoryStatusLastScanResultPtrOutput)
}

// ObservedExclusionList is a list of observed exclusion list. It reflects
// the exclusion rules used for the observed scan result in
// spec.lastScanResult.
func (o ImageRepositoryStatusOutput) ObservedExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRepositoryStatus) []string { return v.ObservedExclusionList }).(pulumi.StringArrayOutput)
}

// ObservedGeneration is the last reconciled generation.
func (o ImageRepositoryStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type ImageRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatus)(nil)).Elem()
}

func (o ImageRepositoryStatusPtrOutput) ToImageRepositoryStatusPtrOutput() ImageRepositoryStatusPtrOutput {
	return o
}

func (o ImageRepositoryStatusPtrOutput) ToImageRepositoryStatusPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPtrOutput {
	return o
}

func (o ImageRepositoryStatusPtrOutput) Elem() ImageRepositoryStatusOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) ImageRepositoryStatus {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryStatus
		return ret
	}).(ImageRepositoryStatusOutput)
}

// CanonicalName is the name of the image repository with all the
// implied bits made explicit; e.g., `docker.io/library/alpine`
// rather than `alpine`.
func (o ImageRepositoryStatusPtrOutput) CanonicalImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.CanonicalImageName
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusPtrOutput) Conditions() ImageRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) []ImageRepositoryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ImageRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageRepositoryStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusPtrOutput) LastScanResult() ImageRepositoryStatusLastScanResultPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) *ImageRepositoryStatusLastScanResult {
		if v == nil {
			return nil
		}
		return v.LastScanResult
	}).(ImageRepositoryStatusLastScanResultPtrOutput)
}

// ObservedExclusionList is a list of observed exclusion list. It reflects
// the exclusion rules used for the observed scan result in
// spec.lastScanResult.
func (o ImageRepositoryStatusPtrOutput) ObservedExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) []string {
		if v == nil {
			return nil
		}
		return v.ObservedExclusionList
	}).(pulumi.StringArrayOutput)
}

// ObservedGeneration is the last reconciled generation.
func (o ImageRepositoryStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageRepositoryStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ImageRepositoryStatusConditionsInput is an input type that accepts ImageRepositoryStatusConditionsArgs and ImageRepositoryStatusConditionsOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusConditionsInput` via:
//
//	ImageRepositoryStatusConditionsArgs{...}
type ImageRepositoryStatusConditionsInput interface {
	pulumi.Input

	ToImageRepositoryStatusConditionsOutput() ImageRepositoryStatusConditionsOutput
	ToImageRepositoryStatusConditionsOutputWithContext(context.Context) ImageRepositoryStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageRepositoryStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ImageRepositoryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusConditions)(nil)).Elem()
}

func (i ImageRepositoryStatusConditionsArgs) ToImageRepositoryStatusConditionsOutput() ImageRepositoryStatusConditionsOutput {
	return i.ToImageRepositoryStatusConditionsOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusConditionsArgs) ToImageRepositoryStatusConditionsOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusConditionsOutput)
}

// ImageRepositoryStatusConditionsArrayInput is an input type that accepts ImageRepositoryStatusConditionsArray and ImageRepositoryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusConditionsArrayInput` via:
//
//	ImageRepositoryStatusConditionsArray{ ImageRepositoryStatusConditionsArgs{...} }
type ImageRepositoryStatusConditionsArrayInput interface {
	pulumi.Input

	ToImageRepositoryStatusConditionsArrayOutput() ImageRepositoryStatusConditionsArrayOutput
	ToImageRepositoryStatusConditionsArrayOutputWithContext(context.Context) ImageRepositoryStatusConditionsArrayOutput
}

type ImageRepositoryStatusConditionsArray []ImageRepositoryStatusConditionsInput

func (ImageRepositoryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositoryStatusConditions)(nil)).Elem()
}

func (i ImageRepositoryStatusConditionsArray) ToImageRepositoryStatusConditionsArrayOutput() ImageRepositoryStatusConditionsArrayOutput {
	return i.ToImageRepositoryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusConditionsArray) ToImageRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageRepositoryStatusConditionsOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusConditions)(nil)).Elem()
}

func (o ImageRepositoryStatusConditionsOutput) ToImageRepositoryStatusConditionsOutput() ImageRepositoryStatusConditionsOutput {
	return o
}

func (o ImageRepositoryStatusConditionsOutput) ToImageRepositoryStatusConditionsOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ImageRepositoryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ImageRepositoryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ImageRepositoryStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ImageRepositoryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ImageRepositoryStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ImageRepositoryStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImageRepositoryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositoryStatusConditions)(nil)).Elem()
}

func (o ImageRepositoryStatusConditionsArrayOutput) ToImageRepositoryStatusConditionsArrayOutput() ImageRepositoryStatusConditionsArrayOutput {
	return o
}

func (o ImageRepositoryStatusConditionsArrayOutput) ToImageRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsArrayOutput {
	return o
}

func (o ImageRepositoryStatusConditionsArrayOutput) Index(i pulumi.IntInput) ImageRepositoryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRepositoryStatusConditions {
		return vs[0].([]ImageRepositoryStatusConditions)[vs[1].(int)]
	}).(ImageRepositoryStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageRepositoryStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ImageRepositoryStatusConditionsPatchInput is an input type that accepts ImageRepositoryStatusConditionsPatchArgs and ImageRepositoryStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusConditionsPatchInput` via:
//
//	ImageRepositoryStatusConditionsPatchArgs{...}
type ImageRepositoryStatusConditionsPatchInput interface {
	pulumi.Input

	ToImageRepositoryStatusConditionsPatchOutput() ImageRepositoryStatusConditionsPatchOutput
	ToImageRepositoryStatusConditionsPatchOutputWithContext(context.Context) ImageRepositoryStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageRepositoryStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ImageRepositoryStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i ImageRepositoryStatusConditionsPatchArgs) ToImageRepositoryStatusConditionsPatchOutput() ImageRepositoryStatusConditionsPatchOutput {
	return i.ToImageRepositoryStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusConditionsPatchArgs) ToImageRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusConditionsPatchOutput)
}

// ImageRepositoryStatusConditionsPatchArrayInput is an input type that accepts ImageRepositoryStatusConditionsPatchArray and ImageRepositoryStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusConditionsPatchArrayInput` via:
//
//	ImageRepositoryStatusConditionsPatchArray{ ImageRepositoryStatusConditionsPatchArgs{...} }
type ImageRepositoryStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToImageRepositoryStatusConditionsPatchArrayOutput() ImageRepositoryStatusConditionsPatchArrayOutput
	ToImageRepositoryStatusConditionsPatchArrayOutputWithContext(context.Context) ImageRepositoryStatusConditionsPatchArrayOutput
}

type ImageRepositoryStatusConditionsPatchArray []ImageRepositoryStatusConditionsPatchInput

func (ImageRepositoryStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i ImageRepositoryStatusConditionsPatchArray) ToImageRepositoryStatusConditionsPatchArrayOutput() ImageRepositoryStatusConditionsPatchArrayOutput {
	return i.ToImageRepositoryStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusConditionsPatchArray) ToImageRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageRepositoryStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o ImageRepositoryStatusConditionsPatchOutput) ToImageRepositoryStatusConditionsPatchOutput() ImageRepositoryStatusConditionsPatchOutput {
	return o
}

func (o ImageRepositoryStatusConditionsPatchOutput) ToImageRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ImageRepositoryStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ImageRepositoryStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ImageRepositoryStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ImageRepositoryStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ImageRepositoryStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ImageRepositoryStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImageRepositoryStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o ImageRepositoryStatusConditionsPatchArrayOutput) ToImageRepositoryStatusConditionsPatchArrayOutput() ImageRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o ImageRepositoryStatusConditionsPatchArrayOutput) ToImageRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ImageRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o ImageRepositoryStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ImageRepositoryStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRepositoryStatusConditionsPatch {
		return vs[0].([]ImageRepositoryStatusConditionsPatch)[vs[1].(int)]
	}).(ImageRepositoryStatusConditionsPatchOutput)
}

// LastScanResult contains the number of fetched tags.
type ImageRepositoryStatusLastScanResult struct {
	LatestTags []string `pulumi:"latestTags"`
	ScanTime   *string  `pulumi:"scanTime"`
	TagCount   *int     `pulumi:"tagCount"`
}

// ImageRepositoryStatusLastScanResultInput is an input type that accepts ImageRepositoryStatusLastScanResultArgs and ImageRepositoryStatusLastScanResultOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusLastScanResultInput` via:
//
//	ImageRepositoryStatusLastScanResultArgs{...}
type ImageRepositoryStatusLastScanResultInput interface {
	pulumi.Input

	ToImageRepositoryStatusLastScanResultOutput() ImageRepositoryStatusLastScanResultOutput
	ToImageRepositoryStatusLastScanResultOutputWithContext(context.Context) ImageRepositoryStatusLastScanResultOutput
}

// LastScanResult contains the number of fetched tags.
type ImageRepositoryStatusLastScanResultArgs struct {
	LatestTags pulumi.StringArrayInput `pulumi:"latestTags"`
	ScanTime   pulumi.StringPtrInput   `pulumi:"scanTime"`
	TagCount   pulumi.IntPtrInput      `pulumi:"tagCount"`
}

func (ImageRepositoryStatusLastScanResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusLastScanResult)(nil)).Elem()
}

func (i ImageRepositoryStatusLastScanResultArgs) ToImageRepositoryStatusLastScanResultOutput() ImageRepositoryStatusLastScanResultOutput {
	return i.ToImageRepositoryStatusLastScanResultOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusLastScanResultArgs) ToImageRepositoryStatusLastScanResultOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusLastScanResultOutput)
}

func (i ImageRepositoryStatusLastScanResultArgs) ToImageRepositoryStatusLastScanResultPtrOutput() ImageRepositoryStatusLastScanResultPtrOutput {
	return i.ToImageRepositoryStatusLastScanResultPtrOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusLastScanResultArgs) ToImageRepositoryStatusLastScanResultPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusLastScanResultOutput).ToImageRepositoryStatusLastScanResultPtrOutputWithContext(ctx)
}

// ImageRepositoryStatusLastScanResultPtrInput is an input type that accepts ImageRepositoryStatusLastScanResultArgs, ImageRepositoryStatusLastScanResultPtr and ImageRepositoryStatusLastScanResultPtrOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusLastScanResultPtrInput` via:
//
//	        ImageRepositoryStatusLastScanResultArgs{...}
//
//	or:
//
//	        nil
type ImageRepositoryStatusLastScanResultPtrInput interface {
	pulumi.Input

	ToImageRepositoryStatusLastScanResultPtrOutput() ImageRepositoryStatusLastScanResultPtrOutput
	ToImageRepositoryStatusLastScanResultPtrOutputWithContext(context.Context) ImageRepositoryStatusLastScanResultPtrOutput
}

type imageRepositoryStatusLastScanResultPtrType ImageRepositoryStatusLastScanResultArgs

func ImageRepositoryStatusLastScanResultPtr(v *ImageRepositoryStatusLastScanResultArgs) ImageRepositoryStatusLastScanResultPtrInput {
	return (*imageRepositoryStatusLastScanResultPtrType)(v)
}

func (*imageRepositoryStatusLastScanResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatusLastScanResult)(nil)).Elem()
}

func (i *imageRepositoryStatusLastScanResultPtrType) ToImageRepositoryStatusLastScanResultPtrOutput() ImageRepositoryStatusLastScanResultPtrOutput {
	return i.ToImageRepositoryStatusLastScanResultPtrOutputWithContext(context.Background())
}

func (i *imageRepositoryStatusLastScanResultPtrType) ToImageRepositoryStatusLastScanResultPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusLastScanResultPtrOutput)
}

// LastScanResult contains the number of fetched tags.
type ImageRepositoryStatusLastScanResultOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusLastScanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusLastScanResult)(nil)).Elem()
}

func (o ImageRepositoryStatusLastScanResultOutput) ToImageRepositoryStatusLastScanResultOutput() ImageRepositoryStatusLastScanResultOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultOutput) ToImageRepositoryStatusLastScanResultOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultOutput) ToImageRepositoryStatusLastScanResultPtrOutput() ImageRepositoryStatusLastScanResultPtrOutput {
	return o.ToImageRepositoryStatusLastScanResultPtrOutputWithContext(context.Background())
}

func (o ImageRepositoryStatusLastScanResultOutput) ToImageRepositoryStatusLastScanResultPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositoryStatusLastScanResult) *ImageRepositoryStatusLastScanResult {
		return &v
	}).(ImageRepositoryStatusLastScanResultPtrOutput)
}

func (o ImageRepositoryStatusLastScanResultOutput) LatestTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRepositoryStatusLastScanResult) []string { return v.LatestTags }).(pulumi.StringArrayOutput)
}

func (o ImageRepositoryStatusLastScanResultOutput) ScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusLastScanResult) *string { return v.ScanTime }).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusLastScanResultOutput) TagCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusLastScanResult) *int { return v.TagCount }).(pulumi.IntPtrOutput)
}

type ImageRepositoryStatusLastScanResultPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusLastScanResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatusLastScanResult)(nil)).Elem()
}

func (o ImageRepositoryStatusLastScanResultPtrOutput) ToImageRepositoryStatusLastScanResultPtrOutput() ImageRepositoryStatusLastScanResultPtrOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultPtrOutput) ToImageRepositoryStatusLastScanResultPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPtrOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultPtrOutput) Elem() ImageRepositoryStatusLastScanResultOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResult) ImageRepositoryStatusLastScanResult {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryStatusLastScanResult
		return ret
	}).(ImageRepositoryStatusLastScanResultOutput)
}

func (o ImageRepositoryStatusLastScanResultPtrOutput) LatestTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResult) []string {
		if v == nil {
			return nil
		}
		return v.LatestTags
	}).(pulumi.StringArrayOutput)
}

func (o ImageRepositoryStatusLastScanResultPtrOutput) ScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResult) *string {
		if v == nil {
			return nil
		}
		return v.ScanTime
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusLastScanResultPtrOutput) TagCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResult) *int {
		if v == nil {
			return nil
		}
		return v.TagCount
	}).(pulumi.IntPtrOutput)
}

// LastScanResult contains the number of fetched tags.
type ImageRepositoryStatusLastScanResultPatch struct {
	LatestTags []string `pulumi:"latestTags"`
	ScanTime   *string  `pulumi:"scanTime"`
	TagCount   *int     `pulumi:"tagCount"`
}

// ImageRepositoryStatusLastScanResultPatchInput is an input type that accepts ImageRepositoryStatusLastScanResultPatchArgs and ImageRepositoryStatusLastScanResultPatchOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusLastScanResultPatchInput` via:
//
//	ImageRepositoryStatusLastScanResultPatchArgs{...}
type ImageRepositoryStatusLastScanResultPatchInput interface {
	pulumi.Input

	ToImageRepositoryStatusLastScanResultPatchOutput() ImageRepositoryStatusLastScanResultPatchOutput
	ToImageRepositoryStatusLastScanResultPatchOutputWithContext(context.Context) ImageRepositoryStatusLastScanResultPatchOutput
}

// LastScanResult contains the number of fetched tags.
type ImageRepositoryStatusLastScanResultPatchArgs struct {
	LatestTags pulumi.StringArrayInput `pulumi:"latestTags"`
	ScanTime   pulumi.StringPtrInput   `pulumi:"scanTime"`
	TagCount   pulumi.IntPtrInput      `pulumi:"tagCount"`
}

func (ImageRepositoryStatusLastScanResultPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusLastScanResultPatch)(nil)).Elem()
}

func (i ImageRepositoryStatusLastScanResultPatchArgs) ToImageRepositoryStatusLastScanResultPatchOutput() ImageRepositoryStatusLastScanResultPatchOutput {
	return i.ToImageRepositoryStatusLastScanResultPatchOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusLastScanResultPatchArgs) ToImageRepositoryStatusLastScanResultPatchOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusLastScanResultPatchOutput)
}

func (i ImageRepositoryStatusLastScanResultPatchArgs) ToImageRepositoryStatusLastScanResultPatchPtrOutput() ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return i.ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusLastScanResultPatchArgs) ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusLastScanResultPatchOutput).ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(ctx)
}

// ImageRepositoryStatusLastScanResultPatchPtrInput is an input type that accepts ImageRepositoryStatusLastScanResultPatchArgs, ImageRepositoryStatusLastScanResultPatchPtr and ImageRepositoryStatusLastScanResultPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusLastScanResultPatchPtrInput` via:
//
//	        ImageRepositoryStatusLastScanResultPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositoryStatusLastScanResultPatchPtrInput interface {
	pulumi.Input

	ToImageRepositoryStatusLastScanResultPatchPtrOutput() ImageRepositoryStatusLastScanResultPatchPtrOutput
	ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(context.Context) ImageRepositoryStatusLastScanResultPatchPtrOutput
}

type imageRepositoryStatusLastScanResultPatchPtrType ImageRepositoryStatusLastScanResultPatchArgs

func ImageRepositoryStatusLastScanResultPatchPtr(v *ImageRepositoryStatusLastScanResultPatchArgs) ImageRepositoryStatusLastScanResultPatchPtrInput {
	return (*imageRepositoryStatusLastScanResultPatchPtrType)(v)
}

func (*imageRepositoryStatusLastScanResultPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatusLastScanResultPatch)(nil)).Elem()
}

func (i *imageRepositoryStatusLastScanResultPatchPtrType) ToImageRepositoryStatusLastScanResultPatchPtrOutput() ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return i.ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositoryStatusLastScanResultPatchPtrType) ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusLastScanResultPatchPtrOutput)
}

// LastScanResult contains the number of fetched tags.
type ImageRepositoryStatusLastScanResultPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusLastScanResultPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusLastScanResultPatch)(nil)).Elem()
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) ToImageRepositoryStatusLastScanResultPatchOutput() ImageRepositoryStatusLastScanResultPatchOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) ToImageRepositoryStatusLastScanResultPatchOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPatchOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) ToImageRepositoryStatusLastScanResultPatchPtrOutput() ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return o.ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositoryStatusLastScanResultPatch) *ImageRepositoryStatusLastScanResultPatch {
		return &v
	}).(ImageRepositoryStatusLastScanResultPatchPtrOutput)
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) LatestTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRepositoryStatusLastScanResultPatch) []string { return v.LatestTags }).(pulumi.StringArrayOutput)
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) ScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusLastScanResultPatch) *string { return v.ScanTime }).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusLastScanResultPatchOutput) TagCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusLastScanResultPatch) *int { return v.TagCount }).(pulumi.IntPtrOutput)
}

type ImageRepositoryStatusLastScanResultPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusLastScanResultPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatusLastScanResultPatch)(nil)).Elem()
}

func (o ImageRepositoryStatusLastScanResultPatchPtrOutput) ToImageRepositoryStatusLastScanResultPatchPtrOutput() ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultPatchPtrOutput) ToImageRepositoryStatusLastScanResultPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return o
}

func (o ImageRepositoryStatusLastScanResultPatchPtrOutput) Elem() ImageRepositoryStatusLastScanResultPatchOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResultPatch) ImageRepositoryStatusLastScanResultPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryStatusLastScanResultPatch
		return ret
	}).(ImageRepositoryStatusLastScanResultPatchOutput)
}

func (o ImageRepositoryStatusLastScanResultPatchPtrOutput) LatestTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResultPatch) []string {
		if v == nil {
			return nil
		}
		return v.LatestTags
	}).(pulumi.StringArrayOutput)
}

func (o ImageRepositoryStatusLastScanResultPatchPtrOutput) ScanTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResultPatch) *string {
		if v == nil {
			return nil
		}
		return v.ScanTime
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusLastScanResultPatchPtrOutput) TagCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusLastScanResultPatch) *int {
		if v == nil {
			return nil
		}
		return v.TagCount
	}).(pulumi.IntPtrOutput)
}

// ImageRepositoryStatus defines the observed state of ImageRepository
type ImageRepositoryStatusPatch struct {
	// CanonicalName is the name of the image repository with all the
	// implied bits made explicit; e.g., `docker.io/library/alpine`
	// rather than `alpine`.
	CanonicalImageName *string                                `pulumi:"canonicalImageName"`
	Conditions         []ImageRepositoryStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string                                   `pulumi:"lastHandledReconcileAt"`
	LastScanResult         *ImageRepositoryStatusLastScanResultPatch `pulumi:"lastScanResult"`
	// ObservedExclusionList is a list of observed exclusion list. It reflects
	// the exclusion rules used for the observed scan result in
	// spec.lastScanResult.
	ObservedExclusionList []string `pulumi:"observedExclusionList"`
	// ObservedGeneration is the last reconciled generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
}

// ImageRepositoryStatusPatchInput is an input type that accepts ImageRepositoryStatusPatchArgs and ImageRepositoryStatusPatchOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusPatchInput` via:
//
//	ImageRepositoryStatusPatchArgs{...}
type ImageRepositoryStatusPatchInput interface {
	pulumi.Input

	ToImageRepositoryStatusPatchOutput() ImageRepositoryStatusPatchOutput
	ToImageRepositoryStatusPatchOutputWithContext(context.Context) ImageRepositoryStatusPatchOutput
}

// ImageRepositoryStatus defines the observed state of ImageRepository
type ImageRepositoryStatusPatchArgs struct {
	// CanonicalName is the name of the image repository with all the
	// implied bits made explicit; e.g., `docker.io/library/alpine`
	// rather than `alpine`.
	CanonicalImageName pulumi.StringPtrInput                          `pulumi:"canonicalImageName"`
	Conditions         ImageRepositoryStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput                            `pulumi:"lastHandledReconcileAt"`
	LastScanResult         ImageRepositoryStatusLastScanResultPatchPtrInput `pulumi:"lastScanResult"`
	// ObservedExclusionList is a list of observed exclusion list. It reflects
	// the exclusion rules used for the observed scan result in
	// spec.lastScanResult.
	ObservedExclusionList pulumi.StringArrayInput `pulumi:"observedExclusionList"`
	// ObservedGeneration is the last reconciled generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
}

func (ImageRepositoryStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusPatch)(nil)).Elem()
}

func (i ImageRepositoryStatusPatchArgs) ToImageRepositoryStatusPatchOutput() ImageRepositoryStatusPatchOutput {
	return i.ToImageRepositoryStatusPatchOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusPatchArgs) ToImageRepositoryStatusPatchOutputWithContext(ctx context.Context) ImageRepositoryStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusPatchOutput)
}

func (i ImageRepositoryStatusPatchArgs) ToImageRepositoryStatusPatchPtrOutput() ImageRepositoryStatusPatchPtrOutput {
	return i.ToImageRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i ImageRepositoryStatusPatchArgs) ToImageRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusPatchOutput).ToImageRepositoryStatusPatchPtrOutputWithContext(ctx)
}

// ImageRepositoryStatusPatchPtrInput is an input type that accepts ImageRepositoryStatusPatchArgs, ImageRepositoryStatusPatchPtr and ImageRepositoryStatusPatchPtrOutput values.
// You can construct a concrete instance of `ImageRepositoryStatusPatchPtrInput` via:
//
//	        ImageRepositoryStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ImageRepositoryStatusPatchPtrInput interface {
	pulumi.Input

	ToImageRepositoryStatusPatchPtrOutput() ImageRepositoryStatusPatchPtrOutput
	ToImageRepositoryStatusPatchPtrOutputWithContext(context.Context) ImageRepositoryStatusPatchPtrOutput
}

type imageRepositoryStatusPatchPtrType ImageRepositoryStatusPatchArgs

func ImageRepositoryStatusPatchPtr(v *ImageRepositoryStatusPatchArgs) ImageRepositoryStatusPatchPtrInput {
	return (*imageRepositoryStatusPatchPtrType)(v)
}

func (*imageRepositoryStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatusPatch)(nil)).Elem()
}

func (i *imageRepositoryStatusPatchPtrType) ToImageRepositoryStatusPatchPtrOutput() ImageRepositoryStatusPatchPtrOutput {
	return i.ToImageRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i *imageRepositoryStatusPatchPtrType) ToImageRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryStatusPatchPtrOutput)
}

// ImageRepositoryStatus defines the observed state of ImageRepository
type ImageRepositoryStatusPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryStatusPatch)(nil)).Elem()
}

func (o ImageRepositoryStatusPatchOutput) ToImageRepositoryStatusPatchOutput() ImageRepositoryStatusPatchOutput {
	return o
}

func (o ImageRepositoryStatusPatchOutput) ToImageRepositoryStatusPatchOutputWithContext(ctx context.Context) ImageRepositoryStatusPatchOutput {
	return o
}

func (o ImageRepositoryStatusPatchOutput) ToImageRepositoryStatusPatchPtrOutput() ImageRepositoryStatusPatchPtrOutput {
	return o.ToImageRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (o ImageRepositoryStatusPatchOutput) ToImageRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositoryStatusPatch) *ImageRepositoryStatusPatch {
		return &v
	}).(ImageRepositoryStatusPatchPtrOutput)
}

// CanonicalName is the name of the image repository with all the
// implied bits made explicit; e.g., `docker.io/library/alpine`
// rather than `alpine`.
func (o ImageRepositoryStatusPatchOutput) CanonicalImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusPatch) *string { return v.CanonicalImageName }).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusPatchOutput) Conditions() ImageRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ImageRepositoryStatusPatch) []ImageRepositoryStatusConditionsPatch { return v.Conditions }).(ImageRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageRepositoryStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusPatchOutput) LastScanResult() ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusPatch) *ImageRepositoryStatusLastScanResultPatch { return v.LastScanResult }).(ImageRepositoryStatusLastScanResultPatchPtrOutput)
}

// ObservedExclusionList is a list of observed exclusion list. It reflects
// the exclusion rules used for the observed scan result in
// spec.lastScanResult.
func (o ImageRepositoryStatusPatchOutput) ObservedExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageRepositoryStatusPatch) []string { return v.ObservedExclusionList }).(pulumi.StringArrayOutput)
}

// ObservedGeneration is the last reconciled generation.
func (o ImageRepositoryStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageRepositoryStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

type ImageRepositoryStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryStatusPatch)(nil)).Elem()
}

func (o ImageRepositoryStatusPatchPtrOutput) ToImageRepositoryStatusPatchPtrOutput() ImageRepositoryStatusPatchPtrOutput {
	return o
}

func (o ImageRepositoryStatusPatchPtrOutput) ToImageRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) ImageRepositoryStatusPatchPtrOutput {
	return o
}

func (o ImageRepositoryStatusPatchPtrOutput) Elem() ImageRepositoryStatusPatchOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) ImageRepositoryStatusPatch {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryStatusPatch
		return ret
	}).(ImageRepositoryStatusPatchOutput)
}

// CanonicalName is the name of the image repository with all the
// implied bits made explicit; e.g., `docker.io/library/alpine`
// rather than `alpine`.
func (o ImageRepositoryStatusPatchPtrOutput) CanonicalImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.CanonicalImageName
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusPatchPtrOutput) Conditions() ImageRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) []ImageRepositoryStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ImageRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageRepositoryStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

func (o ImageRepositoryStatusPatchPtrOutput) LastScanResult() ImageRepositoryStatusLastScanResultPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) *ImageRepositoryStatusLastScanResultPatch {
		if v == nil {
			return nil
		}
		return v.LastScanResult
	}).(ImageRepositoryStatusLastScanResultPatchPtrOutput)
}

// ObservedExclusionList is a list of observed exclusion list. It reflects
// the exclusion rules used for the observed scan result in
// spec.lastScanResult.
func (o ImageRepositoryStatusPatchPtrOutput) ObservedExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.ObservedExclusionList
	}).(pulumi.StringArrayOutput)
}

// ObservedGeneration is the last reconciled generation.
func (o ImageRepositoryStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ImageUpdateAutomation is the Schema for the imageupdateautomations API
type ImageUpdateAutomationType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta           `pulumi:"metadata"`
	Spec     *ImageUpdateAutomationSpec   `pulumi:"spec"`
	Status   *ImageUpdateAutomationStatus `pulumi:"status"`
}

// ImageUpdateAutomationTypeInput is an input type that accepts ImageUpdateAutomationTypeArgs and ImageUpdateAutomationTypeOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationTypeInput` via:
//
//	ImageUpdateAutomationTypeArgs{...}
type ImageUpdateAutomationTypeInput interface {
	pulumi.Input

	ToImageUpdateAutomationTypeOutput() ImageUpdateAutomationTypeOutput
	ToImageUpdateAutomationTypeOutputWithContext(context.Context) ImageUpdateAutomationTypeOutput
}

// ImageUpdateAutomation is the Schema for the imageupdateautomations API
type ImageUpdateAutomationTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput           `pulumi:"metadata"`
	Spec     ImageUpdateAutomationSpecPtrInput   `pulumi:"spec"`
	Status   ImageUpdateAutomationStatusPtrInput `pulumi:"status"`
}

func (ImageUpdateAutomationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationType)(nil)).Elem()
}

func (i ImageUpdateAutomationTypeArgs) ToImageUpdateAutomationTypeOutput() ImageUpdateAutomationTypeOutput {
	return i.ToImageUpdateAutomationTypeOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationTypeArgs) ToImageUpdateAutomationTypeOutputWithContext(ctx context.Context) ImageUpdateAutomationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationTypeOutput)
}

// ImageUpdateAutomationTypeArrayInput is an input type that accepts ImageUpdateAutomationTypeArray and ImageUpdateAutomationTypeArrayOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationTypeArrayInput` via:
//
//	ImageUpdateAutomationTypeArray{ ImageUpdateAutomationTypeArgs{...} }
type ImageUpdateAutomationTypeArrayInput interface {
	pulumi.Input

	ToImageUpdateAutomationTypeArrayOutput() ImageUpdateAutomationTypeArrayOutput
	ToImageUpdateAutomationTypeArrayOutputWithContext(context.Context) ImageUpdateAutomationTypeArrayOutput
}

type ImageUpdateAutomationTypeArray []ImageUpdateAutomationTypeInput

func (ImageUpdateAutomationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationType)(nil)).Elem()
}

func (i ImageUpdateAutomationTypeArray) ToImageUpdateAutomationTypeArrayOutput() ImageUpdateAutomationTypeArrayOutput {
	return i.ToImageUpdateAutomationTypeArrayOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationTypeArray) ToImageUpdateAutomationTypeArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationTypeArrayOutput)
}

// ImageUpdateAutomation is the Schema for the imageupdateautomations API
type ImageUpdateAutomationTypeOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationType)(nil)).Elem()
}

func (o ImageUpdateAutomationTypeOutput) ToImageUpdateAutomationTypeOutput() ImageUpdateAutomationTypeOutput {
	return o
}

func (o ImageUpdateAutomationTypeOutput) ToImageUpdateAutomationTypeOutputWithContext(ctx context.Context) ImageUpdateAutomationTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageUpdateAutomationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageUpdateAutomationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImageUpdateAutomationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ImageUpdateAutomationTypeOutput) Spec() ImageUpdateAutomationSpecPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationType) *ImageUpdateAutomationSpec { return v.Spec }).(ImageUpdateAutomationSpecPtrOutput)
}

func (o ImageUpdateAutomationTypeOutput) Status() ImageUpdateAutomationStatusPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationType) *ImageUpdateAutomationStatus { return v.Status }).(ImageUpdateAutomationStatusPtrOutput)
}

type ImageUpdateAutomationTypeArrayOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationType)(nil)).Elem()
}

func (o ImageUpdateAutomationTypeArrayOutput) ToImageUpdateAutomationTypeArrayOutput() ImageUpdateAutomationTypeArrayOutput {
	return o
}

func (o ImageUpdateAutomationTypeArrayOutput) ToImageUpdateAutomationTypeArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationTypeArrayOutput {
	return o
}

func (o ImageUpdateAutomationTypeArrayOutput) Index(i pulumi.IntInput) ImageUpdateAutomationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageUpdateAutomationType {
		return vs[0].([]ImageUpdateAutomationType)[vs[1].(int)]
	}).(ImageUpdateAutomationTypeOutput)
}

// ImageUpdateAutomationList is a list of ImageUpdateAutomation
type ImageUpdateAutomationListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of imageupdateautomations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ImageUpdateAutomationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ImageUpdateAutomationListTypeInput is an input type that accepts ImageUpdateAutomationListTypeArgs and ImageUpdateAutomationListTypeOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationListTypeInput` via:
//
//	ImageUpdateAutomationListTypeArgs{...}
type ImageUpdateAutomationListTypeInput interface {
	pulumi.Input

	ToImageUpdateAutomationListTypeOutput() ImageUpdateAutomationListTypeOutput
	ToImageUpdateAutomationListTypeOutputWithContext(context.Context) ImageUpdateAutomationListTypeOutput
}

// ImageUpdateAutomationList is a list of ImageUpdateAutomation
type ImageUpdateAutomationListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of imageupdateautomations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImageUpdateAutomationTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ImageUpdateAutomationListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationListType)(nil)).Elem()
}

func (i ImageUpdateAutomationListTypeArgs) ToImageUpdateAutomationListTypeOutput() ImageUpdateAutomationListTypeOutput {
	return i.ToImageUpdateAutomationListTypeOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationListTypeArgs) ToImageUpdateAutomationListTypeOutputWithContext(ctx context.Context) ImageUpdateAutomationListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationListTypeOutput)
}

// ImageUpdateAutomationList is a list of ImageUpdateAutomation
type ImageUpdateAutomationListTypeOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationListType)(nil)).Elem()
}

func (o ImageUpdateAutomationListTypeOutput) ToImageUpdateAutomationListTypeOutput() ImageUpdateAutomationListTypeOutput {
	return o
}

func (o ImageUpdateAutomationListTypeOutput) ToImageUpdateAutomationListTypeOutputWithContext(ctx context.Context) ImageUpdateAutomationListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageUpdateAutomationListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of imageupdateautomations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ImageUpdateAutomationListTypeOutput) Items() ImageUpdateAutomationTypeArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationListType) []ImageUpdateAutomationType { return v.Items }).(ImageUpdateAutomationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageUpdateAutomationListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageUpdateAutomationListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ImageUpdateAutomation is the Schema for the imageupdateautomations API
type ImageUpdateAutomationPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch           `pulumi:"metadata"`
	Spec     *ImageUpdateAutomationSpecPatch   `pulumi:"spec"`
	Status   *ImageUpdateAutomationStatusPatch `pulumi:"status"`
}

// ImageUpdateAutomationPatchTypeInput is an input type that accepts ImageUpdateAutomationPatchTypeArgs and ImageUpdateAutomationPatchTypeOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationPatchTypeInput` via:
//
//	ImageUpdateAutomationPatchTypeArgs{...}
type ImageUpdateAutomationPatchTypeInput interface {
	pulumi.Input

	ToImageUpdateAutomationPatchTypeOutput() ImageUpdateAutomationPatchTypeOutput
	ToImageUpdateAutomationPatchTypeOutputWithContext(context.Context) ImageUpdateAutomationPatchTypeOutput
}

// ImageUpdateAutomation is the Schema for the imageupdateautomations API
type ImageUpdateAutomationPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput           `pulumi:"metadata"`
	Spec     ImageUpdateAutomationSpecPatchPtrInput   `pulumi:"spec"`
	Status   ImageUpdateAutomationStatusPatchPtrInput `pulumi:"status"`
}

func (ImageUpdateAutomationPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationPatchType)(nil)).Elem()
}

func (i ImageUpdateAutomationPatchTypeArgs) ToImageUpdateAutomationPatchTypeOutput() ImageUpdateAutomationPatchTypeOutput {
	return i.ToImageUpdateAutomationPatchTypeOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationPatchTypeArgs) ToImageUpdateAutomationPatchTypeOutputWithContext(ctx context.Context) ImageUpdateAutomationPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationPatchTypeOutput)
}

// ImageUpdateAutomation is the Schema for the imageupdateautomations API
type ImageUpdateAutomationPatchTypeOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationPatchType)(nil)).Elem()
}

func (o ImageUpdateAutomationPatchTypeOutput) ToImageUpdateAutomationPatchTypeOutput() ImageUpdateAutomationPatchTypeOutput {
	return o
}

func (o ImageUpdateAutomationPatchTypeOutput) ToImageUpdateAutomationPatchTypeOutputWithContext(ctx context.Context) ImageUpdateAutomationPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageUpdateAutomationPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageUpdateAutomationPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImageUpdateAutomationPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ImageUpdateAutomationPatchTypeOutput) Spec() ImageUpdateAutomationSpecPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationPatchType) *ImageUpdateAutomationSpecPatch { return v.Spec }).(ImageUpdateAutomationSpecPatchPtrOutput)
}

func (o ImageUpdateAutomationPatchTypeOutput) Status() ImageUpdateAutomationStatusPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationPatchType) *ImageUpdateAutomationStatusPatch { return v.Status }).(ImageUpdateAutomationStatusPatchPtrOutput)
}

// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
type ImageUpdateAutomationSpec struct {
	Git *ImageUpdateAutomationSpecGit `pulumi:"git"`
	// Interval gives an lower bound for how often the automation
	// run should be attempted.
	Interval       *string                                  `pulumi:"interval"`
	PolicySelector *ImageUpdateAutomationSpecPolicySelector `pulumi:"policySelector"`
	SourceRef      *ImageUpdateAutomationSpecSourceRef      `pulumi:"sourceRef"`
	// Suspend tells the controller to not run this automation, until
	// it is unset (or set to false). Defaults to false.
	Suspend *bool                            `pulumi:"suspend"`
	Update  *ImageUpdateAutomationSpecUpdate `pulumi:"update"`
}

// ImageUpdateAutomationSpecInput is an input type that accepts ImageUpdateAutomationSpecArgs and ImageUpdateAutomationSpecOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecInput` via:
//
//	ImageUpdateAutomationSpecArgs{...}
type ImageUpdateAutomationSpecInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecOutput() ImageUpdateAutomationSpecOutput
	ToImageUpdateAutomationSpecOutputWithContext(context.Context) ImageUpdateAutomationSpecOutput
}

// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
type ImageUpdateAutomationSpecArgs struct {
	Git ImageUpdateAutomationSpecGitPtrInput `pulumi:"git"`
	// Interval gives an lower bound for how often the automation
	// run should be attempted.
	Interval       pulumi.StringPtrInput                           `pulumi:"interval"`
	PolicySelector ImageUpdateAutomationSpecPolicySelectorPtrInput `pulumi:"policySelector"`
	SourceRef      ImageUpdateAutomationSpecSourceRefPtrInput      `pulumi:"sourceRef"`
	// Suspend tells the controller to not run this automation, until
	// it is unset (or set to false). Defaults to false.
	Suspend pulumi.BoolPtrInput                     `pulumi:"suspend"`
	Update  ImageUpdateAutomationSpecUpdatePtrInput `pulumi:"update"`
}

func (ImageUpdateAutomationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpec)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecArgs) ToImageUpdateAutomationSpecOutput() ImageUpdateAutomationSpecOutput {
	return i.ToImageUpdateAutomationSpecOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecArgs) ToImageUpdateAutomationSpecOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecOutput)
}

func (i ImageUpdateAutomationSpecArgs) ToImageUpdateAutomationSpecPtrOutput() ImageUpdateAutomationSpecPtrOutput {
	return i.ToImageUpdateAutomationSpecPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecArgs) ToImageUpdateAutomationSpecPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecOutput).ToImageUpdateAutomationSpecPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecPtrInput is an input type that accepts ImageUpdateAutomationSpecArgs, ImageUpdateAutomationSpecPtr and ImageUpdateAutomationSpecPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPtrInput` via:
//
//	        ImageUpdateAutomationSpecArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPtrOutput() ImageUpdateAutomationSpecPtrOutput
	ToImageUpdateAutomationSpecPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecPtrOutput
}

type imageUpdateAutomationSpecPtrType ImageUpdateAutomationSpecArgs

func ImageUpdateAutomationSpecPtr(v *ImageUpdateAutomationSpecArgs) ImageUpdateAutomationSpecPtrInput {
	return (*imageUpdateAutomationSpecPtrType)(v)
}

func (*imageUpdateAutomationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpec)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecPtrType) ToImageUpdateAutomationSpecPtrOutput() ImageUpdateAutomationSpecPtrOutput {
	return i.ToImageUpdateAutomationSpecPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecPtrType) ToImageUpdateAutomationSpecPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPtrOutput)
}

// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
type ImageUpdateAutomationSpecOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpec)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecOutput) ToImageUpdateAutomationSpecOutput() ImageUpdateAutomationSpecOutput {
	return o
}

func (o ImageUpdateAutomationSpecOutput) ToImageUpdateAutomationSpecOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecOutput {
	return o
}

func (o ImageUpdateAutomationSpecOutput) ToImageUpdateAutomationSpecPtrOutput() ImageUpdateAutomationSpecPtrOutput {
	return o.ToImageUpdateAutomationSpecPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecOutput) ToImageUpdateAutomationSpecPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpec) *ImageUpdateAutomationSpec {
		return &v
	}).(ImageUpdateAutomationSpecPtrOutput)
}

func (o ImageUpdateAutomationSpecOutput) Git() ImageUpdateAutomationSpecGitPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecGit { return v.Git }).(ImageUpdateAutomationSpecGitPtrOutput)
}

// Interval gives an lower bound for how often the automation
// run should be attempted.
func (o ImageUpdateAutomationSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationSpecOutput) PolicySelector() ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecPolicySelector { return v.PolicySelector }).(ImageUpdateAutomationSpecPolicySelectorPtrOutput)
}

func (o ImageUpdateAutomationSpecOutput) SourceRef() ImageUpdateAutomationSpecSourceRefPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecSourceRef { return v.SourceRef }).(ImageUpdateAutomationSpecSourceRefPtrOutput)
}

// Suspend tells the controller to not run this automation, until
// it is unset (or set to false). Defaults to false.
func (o ImageUpdateAutomationSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

func (o ImageUpdateAutomationSpecOutput) Update() ImageUpdateAutomationSpecUpdatePtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecUpdate { return v.Update }).(ImageUpdateAutomationSpecUpdatePtrOutput)
}

type ImageUpdateAutomationSpecPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpec)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPtrOutput) ToImageUpdateAutomationSpecPtrOutput() ImageUpdateAutomationSpecPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPtrOutput) ToImageUpdateAutomationSpecPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPtrOutput) Elem() ImageUpdateAutomationSpecOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) ImageUpdateAutomationSpec {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpec
		return ret
	}).(ImageUpdateAutomationSpecOutput)
}

func (o ImageUpdateAutomationSpecPtrOutput) Git() ImageUpdateAutomationSpecGitPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecGit {
		if v == nil {
			return nil
		}
		return v.Git
	}).(ImageUpdateAutomationSpecGitPtrOutput)
}

// Interval gives an lower bound for how often the automation
// run should be attempted.
func (o ImageUpdateAutomationSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationSpecPtrOutput) PolicySelector() ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecPolicySelector {
		if v == nil {
			return nil
		}
		return v.PolicySelector
	}).(ImageUpdateAutomationSpecPolicySelectorPtrOutput)
}

func (o ImageUpdateAutomationSpecPtrOutput) SourceRef() ImageUpdateAutomationSpecSourceRefPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecSourceRef {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(ImageUpdateAutomationSpecSourceRefPtrOutput)
}

// Suspend tells the controller to not run this automation, until
// it is unset (or set to false). Defaults to false.
func (o ImageUpdateAutomationSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

func (o ImageUpdateAutomationSpecPtrOutput) Update() ImageUpdateAutomationSpecUpdatePtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpec) *ImageUpdateAutomationSpecUpdate {
		if v == nil {
			return nil
		}
		return v.Update
	}).(ImageUpdateAutomationSpecUpdatePtrOutput)
}

// GitSpec contains all the git-specific definitions. This is
// technically optional, but in practice mandatory until there are
// other kinds of source allowed.
type ImageUpdateAutomationSpecGit struct {
	Checkout *ImageUpdateAutomationSpecGitCheckout `pulumi:"checkout"`
	Commit   *ImageUpdateAutomationSpecGitCommit   `pulumi:"commit"`
	Push     *ImageUpdateAutomationSpecGitPush     `pulumi:"push"`
}

// ImageUpdateAutomationSpecGitInput is an input type that accepts ImageUpdateAutomationSpecGitArgs and ImageUpdateAutomationSpecGitOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitInput` via:
//
//	ImageUpdateAutomationSpecGitArgs{...}
type ImageUpdateAutomationSpecGitInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitOutput() ImageUpdateAutomationSpecGitOutput
	ToImageUpdateAutomationSpecGitOutputWithContext(context.Context) ImageUpdateAutomationSpecGitOutput
}

// GitSpec contains all the git-specific definitions. This is
// technically optional, but in practice mandatory until there are
// other kinds of source allowed.
type ImageUpdateAutomationSpecGitArgs struct {
	Checkout ImageUpdateAutomationSpecGitCheckoutPtrInput `pulumi:"checkout"`
	Commit   ImageUpdateAutomationSpecGitCommitPtrInput   `pulumi:"commit"`
	Push     ImageUpdateAutomationSpecGitPushPtrInput     `pulumi:"push"`
}

func (ImageUpdateAutomationSpecGitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGit)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitArgs) ToImageUpdateAutomationSpecGitOutput() ImageUpdateAutomationSpecGitOutput {
	return i.ToImageUpdateAutomationSpecGitOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitArgs) ToImageUpdateAutomationSpecGitOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitOutput)
}

func (i ImageUpdateAutomationSpecGitArgs) ToImageUpdateAutomationSpecGitPtrOutput() ImageUpdateAutomationSpecGitPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitArgs) ToImageUpdateAutomationSpecGitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitOutput).ToImageUpdateAutomationSpecGitPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitPtrInput is an input type that accepts ImageUpdateAutomationSpecGitArgs, ImageUpdateAutomationSpecGitPtr and ImageUpdateAutomationSpecGitPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPtrOutput() ImageUpdateAutomationSpecGitPtrOutput
	ToImageUpdateAutomationSpecGitPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPtrOutput
}

type imageUpdateAutomationSpecGitPtrType ImageUpdateAutomationSpecGitArgs

func ImageUpdateAutomationSpecGitPtr(v *ImageUpdateAutomationSpecGitArgs) ImageUpdateAutomationSpecGitPtrInput {
	return (*imageUpdateAutomationSpecGitPtrType)(v)
}

func (*imageUpdateAutomationSpecGitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGit)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitPtrType) ToImageUpdateAutomationSpecGitPtrOutput() ImageUpdateAutomationSpecGitPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitPtrType) ToImageUpdateAutomationSpecGitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPtrOutput)
}

// GitSpec contains all the git-specific definitions. This is
// technically optional, but in practice mandatory until there are
// other kinds of source allowed.
type ImageUpdateAutomationSpecGitOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGit)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitOutput) ToImageUpdateAutomationSpecGitOutput() ImageUpdateAutomationSpecGitOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitOutput) ToImageUpdateAutomationSpecGitOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitOutput) ToImageUpdateAutomationSpecGitPtrOutput() ImageUpdateAutomationSpecGitPtrOutput {
	return o.ToImageUpdateAutomationSpecGitPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitOutput) ToImageUpdateAutomationSpecGitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGit {
		return &v
	}).(ImageUpdateAutomationSpecGitPtrOutput)
}

func (o ImageUpdateAutomationSpecGitOutput) Checkout() ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGitCheckout { return v.Checkout }).(ImageUpdateAutomationSpecGitCheckoutPtrOutput)
}

func (o ImageUpdateAutomationSpecGitOutput) Commit() ImageUpdateAutomationSpecGitCommitPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGitCommit { return v.Commit }).(ImageUpdateAutomationSpecGitCommitPtrOutput)
}

func (o ImageUpdateAutomationSpecGitOutput) Push() ImageUpdateAutomationSpecGitPushPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGitPush { return v.Push }).(ImageUpdateAutomationSpecGitPushPtrOutput)
}

type ImageUpdateAutomationSpecGitPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGit)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPtrOutput) ToImageUpdateAutomationSpecGitPtrOutput() ImageUpdateAutomationSpecGitPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPtrOutput) ToImageUpdateAutomationSpecGitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPtrOutput) Elem() ImageUpdateAutomationSpecGitOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGit) ImageUpdateAutomationSpecGit {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGit
		return ret
	}).(ImageUpdateAutomationSpecGitOutput)
}

func (o ImageUpdateAutomationSpecGitPtrOutput) Checkout() ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGitCheckout {
		if v == nil {
			return nil
		}
		return v.Checkout
	}).(ImageUpdateAutomationSpecGitCheckoutPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPtrOutput) Commit() ImageUpdateAutomationSpecGitCommitPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGitCommit {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(ImageUpdateAutomationSpecGitCommitPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPtrOutput) Push() ImageUpdateAutomationSpecGitPushPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGit) *ImageUpdateAutomationSpecGitPush {
		if v == nil {
			return nil
		}
		return v.Push
	}).(ImageUpdateAutomationSpecGitPushPtrOutput)
}

// Checkout gives the parameters for cloning the git repository,
// ready to make changes. If not present, the `spec.ref` field from the
// referenced `GitRepository` or its default will be used.
type ImageUpdateAutomationSpecGitCheckout struct {
	Ref *ImageUpdateAutomationSpecGitCheckoutRef `pulumi:"ref"`
}

// ImageUpdateAutomationSpecGitCheckoutInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutArgs and ImageUpdateAutomationSpecGitCheckoutOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutInput` via:
//
//	ImageUpdateAutomationSpecGitCheckoutArgs{...}
type ImageUpdateAutomationSpecGitCheckoutInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutOutput() ImageUpdateAutomationSpecGitCheckoutOutput
	ToImageUpdateAutomationSpecGitCheckoutOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutOutput
}

// Checkout gives the parameters for cloning the git repository,
// ready to make changes. If not present, the `spec.ref` field from the
// referenced `GitRepository` or its default will be used.
type ImageUpdateAutomationSpecGitCheckoutArgs struct {
	Ref ImageUpdateAutomationSpecGitCheckoutRefPtrInput `pulumi:"ref"`
}

func (ImageUpdateAutomationSpecGitCheckoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckout)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCheckoutArgs) ToImageUpdateAutomationSpecGitCheckoutOutput() ImageUpdateAutomationSpecGitCheckoutOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutArgs) ToImageUpdateAutomationSpecGitCheckoutOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutOutput)
}

func (i ImageUpdateAutomationSpecGitCheckoutArgs) ToImageUpdateAutomationSpecGitCheckoutPtrOutput() ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutArgs) ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutOutput).ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCheckoutPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutArgs, ImageUpdateAutomationSpecGitCheckoutPtr and ImageUpdateAutomationSpecGitCheckoutPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCheckoutArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCheckoutPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutPtrOutput() ImageUpdateAutomationSpecGitCheckoutPtrOutput
	ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutPtrOutput
}

type imageUpdateAutomationSpecGitCheckoutPtrType ImageUpdateAutomationSpecGitCheckoutArgs

func ImageUpdateAutomationSpecGitCheckoutPtr(v *ImageUpdateAutomationSpecGitCheckoutArgs) ImageUpdateAutomationSpecGitCheckoutPtrInput {
	return (*imageUpdateAutomationSpecGitCheckoutPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCheckoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckout)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCheckoutPtrType) ToImageUpdateAutomationSpecGitCheckoutPtrOutput() ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCheckoutPtrType) ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutPtrOutput)
}

// Checkout gives the parameters for cloning the git repository,
// ready to make changes. If not present, the `spec.ref` field from the
// referenced `GitRepository` or its default will be used.
type ImageUpdateAutomationSpecGitCheckoutOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckout)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutOutput) ToImageUpdateAutomationSpecGitCheckoutOutput() ImageUpdateAutomationSpecGitCheckoutOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutOutput) ToImageUpdateAutomationSpecGitCheckoutOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutOutput) ToImageUpdateAutomationSpecGitCheckoutPtrOutput() ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCheckoutOutput) ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCheckout) *ImageUpdateAutomationSpecGitCheckout {
		return &v
	}).(ImageUpdateAutomationSpecGitCheckoutPtrOutput)
}

func (o ImageUpdateAutomationSpecGitCheckoutOutput) Ref() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckout) *ImageUpdateAutomationSpecGitCheckoutRef { return v.Ref }).(ImageUpdateAutomationSpecGitCheckoutRefPtrOutput)
}

type ImageUpdateAutomationSpecGitCheckoutPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckout)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutPtrOutput) ToImageUpdateAutomationSpecGitCheckoutPtrOutput() ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutPtrOutput) ToImageUpdateAutomationSpecGitCheckoutPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutPtrOutput) Elem() ImageUpdateAutomationSpecGitCheckoutOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckout) ImageUpdateAutomationSpecGitCheckout {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCheckout
		return ret
	}).(ImageUpdateAutomationSpecGitCheckoutOutput)
}

func (o ImageUpdateAutomationSpecGitCheckoutPtrOutput) Ref() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckout) *ImageUpdateAutomationSpecGitCheckoutRef {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(ImageUpdateAutomationSpecGitCheckoutRefPtrOutput)
}

// Checkout gives the parameters for cloning the git repository,
// ready to make changes. If not present, the `spec.ref` field from the
// referenced `GitRepository` or its default will be used.
type ImageUpdateAutomationSpecGitCheckoutPatch struct {
	Ref *ImageUpdateAutomationSpecGitCheckoutRefPatch `pulumi:"ref"`
}

// ImageUpdateAutomationSpecGitCheckoutPatchInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutPatchArgs and ImageUpdateAutomationSpecGitCheckoutPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutPatchInput` via:
//
//	ImageUpdateAutomationSpecGitCheckoutPatchArgs{...}
type ImageUpdateAutomationSpecGitCheckoutPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutPatchOutput() ImageUpdateAutomationSpecGitCheckoutPatchOutput
	ToImageUpdateAutomationSpecGitCheckoutPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutPatchOutput
}

// Checkout gives the parameters for cloning the git repository,
// ready to make changes. If not present, the `spec.ref` field from the
// referenced `GitRepository` or its default will be used.
type ImageUpdateAutomationSpecGitCheckoutPatchArgs struct {
	Ref ImageUpdateAutomationSpecGitCheckoutRefPatchPtrInput `pulumi:"ref"`
}

func (ImageUpdateAutomationSpecGitCheckoutPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCheckoutPatchArgs) ToImageUpdateAutomationSpecGitCheckoutPatchOutput() ImageUpdateAutomationSpecGitCheckoutPatchOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutPatchArgs) ToImageUpdateAutomationSpecGitCheckoutPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutPatchOutput)
}

func (i ImageUpdateAutomationSpecGitCheckoutPatchArgs) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutPatchArgs) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutPatchOutput).ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCheckoutPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutPatchArgs, ImageUpdateAutomationSpecGitCheckoutPatchPtr and ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCheckoutPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCheckoutPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput
	ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput
}

type imageUpdateAutomationSpecGitCheckoutPatchPtrType ImageUpdateAutomationSpecGitCheckoutPatchArgs

func ImageUpdateAutomationSpecGitCheckoutPatchPtr(v *ImageUpdateAutomationSpecGitCheckoutPatchArgs) ImageUpdateAutomationSpecGitCheckoutPatchPtrInput {
	return (*imageUpdateAutomationSpecGitCheckoutPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCheckoutPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckoutPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCheckoutPatchPtrType) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCheckoutPatchPtrType) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput)
}

// Checkout gives the parameters for cloning the git repository,
// ready to make changes. If not present, the `spec.ref` field from the
// referenced `GitRepository` or its default will be used.
type ImageUpdateAutomationSpecGitCheckoutPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchOutput) ToImageUpdateAutomationSpecGitCheckoutPatchOutput() ImageUpdateAutomationSpecGitCheckoutPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchOutput) ToImageUpdateAutomationSpecGitCheckoutPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchOutput) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchOutput) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCheckoutPatch) *ImageUpdateAutomationSpecGitCheckoutPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchOutput) Ref() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutPatch) *ImageUpdateAutomationSpecGitCheckoutRefPatch {
		return v.Ref
	}).(ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput)
}

type ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckoutPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput) ToImageUpdateAutomationSpecGitCheckoutPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitCheckoutPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutPatch) ImageUpdateAutomationSpecGitCheckoutPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCheckoutPatch
		return ret
	}).(ImageUpdateAutomationSpecGitCheckoutPatchOutput)
}

func (o ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput) Ref() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutPatch) *ImageUpdateAutomationSpecGitCheckoutRefPatch {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput)
}

// Reference gives a branch, tag or commit to clone from the Git
// repository.
type ImageUpdateAutomationSpecGitCheckoutRef struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch *string `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit *string `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name *string `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag *string `pulumi:"tag"`
}

// ImageUpdateAutomationSpecGitCheckoutRefInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutRefArgs and ImageUpdateAutomationSpecGitCheckoutRefOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutRefInput` via:
//
//	ImageUpdateAutomationSpecGitCheckoutRefArgs{...}
type ImageUpdateAutomationSpecGitCheckoutRefInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutRefOutput() ImageUpdateAutomationSpecGitCheckoutRefOutput
	ToImageUpdateAutomationSpecGitCheckoutRefOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutRefOutput
}

// Reference gives a branch, tag or commit to clone from the Git
// repository.
type ImageUpdateAutomationSpecGitCheckoutRefArgs struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name pulumi.StringPtrInput `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ImageUpdateAutomationSpecGitCheckoutRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRef)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCheckoutRefArgs) ToImageUpdateAutomationSpecGitCheckoutRefOutput() ImageUpdateAutomationSpecGitCheckoutRefOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutRefOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutRefArgs) ToImageUpdateAutomationSpecGitCheckoutRefOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutRefOutput)
}

func (i ImageUpdateAutomationSpecGitCheckoutRefArgs) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutRefArgs) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutRefOutput).ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCheckoutRefPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutRefArgs, ImageUpdateAutomationSpecGitCheckoutRefPtr and ImageUpdateAutomationSpecGitCheckoutRefPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutRefPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCheckoutRefArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCheckoutRefPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutRefPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput
	ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutRefPtrOutput
}

type imageUpdateAutomationSpecGitCheckoutRefPtrType ImageUpdateAutomationSpecGitCheckoutRefArgs

func ImageUpdateAutomationSpecGitCheckoutRefPtr(v *ImageUpdateAutomationSpecGitCheckoutRefArgs) ImageUpdateAutomationSpecGitCheckoutRefPtrInput {
	return (*imageUpdateAutomationSpecGitCheckoutRefPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCheckoutRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckoutRef)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCheckoutRefPtrType) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCheckoutRefPtrType) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutRefPtrOutput)
}

// Reference gives a branch, tag or commit to clone from the Git
// repository.
type ImageUpdateAutomationSpecGitCheckoutRefOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRef)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) ToImageUpdateAutomationSpecGitCheckoutRefOutput() ImageUpdateAutomationSpecGitCheckoutRefOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) ToImageUpdateAutomationSpecGitCheckoutRefOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCheckoutRef) *ImageUpdateAutomationSpecGitCheckoutRef {
		return &v
	}).(ImageUpdateAutomationSpecGitCheckoutRefPtrOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRef) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRef) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRef) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o ImageUpdateAutomationSpecGitCheckoutRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitCheckoutRefPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckoutRef)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) ToImageUpdateAutomationSpecGitCheckoutRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) Elem() ImageUpdateAutomationSpecGitCheckoutRefOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRef) ImageUpdateAutomationSpecGitCheckoutRef {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCheckoutRef
		return ret
	}).(ImageUpdateAutomationSpecGitCheckoutRefOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRef) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRef) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRef) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o ImageUpdateAutomationSpecGitCheckoutRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Reference gives a branch, tag or commit to clone from the Git
// repository.
type ImageUpdateAutomationSpecGitCheckoutRefPatch struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch *string `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit *string `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name *string `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag *string `pulumi:"tag"`
}

// ImageUpdateAutomationSpecGitCheckoutRefPatchInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutRefPatchArgs and ImageUpdateAutomationSpecGitCheckoutRefPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutRefPatchInput` via:
//
//	ImageUpdateAutomationSpecGitCheckoutRefPatchArgs{...}
type ImageUpdateAutomationSpecGitCheckoutRefPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutRefPatchOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchOutput
	ToImageUpdateAutomationSpecGitCheckoutRefPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchOutput
}

// Reference gives a branch, tag or commit to clone from the Git
// repository.
type ImageUpdateAutomationSpecGitCheckoutRefPatchArgs struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name pulumi.StringPtrInput `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (ImageUpdateAutomationSpecGitCheckoutRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRefPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCheckoutRefPatchArgs) ToImageUpdateAutomationSpecGitCheckoutRefPatchOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutRefPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutRefPatchArgs) ToImageUpdateAutomationSpecGitCheckoutRefPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutRefPatchOutput)
}

func (i ImageUpdateAutomationSpecGitCheckoutRefPatchArgs) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCheckoutRefPatchArgs) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutRefPatchOutput).ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCheckoutRefPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCheckoutRefPatchArgs, ImageUpdateAutomationSpecGitCheckoutRefPatchPtr and ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCheckoutRefPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCheckoutRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCheckoutRefPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput
	ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput
}

type imageUpdateAutomationSpecGitCheckoutRefPatchPtrType ImageUpdateAutomationSpecGitCheckoutRefPatchArgs

func ImageUpdateAutomationSpecGitCheckoutRefPatchPtr(v *ImageUpdateAutomationSpecGitCheckoutRefPatchArgs) ImageUpdateAutomationSpecGitCheckoutRefPatchPtrInput {
	return (*imageUpdateAutomationSpecGitCheckoutRefPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCheckoutRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckoutRefPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCheckoutRefPatchPtrType) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCheckoutRefPatchPtrType) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput)
}

// Reference gives a branch, tag or commit to clone from the Git
// repository.
type ImageUpdateAutomationSpecGitCheckoutRefPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRefPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) ToImageUpdateAutomationSpecGitCheckoutRefPatchOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) ToImageUpdateAutomationSpecGitCheckoutRefPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCheckoutRefPatch) *ImageUpdateAutomationSpecGitCheckoutRefPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRefPatch) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRefPatch) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRefPatch) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCheckoutRefPatch) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCheckoutRefPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput() ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) ToImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitCheckoutRefPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRefPatch) ImageUpdateAutomationSpecGitCheckoutRefPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCheckoutRefPatch
		return ret
	}).(ImageUpdateAutomationSpecGitCheckoutRefPatchOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCheckoutRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Commit specifies how to commit to the git repository.
type ImageUpdateAutomationSpecGitCommit struct {
	Author *ImageUpdateAutomationSpecGitCommitAuthor `pulumi:"author"`
	// MessageTemplate provides a template for the commit message,
	// into which will be interpolated the details of the change made.
	MessageTemplate *string `pulumi:"messageTemplate"`
	// MessageTemplateValues provides additional values to be available to the
	// templating rendering.
	MessageTemplateValues map[string]string                             `pulumi:"messageTemplateValues"`
	SigningKey            *ImageUpdateAutomationSpecGitCommitSigningKey `pulumi:"signingKey"`
}

// ImageUpdateAutomationSpecGitCommitInput is an input type that accepts ImageUpdateAutomationSpecGitCommitArgs and ImageUpdateAutomationSpecGitCommitOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitInput` via:
//
//	ImageUpdateAutomationSpecGitCommitArgs{...}
type ImageUpdateAutomationSpecGitCommitInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitOutput() ImageUpdateAutomationSpecGitCommitOutput
	ToImageUpdateAutomationSpecGitCommitOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitOutput
}

// Commit specifies how to commit to the git repository.
type ImageUpdateAutomationSpecGitCommitArgs struct {
	Author ImageUpdateAutomationSpecGitCommitAuthorPtrInput `pulumi:"author"`
	// MessageTemplate provides a template for the commit message,
	// into which will be interpolated the details of the change made.
	MessageTemplate pulumi.StringPtrInput `pulumi:"messageTemplate"`
	// MessageTemplateValues provides additional values to be available to the
	// templating rendering.
	MessageTemplateValues pulumi.StringMapInput                                `pulumi:"messageTemplateValues"`
	SigningKey            ImageUpdateAutomationSpecGitCommitSigningKeyPtrInput `pulumi:"signingKey"`
}

func (ImageUpdateAutomationSpecGitCommitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommit)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitArgs) ToImageUpdateAutomationSpecGitCommitOutput() ImageUpdateAutomationSpecGitCommitOutput {
	return i.ToImageUpdateAutomationSpecGitCommitOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitArgs) ToImageUpdateAutomationSpecGitCommitOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitOutput)
}

func (i ImageUpdateAutomationSpecGitCommitArgs) ToImageUpdateAutomationSpecGitCommitPtrOutput() ImageUpdateAutomationSpecGitCommitPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitArgs) ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitOutput).ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitArgs, ImageUpdateAutomationSpecGitCommitPtr and ImageUpdateAutomationSpecGitCommitPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitPtrOutput() ImageUpdateAutomationSpecGitCommitPtrOutput
	ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitPtrOutput
}

type imageUpdateAutomationSpecGitCommitPtrType ImageUpdateAutomationSpecGitCommitArgs

func ImageUpdateAutomationSpecGitCommitPtr(v *ImageUpdateAutomationSpecGitCommitArgs) ImageUpdateAutomationSpecGitCommitPtrInput {
	return (*imageUpdateAutomationSpecGitCommitPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommit)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitPtrType) ToImageUpdateAutomationSpecGitCommitPtrOutput() ImageUpdateAutomationSpecGitCommitPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitPtrType) ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitPtrOutput)
}

// Commit specifies how to commit to the git repository.
type ImageUpdateAutomationSpecGitCommitOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommit)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitOutput) ToImageUpdateAutomationSpecGitCommitOutput() ImageUpdateAutomationSpecGitCommitOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitOutput) ToImageUpdateAutomationSpecGitCommitOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitOutput) ToImageUpdateAutomationSpecGitCommitPtrOutput() ImageUpdateAutomationSpecGitCommitPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitOutput) ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommit) *ImageUpdateAutomationSpecGitCommit {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitPtrOutput)
}

func (o ImageUpdateAutomationSpecGitCommitOutput) Author() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommit) *ImageUpdateAutomationSpecGitCommitAuthor { return v.Author }).(ImageUpdateAutomationSpecGitCommitAuthorPtrOutput)
}

// MessageTemplate provides a template for the commit message,
// into which will be interpolated the details of the change made.
func (o ImageUpdateAutomationSpecGitCommitOutput) MessageTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommit) *string { return v.MessageTemplate }).(pulumi.StringPtrOutput)
}

// MessageTemplateValues provides additional values to be available to the
// templating rendering.
func (o ImageUpdateAutomationSpecGitCommitOutput) MessageTemplateValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommit) map[string]string { return v.MessageTemplateValues }).(pulumi.StringMapOutput)
}

func (o ImageUpdateAutomationSpecGitCommitOutput) SigningKey() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommit) *ImageUpdateAutomationSpecGitCommitSigningKey {
		return v.SigningKey
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommit)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitPtrOutput) ToImageUpdateAutomationSpecGitCommitPtrOutput() ImageUpdateAutomationSpecGitCommitPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitPtrOutput) ToImageUpdateAutomationSpecGitCommitPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommit) ImageUpdateAutomationSpecGitCommit {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommit
		return ret
	}).(ImageUpdateAutomationSpecGitCommitOutput)
}

func (o ImageUpdateAutomationSpecGitCommitPtrOutput) Author() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommit) *ImageUpdateAutomationSpecGitCommitAuthor {
		if v == nil {
			return nil
		}
		return v.Author
	}).(ImageUpdateAutomationSpecGitCommitAuthorPtrOutput)
}

// MessageTemplate provides a template for the commit message,
// into which will be interpolated the details of the change made.
func (o ImageUpdateAutomationSpecGitCommitPtrOutput) MessageTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommit) *string {
		if v == nil {
			return nil
		}
		return v.MessageTemplate
	}).(pulumi.StringPtrOutput)
}

// MessageTemplateValues provides additional values to be available to the
// templating rendering.
func (o ImageUpdateAutomationSpecGitCommitPtrOutput) MessageTemplateValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommit) map[string]string {
		if v == nil {
			return nil
		}
		return v.MessageTemplateValues
	}).(pulumi.StringMapOutput)
}

func (o ImageUpdateAutomationSpecGitCommitPtrOutput) SigningKey() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommit) *ImageUpdateAutomationSpecGitCommitSigningKey {
		if v == nil {
			return nil
		}
		return v.SigningKey
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput)
}

// Author gives the email and optionally the name to use as the
// author of commits.
type ImageUpdateAutomationSpecGitCommitAuthor struct {
	// Email gives the email to provide when making a commit.
	Email *string `pulumi:"email"`
	// Name gives the name to provide when making a commit.
	Name *string `pulumi:"name"`
}

// ImageUpdateAutomationSpecGitCommitAuthorInput is an input type that accepts ImageUpdateAutomationSpecGitCommitAuthorArgs and ImageUpdateAutomationSpecGitCommitAuthorOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitAuthorInput` via:
//
//	ImageUpdateAutomationSpecGitCommitAuthorArgs{...}
type ImageUpdateAutomationSpecGitCommitAuthorInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitAuthorOutput() ImageUpdateAutomationSpecGitCommitAuthorOutput
	ToImageUpdateAutomationSpecGitCommitAuthorOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitAuthorOutput
}

// Author gives the email and optionally the name to use as the
// author of commits.
type ImageUpdateAutomationSpecGitCommitAuthorArgs struct {
	// Email gives the email to provide when making a commit.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Name gives the name to provide when making a commit.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageUpdateAutomationSpecGitCommitAuthorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthor)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitAuthorArgs) ToImageUpdateAutomationSpecGitCommitAuthorOutput() ImageUpdateAutomationSpecGitCommitAuthorOutput {
	return i.ToImageUpdateAutomationSpecGitCommitAuthorOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitAuthorArgs) ToImageUpdateAutomationSpecGitCommitAuthorOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitAuthorOutput)
}

func (i ImageUpdateAutomationSpecGitCommitAuthorArgs) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitAuthorArgs) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitAuthorOutput).ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitAuthorPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitAuthorArgs, ImageUpdateAutomationSpecGitCommitAuthorPtr and ImageUpdateAutomationSpecGitCommitAuthorPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitAuthorPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitAuthorArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitAuthorPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitAuthorPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput
	ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitAuthorPtrOutput
}

type imageUpdateAutomationSpecGitCommitAuthorPtrType ImageUpdateAutomationSpecGitCommitAuthorArgs

func ImageUpdateAutomationSpecGitCommitAuthorPtr(v *ImageUpdateAutomationSpecGitCommitAuthorArgs) ImageUpdateAutomationSpecGitCommitAuthorPtrInput {
	return (*imageUpdateAutomationSpecGitCommitAuthorPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitAuthorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitAuthor)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitAuthorPtrType) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitAuthorPtrType) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitAuthorPtrOutput)
}

// Author gives the email and optionally the name to use as the
// author of commits.
type ImageUpdateAutomationSpecGitCommitAuthorOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitAuthorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthor)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitAuthorOutput) ToImageUpdateAutomationSpecGitCommitAuthorOutput() ImageUpdateAutomationSpecGitCommitAuthorOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorOutput) ToImageUpdateAutomationSpecGitCommitAuthorOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorOutput) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitAuthorOutput) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitAuthor) *ImageUpdateAutomationSpecGitCommitAuthor {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitAuthorPtrOutput)
}

// Email gives the email to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitAuthor) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Name gives the name to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitAuthor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitAuthorPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitAuthorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitAuthor)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPtrOutput) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPtrOutput) ToImageUpdateAutomationSpecGitCommitAuthorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitAuthorOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitAuthor) ImageUpdateAutomationSpecGitCommitAuthor {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitAuthor
		return ret
	}).(ImageUpdateAutomationSpecGitCommitAuthorOutput)
}

// Email gives the email to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitAuthor) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Name gives the name to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitAuthor) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Author gives the email and optionally the name to use as the
// author of commits.
type ImageUpdateAutomationSpecGitCommitAuthorPatch struct {
	// Email gives the email to provide when making a commit.
	Email *string `pulumi:"email"`
	// Name gives the name to provide when making a commit.
	Name *string `pulumi:"name"`
}

// ImageUpdateAutomationSpecGitCommitAuthorPatchInput is an input type that accepts ImageUpdateAutomationSpecGitCommitAuthorPatchArgs and ImageUpdateAutomationSpecGitCommitAuthorPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitAuthorPatchInput` via:
//
//	ImageUpdateAutomationSpecGitCommitAuthorPatchArgs{...}
type ImageUpdateAutomationSpecGitCommitAuthorPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitAuthorPatchOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchOutput
	ToImageUpdateAutomationSpecGitCommitAuthorPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchOutput
}

// Author gives the email and optionally the name to use as the
// author of commits.
type ImageUpdateAutomationSpecGitCommitAuthorPatchArgs struct {
	// Email gives the email to provide when making a commit.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Name gives the name to provide when making a commit.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageUpdateAutomationSpecGitCommitAuthorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthorPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitAuthorPatchArgs) ToImageUpdateAutomationSpecGitCommitAuthorPatchOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchOutput {
	return i.ToImageUpdateAutomationSpecGitCommitAuthorPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitAuthorPatchArgs) ToImageUpdateAutomationSpecGitCommitAuthorPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitAuthorPatchOutput)
}

func (i ImageUpdateAutomationSpecGitCommitAuthorPatchArgs) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitAuthorPatchArgs) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitAuthorPatchOutput).ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitAuthorPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitAuthorPatchArgs, ImageUpdateAutomationSpecGitCommitAuthorPatchPtr and ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitAuthorPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitAuthorPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitAuthorPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput
	ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput
}

type imageUpdateAutomationSpecGitCommitAuthorPatchPtrType ImageUpdateAutomationSpecGitCommitAuthorPatchArgs

func ImageUpdateAutomationSpecGitCommitAuthorPatchPtr(v *ImageUpdateAutomationSpecGitCommitAuthorPatchArgs) ImageUpdateAutomationSpecGitCommitAuthorPatchPtrInput {
	return (*imageUpdateAutomationSpecGitCommitAuthorPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitAuthorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitAuthorPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitAuthorPatchPtrType) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitAuthorPatchPtrType) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput)
}

// Author gives the email and optionally the name to use as the
// author of commits.
type ImageUpdateAutomationSpecGitCommitAuthorPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthorPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) ToImageUpdateAutomationSpecGitCommitAuthorPatchOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) ToImageUpdateAutomationSpecGitCommitAuthorPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitAuthorPatch) *ImageUpdateAutomationSpecGitCommitAuthorPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput)
}

// Email gives the email to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitAuthorPatch) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Name gives the name to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitAuthorPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitAuthorPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitAuthorPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitAuthorPatch) ImageUpdateAutomationSpecGitCommitAuthorPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitAuthorPatch
		return ret
	}).(ImageUpdateAutomationSpecGitCommitAuthorPatchOutput)
}

// Email gives the email to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitAuthorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Name gives the name to provide when making a commit.
func (o ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitAuthorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Commit specifies how to commit to the git repository.
type ImageUpdateAutomationSpecGitCommitPatch struct {
	Author *ImageUpdateAutomationSpecGitCommitAuthorPatch `pulumi:"author"`
	// MessageTemplate provides a template for the commit message,
	// into which will be interpolated the details of the change made.
	MessageTemplate *string `pulumi:"messageTemplate"`
	// MessageTemplateValues provides additional values to be available to the
	// templating rendering.
	MessageTemplateValues map[string]string                                  `pulumi:"messageTemplateValues"`
	SigningKey            *ImageUpdateAutomationSpecGitCommitSigningKeyPatch `pulumi:"signingKey"`
}

// ImageUpdateAutomationSpecGitCommitPatchInput is an input type that accepts ImageUpdateAutomationSpecGitCommitPatchArgs and ImageUpdateAutomationSpecGitCommitPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitPatchInput` via:
//
//	ImageUpdateAutomationSpecGitCommitPatchArgs{...}
type ImageUpdateAutomationSpecGitCommitPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitPatchOutput() ImageUpdateAutomationSpecGitCommitPatchOutput
	ToImageUpdateAutomationSpecGitCommitPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitPatchOutput
}

// Commit specifies how to commit to the git repository.
type ImageUpdateAutomationSpecGitCommitPatchArgs struct {
	Author ImageUpdateAutomationSpecGitCommitAuthorPatchPtrInput `pulumi:"author"`
	// MessageTemplate provides a template for the commit message,
	// into which will be interpolated the details of the change made.
	MessageTemplate pulumi.StringPtrInput `pulumi:"messageTemplate"`
	// MessageTemplateValues provides additional values to be available to the
	// templating rendering.
	MessageTemplateValues pulumi.StringMapInput                                     `pulumi:"messageTemplateValues"`
	SigningKey            ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrInput `pulumi:"signingKey"`
}

func (ImageUpdateAutomationSpecGitCommitPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitPatchArgs) ToImageUpdateAutomationSpecGitCommitPatchOutput() ImageUpdateAutomationSpecGitCommitPatchOutput {
	return i.ToImageUpdateAutomationSpecGitCommitPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitPatchArgs) ToImageUpdateAutomationSpecGitCommitPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitPatchOutput)
}

func (i ImageUpdateAutomationSpecGitCommitPatchArgs) ToImageUpdateAutomationSpecGitCommitPatchPtrOutput() ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitPatchArgs) ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitPatchOutput).ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitPatchArgs, ImageUpdateAutomationSpecGitCommitPatchPtr and ImageUpdateAutomationSpecGitCommitPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitPatchPtrOutput() ImageUpdateAutomationSpecGitCommitPatchPtrOutput
	ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitPatchPtrOutput
}

type imageUpdateAutomationSpecGitCommitPatchPtrType ImageUpdateAutomationSpecGitCommitPatchArgs

func ImageUpdateAutomationSpecGitCommitPatchPtr(v *ImageUpdateAutomationSpecGitCommitPatchArgs) ImageUpdateAutomationSpecGitCommitPatchPtrInput {
	return (*imageUpdateAutomationSpecGitCommitPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitPatchPtrType) ToImageUpdateAutomationSpecGitCommitPatchPtrOutput() ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitPatchPtrType) ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitPatchPtrOutput)
}

// Commit specifies how to commit to the git repository.
type ImageUpdateAutomationSpecGitCommitPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitPatchOutput) ToImageUpdateAutomationSpecGitCommitPatchOutput() ImageUpdateAutomationSpecGitCommitPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitPatchOutput) ToImageUpdateAutomationSpecGitCommitPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitPatchOutput) ToImageUpdateAutomationSpecGitCommitPatchPtrOutput() ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitPatchOutput) ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitPatch) *ImageUpdateAutomationSpecGitCommitPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitCommitPatchOutput) Author() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitPatch) *ImageUpdateAutomationSpecGitCommitAuthorPatch {
		return v.Author
	}).(ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput)
}

// MessageTemplate provides a template for the commit message,
// into which will be interpolated the details of the change made.
func (o ImageUpdateAutomationSpecGitCommitPatchOutput) MessageTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitPatch) *string { return v.MessageTemplate }).(pulumi.StringPtrOutput)
}

// MessageTemplateValues provides additional values to be available to the
// templating rendering.
func (o ImageUpdateAutomationSpecGitCommitPatchOutput) MessageTemplateValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitPatch) map[string]string { return v.MessageTemplateValues }).(pulumi.StringMapOutput)
}

func (o ImageUpdateAutomationSpecGitCommitPatchOutput) SigningKey() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitPatch) *ImageUpdateAutomationSpecGitCommitSigningKeyPatch {
		return v.SigningKey
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitPatchPtrOutput() ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitPatch) ImageUpdateAutomationSpecGitCommitPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitPatch
		return ret
	}).(ImageUpdateAutomationSpecGitCommitPatchOutput)
}

func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) Author() ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitPatch) *ImageUpdateAutomationSpecGitCommitAuthorPatch {
		if v == nil {
			return nil
		}
		return v.Author
	}).(ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput)
}

// MessageTemplate provides a template for the commit message,
// into which will be interpolated the details of the change made.
func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) MessageTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitPatch) *string {
		if v == nil {
			return nil
		}
		return v.MessageTemplate
	}).(pulumi.StringPtrOutput)
}

// MessageTemplateValues provides additional values to be available to the
// templating rendering.
func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) MessageTemplateValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MessageTemplateValues
	}).(pulumi.StringMapOutput)
}

func (o ImageUpdateAutomationSpecGitCommitPatchPtrOutput) SigningKey() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitPatch) *ImageUpdateAutomationSpecGitCommitSigningKeyPatch {
		if v == nil {
			return nil
		}
		return v.SigningKey
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput)
}

// SigningKey provides the option to sign commits with a GPG key
type ImageUpdateAutomationSpecGitCommitSigningKey struct {
	SecretRef *ImageUpdateAutomationSpecGitCommitSigningKeySecretRef `pulumi:"secretRef"`
}

// ImageUpdateAutomationSpecGitCommitSigningKeyInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeyArgs and ImageUpdateAutomationSpecGitCommitSigningKeyOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeyInput` via:
//
//	ImageUpdateAutomationSpecGitCommitSigningKeyArgs{...}
type ImageUpdateAutomationSpecGitCommitSigningKeyInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeyOutput() ImageUpdateAutomationSpecGitCommitSigningKeyOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeyOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyOutput
}

// SigningKey provides the option to sign commits with a GPG key
type ImageUpdateAutomationSpecGitCommitSigningKeyArgs struct {
	SecretRef ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrInput `pulumi:"secretRef"`
}

func (ImageUpdateAutomationSpecGitCommitSigningKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKey)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyOutput() ImageUpdateAutomationSpecGitCommitSigningKeyOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeyOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeyOutput)
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeyOutput).ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitSigningKeyPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeyArgs, ImageUpdateAutomationSpecGitCommitSigningKeyPtr and ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeyPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitSigningKeyArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitSigningKeyPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput
}

type imageUpdateAutomationSpecGitCommitSigningKeyPtrType ImageUpdateAutomationSpecGitCommitSigningKeyArgs

func ImageUpdateAutomationSpecGitCommitSigningKeyPtr(v *ImageUpdateAutomationSpecGitCommitSigningKeyArgs) ImageUpdateAutomationSpecGitCommitSigningKeyPtrInput {
	return (*imageUpdateAutomationSpecGitCommitSigningKeyPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitSigningKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKey)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeyPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeyPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput)
}

// SigningKey provides the option to sign commits with a GPG key
type ImageUpdateAutomationSpecGitCommitSigningKeyOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKey)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyOutput() ImageUpdateAutomationSpecGitCommitSigningKeyOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitSigningKey) *ImageUpdateAutomationSpecGitCommitSigningKey {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput)
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyOutput) SecretRef() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitSigningKey) *ImageUpdateAutomationSpecGitCommitSigningKeySecretRef {
		return v.SecretRef
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKey)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitSigningKeyOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKey) ImageUpdateAutomationSpecGitCommitSigningKey {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitSigningKey
		return ret
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyOutput)
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput) SecretRef() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKey) *ImageUpdateAutomationSpecGitCommitSigningKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput)
}

// SigningKey provides the option to sign commits with a GPG key
type ImageUpdateAutomationSpecGitCommitSigningKeyPatch struct {
	SecretRef *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch `pulumi:"secretRef"`
}

// ImageUpdateAutomationSpecGitCommitSigningKeyPatchInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs and ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeyPatchInput` via:
//
//	ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs{...}
type ImageUpdateAutomationSpecGitCommitSigningKeyPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput
}

// SigningKey provides the option to sign commits with a GPG key
type ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs struct {
	SecretRef ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeyPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput)
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput).ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs, ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtr and ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput
}

type imageUpdateAutomationSpecGitCommitSigningKeyPatchPtrType ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs

func ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtr(v *ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs) ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrInput {
	return (*imageUpdateAutomationSpecGitCommitSigningKeyPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitSigningKeyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKeyPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeyPatchPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeyPatchPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput)
}

// SigningKey provides the option to sign commits with a GPG key
type ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeyPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitSigningKeyPatch) *ImageUpdateAutomationSpecGitCommitSigningKeyPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput) SecretRef() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitSigningKeyPatch) *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch {
		return v.SecretRef
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKeyPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKeyPatch) ImageUpdateAutomationSpecGitCommitSigningKeyPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitSigningKeyPatch
		return ret
	}).(ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput)
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput) SecretRef() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKeyPatch) *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput)
}

// SecretRef holds the name to a secret that contains a 'git.asc' key
// corresponding to the ASCII Armored file containing the GPG signing
// keypair as the value. It must be in the same namespace as the
// ImageUpdateAutomation.
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageUpdateAutomationSpecGitCommitSigningKeySecretRefInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs and ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeySecretRefInput` via:
//
//	ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs{...}
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput
}

// SecretRef holds the name to a secret that contains a 'git.asc' key
// corresponding to the ASCII Armored file containing the GPG signing
// keypair as the value. It must be in the same namespace as the
// ImageUpdateAutomation.
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRef)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput)
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput).ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs, ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtr and ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput
}

type imageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrType ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs

func ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtr(v *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrInput {
	return (*imageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKeySecretRef)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput)
}

// SecretRef holds the name to a secret that contains a 'git.asc' key
// corresponding to the ASCII Armored file containing the GPG signing
// keypair as the value. It must be in the same namespace as the
// ImageUpdateAutomation.
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRef)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitSigningKeySecretRef) *ImageUpdateAutomationSpecGitCommitSigningKeySecretRef {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitSigningKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKeySecretRef)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKeySecretRef) ImageUpdateAutomationSpecGitCommitSigningKeySecretRef {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitSigningKeySecretRef
		return ret
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef holds the name to a secret that contains a 'git.asc' key
// corresponding to the ASCII Armored file containing the GPG signing
// keypair as the value. It must be in the same namespace as the
// ImageUpdateAutomation.
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs and ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchInput` via:
//
//	ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs{...}
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput
}

// SecretRef holds the name to a secret that contains a 'git.asc' key
// corresponding to the ASCII Armored file containing the GPG signing
// keypair as the value. It must be in the same namespace as the
// ImageUpdateAutomation.
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput)
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput).ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs, ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtr and ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput
	ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput
}

type imageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrType ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs

func ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtr(v *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrInput {
	return (*imageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrType) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput)
}

// SecretRef holds the name to a secret that contains a 'git.asc' key
// corresponding to the ASCII Armored file containing the GPG signing
// keypair as the value. It must be in the same namespace as the
// ImageUpdateAutomation.
type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch) *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput) ToImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch) ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch
		return ret
	}).(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitSpec contains all the git-specific definitions. This is
// technically optional, but in practice mandatory until there are
// other kinds of source allowed.
type ImageUpdateAutomationSpecGitPatch struct {
	Checkout *ImageUpdateAutomationSpecGitCheckoutPatch `pulumi:"checkout"`
	Commit   *ImageUpdateAutomationSpecGitCommitPatch   `pulumi:"commit"`
	Push     *ImageUpdateAutomationSpecGitPushPatch     `pulumi:"push"`
}

// ImageUpdateAutomationSpecGitPatchInput is an input type that accepts ImageUpdateAutomationSpecGitPatchArgs and ImageUpdateAutomationSpecGitPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPatchInput` via:
//
//	ImageUpdateAutomationSpecGitPatchArgs{...}
type ImageUpdateAutomationSpecGitPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPatchOutput() ImageUpdateAutomationSpecGitPatchOutput
	ToImageUpdateAutomationSpecGitPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPatchOutput
}

// GitSpec contains all the git-specific definitions. This is
// technically optional, but in practice mandatory until there are
// other kinds of source allowed.
type ImageUpdateAutomationSpecGitPatchArgs struct {
	Checkout ImageUpdateAutomationSpecGitCheckoutPatchPtrInput `pulumi:"checkout"`
	Commit   ImageUpdateAutomationSpecGitCommitPatchPtrInput   `pulumi:"commit"`
	Push     ImageUpdateAutomationSpecGitPushPatchPtrInput     `pulumi:"push"`
}

func (ImageUpdateAutomationSpecGitPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitPatchArgs) ToImageUpdateAutomationSpecGitPatchOutput() ImageUpdateAutomationSpecGitPatchOutput {
	return i.ToImageUpdateAutomationSpecGitPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitPatchArgs) ToImageUpdateAutomationSpecGitPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPatchOutput)
}

func (i ImageUpdateAutomationSpecGitPatchArgs) ToImageUpdateAutomationSpecGitPatchPtrOutput() ImageUpdateAutomationSpecGitPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitPatchArgs) ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPatchOutput).ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitPatchArgs, ImageUpdateAutomationSpecGitPatchPtr and ImageUpdateAutomationSpecGitPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPatchPtrOutput() ImageUpdateAutomationSpecGitPatchPtrOutput
	ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPatchPtrOutput
}

type imageUpdateAutomationSpecGitPatchPtrType ImageUpdateAutomationSpecGitPatchArgs

func ImageUpdateAutomationSpecGitPatchPtr(v *ImageUpdateAutomationSpecGitPatchArgs) ImageUpdateAutomationSpecGitPatchPtrInput {
	return (*imageUpdateAutomationSpecGitPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitPatchPtrType) ToImageUpdateAutomationSpecGitPatchPtrOutput() ImageUpdateAutomationSpecGitPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitPatchPtrType) ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPatchPtrOutput)
}

// GitSpec contains all the git-specific definitions. This is
// technically optional, but in practice mandatory until there are
// other kinds of source allowed.
type ImageUpdateAutomationSpecGitPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPatchOutput) ToImageUpdateAutomationSpecGitPatchOutput() ImageUpdateAutomationSpecGitPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPatchOutput) ToImageUpdateAutomationSpecGitPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPatchOutput) ToImageUpdateAutomationSpecGitPatchPtrOutput() ImageUpdateAutomationSpecGitPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitPatchOutput) ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPatchOutput) Checkout() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitCheckoutPatch {
		return v.Checkout
	}).(ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPatchOutput) Commit() ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitCommitPatch { return v.Commit }).(ImageUpdateAutomationSpecGitCommitPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPatchOutput) Push() ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitPushPatch { return v.Push }).(ImageUpdateAutomationSpecGitPushPatchPtrOutput)
}

type ImageUpdateAutomationSpecGitPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPatchPtrOutput) ToImageUpdateAutomationSpecGitPatchPtrOutput() ImageUpdateAutomationSpecGitPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPatchPtrOutput) ToImageUpdateAutomationSpecGitPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPatch) ImageUpdateAutomationSpecGitPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitPatch
		return ret
	}).(ImageUpdateAutomationSpecGitPatchOutput)
}

func (o ImageUpdateAutomationSpecGitPatchPtrOutput) Checkout() ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitCheckoutPatch {
		if v == nil {
			return nil
		}
		return v.Checkout
	}).(ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPatchPtrOutput) Commit() ImageUpdateAutomationSpecGitCommitPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitCommitPatch {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(ImageUpdateAutomationSpecGitCommitPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecGitPatchPtrOutput) Push() ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPatch) *ImageUpdateAutomationSpecGitPushPatch {
		if v == nil {
			return nil
		}
		return v.Push
	}).(ImageUpdateAutomationSpecGitPushPatchPtrOutput)
}

// Push specifies how and where to push commits made by the
// automation. If missing, commits are pushed (back) to
// `.spec.checkout.branch` or its default.
type ImageUpdateAutomationSpecGitPush struct {
	// Branch specifies that commits should be pushed to the branch
	// named. The branch is created using `.spec.checkout.branch` as the
	// starting point, if it doesn't already exist.
	Branch *string `pulumi:"branch"`
	// Options specifies the push options that are sent to the Git
	// server when performing a push operation. For details, see:
	// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
	Options map[string]string `pulumi:"options"`
	// Refspec specifies the Git Refspec to use for a push operation.
	// If both Branch and Refspec are provided, then the commit is pushed
	// to the branch and also using the specified refspec.
	// For more details about Git Refspecs, see:
	// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
	Refspec *string `pulumi:"refspec"`
}

// ImageUpdateAutomationSpecGitPushInput is an input type that accepts ImageUpdateAutomationSpecGitPushArgs and ImageUpdateAutomationSpecGitPushOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPushInput` via:
//
//	ImageUpdateAutomationSpecGitPushArgs{...}
type ImageUpdateAutomationSpecGitPushInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPushOutput() ImageUpdateAutomationSpecGitPushOutput
	ToImageUpdateAutomationSpecGitPushOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPushOutput
}

// Push specifies how and where to push commits made by the
// automation. If missing, commits are pushed (back) to
// `.spec.checkout.branch` or its default.
type ImageUpdateAutomationSpecGitPushArgs struct {
	// Branch specifies that commits should be pushed to the branch
	// named. The branch is created using `.spec.checkout.branch` as the
	// starting point, if it doesn't already exist.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Options specifies the push options that are sent to the Git
	// server when performing a push operation. For details, see:
	// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
	Options pulumi.StringMapInput `pulumi:"options"`
	// Refspec specifies the Git Refspec to use for a push operation.
	// If both Branch and Refspec are provided, then the commit is pushed
	// to the branch and also using the specified refspec.
	// For more details about Git Refspecs, see:
	// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
	Refspec pulumi.StringPtrInput `pulumi:"refspec"`
}

func (ImageUpdateAutomationSpecGitPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitPush)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitPushArgs) ToImageUpdateAutomationSpecGitPushOutput() ImageUpdateAutomationSpecGitPushOutput {
	return i.ToImageUpdateAutomationSpecGitPushOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitPushArgs) ToImageUpdateAutomationSpecGitPushOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPushOutput)
}

func (i ImageUpdateAutomationSpecGitPushArgs) ToImageUpdateAutomationSpecGitPushPtrOutput() ImageUpdateAutomationSpecGitPushPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitPushArgs) ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPushOutput).ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitPushPtrInput is an input type that accepts ImageUpdateAutomationSpecGitPushArgs, ImageUpdateAutomationSpecGitPushPtr and ImageUpdateAutomationSpecGitPushPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPushPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitPushArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitPushPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPushPtrOutput() ImageUpdateAutomationSpecGitPushPtrOutput
	ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPushPtrOutput
}

type imageUpdateAutomationSpecGitPushPtrType ImageUpdateAutomationSpecGitPushArgs

func ImageUpdateAutomationSpecGitPushPtr(v *ImageUpdateAutomationSpecGitPushArgs) ImageUpdateAutomationSpecGitPushPtrInput {
	return (*imageUpdateAutomationSpecGitPushPtrType)(v)
}

func (*imageUpdateAutomationSpecGitPushPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitPush)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitPushPtrType) ToImageUpdateAutomationSpecGitPushPtrOutput() ImageUpdateAutomationSpecGitPushPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitPushPtrType) ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPushPtrOutput)
}

// Push specifies how and where to push commits made by the
// automation. If missing, commits are pushed (back) to
// `.spec.checkout.branch` or its default.
type ImageUpdateAutomationSpecGitPushOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitPush)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPushOutput) ToImageUpdateAutomationSpecGitPushOutput() ImageUpdateAutomationSpecGitPushOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushOutput) ToImageUpdateAutomationSpecGitPushOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushOutput) ToImageUpdateAutomationSpecGitPushPtrOutput() ImageUpdateAutomationSpecGitPushPtrOutput {
	return o.ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitPushOutput) ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitPush) *ImageUpdateAutomationSpecGitPush {
		return &v
	}).(ImageUpdateAutomationSpecGitPushPtrOutput)
}

// Branch specifies that commits should be pushed to the branch
// named. The branch is created using `.spec.checkout.branch` as the
// starting point, if it doesn't already exist.
func (o ImageUpdateAutomationSpecGitPushOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPush) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Options specifies the push options that are sent to the Git
// server when performing a push operation. For details, see:
// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
func (o ImageUpdateAutomationSpecGitPushOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPush) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// Refspec specifies the Git Refspec to use for a push operation.
// If both Branch and Refspec are provided, then the commit is pushed
// to the branch and also using the specified refspec.
// For more details about Git Refspecs, see:
// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
func (o ImageUpdateAutomationSpecGitPushOutput) Refspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPush) *string { return v.Refspec }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitPushPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPushPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitPush)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPushPtrOutput) ToImageUpdateAutomationSpecGitPushPtrOutput() ImageUpdateAutomationSpecGitPushPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushPtrOutput) ToImageUpdateAutomationSpecGitPushPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushPtrOutput) Elem() ImageUpdateAutomationSpecGitPushOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPush) ImageUpdateAutomationSpecGitPush {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitPush
		return ret
	}).(ImageUpdateAutomationSpecGitPushOutput)
}

// Branch specifies that commits should be pushed to the branch
// named. The branch is created using `.spec.checkout.branch` as the
// starting point, if it doesn't already exist.
func (o ImageUpdateAutomationSpecGitPushPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPush) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Options specifies the push options that are sent to the Git
// server when performing a push operation. For details, see:
// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
func (o ImageUpdateAutomationSpecGitPushPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPush) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// Refspec specifies the Git Refspec to use for a push operation.
// If both Branch and Refspec are provided, then the commit is pushed
// to the branch and also using the specified refspec.
// For more details about Git Refspecs, see:
// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
func (o ImageUpdateAutomationSpecGitPushPtrOutput) Refspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPush) *string {
		if v == nil {
			return nil
		}
		return v.Refspec
	}).(pulumi.StringPtrOutput)
}

// Push specifies how and where to push commits made by the
// automation. If missing, commits are pushed (back) to
// `.spec.checkout.branch` or its default.
type ImageUpdateAutomationSpecGitPushPatch struct {
	// Branch specifies that commits should be pushed to the branch
	// named. The branch is created using `.spec.checkout.branch` as the
	// starting point, if it doesn't already exist.
	Branch *string `pulumi:"branch"`
	// Options specifies the push options that are sent to the Git
	// server when performing a push operation. For details, see:
	// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
	Options map[string]string `pulumi:"options"`
	// Refspec specifies the Git Refspec to use for a push operation.
	// If both Branch and Refspec are provided, then the commit is pushed
	// to the branch and also using the specified refspec.
	// For more details about Git Refspecs, see:
	// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
	Refspec *string `pulumi:"refspec"`
}

// ImageUpdateAutomationSpecGitPushPatchInput is an input type that accepts ImageUpdateAutomationSpecGitPushPatchArgs and ImageUpdateAutomationSpecGitPushPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPushPatchInput` via:
//
//	ImageUpdateAutomationSpecGitPushPatchArgs{...}
type ImageUpdateAutomationSpecGitPushPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPushPatchOutput() ImageUpdateAutomationSpecGitPushPatchOutput
	ToImageUpdateAutomationSpecGitPushPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPushPatchOutput
}

// Push specifies how and where to push commits made by the
// automation. If missing, commits are pushed (back) to
// `.spec.checkout.branch` or its default.
type ImageUpdateAutomationSpecGitPushPatchArgs struct {
	// Branch specifies that commits should be pushed to the branch
	// named. The branch is created using `.spec.checkout.branch` as the
	// starting point, if it doesn't already exist.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Options specifies the push options that are sent to the Git
	// server when performing a push operation. For details, see:
	// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
	Options pulumi.StringMapInput `pulumi:"options"`
	// Refspec specifies the Git Refspec to use for a push operation.
	// If both Branch and Refspec are provided, then the commit is pushed
	// to the branch and also using the specified refspec.
	// For more details about Git Refspecs, see:
	// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
	Refspec pulumi.StringPtrInput `pulumi:"refspec"`
}

func (ImageUpdateAutomationSpecGitPushPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitPushPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecGitPushPatchArgs) ToImageUpdateAutomationSpecGitPushPatchOutput() ImageUpdateAutomationSpecGitPushPatchOutput {
	return i.ToImageUpdateAutomationSpecGitPushPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitPushPatchArgs) ToImageUpdateAutomationSpecGitPushPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPushPatchOutput)
}

func (i ImageUpdateAutomationSpecGitPushPatchArgs) ToImageUpdateAutomationSpecGitPushPatchPtrOutput() ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecGitPushPatchArgs) ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPushPatchOutput).ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecGitPushPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecGitPushPatchArgs, ImageUpdateAutomationSpecGitPushPatchPtr and ImageUpdateAutomationSpecGitPushPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecGitPushPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecGitPushPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecGitPushPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecGitPushPatchPtrOutput() ImageUpdateAutomationSpecGitPushPatchPtrOutput
	ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecGitPushPatchPtrOutput
}

type imageUpdateAutomationSpecGitPushPatchPtrType ImageUpdateAutomationSpecGitPushPatchArgs

func ImageUpdateAutomationSpecGitPushPatchPtr(v *ImageUpdateAutomationSpecGitPushPatchArgs) ImageUpdateAutomationSpecGitPushPatchPtrInput {
	return (*imageUpdateAutomationSpecGitPushPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecGitPushPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitPushPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecGitPushPatchPtrType) ToImageUpdateAutomationSpecGitPushPatchPtrOutput() ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecGitPushPatchPtrType) ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecGitPushPatchPtrOutput)
}

// Push specifies how and where to push commits made by the
// automation. If missing, commits are pushed (back) to
// `.spec.checkout.branch` or its default.
type ImageUpdateAutomationSpecGitPushPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPushPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecGitPushPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPushPatchOutput) ToImageUpdateAutomationSpecGitPushPatchOutput() ImageUpdateAutomationSpecGitPushPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushPatchOutput) ToImageUpdateAutomationSpecGitPushPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushPatchOutput) ToImageUpdateAutomationSpecGitPushPatchPtrOutput() ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecGitPushPatchOutput) ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecGitPushPatch) *ImageUpdateAutomationSpecGitPushPatch {
		return &v
	}).(ImageUpdateAutomationSpecGitPushPatchPtrOutput)
}

// Branch specifies that commits should be pushed to the branch
// named. The branch is created using `.spec.checkout.branch` as the
// starting point, if it doesn't already exist.
func (o ImageUpdateAutomationSpecGitPushPatchOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPushPatch) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Options specifies the push options that are sent to the Git
// server when performing a push operation. For details, see:
// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
func (o ImageUpdateAutomationSpecGitPushPatchOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPushPatch) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// Refspec specifies the Git Refspec to use for a push operation.
// If both Branch and Refspec are provided, then the commit is pushed
// to the branch and also using the specified refspec.
// For more details about Git Refspecs, see:
// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
func (o ImageUpdateAutomationSpecGitPushPatchOutput) Refspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecGitPushPatch) *string { return v.Refspec }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecGitPushPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecGitPushPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecGitPushPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecGitPushPatchPtrOutput) ToImageUpdateAutomationSpecGitPushPatchPtrOutput() ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushPatchPtrOutput) ToImageUpdateAutomationSpecGitPushPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecGitPushPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecGitPushPatchPtrOutput) Elem() ImageUpdateAutomationSpecGitPushPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPushPatch) ImageUpdateAutomationSpecGitPushPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecGitPushPatch
		return ret
	}).(ImageUpdateAutomationSpecGitPushPatchOutput)
}

// Branch specifies that commits should be pushed to the branch
// named. The branch is created using `.spec.checkout.branch` as the
// starting point, if it doesn't already exist.
func (o ImageUpdateAutomationSpecGitPushPatchPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPushPatch) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Options specifies the push options that are sent to the Git
// server when performing a push operation. For details, see:
// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
func (o ImageUpdateAutomationSpecGitPushPatchPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPushPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// Refspec specifies the Git Refspec to use for a push operation.
// If both Branch and Refspec are provided, then the commit is pushed
// to the branch and also using the specified refspec.
// For more details about Git Refspecs, see:
// https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
func (o ImageUpdateAutomationSpecGitPushPatchPtrOutput) Refspec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecGitPushPatch) *string {
		if v == nil {
			return nil
		}
		return v.Refspec
	}).(pulumi.StringPtrOutput)
}

// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
type ImageUpdateAutomationSpecPatch struct {
	Git *ImageUpdateAutomationSpecGitPatch `pulumi:"git"`
	// Interval gives an lower bound for how often the automation
	// run should be attempted.
	Interval       *string                                       `pulumi:"interval"`
	PolicySelector *ImageUpdateAutomationSpecPolicySelectorPatch `pulumi:"policySelector"`
	SourceRef      *ImageUpdateAutomationSpecSourceRefPatch      `pulumi:"sourceRef"`
	// Suspend tells the controller to not run this automation, until
	// it is unset (or set to false). Defaults to false.
	Suspend *bool                                 `pulumi:"suspend"`
	Update  *ImageUpdateAutomationSpecUpdatePatch `pulumi:"update"`
}

// ImageUpdateAutomationSpecPatchInput is an input type that accepts ImageUpdateAutomationSpecPatchArgs and ImageUpdateAutomationSpecPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPatchInput` via:
//
//	ImageUpdateAutomationSpecPatchArgs{...}
type ImageUpdateAutomationSpecPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPatchOutput() ImageUpdateAutomationSpecPatchOutput
	ToImageUpdateAutomationSpecPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecPatchOutput
}

// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
type ImageUpdateAutomationSpecPatchArgs struct {
	Git ImageUpdateAutomationSpecGitPatchPtrInput `pulumi:"git"`
	// Interval gives an lower bound for how often the automation
	// run should be attempted.
	Interval       pulumi.StringPtrInput                                `pulumi:"interval"`
	PolicySelector ImageUpdateAutomationSpecPolicySelectorPatchPtrInput `pulumi:"policySelector"`
	SourceRef      ImageUpdateAutomationSpecSourceRefPatchPtrInput      `pulumi:"sourceRef"`
	// Suspend tells the controller to not run this automation, until
	// it is unset (or set to false). Defaults to false.
	Suspend pulumi.BoolPtrInput                          `pulumi:"suspend"`
	Update  ImageUpdateAutomationSpecUpdatePatchPtrInput `pulumi:"update"`
}

func (ImageUpdateAutomationSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPatchArgs) ToImageUpdateAutomationSpecPatchOutput() ImageUpdateAutomationSpecPatchOutput {
	return i.ToImageUpdateAutomationSpecPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPatchArgs) ToImageUpdateAutomationSpecPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPatchOutput)
}

func (i ImageUpdateAutomationSpecPatchArgs) ToImageUpdateAutomationSpecPatchPtrOutput() ImageUpdateAutomationSpecPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPatchArgs) ToImageUpdateAutomationSpecPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPatchOutput).ToImageUpdateAutomationSpecPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecPatchArgs, ImageUpdateAutomationSpecPatchPtr and ImageUpdateAutomationSpecPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPatchPtrOutput() ImageUpdateAutomationSpecPatchPtrOutput
	ToImageUpdateAutomationSpecPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecPatchPtrOutput
}

type imageUpdateAutomationSpecPatchPtrType ImageUpdateAutomationSpecPatchArgs

func ImageUpdateAutomationSpecPatchPtr(v *ImageUpdateAutomationSpecPatchArgs) ImageUpdateAutomationSpecPatchPtrInput {
	return (*imageUpdateAutomationSpecPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecPatchPtrType) ToImageUpdateAutomationSpecPatchPtrOutput() ImageUpdateAutomationSpecPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecPatchPtrType) ToImageUpdateAutomationSpecPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPatchPtrOutput)
}

// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
type ImageUpdateAutomationSpecPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPatchOutput) ToImageUpdateAutomationSpecPatchOutput() ImageUpdateAutomationSpecPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecPatchOutput) ToImageUpdateAutomationSpecPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecPatchOutput) ToImageUpdateAutomationSpecPatchPtrOutput() ImageUpdateAutomationSpecPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecPatchOutput) ToImageUpdateAutomationSpecPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecPatch {
		return &v
	}).(ImageUpdateAutomationSpecPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchOutput) Git() ImageUpdateAutomationSpecGitPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecGitPatch { return v.Git }).(ImageUpdateAutomationSpecGitPatchPtrOutput)
}

// Interval gives an lower bound for how often the automation
// run should be attempted.
func (o ImageUpdateAutomationSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchOutput) PolicySelector() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecPolicySelectorPatch {
		return v.PolicySelector
	}).(ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchOutput) SourceRef() ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecSourceRefPatch { return v.SourceRef }).(ImageUpdateAutomationSpecSourceRefPatchPtrOutput)
}

// Suspend tells the controller to not run this automation, until
// it is unset (or set to false). Defaults to false.
func (o ImageUpdateAutomationSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchOutput) Update() ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecUpdatePatch { return v.Update }).(ImageUpdateAutomationSpecUpdatePatchPtrOutput)
}

type ImageUpdateAutomationSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) ToImageUpdateAutomationSpecPatchPtrOutput() ImageUpdateAutomationSpecPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) ToImageUpdateAutomationSpecPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) Elem() ImageUpdateAutomationSpecPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) ImageUpdateAutomationSpecPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecPatch
		return ret
	}).(ImageUpdateAutomationSpecPatchOutput)
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) Git() ImageUpdateAutomationSpecGitPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecGitPatch {
		if v == nil {
			return nil
		}
		return v.Git
	}).(ImageUpdateAutomationSpecGitPatchPtrOutput)
}

// Interval gives an lower bound for how often the automation
// run should be attempted.
func (o ImageUpdateAutomationSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) PolicySelector() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecPolicySelectorPatch {
		if v == nil {
			return nil
		}
		return v.PolicySelector
	}).(ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) SourceRef() ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(ImageUpdateAutomationSpecSourceRefPatchPtrOutput)
}

// Suspend tells the controller to not run this automation, until
// it is unset (or set to false). Defaults to false.
func (o ImageUpdateAutomationSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

func (o ImageUpdateAutomationSpecPatchPtrOutput) Update() ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPatch) *ImageUpdateAutomationSpecUpdatePatch {
		if v == nil {
			return nil
		}
		return v.Update
	}).(ImageUpdateAutomationSpecUpdatePatchPtrOutput)
}

// PolicySelector allows to filter applied policies based on labels.
// By default includes all policies in namespace.
type ImageUpdateAutomationSpecPolicySelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ImageUpdateAutomationSpecPolicySelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ImageUpdateAutomationSpecPolicySelectorInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorArgs and ImageUpdateAutomationSpecPolicySelectorOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorInput` via:
//
//	ImageUpdateAutomationSpecPolicySelectorArgs{...}
type ImageUpdateAutomationSpecPolicySelectorInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorOutput() ImageUpdateAutomationSpecPolicySelectorOutput
	ToImageUpdateAutomationSpecPolicySelectorOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorOutput
}

// PolicySelector allows to filter applied policies based on labels.
// By default includes all policies in namespace.
type ImageUpdateAutomationSpecPolicySelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ImageUpdateAutomationSpecPolicySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelector)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPolicySelectorArgs) ToImageUpdateAutomationSpecPolicySelectorOutput() ImageUpdateAutomationSpecPolicySelectorOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorArgs) ToImageUpdateAutomationSpecPolicySelectorOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorOutput)
}

func (i ImageUpdateAutomationSpecPolicySelectorArgs) ToImageUpdateAutomationSpecPolicySelectorPtrOutput() ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorArgs) ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorOutput).ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecPolicySelectorPtrInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorArgs, ImageUpdateAutomationSpecPolicySelectorPtr and ImageUpdateAutomationSpecPolicySelectorPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorPtrInput` via:
//
//	        ImageUpdateAutomationSpecPolicySelectorArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecPolicySelectorPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorPtrOutput() ImageUpdateAutomationSpecPolicySelectorPtrOutput
	ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorPtrOutput
}

type imageUpdateAutomationSpecPolicySelectorPtrType ImageUpdateAutomationSpecPolicySelectorArgs

func ImageUpdateAutomationSpecPolicySelectorPtr(v *ImageUpdateAutomationSpecPolicySelectorArgs) ImageUpdateAutomationSpecPolicySelectorPtrInput {
	return (*imageUpdateAutomationSpecPolicySelectorPtrType)(v)
}

func (*imageUpdateAutomationSpecPolicySelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecPolicySelector)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecPolicySelectorPtrType) ToImageUpdateAutomationSpecPolicySelectorPtrOutput() ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecPolicySelectorPtrType) ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorPtrOutput)
}

// PolicySelector allows to filter applied policies based on labels.
// By default includes all policies in namespace.
type ImageUpdateAutomationSpecPolicySelectorOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelector)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorOutput) ToImageUpdateAutomationSpecPolicySelectorOutput() ImageUpdateAutomationSpecPolicySelectorOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorOutput) ToImageUpdateAutomationSpecPolicySelectorOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorOutput) ToImageUpdateAutomationSpecPolicySelectorPtrOutput() ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return o.ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecPolicySelectorOutput) ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecPolicySelector) *ImageUpdateAutomationSpecPolicySelector {
		return &v
	}).(ImageUpdateAutomationSpecPolicySelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorOutput) MatchExpressions() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelector) []ImageUpdateAutomationSpecPolicySelectorMatchExpressions {
		return v.MatchExpressions
	}).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ImageUpdateAutomationSpecPolicySelectorPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecPolicySelector)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorPtrOutput) ToImageUpdateAutomationSpecPolicySelectorPtrOutput() ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorPtrOutput) ToImageUpdateAutomationSpecPolicySelectorPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorPtrOutput) Elem() ImageUpdateAutomationSpecPolicySelectorOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPolicySelector) ImageUpdateAutomationSpecPolicySelector {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecPolicySelector
		return ret
	}).(ImageUpdateAutomationSpecPolicySelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorPtrOutput) MatchExpressions() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPolicySelector) []ImageUpdateAutomationSpecPolicySelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPolicySelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ImageUpdateAutomationSpecPolicySelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ImageUpdateAutomationSpecPolicySelectorMatchExpressionsInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs and ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorMatchExpressionsInput` via:
//
//	ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs{...}
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput
	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressions)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput)
}

// ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray and ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayInput` via:
//
//	ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray{ ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs{...} }
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput
	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput
}

type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray []ImageUpdateAutomationSpecPolicySelectorMatchExpressionsInput

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationSpecPolicySelectorMatchExpressions)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressions)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationSpecPolicySelectorMatchExpressions)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageUpdateAutomationSpecPolicySelectorMatchExpressions {
		return vs[0].([]ImageUpdateAutomationSpecPolicySelectorMatchExpressions)[vs[1].(int)]
	}).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs and ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchInput` via:
//
//	ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs{...}
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput
	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput)
}

// ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray and ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayInput` via:
//
//	ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray{ ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs{...} }
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput
	ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput
}

type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray []ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchInput

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput) ToImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch {
		return vs[0].([]ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput)
}

// PolicySelector allows to filter applied policies based on labels.
// By default includes all policies in namespace.
type ImageUpdateAutomationSpecPolicySelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ImageUpdateAutomationSpecPolicySelectorPatchInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorPatchArgs and ImageUpdateAutomationSpecPolicySelectorPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorPatchInput` via:
//
//	ImageUpdateAutomationSpecPolicySelectorPatchArgs{...}
type ImageUpdateAutomationSpecPolicySelectorPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorPatchOutput() ImageUpdateAutomationSpecPolicySelectorPatchOutput
	ToImageUpdateAutomationSpecPolicySelectorPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorPatchOutput
}

// PolicySelector allows to filter applied policies based on labels.
// By default includes all policies in namespace.
type ImageUpdateAutomationSpecPolicySelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ImageUpdateAutomationSpecPolicySelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecPolicySelectorPatchArgs) ToImageUpdateAutomationSpecPolicySelectorPatchOutput() ImageUpdateAutomationSpecPolicySelectorPatchOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorPatchArgs) ToImageUpdateAutomationSpecPolicySelectorPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorPatchOutput)
}

func (i ImageUpdateAutomationSpecPolicySelectorPatchArgs) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutput() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecPolicySelectorPatchArgs) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorPatchOutput).ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecPolicySelectorPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecPolicySelectorPatchArgs, ImageUpdateAutomationSpecPolicySelectorPatchPtr and ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecPolicySelectorPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecPolicySelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecPolicySelectorPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutput() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput
	ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput
}

type imageUpdateAutomationSpecPolicySelectorPatchPtrType ImageUpdateAutomationSpecPolicySelectorPatchArgs

func ImageUpdateAutomationSpecPolicySelectorPatchPtr(v *ImageUpdateAutomationSpecPolicySelectorPatchArgs) ImageUpdateAutomationSpecPolicySelectorPatchPtrInput {
	return (*imageUpdateAutomationSpecPolicySelectorPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecPolicySelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecPolicySelectorPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecPolicySelectorPatchPtrType) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutput() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecPolicySelectorPatchPtrType) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput)
}

// PolicySelector allows to filter applied policies based on labels.
// By default includes all policies in namespace.
type ImageUpdateAutomationSpecPolicySelectorPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchOutput) ToImageUpdateAutomationSpecPolicySelectorPatchOutput() ImageUpdateAutomationSpecPolicySelectorPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchOutput) ToImageUpdateAutomationSpecPolicySelectorPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchOutput) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutput() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchOutput) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecPolicySelectorPatch) *ImageUpdateAutomationSpecPolicySelectorPatch {
		return &v
	}).(ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorPatchOutput) MatchExpressions() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorPatch) []ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecPolicySelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecPolicySelectorPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutput() ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput) ToImageUpdateAutomationSpecPolicySelectorPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput) Elem() ImageUpdateAutomationSpecPolicySelectorPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPolicySelectorPatch) ImageUpdateAutomationSpecPolicySelectorPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecPolicySelectorPatch
		return ret
	}).(ImageUpdateAutomationSpecPolicySelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput) MatchExpressions() ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPolicySelectorPatch) []ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecPolicySelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// SourceRef refers to the resource giving access details
// to a git repository.
type ImageUpdateAutomationSpecSourceRef struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
	Namespace *string `pulumi:"namespace"`
}

// ImageUpdateAutomationSpecSourceRefInput is an input type that accepts ImageUpdateAutomationSpecSourceRefArgs and ImageUpdateAutomationSpecSourceRefOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecSourceRefInput` via:
//
//	ImageUpdateAutomationSpecSourceRefArgs{...}
type ImageUpdateAutomationSpecSourceRefInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecSourceRefOutput() ImageUpdateAutomationSpecSourceRefOutput
	ToImageUpdateAutomationSpecSourceRefOutputWithContext(context.Context) ImageUpdateAutomationSpecSourceRefOutput
}

// SourceRef refers to the resource giving access details
// to a git repository.
type ImageUpdateAutomationSpecSourceRefArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ImageUpdateAutomationSpecSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecSourceRef)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecSourceRefArgs) ToImageUpdateAutomationSpecSourceRefOutput() ImageUpdateAutomationSpecSourceRefOutput {
	return i.ToImageUpdateAutomationSpecSourceRefOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecSourceRefArgs) ToImageUpdateAutomationSpecSourceRefOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecSourceRefOutput)
}

func (i ImageUpdateAutomationSpecSourceRefArgs) ToImageUpdateAutomationSpecSourceRefPtrOutput() ImageUpdateAutomationSpecSourceRefPtrOutput {
	return i.ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecSourceRefArgs) ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecSourceRefOutput).ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecSourceRefPtrInput is an input type that accepts ImageUpdateAutomationSpecSourceRefArgs, ImageUpdateAutomationSpecSourceRefPtr and ImageUpdateAutomationSpecSourceRefPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecSourceRefPtrInput` via:
//
//	        ImageUpdateAutomationSpecSourceRefArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecSourceRefPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecSourceRefPtrOutput() ImageUpdateAutomationSpecSourceRefPtrOutput
	ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecSourceRefPtrOutput
}

type imageUpdateAutomationSpecSourceRefPtrType ImageUpdateAutomationSpecSourceRefArgs

func ImageUpdateAutomationSpecSourceRefPtr(v *ImageUpdateAutomationSpecSourceRefArgs) ImageUpdateAutomationSpecSourceRefPtrInput {
	return (*imageUpdateAutomationSpecSourceRefPtrType)(v)
}

func (*imageUpdateAutomationSpecSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecSourceRef)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecSourceRefPtrType) ToImageUpdateAutomationSpecSourceRefPtrOutput() ImageUpdateAutomationSpecSourceRefPtrOutput {
	return i.ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecSourceRefPtrType) ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecSourceRefPtrOutput)
}

// SourceRef refers to the resource giving access details
// to a git repository.
type ImageUpdateAutomationSpecSourceRefOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecSourceRef)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecSourceRefOutput) ToImageUpdateAutomationSpecSourceRefOutput() ImageUpdateAutomationSpecSourceRefOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefOutput) ToImageUpdateAutomationSpecSourceRefOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefOutput) ToImageUpdateAutomationSpecSourceRefPtrOutput() ImageUpdateAutomationSpecSourceRefPtrOutput {
	return o.ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecSourceRefOutput) ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecSourceRef) *ImageUpdateAutomationSpecSourceRef {
		return &v
	}).(ImageUpdateAutomationSpecSourceRefPtrOutput)
}

// API version of the referent.
func (o ImageUpdateAutomationSpecSourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o ImageUpdateAutomationSpecSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
func (o ImageUpdateAutomationSpecSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecSourceRefPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecSourceRef)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecSourceRefPtrOutput) ToImageUpdateAutomationSpecSourceRefPtrOutput() ImageUpdateAutomationSpecSourceRefPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefPtrOutput) ToImageUpdateAutomationSpecSourceRefPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefPtrOutput) Elem() ImageUpdateAutomationSpecSourceRefOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRef) ImageUpdateAutomationSpecSourceRef {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecSourceRef
		return ret
	}).(ImageUpdateAutomationSpecSourceRefOutput)
}

// API version of the referent.
func (o ImageUpdateAutomationSpecSourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o ImageUpdateAutomationSpecSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
func (o ImageUpdateAutomationSpecSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SourceRef refers to the resource giving access details
// to a git repository.
type ImageUpdateAutomationSpecSourceRefPatch struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
	Namespace *string `pulumi:"namespace"`
}

// ImageUpdateAutomationSpecSourceRefPatchInput is an input type that accepts ImageUpdateAutomationSpecSourceRefPatchArgs and ImageUpdateAutomationSpecSourceRefPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecSourceRefPatchInput` via:
//
//	ImageUpdateAutomationSpecSourceRefPatchArgs{...}
type ImageUpdateAutomationSpecSourceRefPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecSourceRefPatchOutput() ImageUpdateAutomationSpecSourceRefPatchOutput
	ToImageUpdateAutomationSpecSourceRefPatchOutputWithContext(context.Context) ImageUpdateAutomationSpecSourceRefPatchOutput
}

// SourceRef refers to the resource giving access details
// to a git repository.
type ImageUpdateAutomationSpecSourceRefPatchArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ImageUpdateAutomationSpecSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecSourceRefPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecSourceRefPatchArgs) ToImageUpdateAutomationSpecSourceRefPatchOutput() ImageUpdateAutomationSpecSourceRefPatchOutput {
	return i.ToImageUpdateAutomationSpecSourceRefPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecSourceRefPatchArgs) ToImageUpdateAutomationSpecSourceRefPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecSourceRefPatchOutput)
}

func (i ImageUpdateAutomationSpecSourceRefPatchArgs) ToImageUpdateAutomationSpecSourceRefPatchPtrOutput() ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecSourceRefPatchArgs) ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecSourceRefPatchOutput).ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecSourceRefPatchPtrInput is an input type that accepts ImageUpdateAutomationSpecSourceRefPatchArgs, ImageUpdateAutomationSpecSourceRefPatchPtr and ImageUpdateAutomationSpecSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecSourceRefPatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecSourceRefPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecSourceRefPatchPtrOutput() ImageUpdateAutomationSpecSourceRefPatchPtrOutput
	ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecSourceRefPatchPtrOutput
}

type imageUpdateAutomationSpecSourceRefPatchPtrType ImageUpdateAutomationSpecSourceRefPatchArgs

func ImageUpdateAutomationSpecSourceRefPatchPtr(v *ImageUpdateAutomationSpecSourceRefPatchArgs) ImageUpdateAutomationSpecSourceRefPatchPtrInput {
	return (*imageUpdateAutomationSpecSourceRefPatchPtrType)(v)
}

func (*imageUpdateAutomationSpecSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecSourceRefPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecSourceRefPatchPtrType) ToImageUpdateAutomationSpecSourceRefPatchPtrOutput() ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return i.ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecSourceRefPatchPtrType) ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecSourceRefPatchPtrOutput)
}

// SourceRef refers to the resource giving access details
// to a git repository.
type ImageUpdateAutomationSpecSourceRefPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecSourceRefPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecSourceRefPatchOutput) ToImageUpdateAutomationSpecSourceRefPatchOutput() ImageUpdateAutomationSpecSourceRefPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefPatchOutput) ToImageUpdateAutomationSpecSourceRefPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefPatchOutput) ToImageUpdateAutomationSpecSourceRefPatchPtrOutput() ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return o.ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecSourceRefPatchOutput) ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecSourceRefPatch) *ImageUpdateAutomationSpecSourceRefPatch {
		return &v
	}).(ImageUpdateAutomationSpecSourceRefPatchPtrOutput)
}

// API version of the referent.
func (o ImageUpdateAutomationSpecSourceRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRefPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o ImageUpdateAutomationSpecSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
func (o ImageUpdateAutomationSpecSourceRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecSourceRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecSourceRefPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) ToImageUpdateAutomationSpecSourceRefPatchPtrOutput() ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) ToImageUpdateAutomationSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecSourceRefPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) Elem() ImageUpdateAutomationSpecSourceRefPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRefPatch) ImageUpdateAutomationSpecSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecSourceRefPatch
		return ret
	}).(ImageUpdateAutomationSpecSourceRefPatchOutput)
}

// API version of the referent.
func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that contains the reference.
func (o ImageUpdateAutomationSpecSourceRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Update gives the specification for how to update the files in
// the repository. This can be left empty, to use the default
// value.
type ImageUpdateAutomationSpecUpdate struct {
	// Path to the directory containing the manifests to be updated.
	// Defaults to 'None', which translates to the root path
	// of the GitRepositoryRef.
	Path *string `pulumi:"path"`
	// Strategy names the strategy to be used.
	Strategy *string `pulumi:"strategy"`
}

// ImageUpdateAutomationSpecUpdateInput is an input type that accepts ImageUpdateAutomationSpecUpdateArgs and ImageUpdateAutomationSpecUpdateOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecUpdateInput` via:
//
//	ImageUpdateAutomationSpecUpdateArgs{...}
type ImageUpdateAutomationSpecUpdateInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecUpdateOutput() ImageUpdateAutomationSpecUpdateOutput
	ToImageUpdateAutomationSpecUpdateOutputWithContext(context.Context) ImageUpdateAutomationSpecUpdateOutput
}

// Update gives the specification for how to update the files in
// the repository. This can be left empty, to use the default
// value.
type ImageUpdateAutomationSpecUpdateArgs struct {
	// Path to the directory containing the manifests to be updated.
	// Defaults to 'None', which translates to the root path
	// of the GitRepositoryRef.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Strategy names the strategy to be used.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (ImageUpdateAutomationSpecUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecUpdate)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecUpdateArgs) ToImageUpdateAutomationSpecUpdateOutput() ImageUpdateAutomationSpecUpdateOutput {
	return i.ToImageUpdateAutomationSpecUpdateOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecUpdateArgs) ToImageUpdateAutomationSpecUpdateOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecUpdateOutput)
}

func (i ImageUpdateAutomationSpecUpdateArgs) ToImageUpdateAutomationSpecUpdatePtrOutput() ImageUpdateAutomationSpecUpdatePtrOutput {
	return i.ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecUpdateArgs) ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecUpdateOutput).ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecUpdatePtrInput is an input type that accepts ImageUpdateAutomationSpecUpdateArgs, ImageUpdateAutomationSpecUpdatePtr and ImageUpdateAutomationSpecUpdatePtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecUpdatePtrInput` via:
//
//	        ImageUpdateAutomationSpecUpdateArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecUpdatePtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecUpdatePtrOutput() ImageUpdateAutomationSpecUpdatePtrOutput
	ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(context.Context) ImageUpdateAutomationSpecUpdatePtrOutput
}

type imageUpdateAutomationSpecUpdatePtrType ImageUpdateAutomationSpecUpdateArgs

func ImageUpdateAutomationSpecUpdatePtr(v *ImageUpdateAutomationSpecUpdateArgs) ImageUpdateAutomationSpecUpdatePtrInput {
	return (*imageUpdateAutomationSpecUpdatePtrType)(v)
}

func (*imageUpdateAutomationSpecUpdatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecUpdate)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecUpdatePtrType) ToImageUpdateAutomationSpecUpdatePtrOutput() ImageUpdateAutomationSpecUpdatePtrOutput {
	return i.ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecUpdatePtrType) ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecUpdatePtrOutput)
}

// Update gives the specification for how to update the files in
// the repository. This can be left empty, to use the default
// value.
type ImageUpdateAutomationSpecUpdateOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecUpdate)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecUpdateOutput) ToImageUpdateAutomationSpecUpdateOutput() ImageUpdateAutomationSpecUpdateOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdateOutput) ToImageUpdateAutomationSpecUpdateOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdateOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdateOutput) ToImageUpdateAutomationSpecUpdatePtrOutput() ImageUpdateAutomationSpecUpdatePtrOutput {
	return o.ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecUpdateOutput) ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecUpdate) *ImageUpdateAutomationSpecUpdate {
		return &v
	}).(ImageUpdateAutomationSpecUpdatePtrOutput)
}

// Path to the directory containing the manifests to be updated.
// Defaults to 'None', which translates to the root path
// of the GitRepositoryRef.
func (o ImageUpdateAutomationSpecUpdateOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecUpdate) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Strategy names the strategy to be used.
func (o ImageUpdateAutomationSpecUpdateOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecUpdate) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecUpdatePtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecUpdatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecUpdate)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecUpdatePtrOutput) ToImageUpdateAutomationSpecUpdatePtrOutput() ImageUpdateAutomationSpecUpdatePtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdatePtrOutput) ToImageUpdateAutomationSpecUpdatePtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdatePtrOutput) Elem() ImageUpdateAutomationSpecUpdateOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecUpdate) ImageUpdateAutomationSpecUpdate {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecUpdate
		return ret
	}).(ImageUpdateAutomationSpecUpdateOutput)
}

// Path to the directory containing the manifests to be updated.
// Defaults to 'None', which translates to the root path
// of the GitRepositoryRef.
func (o ImageUpdateAutomationSpecUpdatePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Strategy names the strategy to be used.
func (o ImageUpdateAutomationSpecUpdatePtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecUpdate) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// Update gives the specification for how to update the files in
// the repository. This can be left empty, to use the default
// value.
type ImageUpdateAutomationSpecUpdatePatch struct {
	// Path to the directory containing the manifests to be updated.
	// Defaults to 'None', which translates to the root path
	// of the GitRepositoryRef.
	Path *string `pulumi:"path"`
	// Strategy names the strategy to be used.
	Strategy *string `pulumi:"strategy"`
}

// ImageUpdateAutomationSpecUpdatePatchInput is an input type that accepts ImageUpdateAutomationSpecUpdatePatchArgs and ImageUpdateAutomationSpecUpdatePatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecUpdatePatchInput` via:
//
//	ImageUpdateAutomationSpecUpdatePatchArgs{...}
type ImageUpdateAutomationSpecUpdatePatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecUpdatePatchOutput() ImageUpdateAutomationSpecUpdatePatchOutput
	ToImageUpdateAutomationSpecUpdatePatchOutputWithContext(context.Context) ImageUpdateAutomationSpecUpdatePatchOutput
}

// Update gives the specification for how to update the files in
// the repository. This can be left empty, to use the default
// value.
type ImageUpdateAutomationSpecUpdatePatchArgs struct {
	// Path to the directory containing the manifests to be updated.
	// Defaults to 'None', which translates to the root path
	// of the GitRepositoryRef.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Strategy names the strategy to be used.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (ImageUpdateAutomationSpecUpdatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecUpdatePatch)(nil)).Elem()
}

func (i ImageUpdateAutomationSpecUpdatePatchArgs) ToImageUpdateAutomationSpecUpdatePatchOutput() ImageUpdateAutomationSpecUpdatePatchOutput {
	return i.ToImageUpdateAutomationSpecUpdatePatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecUpdatePatchArgs) ToImageUpdateAutomationSpecUpdatePatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecUpdatePatchOutput)
}

func (i ImageUpdateAutomationSpecUpdatePatchArgs) ToImageUpdateAutomationSpecUpdatePatchPtrOutput() ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return i.ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationSpecUpdatePatchArgs) ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecUpdatePatchOutput).ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationSpecUpdatePatchPtrInput is an input type that accepts ImageUpdateAutomationSpecUpdatePatchArgs, ImageUpdateAutomationSpecUpdatePatchPtr and ImageUpdateAutomationSpecUpdatePatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationSpecUpdatePatchPtrInput` via:
//
//	        ImageUpdateAutomationSpecUpdatePatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationSpecUpdatePatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationSpecUpdatePatchPtrOutput() ImageUpdateAutomationSpecUpdatePatchPtrOutput
	ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(context.Context) ImageUpdateAutomationSpecUpdatePatchPtrOutput
}

type imageUpdateAutomationSpecUpdatePatchPtrType ImageUpdateAutomationSpecUpdatePatchArgs

func ImageUpdateAutomationSpecUpdatePatchPtr(v *ImageUpdateAutomationSpecUpdatePatchArgs) ImageUpdateAutomationSpecUpdatePatchPtrInput {
	return (*imageUpdateAutomationSpecUpdatePatchPtrType)(v)
}

func (*imageUpdateAutomationSpecUpdatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecUpdatePatch)(nil)).Elem()
}

func (i *imageUpdateAutomationSpecUpdatePatchPtrType) ToImageUpdateAutomationSpecUpdatePatchPtrOutput() ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return i.ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationSpecUpdatePatchPtrType) ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationSpecUpdatePatchPtrOutput)
}

// Update gives the specification for how to update the files in
// the repository. This can be left empty, to use the default
// value.
type ImageUpdateAutomationSpecUpdatePatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecUpdatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationSpecUpdatePatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecUpdatePatchOutput) ToImageUpdateAutomationSpecUpdatePatchOutput() ImageUpdateAutomationSpecUpdatePatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdatePatchOutput) ToImageUpdateAutomationSpecUpdatePatchOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePatchOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdatePatchOutput) ToImageUpdateAutomationSpecUpdatePatchPtrOutput() ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return o.ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationSpecUpdatePatchOutput) ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationSpecUpdatePatch) *ImageUpdateAutomationSpecUpdatePatch {
		return &v
	}).(ImageUpdateAutomationSpecUpdatePatchPtrOutput)
}

// Path to the directory containing the manifests to be updated.
// Defaults to 'None', which translates to the root path
// of the GitRepositoryRef.
func (o ImageUpdateAutomationSpecUpdatePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecUpdatePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Strategy names the strategy to be used.
func (o ImageUpdateAutomationSpecUpdatePatchOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationSpecUpdatePatch) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationSpecUpdatePatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationSpecUpdatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationSpecUpdatePatch)(nil)).Elem()
}

func (o ImageUpdateAutomationSpecUpdatePatchPtrOutput) ToImageUpdateAutomationSpecUpdatePatchPtrOutput() ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdatePatchPtrOutput) ToImageUpdateAutomationSpecUpdatePatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationSpecUpdatePatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationSpecUpdatePatchPtrOutput) Elem() ImageUpdateAutomationSpecUpdatePatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecUpdatePatch) ImageUpdateAutomationSpecUpdatePatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationSpecUpdatePatch
		return ret
	}).(ImageUpdateAutomationSpecUpdatePatchOutput)
}

// Path to the directory containing the manifests to be updated.
// Defaults to 'None', which translates to the root path
// of the GitRepositoryRef.
func (o ImageUpdateAutomationSpecUpdatePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecUpdatePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Strategy names the strategy to be used.
func (o ImageUpdateAutomationSpecUpdatePatchPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationSpecUpdatePatch) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
type ImageUpdateAutomationStatus struct {
	Conditions []ImageUpdateAutomationStatusConditions `pulumi:"conditions"`
	// LastAutomationRunTime records the last time the controller ran
	// this automation through to completion (even if no updates were
	// made).
	LastAutomationRunTime *string `pulumi:"lastAutomationRunTime"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// LastPushCommit records the SHA1 of the last commit made by the
	// controller, for this automation object
	LastPushCommit *string `pulumi:"lastPushCommit"`
	// LastPushTime records the time of the last pushed change.
	LastPushTime       *string `pulumi:"lastPushTime"`
	ObservedGeneration *int    `pulumi:"observedGeneration"`
	// ObservedPolicies is the list of observed ImagePolicies that were
	// considered by the ImageUpdateAutomation update process.
	ObservedPolicies map[string]map[string]string `pulumi:"observedPolicies"`
	// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
	// ObservedSourceRevision is the last observed source revision. This can be
	// used to determine if the source has been updated since last observation.
	ObservedSourceRevision *string `pulumi:"observedSourceRevision"`
}

// ImageUpdateAutomationStatusInput is an input type that accepts ImageUpdateAutomationStatusArgs and ImageUpdateAutomationStatusOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusInput` via:
//
//	ImageUpdateAutomationStatusArgs{...}
type ImageUpdateAutomationStatusInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusOutput() ImageUpdateAutomationStatusOutput
	ToImageUpdateAutomationStatusOutputWithContext(context.Context) ImageUpdateAutomationStatusOutput
}

// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
type ImageUpdateAutomationStatusArgs struct {
	Conditions ImageUpdateAutomationStatusConditionsArrayInput `pulumi:"conditions"`
	// LastAutomationRunTime records the last time the controller ran
	// this automation through to completion (even if no updates were
	// made).
	LastAutomationRunTime pulumi.StringPtrInput `pulumi:"lastAutomationRunTime"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// LastPushCommit records the SHA1 of the last commit made by the
	// controller, for this automation object
	LastPushCommit pulumi.StringPtrInput `pulumi:"lastPushCommit"`
	// LastPushTime records the time of the last pushed change.
	LastPushTime       pulumi.StringPtrInput `pulumi:"lastPushTime"`
	ObservedGeneration pulumi.IntPtrInput    `pulumi:"observedGeneration"`
	// ObservedPolicies is the list of observed ImagePolicies that were
	// considered by the ImageUpdateAutomation update process.
	ObservedPolicies pulumi.StringMapMapInput `pulumi:"observedPolicies"`
	// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
	// ObservedSourceRevision is the last observed source revision. This can be
	// used to determine if the source has been updated since last observation.
	ObservedSourceRevision pulumi.StringPtrInput `pulumi:"observedSourceRevision"`
}

func (ImageUpdateAutomationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatus)(nil)).Elem()
}

func (i ImageUpdateAutomationStatusArgs) ToImageUpdateAutomationStatusOutput() ImageUpdateAutomationStatusOutput {
	return i.ToImageUpdateAutomationStatusOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusArgs) ToImageUpdateAutomationStatusOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusOutput)
}

func (i ImageUpdateAutomationStatusArgs) ToImageUpdateAutomationStatusPtrOutput() ImageUpdateAutomationStatusPtrOutput {
	return i.ToImageUpdateAutomationStatusPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusArgs) ToImageUpdateAutomationStatusPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusOutput).ToImageUpdateAutomationStatusPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationStatusPtrInput is an input type that accepts ImageUpdateAutomationStatusArgs, ImageUpdateAutomationStatusPtr and ImageUpdateAutomationStatusPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusPtrInput` via:
//
//	        ImageUpdateAutomationStatusArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationStatusPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusPtrOutput() ImageUpdateAutomationStatusPtrOutput
	ToImageUpdateAutomationStatusPtrOutputWithContext(context.Context) ImageUpdateAutomationStatusPtrOutput
}

type imageUpdateAutomationStatusPtrType ImageUpdateAutomationStatusArgs

func ImageUpdateAutomationStatusPtr(v *ImageUpdateAutomationStatusArgs) ImageUpdateAutomationStatusPtrInput {
	return (*imageUpdateAutomationStatusPtrType)(v)
}

func (*imageUpdateAutomationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationStatus)(nil)).Elem()
}

func (i *imageUpdateAutomationStatusPtrType) ToImageUpdateAutomationStatusPtrOutput() ImageUpdateAutomationStatusPtrOutput {
	return i.ToImageUpdateAutomationStatusPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationStatusPtrType) ToImageUpdateAutomationStatusPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusPtrOutput)
}

// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
type ImageUpdateAutomationStatusOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatus)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusOutput) ToImageUpdateAutomationStatusOutput() ImageUpdateAutomationStatusOutput {
	return o
}

func (o ImageUpdateAutomationStatusOutput) ToImageUpdateAutomationStatusOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusOutput {
	return o
}

func (o ImageUpdateAutomationStatusOutput) ToImageUpdateAutomationStatusPtrOutput() ImageUpdateAutomationStatusPtrOutput {
	return o.ToImageUpdateAutomationStatusPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationStatusOutput) ToImageUpdateAutomationStatusPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationStatus) *ImageUpdateAutomationStatus {
		return &v
	}).(ImageUpdateAutomationStatusPtrOutput)
}

func (o ImageUpdateAutomationStatusOutput) Conditions() ImageUpdateAutomationStatusConditionsArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) []ImageUpdateAutomationStatusConditions { return v.Conditions }).(ImageUpdateAutomationStatusConditionsArrayOutput)
}

// LastAutomationRunTime records the last time the controller ran
// this automation through to completion (even if no updates were
// made).
func (o ImageUpdateAutomationStatusOutput) LastAutomationRunTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) *string { return v.LastAutomationRunTime }).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageUpdateAutomationStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// LastPushCommit records the SHA1 of the last commit made by the
// controller, for this automation object
func (o ImageUpdateAutomationStatusOutput) LastPushCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) *string { return v.LastPushCommit }).(pulumi.StringPtrOutput)
}

// LastPushTime records the time of the last pushed change.
func (o ImageUpdateAutomationStatusOutput) LastPushTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) *string { return v.LastPushTime }).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedPolicies is the list of observed ImagePolicies that were
// considered by the ImageUpdateAutomation update process.
func (o ImageUpdateAutomationStatusOutput) ObservedPolicies() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) map[string]map[string]string { return v.ObservedPolicies }).(pulumi.StringMapMapOutput)
}

// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
// ObservedSourceRevision is the last observed source revision. This can be
// used to determine if the source has been updated since last observation.
func (o ImageUpdateAutomationStatusOutput) ObservedSourceRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatus) *string { return v.ObservedSourceRevision }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationStatusPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationStatus)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusPtrOutput) ToImageUpdateAutomationStatusPtrOutput() ImageUpdateAutomationStatusPtrOutput {
	return o
}

func (o ImageUpdateAutomationStatusPtrOutput) ToImageUpdateAutomationStatusPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPtrOutput {
	return o
}

func (o ImageUpdateAutomationStatusPtrOutput) Elem() ImageUpdateAutomationStatusOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) ImageUpdateAutomationStatus {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationStatus
		return ret
	}).(ImageUpdateAutomationStatusOutput)
}

func (o ImageUpdateAutomationStatusPtrOutput) Conditions() ImageUpdateAutomationStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) []ImageUpdateAutomationStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ImageUpdateAutomationStatusConditionsArrayOutput)
}

// LastAutomationRunTime records the last time the controller ran
// this automation through to completion (even if no updates were
// made).
func (o ImageUpdateAutomationStatusPtrOutput) LastAutomationRunTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAutomationRunTime
	}).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageUpdateAutomationStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// LastPushCommit records the SHA1 of the last commit made by the
// controller, for this automation object
func (o ImageUpdateAutomationStatusPtrOutput) LastPushCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastPushCommit
	}).(pulumi.StringPtrOutput)
}

// LastPushTime records the time of the last pushed change.
func (o ImageUpdateAutomationStatusPtrOutput) LastPushTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastPushTime
	}).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedPolicies is the list of observed ImagePolicies that were
// considered by the ImageUpdateAutomation update process.
func (o ImageUpdateAutomationStatusPtrOutput) ObservedPolicies() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ObservedPolicies
	}).(pulumi.StringMapMapOutput)
}

// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
// ObservedSourceRevision is the last observed source revision. This can be
// used to determine if the source has been updated since last observation.
func (o ImageUpdateAutomationStatusPtrOutput) ObservedSourceRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedSourceRevision
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageUpdateAutomationStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ImageUpdateAutomationStatusConditionsInput is an input type that accepts ImageUpdateAutomationStatusConditionsArgs and ImageUpdateAutomationStatusConditionsOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusConditionsInput` via:
//
//	ImageUpdateAutomationStatusConditionsArgs{...}
type ImageUpdateAutomationStatusConditionsInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusConditionsOutput() ImageUpdateAutomationStatusConditionsOutput
	ToImageUpdateAutomationStatusConditionsOutputWithContext(context.Context) ImageUpdateAutomationStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageUpdateAutomationStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ImageUpdateAutomationStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatusConditions)(nil)).Elem()
}

func (i ImageUpdateAutomationStatusConditionsArgs) ToImageUpdateAutomationStatusConditionsOutput() ImageUpdateAutomationStatusConditionsOutput {
	return i.ToImageUpdateAutomationStatusConditionsOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusConditionsArgs) ToImageUpdateAutomationStatusConditionsOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusConditionsOutput)
}

// ImageUpdateAutomationStatusConditionsArrayInput is an input type that accepts ImageUpdateAutomationStatusConditionsArray and ImageUpdateAutomationStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusConditionsArrayInput` via:
//
//	ImageUpdateAutomationStatusConditionsArray{ ImageUpdateAutomationStatusConditionsArgs{...} }
type ImageUpdateAutomationStatusConditionsArrayInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusConditionsArrayOutput() ImageUpdateAutomationStatusConditionsArrayOutput
	ToImageUpdateAutomationStatusConditionsArrayOutputWithContext(context.Context) ImageUpdateAutomationStatusConditionsArrayOutput
}

type ImageUpdateAutomationStatusConditionsArray []ImageUpdateAutomationStatusConditionsInput

func (ImageUpdateAutomationStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationStatusConditions)(nil)).Elem()
}

func (i ImageUpdateAutomationStatusConditionsArray) ToImageUpdateAutomationStatusConditionsArrayOutput() ImageUpdateAutomationStatusConditionsArrayOutput {
	return i.ToImageUpdateAutomationStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusConditionsArray) ToImageUpdateAutomationStatusConditionsArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageUpdateAutomationStatusConditionsOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatusConditions)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusConditionsOutput) ToImageUpdateAutomationStatusConditionsOutput() ImageUpdateAutomationStatusConditionsOutput {
	return o
}

func (o ImageUpdateAutomationStatusConditionsOutput) ToImageUpdateAutomationStatusConditionsOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ImageUpdateAutomationStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ImageUpdateAutomationStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ImageUpdateAutomationStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ImageUpdateAutomationStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ImageUpdateAutomationStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ImageUpdateAutomationStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationStatusConditions)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusConditionsArrayOutput) ToImageUpdateAutomationStatusConditionsArrayOutput() ImageUpdateAutomationStatusConditionsArrayOutput {
	return o
}

func (o ImageUpdateAutomationStatusConditionsArrayOutput) ToImageUpdateAutomationStatusConditionsArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsArrayOutput {
	return o
}

func (o ImageUpdateAutomationStatusConditionsArrayOutput) Index(i pulumi.IntInput) ImageUpdateAutomationStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageUpdateAutomationStatusConditions {
		return vs[0].([]ImageUpdateAutomationStatusConditions)[vs[1].(int)]
	}).(ImageUpdateAutomationStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageUpdateAutomationStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ImageUpdateAutomationStatusConditionsPatchInput is an input type that accepts ImageUpdateAutomationStatusConditionsPatchArgs and ImageUpdateAutomationStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusConditionsPatchInput` via:
//
//	ImageUpdateAutomationStatusConditionsPatchArgs{...}
type ImageUpdateAutomationStatusConditionsPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusConditionsPatchOutput() ImageUpdateAutomationStatusConditionsPatchOutput
	ToImageUpdateAutomationStatusConditionsPatchOutputWithContext(context.Context) ImageUpdateAutomationStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageUpdateAutomationStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ImageUpdateAutomationStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatusConditionsPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationStatusConditionsPatchArgs) ToImageUpdateAutomationStatusConditionsPatchOutput() ImageUpdateAutomationStatusConditionsPatchOutput {
	return i.ToImageUpdateAutomationStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusConditionsPatchArgs) ToImageUpdateAutomationStatusConditionsPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusConditionsPatchOutput)
}

// ImageUpdateAutomationStatusConditionsPatchArrayInput is an input type that accepts ImageUpdateAutomationStatusConditionsPatchArray and ImageUpdateAutomationStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusConditionsPatchArrayInput` via:
//
//	ImageUpdateAutomationStatusConditionsPatchArray{ ImageUpdateAutomationStatusConditionsPatchArgs{...} }
type ImageUpdateAutomationStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusConditionsPatchArrayOutput() ImageUpdateAutomationStatusConditionsPatchArrayOutput
	ToImageUpdateAutomationStatusConditionsPatchArrayOutputWithContext(context.Context) ImageUpdateAutomationStatusConditionsPatchArrayOutput
}

type ImageUpdateAutomationStatusConditionsPatchArray []ImageUpdateAutomationStatusConditionsPatchInput

func (ImageUpdateAutomationStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationStatusConditionsPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationStatusConditionsPatchArray) ToImageUpdateAutomationStatusConditionsPatchArrayOutput() ImageUpdateAutomationStatusConditionsPatchArrayOutput {
	return i.ToImageUpdateAutomationStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusConditionsPatchArray) ToImageUpdateAutomationStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ImageUpdateAutomationStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatusConditionsPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusConditionsPatchOutput) ToImageUpdateAutomationStatusConditionsPatchOutput() ImageUpdateAutomationStatusConditionsPatchOutput {
	return o
}

func (o ImageUpdateAutomationStatusConditionsPatchOutput) ToImageUpdateAutomationStatusConditionsPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ImageUpdateAutomationStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ImageUpdateAutomationStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ImageUpdateAutomationStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ImageUpdateAutomationStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ImageUpdateAutomationStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ImageUpdateAutomationStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageUpdateAutomationStatusConditionsPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusConditionsPatchArrayOutput) ToImageUpdateAutomationStatusConditionsPatchArrayOutput() ImageUpdateAutomationStatusConditionsPatchArrayOutput {
	return o
}

func (o ImageUpdateAutomationStatusConditionsPatchArrayOutput) ToImageUpdateAutomationStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusConditionsPatchArrayOutput {
	return o
}

func (o ImageUpdateAutomationStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ImageUpdateAutomationStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageUpdateAutomationStatusConditionsPatch {
		return vs[0].([]ImageUpdateAutomationStatusConditionsPatch)[vs[1].(int)]
	}).(ImageUpdateAutomationStatusConditionsPatchOutput)
}

// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
type ImageUpdateAutomationStatusPatch struct {
	Conditions []ImageUpdateAutomationStatusConditionsPatch `pulumi:"conditions"`
	// LastAutomationRunTime records the last time the controller ran
	// this automation through to completion (even if no updates were
	// made).
	LastAutomationRunTime *string `pulumi:"lastAutomationRunTime"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// LastPushCommit records the SHA1 of the last commit made by the
	// controller, for this automation object
	LastPushCommit *string `pulumi:"lastPushCommit"`
	// LastPushTime records the time of the last pushed change.
	LastPushTime       *string `pulumi:"lastPushTime"`
	ObservedGeneration *int    `pulumi:"observedGeneration"`
	// ObservedPolicies is the list of observed ImagePolicies that were
	// considered by the ImageUpdateAutomation update process.
	ObservedPolicies map[string]map[string]string `pulumi:"observedPolicies"`
	// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
	// ObservedSourceRevision is the last observed source revision. This can be
	// used to determine if the source has been updated since last observation.
	ObservedSourceRevision *string `pulumi:"observedSourceRevision"`
}

// ImageUpdateAutomationStatusPatchInput is an input type that accepts ImageUpdateAutomationStatusPatchArgs and ImageUpdateAutomationStatusPatchOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusPatchInput` via:
//
//	ImageUpdateAutomationStatusPatchArgs{...}
type ImageUpdateAutomationStatusPatchInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusPatchOutput() ImageUpdateAutomationStatusPatchOutput
	ToImageUpdateAutomationStatusPatchOutputWithContext(context.Context) ImageUpdateAutomationStatusPatchOutput
}

// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
type ImageUpdateAutomationStatusPatchArgs struct {
	Conditions ImageUpdateAutomationStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastAutomationRunTime records the last time the controller ran
	// this automation through to completion (even if no updates were
	// made).
	LastAutomationRunTime pulumi.StringPtrInput `pulumi:"lastAutomationRunTime"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// LastPushCommit records the SHA1 of the last commit made by the
	// controller, for this automation object
	LastPushCommit pulumi.StringPtrInput `pulumi:"lastPushCommit"`
	// LastPushTime records the time of the last pushed change.
	LastPushTime       pulumi.StringPtrInput `pulumi:"lastPushTime"`
	ObservedGeneration pulumi.IntPtrInput    `pulumi:"observedGeneration"`
	// ObservedPolicies is the list of observed ImagePolicies that were
	// considered by the ImageUpdateAutomation update process.
	ObservedPolicies pulumi.StringMapMapInput `pulumi:"observedPolicies"`
	// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
	// ObservedSourceRevision is the last observed source revision. This can be
	// used to determine if the source has been updated since last observation.
	ObservedSourceRevision pulumi.StringPtrInput `pulumi:"observedSourceRevision"`
}

func (ImageUpdateAutomationStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatusPatch)(nil)).Elem()
}

func (i ImageUpdateAutomationStatusPatchArgs) ToImageUpdateAutomationStatusPatchOutput() ImageUpdateAutomationStatusPatchOutput {
	return i.ToImageUpdateAutomationStatusPatchOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusPatchArgs) ToImageUpdateAutomationStatusPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusPatchOutput)
}

func (i ImageUpdateAutomationStatusPatchArgs) ToImageUpdateAutomationStatusPatchPtrOutput() ImageUpdateAutomationStatusPatchPtrOutput {
	return i.ToImageUpdateAutomationStatusPatchPtrOutputWithContext(context.Background())
}

func (i ImageUpdateAutomationStatusPatchArgs) ToImageUpdateAutomationStatusPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusPatchOutput).ToImageUpdateAutomationStatusPatchPtrOutputWithContext(ctx)
}

// ImageUpdateAutomationStatusPatchPtrInput is an input type that accepts ImageUpdateAutomationStatusPatchArgs, ImageUpdateAutomationStatusPatchPtr and ImageUpdateAutomationStatusPatchPtrOutput values.
// You can construct a concrete instance of `ImageUpdateAutomationStatusPatchPtrInput` via:
//
//	        ImageUpdateAutomationStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ImageUpdateAutomationStatusPatchPtrInput interface {
	pulumi.Input

	ToImageUpdateAutomationStatusPatchPtrOutput() ImageUpdateAutomationStatusPatchPtrOutput
	ToImageUpdateAutomationStatusPatchPtrOutputWithContext(context.Context) ImageUpdateAutomationStatusPatchPtrOutput
}

type imageUpdateAutomationStatusPatchPtrType ImageUpdateAutomationStatusPatchArgs

func ImageUpdateAutomationStatusPatchPtr(v *ImageUpdateAutomationStatusPatchArgs) ImageUpdateAutomationStatusPatchPtrInput {
	return (*imageUpdateAutomationStatusPatchPtrType)(v)
}

func (*imageUpdateAutomationStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationStatusPatch)(nil)).Elem()
}

func (i *imageUpdateAutomationStatusPatchPtrType) ToImageUpdateAutomationStatusPatchPtrOutput() ImageUpdateAutomationStatusPatchPtrOutput {
	return i.ToImageUpdateAutomationStatusPatchPtrOutputWithContext(context.Background())
}

func (i *imageUpdateAutomationStatusPatchPtrType) ToImageUpdateAutomationStatusPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageUpdateAutomationStatusPatchPtrOutput)
}

// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
type ImageUpdateAutomationStatusPatchOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageUpdateAutomationStatusPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusPatchOutput) ToImageUpdateAutomationStatusPatchOutput() ImageUpdateAutomationStatusPatchOutput {
	return o
}

func (o ImageUpdateAutomationStatusPatchOutput) ToImageUpdateAutomationStatusPatchOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPatchOutput {
	return o
}

func (o ImageUpdateAutomationStatusPatchOutput) ToImageUpdateAutomationStatusPatchPtrOutput() ImageUpdateAutomationStatusPatchPtrOutput {
	return o.ToImageUpdateAutomationStatusPatchPtrOutputWithContext(context.Background())
}

func (o ImageUpdateAutomationStatusPatchOutput) ToImageUpdateAutomationStatusPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageUpdateAutomationStatusPatch) *ImageUpdateAutomationStatusPatch {
		return &v
	}).(ImageUpdateAutomationStatusPatchPtrOutput)
}

func (o ImageUpdateAutomationStatusPatchOutput) Conditions() ImageUpdateAutomationStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) []ImageUpdateAutomationStatusConditionsPatch {
		return v.Conditions
	}).(ImageUpdateAutomationStatusConditionsPatchArrayOutput)
}

// LastAutomationRunTime records the last time the controller ran
// this automation through to completion (even if no updates were
// made).
func (o ImageUpdateAutomationStatusPatchOutput) LastAutomationRunTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) *string { return v.LastAutomationRunTime }).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageUpdateAutomationStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// LastPushCommit records the SHA1 of the last commit made by the
// controller, for this automation object
func (o ImageUpdateAutomationStatusPatchOutput) LastPushCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) *string { return v.LastPushCommit }).(pulumi.StringPtrOutput)
}

// LastPushTime records the time of the last pushed change.
func (o ImageUpdateAutomationStatusPatchOutput) LastPushTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) *string { return v.LastPushTime }).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedPolicies is the list of observed ImagePolicies that were
// considered by the ImageUpdateAutomation update process.
func (o ImageUpdateAutomationStatusPatchOutput) ObservedPolicies() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) map[string]map[string]string { return v.ObservedPolicies }).(pulumi.StringMapMapOutput)
}

// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
// ObservedSourceRevision is the last observed source revision. This can be
// used to determine if the source has been updated since last observation.
func (o ImageUpdateAutomationStatusPatchOutput) ObservedSourceRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageUpdateAutomationStatusPatch) *string { return v.ObservedSourceRevision }).(pulumi.StringPtrOutput)
}

type ImageUpdateAutomationStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ImageUpdateAutomationStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageUpdateAutomationStatusPatch)(nil)).Elem()
}

func (o ImageUpdateAutomationStatusPatchPtrOutput) ToImageUpdateAutomationStatusPatchPtrOutput() ImageUpdateAutomationStatusPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationStatusPatchPtrOutput) ToImageUpdateAutomationStatusPatchPtrOutputWithContext(ctx context.Context) ImageUpdateAutomationStatusPatchPtrOutput {
	return o
}

func (o ImageUpdateAutomationStatusPatchPtrOutput) Elem() ImageUpdateAutomationStatusPatchOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) ImageUpdateAutomationStatusPatch {
		if v != nil {
			return *v
		}
		var ret ImageUpdateAutomationStatusPatch
		return ret
	}).(ImageUpdateAutomationStatusPatchOutput)
}

func (o ImageUpdateAutomationStatusPatchPtrOutput) Conditions() ImageUpdateAutomationStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) []ImageUpdateAutomationStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ImageUpdateAutomationStatusConditionsPatchArrayOutput)
}

// LastAutomationRunTime records the last time the controller ran
// this automation through to completion (even if no updates were
// made).
func (o ImageUpdateAutomationStatusPatchPtrOutput) LastAutomationRunTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastAutomationRunTime
	}).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ImageUpdateAutomationStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// LastPushCommit records the SHA1 of the last commit made by the
// controller, for this automation object
func (o ImageUpdateAutomationStatusPatchPtrOutput) LastPushCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastPushCommit
	}).(pulumi.StringPtrOutput)
}

// LastPushTime records the time of the last pushed change.
func (o ImageUpdateAutomationStatusPatchPtrOutput) LastPushTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastPushTime
	}).(pulumi.StringPtrOutput)
}

func (o ImageUpdateAutomationStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedPolicies is the list of observed ImagePolicies that were
// considered by the ImageUpdateAutomation update process.
func (o ImageUpdateAutomationStatusPatchPtrOutput) ObservedPolicies() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ObservedPolicies
	}).(pulumi.StringMapMapOutput)
}

// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"`
// ObservedSourceRevision is the last observed source revision. This can be
// used to determine if the source has been updated since last observation.
func (o ImageUpdateAutomationStatusPatchPtrOutput) ObservedSourceRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageUpdateAutomationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedSourceRevision
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyTypeInput)(nil)).Elem(), ImagePolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyTypeArrayInput)(nil)).Elem(), ImagePolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyListTypeInput)(nil)).Elem(), ImagePolicyListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyPatchTypeInput)(nil)).Elem(), ImagePolicyPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecInput)(nil)).Elem(), ImagePolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPtrInput)(nil)).Elem(), ImagePolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecFilterTagsInput)(nil)).Elem(), ImagePolicySpecFilterTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecFilterTagsPtrInput)(nil)).Elem(), ImagePolicySpecFilterTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecFilterTagsPatchInput)(nil)).Elem(), ImagePolicySpecFilterTagsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecFilterTagsPatchPtrInput)(nil)).Elem(), ImagePolicySpecFilterTagsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecImageRepositoryRefInput)(nil)).Elem(), ImagePolicySpecImageRepositoryRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecImageRepositoryRefPtrInput)(nil)).Elem(), ImagePolicySpecImageRepositoryRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecImageRepositoryRefPatchInput)(nil)).Elem(), ImagePolicySpecImageRepositoryRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecImageRepositoryRefPatchPtrInput)(nil)).Elem(), ImagePolicySpecImageRepositoryRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPatchInput)(nil)).Elem(), ImagePolicySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPatchPtrInput)(nil)).Elem(), ImagePolicySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyInput)(nil)).Elem(), ImagePolicySpecPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyPtrInput)(nil)).Elem(), ImagePolicySpecPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyAlphabeticalInput)(nil)).Elem(), ImagePolicySpecPolicyAlphabeticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyAlphabeticalPtrInput)(nil)).Elem(), ImagePolicySpecPolicyAlphabeticalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyAlphabeticalPatchInput)(nil)).Elem(), ImagePolicySpecPolicyAlphabeticalPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyAlphabeticalPatchPtrInput)(nil)).Elem(), ImagePolicySpecPolicyAlphabeticalPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyNumericalInput)(nil)).Elem(), ImagePolicySpecPolicyNumericalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyNumericalPtrInput)(nil)).Elem(), ImagePolicySpecPolicyNumericalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyNumericalPatchInput)(nil)).Elem(), ImagePolicySpecPolicyNumericalPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyNumericalPatchPtrInput)(nil)).Elem(), ImagePolicySpecPolicyNumericalPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyPatchInput)(nil)).Elem(), ImagePolicySpecPolicyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicyPatchPtrInput)(nil)).Elem(), ImagePolicySpecPolicyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicySemverInput)(nil)).Elem(), ImagePolicySpecPolicySemverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicySemverPtrInput)(nil)).Elem(), ImagePolicySpecPolicySemverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicySemverPatchInput)(nil)).Elem(), ImagePolicySpecPolicySemverPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicySpecPolicySemverPatchPtrInput)(nil)).Elem(), ImagePolicySpecPolicySemverPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusInput)(nil)).Elem(), ImagePolicyStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusPtrInput)(nil)).Elem(), ImagePolicyStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusConditionsInput)(nil)).Elem(), ImagePolicyStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusConditionsArrayInput)(nil)).Elem(), ImagePolicyStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusConditionsPatchInput)(nil)).Elem(), ImagePolicyStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusConditionsPatchArrayInput)(nil)).Elem(), ImagePolicyStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusLatestRefInput)(nil)).Elem(), ImagePolicyStatusLatestRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusLatestRefPtrInput)(nil)).Elem(), ImagePolicyStatusLatestRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusLatestRefPatchInput)(nil)).Elem(), ImagePolicyStatusLatestRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusLatestRefPatchPtrInput)(nil)).Elem(), ImagePolicyStatusLatestRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusObservedPreviousRefInput)(nil)).Elem(), ImagePolicyStatusObservedPreviousRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusObservedPreviousRefPtrInput)(nil)).Elem(), ImagePolicyStatusObservedPreviousRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusObservedPreviousRefPatchInput)(nil)).Elem(), ImagePolicyStatusObservedPreviousRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusObservedPreviousRefPatchPtrInput)(nil)).Elem(), ImagePolicyStatusObservedPreviousRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusPatchInput)(nil)).Elem(), ImagePolicyStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyStatusPatchPtrInput)(nil)).Elem(), ImagePolicyStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryTypeInput)(nil)).Elem(), ImageRepositoryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryTypeArrayInput)(nil)).Elem(), ImageRepositoryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryListTypeInput)(nil)).Elem(), ImageRepositoryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryPatchTypeInput)(nil)).Elem(), ImageRepositoryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecInput)(nil)).Elem(), ImageRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecPtrInput)(nil)).Elem(), ImageRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromInput)(nil)).Elem(), ImageRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromPtrInput)(nil)).Elem(), ImageRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectorsInput)(nil)).Elem(), ImageRepositorySpecAccessFromNamespaceSelectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectorsArrayInput)(nil)).Elem(), ImageRepositorySpecAccessFromNamespaceSelectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectorsPatchInput)(nil)).Elem(), ImageRepositorySpecAccessFromNamespaceSelectorsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput)(nil)).Elem(), ImageRepositorySpecAccessFromNamespaceSelectorsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromPatchInput)(nil)).Elem(), ImageRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecAccessFromPatchPtrInput)(nil)).Elem(), ImageRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecCertSecretRefInput)(nil)).Elem(), ImageRepositorySpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecCertSecretRefPtrInput)(nil)).Elem(), ImageRepositorySpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecCertSecretRefPatchInput)(nil)).Elem(), ImageRepositorySpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecCertSecretRefPatchPtrInput)(nil)).Elem(), ImageRepositorySpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecPatchInput)(nil)).Elem(), ImageRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecPatchPtrInput)(nil)).Elem(), ImageRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecProxySecretRefInput)(nil)).Elem(), ImageRepositorySpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecProxySecretRefPtrInput)(nil)).Elem(), ImageRepositorySpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecProxySecretRefPatchInput)(nil)).Elem(), ImageRepositorySpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecProxySecretRefPatchPtrInput)(nil)).Elem(), ImageRepositorySpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecSecretRefInput)(nil)).Elem(), ImageRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecSecretRefPtrInput)(nil)).Elem(), ImageRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecSecretRefPatchInput)(nil)).Elem(), ImageRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositorySpecSecretRefPatchPtrInput)(nil)).Elem(), ImageRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusInput)(nil)).Elem(), ImageRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusPtrInput)(nil)).Elem(), ImageRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusConditionsInput)(nil)).Elem(), ImageRepositoryStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusConditionsArrayInput)(nil)).Elem(), ImageRepositoryStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusConditionsPatchInput)(nil)).Elem(), ImageRepositoryStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusConditionsPatchArrayInput)(nil)).Elem(), ImageRepositoryStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusLastScanResultInput)(nil)).Elem(), ImageRepositoryStatusLastScanResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusLastScanResultPtrInput)(nil)).Elem(), ImageRepositoryStatusLastScanResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusLastScanResultPatchInput)(nil)).Elem(), ImageRepositoryStatusLastScanResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusLastScanResultPatchPtrInput)(nil)).Elem(), ImageRepositoryStatusLastScanResultPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusPatchInput)(nil)).Elem(), ImageRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryStatusPatchPtrInput)(nil)).Elem(), ImageRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationTypeInput)(nil)).Elem(), ImageUpdateAutomationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationTypeArrayInput)(nil)).Elem(), ImageUpdateAutomationTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationListTypeInput)(nil)).Elem(), ImageUpdateAutomationListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationPatchTypeInput)(nil)).Elem(), ImageUpdateAutomationPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecInput)(nil)).Elem(), ImageUpdateAutomationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitInput)(nil)).Elem(), ImageUpdateAutomationSpecGitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRefInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRefPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRefPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCheckoutRefPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCheckoutRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthorInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitAuthorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthorPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitAuthorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthorPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitAuthorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitAuthorPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitAuthorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeyInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeyPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeyPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRefInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPushInput)(nil)).Elem(), ImageUpdateAutomationSpecGitPushArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPushPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitPushArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPushPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecGitPushPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecGitPushPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecGitPushPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressionsInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecPolicySelectorPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecPolicySelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecSourceRefInput)(nil)).Elem(), ImageUpdateAutomationSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecSourceRefPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecSourceRefPatchInput)(nil)).Elem(), ImageUpdateAutomationSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecSourceRefPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecUpdateInput)(nil)).Elem(), ImageUpdateAutomationSpecUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecUpdatePtrInput)(nil)).Elem(), ImageUpdateAutomationSpecUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecUpdatePatchInput)(nil)).Elem(), ImageUpdateAutomationSpecUpdatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationSpecUpdatePatchPtrInput)(nil)).Elem(), ImageUpdateAutomationSpecUpdatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusInput)(nil)).Elem(), ImageUpdateAutomationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusPtrInput)(nil)).Elem(), ImageUpdateAutomationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusConditionsInput)(nil)).Elem(), ImageUpdateAutomationStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusConditionsArrayInput)(nil)).Elem(), ImageUpdateAutomationStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusConditionsPatchInput)(nil)).Elem(), ImageUpdateAutomationStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusConditionsPatchArrayInput)(nil)).Elem(), ImageUpdateAutomationStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusPatchInput)(nil)).Elem(), ImageUpdateAutomationStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageUpdateAutomationStatusPatchPtrInput)(nil)).Elem(), ImageUpdateAutomationStatusPatchArgs{})
	pulumi.RegisterOutputType(ImagePolicyTypeOutput{})
	pulumi.RegisterOutputType(ImagePolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(ImagePolicyListTypeOutput{})
	pulumi.RegisterOutputType(ImagePolicyPatchTypeOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecFilterTagsOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecFilterTagsPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecFilterTagsPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecFilterTagsPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecImageRepositoryRefOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecImageRepositoryRefPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecImageRepositoryRefPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecImageRepositoryRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyAlphabeticalOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyAlphabeticalPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyAlphabeticalPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyAlphabeticalPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyNumericalOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyNumericalPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyNumericalPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyNumericalPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicyPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicySemverOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicySemverPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicySemverPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicySpecPolicySemverPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusConditionsOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusLatestRefOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusLatestRefPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusLatestRefPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusLatestRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusObservedPreviousRefOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusObservedPreviousRefPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusObservedPreviousRefPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusObservedPreviousRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicyStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryTypeOutput{})
	pulumi.RegisterOutputType(ImageRepositoryTypeArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositoryListTypeOutput{})
	pulumi.RegisterOutputType(ImageRepositoryPatchTypeOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromNamespaceSelectorsOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromNamespaceSelectorsArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromNamespaceSelectorsPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecAccessFromPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecCertSecretRefOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecProxySecretRefOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecProxySecretRefPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecProxySecretRefPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecProxySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecSecretRefOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositorySpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusConditionsOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusLastScanResultOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusLastScanResultPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusLastScanResultPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusLastScanResultPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositoryStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationTypeOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationTypeArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationListTypeOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationPatchTypeOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutRefOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutRefPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutRefPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCheckoutRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitAuthorOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitAuthorPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitAuthorPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitAuthorPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeyOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeyPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeyPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeyPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitCommitSigningKeySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPushOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPushPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPushPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecGitPushPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecPolicySelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecSourceRefOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecSourceRefPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecSourceRefPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecUpdateOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecUpdatePtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecUpdatePatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationSpecUpdatePatchPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusPtrOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusConditionsOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusPatchOutput{})
	pulumi.RegisterOutputType(ImageUpdateAutomationStatusPatchPtrOutput{})
}
