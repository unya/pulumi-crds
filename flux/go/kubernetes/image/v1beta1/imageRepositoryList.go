// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ImageRepositoryList is a list of ImageRepository
type ImageRepositoryList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImageRepositoryTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewImageRepositoryList registers a new resource with the given unique name, arguments, and options.
func NewImageRepositoryList(ctx *pulumi.Context,
	name string, args *ImageRepositoryListArgs, opts ...pulumi.ResourceOption) (*ImageRepositoryList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("image.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("ImageRepositoryList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImageRepositoryList
	err := ctx.RegisterResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImageRepositoryList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRepositoryList gets an existing ImageRepositoryList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRepositoryList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRepositoryListState, opts ...pulumi.ResourceOption) (*ImageRepositoryList, error) {
	var resource ImageRepositoryList
	err := ctx.ReadResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImageRepositoryList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRepositoryList resources.
type imageRepositoryListState struct {
}

type ImageRepositoryListState struct {
}

func (ImageRepositoryListState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRepositoryListState)(nil)).Elem()
}

type imageRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ImageRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ImageRepositoryList resource.
type ImageRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImageRepositoryTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ImageRepositoryListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRepositoryListArgs)(nil)).Elem()
}

type ImageRepositoryListInput interface {
	pulumi.Input

	ToImageRepositoryListOutput() ImageRepositoryListOutput
	ToImageRepositoryListOutputWithContext(ctx context.Context) ImageRepositoryListOutput
}

func (*ImageRepositoryList) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryList)(nil)).Elem()
}

func (i *ImageRepositoryList) ToImageRepositoryListOutput() ImageRepositoryListOutput {
	return i.ToImageRepositoryListOutputWithContext(context.Background())
}

func (i *ImageRepositoryList) ToImageRepositoryListOutputWithContext(ctx context.Context) ImageRepositoryListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryListOutput)
}

// ImageRepositoryListArrayInput is an input type that accepts ImageRepositoryListArray and ImageRepositoryListArrayOutput values.
// You can construct a concrete instance of `ImageRepositoryListArrayInput` via:
//
//	ImageRepositoryListArray{ ImageRepositoryListArgs{...} }
type ImageRepositoryListArrayInput interface {
	pulumi.Input

	ToImageRepositoryListArrayOutput() ImageRepositoryListArrayOutput
	ToImageRepositoryListArrayOutputWithContext(context.Context) ImageRepositoryListArrayOutput
}

type ImageRepositoryListArray []ImageRepositoryListInput

func (ImageRepositoryListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRepositoryList)(nil)).Elem()
}

func (i ImageRepositoryListArray) ToImageRepositoryListArrayOutput() ImageRepositoryListArrayOutput {
	return i.ToImageRepositoryListArrayOutputWithContext(context.Background())
}

func (i ImageRepositoryListArray) ToImageRepositoryListArrayOutputWithContext(ctx context.Context) ImageRepositoryListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryListArrayOutput)
}

// ImageRepositoryListMapInput is an input type that accepts ImageRepositoryListMap and ImageRepositoryListMapOutput values.
// You can construct a concrete instance of `ImageRepositoryListMapInput` via:
//
//	ImageRepositoryListMap{ "key": ImageRepositoryListArgs{...} }
type ImageRepositoryListMapInput interface {
	pulumi.Input

	ToImageRepositoryListMapOutput() ImageRepositoryListMapOutput
	ToImageRepositoryListMapOutputWithContext(context.Context) ImageRepositoryListMapOutput
}

type ImageRepositoryListMap map[string]ImageRepositoryListInput

func (ImageRepositoryListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRepositoryList)(nil)).Elem()
}

func (i ImageRepositoryListMap) ToImageRepositoryListMapOutput() ImageRepositoryListMapOutput {
	return i.ToImageRepositoryListMapOutputWithContext(context.Background())
}

func (i ImageRepositoryListMap) ToImageRepositoryListMapOutputWithContext(ctx context.Context) ImageRepositoryListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryListMapOutput)
}

type ImageRepositoryListOutput struct{ *pulumi.OutputState }

func (ImageRepositoryListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryList)(nil)).Elem()
}

func (o ImageRepositoryListOutput) ToImageRepositoryListOutput() ImageRepositoryListOutput {
	return o
}

func (o ImageRepositoryListOutput) ToImageRepositoryListOutputWithContext(ctx context.Context) ImageRepositoryListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageRepositoryListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRepositoryList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of imagerepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ImageRepositoryListOutput) Items() ImageRepositoryTypeArrayOutput {
	return o.ApplyT(func(v *ImageRepositoryList) ImageRepositoryTypeArrayOutput { return v.Items }).(ImageRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRepositoryList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ImageRepositoryList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ImageRepositoryListArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositoryListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRepositoryList)(nil)).Elem()
}

func (o ImageRepositoryListArrayOutput) ToImageRepositoryListArrayOutput() ImageRepositoryListArrayOutput {
	return o
}

func (o ImageRepositoryListArrayOutput) ToImageRepositoryListArrayOutputWithContext(ctx context.Context) ImageRepositoryListArrayOutput {
	return o
}

func (o ImageRepositoryListArrayOutput) Index(i pulumi.IntInput) ImageRepositoryListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageRepositoryList {
		return vs[0].([]*ImageRepositoryList)[vs[1].(int)]
	}).(ImageRepositoryListOutput)
}

type ImageRepositoryListMapOutput struct{ *pulumi.OutputState }

func (ImageRepositoryListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRepositoryList)(nil)).Elem()
}

func (o ImageRepositoryListMapOutput) ToImageRepositoryListMapOutput() ImageRepositoryListMapOutput {
	return o
}

func (o ImageRepositoryListMapOutput) ToImageRepositoryListMapOutputWithContext(ctx context.Context) ImageRepositoryListMapOutput {
	return o
}

func (o ImageRepositoryListMapOutput) MapIndex(k pulumi.StringInput) ImageRepositoryListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageRepositoryList {
		return vs[0].(map[string]*ImageRepositoryList)[vs[1].(string)]
	}).(ImageRepositoryListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryListInput)(nil)).Elem(), &ImageRepositoryList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryListArrayInput)(nil)).Elem(), ImageRepositoryListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryListMapInput)(nil)).Elem(), ImageRepositoryListMap{})
	pulumi.RegisterOutputType(ImageRepositoryListOutput{})
	pulumi.RegisterOutputType(ImageRepositoryListArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositoryListMapOutput{})
}
