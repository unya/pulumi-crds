// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ImagePolicyList is a list of ImagePolicy
type ImagePolicyList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImagePolicyTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewImagePolicyList registers a new resource with the given unique name, arguments, and options.
func NewImagePolicyList(ctx *pulumi.Context,
	name string, args *ImagePolicyListArgs, opts ...pulumi.ResourceOption) (*ImagePolicyList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("image.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("ImagePolicyList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImagePolicyList
	err := ctx.RegisterResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImagePolicyList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImagePolicyList gets an existing ImagePolicyList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImagePolicyList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImagePolicyListState, opts ...pulumi.ResourceOption) (*ImagePolicyList, error) {
	var resource ImagePolicyList
	err := ctx.ReadResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImagePolicyList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImagePolicyList resources.
type imagePolicyListState struct {
}

type ImagePolicyListState struct {
}

func (ImagePolicyListState) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePolicyListState)(nil)).Elem()
}

type imagePolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ImagePolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ImagePolicyList resource.
type ImagePolicyListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ImagePolicyTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ImagePolicyListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePolicyListArgs)(nil)).Elem()
}

type ImagePolicyListInput interface {
	pulumi.Input

	ToImagePolicyListOutput() ImagePolicyListOutput
	ToImagePolicyListOutputWithContext(ctx context.Context) ImagePolicyListOutput
}

func (*ImagePolicyList) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyList)(nil)).Elem()
}

func (i *ImagePolicyList) ToImagePolicyListOutput() ImagePolicyListOutput {
	return i.ToImagePolicyListOutputWithContext(context.Background())
}

func (i *ImagePolicyList) ToImagePolicyListOutputWithContext(ctx context.Context) ImagePolicyListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyListOutput)
}

// ImagePolicyListArrayInput is an input type that accepts ImagePolicyListArray and ImagePolicyListArrayOutput values.
// You can construct a concrete instance of `ImagePolicyListArrayInput` via:
//
//	ImagePolicyListArray{ ImagePolicyListArgs{...} }
type ImagePolicyListArrayInput interface {
	pulumi.Input

	ToImagePolicyListArrayOutput() ImagePolicyListArrayOutput
	ToImagePolicyListArrayOutputWithContext(context.Context) ImagePolicyListArrayOutput
}

type ImagePolicyListArray []ImagePolicyListInput

func (ImagePolicyListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePolicyList)(nil)).Elem()
}

func (i ImagePolicyListArray) ToImagePolicyListArrayOutput() ImagePolicyListArrayOutput {
	return i.ToImagePolicyListArrayOutputWithContext(context.Background())
}

func (i ImagePolicyListArray) ToImagePolicyListArrayOutputWithContext(ctx context.Context) ImagePolicyListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyListArrayOutput)
}

// ImagePolicyListMapInput is an input type that accepts ImagePolicyListMap and ImagePolicyListMapOutput values.
// You can construct a concrete instance of `ImagePolicyListMapInput` via:
//
//	ImagePolicyListMap{ "key": ImagePolicyListArgs{...} }
type ImagePolicyListMapInput interface {
	pulumi.Input

	ToImagePolicyListMapOutput() ImagePolicyListMapOutput
	ToImagePolicyListMapOutputWithContext(context.Context) ImagePolicyListMapOutput
}

type ImagePolicyListMap map[string]ImagePolicyListInput

func (ImagePolicyListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePolicyList)(nil)).Elem()
}

func (i ImagePolicyListMap) ToImagePolicyListMapOutput() ImagePolicyListMapOutput {
	return i.ToImagePolicyListMapOutputWithContext(context.Background())
}

func (i ImagePolicyListMap) ToImagePolicyListMapOutputWithContext(ctx context.Context) ImagePolicyListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyListMapOutput)
}

type ImagePolicyListOutput struct{ *pulumi.OutputState }

func (ImagePolicyListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyList)(nil)).Elem()
}

func (o ImagePolicyListOutput) ToImagePolicyListOutput() ImagePolicyListOutput {
	return o
}

func (o ImagePolicyListOutput) ToImagePolicyListOutputWithContext(ctx context.Context) ImagePolicyListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImagePolicyListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePolicyList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of imagepolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ImagePolicyListOutput) Items() ImagePolicyTypeArrayOutput {
	return o.ApplyT(func(v *ImagePolicyList) ImagePolicyTypeArrayOutput { return v.Items }).(ImagePolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePolicyList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ImagePolicyList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ImagePolicyListArrayOutput struct{ *pulumi.OutputState }

func (ImagePolicyListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePolicyList)(nil)).Elem()
}

func (o ImagePolicyListArrayOutput) ToImagePolicyListArrayOutput() ImagePolicyListArrayOutput {
	return o
}

func (o ImagePolicyListArrayOutput) ToImagePolicyListArrayOutputWithContext(ctx context.Context) ImagePolicyListArrayOutput {
	return o
}

func (o ImagePolicyListArrayOutput) Index(i pulumi.IntInput) ImagePolicyListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImagePolicyList {
		return vs[0].([]*ImagePolicyList)[vs[1].(int)]
	}).(ImagePolicyListOutput)
}

type ImagePolicyListMapOutput struct{ *pulumi.OutputState }

func (ImagePolicyListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePolicyList)(nil)).Elem()
}

func (o ImagePolicyListMapOutput) ToImagePolicyListMapOutput() ImagePolicyListMapOutput {
	return o
}

func (o ImagePolicyListMapOutput) ToImagePolicyListMapOutputWithContext(ctx context.Context) ImagePolicyListMapOutput {
	return o
}

func (o ImagePolicyListMapOutput) MapIndex(k pulumi.StringInput) ImagePolicyListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImagePolicyList {
		return vs[0].(map[string]*ImagePolicyList)[vs[1].(string)]
	}).(ImagePolicyListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyListInput)(nil)).Elem(), &ImagePolicyList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyListArrayInput)(nil)).Elem(), ImagePolicyListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyListMapInput)(nil)).Elem(), ImagePolicyListMap{})
	pulumi.RegisterOutputType(ImagePolicyListOutput{})
	pulumi.RegisterOutputType(ImagePolicyListArrayOutput{})
	pulumi.RegisterOutputType(ImagePolicyListMapOutput{})
}
