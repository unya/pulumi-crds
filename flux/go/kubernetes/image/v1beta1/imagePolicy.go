// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicy struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     ImagePolicySpecOutput      `pulumi:"spec"`
	Status   ImagePolicyStatusPtrOutput `pulumi:"status"`
}

// NewImagePolicy registers a new resource with the given unique name, arguments, and options.
func NewImagePolicy(ctx *pulumi.Context,
	name string, args *ImagePolicyArgs, opts ...pulumi.ResourceOption) (*ImagePolicy, error) {
	if args == nil {
		args = &ImagePolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("image.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("ImagePolicy")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:image.toolkit.fluxcd.io/v1beta2:ImagePolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImagePolicy
	err := ctx.RegisterResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImagePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImagePolicy gets an existing ImagePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImagePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImagePolicyState, opts ...pulumi.ResourceOption) (*ImagePolicy, error) {
	var resource ImagePolicy
	err := ctx.ReadResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImagePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImagePolicy resources.
type imagePolicyState struct {
}

type ImagePolicyState struct {
}

func (ImagePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePolicyState)(nil)).Elem()
}

type imagePolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ImagePolicySpec   `pulumi:"spec"`
}

// The set of arguments for constructing a ImagePolicy resource.
type ImagePolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ImagePolicySpecPtrInput
}

func (ImagePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePolicyArgs)(nil)).Elem()
}

type ImagePolicyInput interface {
	pulumi.Input

	ToImagePolicyOutput() ImagePolicyOutput
	ToImagePolicyOutputWithContext(ctx context.Context) ImagePolicyOutput
}

func (*ImagePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicy)(nil)).Elem()
}

func (i *ImagePolicy) ToImagePolicyOutput() ImagePolicyOutput {
	return i.ToImagePolicyOutputWithContext(context.Background())
}

func (i *ImagePolicy) ToImagePolicyOutputWithContext(ctx context.Context) ImagePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyOutput)
}

// ImagePolicyArrayInput is an input type that accepts ImagePolicyArray and ImagePolicyArrayOutput values.
// You can construct a concrete instance of `ImagePolicyArrayInput` via:
//
//	ImagePolicyArray{ ImagePolicyArgs{...} }
type ImagePolicyArrayInput interface {
	pulumi.Input

	ToImagePolicyArrayOutput() ImagePolicyArrayOutput
	ToImagePolicyArrayOutputWithContext(context.Context) ImagePolicyArrayOutput
}

type ImagePolicyArray []ImagePolicyInput

func (ImagePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePolicy)(nil)).Elem()
}

func (i ImagePolicyArray) ToImagePolicyArrayOutput() ImagePolicyArrayOutput {
	return i.ToImagePolicyArrayOutputWithContext(context.Background())
}

func (i ImagePolicyArray) ToImagePolicyArrayOutputWithContext(ctx context.Context) ImagePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyArrayOutput)
}

// ImagePolicyMapInput is an input type that accepts ImagePolicyMap and ImagePolicyMapOutput values.
// You can construct a concrete instance of `ImagePolicyMapInput` via:
//
//	ImagePolicyMap{ "key": ImagePolicyArgs{...} }
type ImagePolicyMapInput interface {
	pulumi.Input

	ToImagePolicyMapOutput() ImagePolicyMapOutput
	ToImagePolicyMapOutputWithContext(context.Context) ImagePolicyMapOutput
}

type ImagePolicyMap map[string]ImagePolicyInput

func (ImagePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePolicy)(nil)).Elem()
}

func (i ImagePolicyMap) ToImagePolicyMapOutput() ImagePolicyMapOutput {
	return i.ToImagePolicyMapOutputWithContext(context.Background())
}

func (i ImagePolicyMap) ToImagePolicyMapOutputWithContext(ctx context.Context) ImagePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyMapOutput)
}

type ImagePolicyOutput struct{ *pulumi.OutputState }

func (ImagePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicy)(nil)).Elem()
}

func (o ImagePolicyOutput) ToImagePolicyOutput() ImagePolicyOutput {
	return o
}

func (o ImagePolicyOutput) ToImagePolicyOutputWithContext(ctx context.Context) ImagePolicyOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImagePolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ImagePolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImagePolicyOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ImagePolicy) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ImagePolicyOutput) Spec() ImagePolicySpecOutput {
	return o.ApplyT(func(v *ImagePolicy) ImagePolicySpecOutput { return v.Spec }).(ImagePolicySpecOutput)
}

func (o ImagePolicyOutput) Status() ImagePolicyStatusPtrOutput {
	return o.ApplyT(func(v *ImagePolicy) ImagePolicyStatusPtrOutput { return v.Status }).(ImagePolicyStatusPtrOutput)
}

type ImagePolicyArrayOutput struct{ *pulumi.OutputState }

func (ImagePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePolicy)(nil)).Elem()
}

func (o ImagePolicyArrayOutput) ToImagePolicyArrayOutput() ImagePolicyArrayOutput {
	return o
}

func (o ImagePolicyArrayOutput) ToImagePolicyArrayOutputWithContext(ctx context.Context) ImagePolicyArrayOutput {
	return o
}

func (o ImagePolicyArrayOutput) Index(i pulumi.IntInput) ImagePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImagePolicy {
		return vs[0].([]*ImagePolicy)[vs[1].(int)]
	}).(ImagePolicyOutput)
}

type ImagePolicyMapOutput struct{ *pulumi.OutputState }

func (ImagePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePolicy)(nil)).Elem()
}

func (o ImagePolicyMapOutput) ToImagePolicyMapOutput() ImagePolicyMapOutput {
	return o
}

func (o ImagePolicyMapOutput) ToImagePolicyMapOutputWithContext(ctx context.Context) ImagePolicyMapOutput {
	return o
}

func (o ImagePolicyMapOutput) MapIndex(k pulumi.StringInput) ImagePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImagePolicy {
		return vs[0].(map[string]*ImagePolicy)[vs[1].(string)]
	}).(ImagePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyInput)(nil)).Elem(), &ImagePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyArrayInput)(nil)).Elem(), ImagePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyMapInput)(nil)).Elem(), ImagePolicyMap{})
	pulumi.RegisterOutputType(ImagePolicyOutput{})
	pulumi.RegisterOutputType(ImagePolicyArrayOutput{})
	pulumi.RegisterOutputType(ImagePolicyMapOutput{})
}
