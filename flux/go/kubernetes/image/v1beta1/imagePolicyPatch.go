// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ImagePolicy is the Schema for the imagepolicies API
type ImagePolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ImagePolicySpecPatchPtrOutput   `pulumi:"spec"`
	Status   ImagePolicyStatusPatchPtrOutput `pulumi:"status"`
}

// NewImagePolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewImagePolicyPatch(ctx *pulumi.Context,
	name string, args *ImagePolicyPatchArgs, opts ...pulumi.ResourceOption) (*ImagePolicyPatch, error) {
	if args == nil {
		args = &ImagePolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("image.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("ImagePolicy")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:image.toolkit.fluxcd.io/v1beta2:ImagePolicyPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImagePolicyPatch
	err := ctx.RegisterResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImagePolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImagePolicyPatch gets an existing ImagePolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImagePolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImagePolicyPatchState, opts ...pulumi.ResourceOption) (*ImagePolicyPatch, error) {
	var resource ImagePolicyPatch
	err := ctx.ReadResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImagePolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImagePolicyPatch resources.
type imagePolicyPatchState struct {
}

type ImagePolicyPatchState struct {
}

func (ImagePolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePolicyPatchState)(nil)).Elem()
}

type imagePolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ImagePolicySpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a ImagePolicyPatch resource.
type ImagePolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ImagePolicySpecPatchPtrInput
}

func (ImagePolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imagePolicyPatchArgs)(nil)).Elem()
}

type ImagePolicyPatchInput interface {
	pulumi.Input

	ToImagePolicyPatchOutput() ImagePolicyPatchOutput
	ToImagePolicyPatchOutputWithContext(ctx context.Context) ImagePolicyPatchOutput
}

func (*ImagePolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyPatch)(nil)).Elem()
}

func (i *ImagePolicyPatch) ToImagePolicyPatchOutput() ImagePolicyPatchOutput {
	return i.ToImagePolicyPatchOutputWithContext(context.Background())
}

func (i *ImagePolicyPatch) ToImagePolicyPatchOutputWithContext(ctx context.Context) ImagePolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyPatchOutput)
}

// ImagePolicyPatchArrayInput is an input type that accepts ImagePolicyPatchArray and ImagePolicyPatchArrayOutput values.
// You can construct a concrete instance of `ImagePolicyPatchArrayInput` via:
//
//	ImagePolicyPatchArray{ ImagePolicyPatchArgs{...} }
type ImagePolicyPatchArrayInput interface {
	pulumi.Input

	ToImagePolicyPatchArrayOutput() ImagePolicyPatchArrayOutput
	ToImagePolicyPatchArrayOutputWithContext(context.Context) ImagePolicyPatchArrayOutput
}

type ImagePolicyPatchArray []ImagePolicyPatchInput

func (ImagePolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePolicyPatch)(nil)).Elem()
}

func (i ImagePolicyPatchArray) ToImagePolicyPatchArrayOutput() ImagePolicyPatchArrayOutput {
	return i.ToImagePolicyPatchArrayOutputWithContext(context.Background())
}

func (i ImagePolicyPatchArray) ToImagePolicyPatchArrayOutputWithContext(ctx context.Context) ImagePolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyPatchArrayOutput)
}

// ImagePolicyPatchMapInput is an input type that accepts ImagePolicyPatchMap and ImagePolicyPatchMapOutput values.
// You can construct a concrete instance of `ImagePolicyPatchMapInput` via:
//
//	ImagePolicyPatchMap{ "key": ImagePolicyPatchArgs{...} }
type ImagePolicyPatchMapInput interface {
	pulumi.Input

	ToImagePolicyPatchMapOutput() ImagePolicyPatchMapOutput
	ToImagePolicyPatchMapOutputWithContext(context.Context) ImagePolicyPatchMapOutput
}

type ImagePolicyPatchMap map[string]ImagePolicyPatchInput

func (ImagePolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePolicyPatch)(nil)).Elem()
}

func (i ImagePolicyPatchMap) ToImagePolicyPatchMapOutput() ImagePolicyPatchMapOutput {
	return i.ToImagePolicyPatchMapOutputWithContext(context.Background())
}

func (i ImagePolicyPatchMap) ToImagePolicyPatchMapOutputWithContext(ctx context.Context) ImagePolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePolicyPatchMapOutput)
}

type ImagePolicyPatchOutput struct{ *pulumi.OutputState }

func (ImagePolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImagePolicyPatch)(nil)).Elem()
}

func (o ImagePolicyPatchOutput) ToImagePolicyPatchOutput() ImagePolicyPatchOutput {
	return o
}

func (o ImagePolicyPatchOutput) ToImagePolicyPatchOutputWithContext(ctx context.Context) ImagePolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImagePolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImagePolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImagePolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImagePolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ImagePolicyPatchOutput) Spec() ImagePolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicyPatch) ImagePolicySpecPatchPtrOutput { return v.Spec }).(ImagePolicySpecPatchPtrOutput)
}

func (o ImagePolicyPatchOutput) Status() ImagePolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v *ImagePolicyPatch) ImagePolicyStatusPatchPtrOutput { return v.Status }).(ImagePolicyStatusPatchPtrOutput)
}

type ImagePolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (ImagePolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImagePolicyPatch)(nil)).Elem()
}

func (o ImagePolicyPatchArrayOutput) ToImagePolicyPatchArrayOutput() ImagePolicyPatchArrayOutput {
	return o
}

func (o ImagePolicyPatchArrayOutput) ToImagePolicyPatchArrayOutputWithContext(ctx context.Context) ImagePolicyPatchArrayOutput {
	return o
}

func (o ImagePolicyPatchArrayOutput) Index(i pulumi.IntInput) ImagePolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImagePolicyPatch {
		return vs[0].([]*ImagePolicyPatch)[vs[1].(int)]
	}).(ImagePolicyPatchOutput)
}

type ImagePolicyPatchMapOutput struct{ *pulumi.OutputState }

func (ImagePolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImagePolicyPatch)(nil)).Elem()
}

func (o ImagePolicyPatchMapOutput) ToImagePolicyPatchMapOutput() ImagePolicyPatchMapOutput {
	return o
}

func (o ImagePolicyPatchMapOutput) ToImagePolicyPatchMapOutputWithContext(ctx context.Context) ImagePolicyPatchMapOutput {
	return o
}

func (o ImagePolicyPatchMapOutput) MapIndex(k pulumi.StringInput) ImagePolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImagePolicyPatch {
		return vs[0].(map[string]*ImagePolicyPatch)[vs[1].(string)]
	}).(ImagePolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyPatchInput)(nil)).Elem(), &ImagePolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyPatchArrayInput)(nil)).Elem(), ImagePolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePolicyPatchMapInput)(nil)).Elem(), ImagePolicyPatchMap{})
	pulumi.RegisterOutputType(ImagePolicyPatchOutput{})
	pulumi.RegisterOutputType(ImagePolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(ImagePolicyPatchMapOutput{})
}
