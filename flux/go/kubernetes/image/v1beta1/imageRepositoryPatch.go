// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ImageRepository is the Schema for the imagerepositories API
type ImageRepositoryPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput     `pulumi:"metadata"`
	Spec     ImageRepositorySpecPatchPtrOutput   `pulumi:"spec"`
	Status   ImageRepositoryStatusPatchPtrOutput `pulumi:"status"`
}

// NewImageRepositoryPatch registers a new resource with the given unique name, arguments, and options.
func NewImageRepositoryPatch(ctx *pulumi.Context,
	name string, args *ImageRepositoryPatchArgs, opts ...pulumi.ResourceOption) (*ImageRepositoryPatch, error) {
	if args == nil {
		args = &ImageRepositoryPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("image.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("ImageRepository")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:image.toolkit.fluxcd.io/v1beta2:ImageRepositoryPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ImageRepositoryPatch
	err := ctx.RegisterResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImageRepositoryPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRepositoryPatch gets an existing ImageRepositoryPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRepositoryPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRepositoryPatchState, opts ...pulumi.ResourceOption) (*ImageRepositoryPatch, error) {
	var resource ImageRepositoryPatch
	err := ctx.ReadResource("kubernetes:image.toolkit.fluxcd.io/v1beta1:ImageRepositoryPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRepositoryPatch resources.
type imageRepositoryPatchState struct {
}

type ImageRepositoryPatchState struct {
}

func (ImageRepositoryPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRepositoryPatchState)(nil)).Elem()
}

type imageRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *ImageRepositorySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ImageRepositoryPatch resource.
type ImageRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ImageRepositorySpecPatchPtrInput
}

func (ImageRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRepositoryPatchArgs)(nil)).Elem()
}

type ImageRepositoryPatchInput interface {
	pulumi.Input

	ToImageRepositoryPatchOutput() ImageRepositoryPatchOutput
	ToImageRepositoryPatchOutputWithContext(ctx context.Context) ImageRepositoryPatchOutput
}

func (*ImageRepositoryPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryPatch)(nil)).Elem()
}

func (i *ImageRepositoryPatch) ToImageRepositoryPatchOutput() ImageRepositoryPatchOutput {
	return i.ToImageRepositoryPatchOutputWithContext(context.Background())
}

func (i *ImageRepositoryPatch) ToImageRepositoryPatchOutputWithContext(ctx context.Context) ImageRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryPatchOutput)
}

// ImageRepositoryPatchArrayInput is an input type that accepts ImageRepositoryPatchArray and ImageRepositoryPatchArrayOutput values.
// You can construct a concrete instance of `ImageRepositoryPatchArrayInput` via:
//
//	ImageRepositoryPatchArray{ ImageRepositoryPatchArgs{...} }
type ImageRepositoryPatchArrayInput interface {
	pulumi.Input

	ToImageRepositoryPatchArrayOutput() ImageRepositoryPatchArrayOutput
	ToImageRepositoryPatchArrayOutputWithContext(context.Context) ImageRepositoryPatchArrayOutput
}

type ImageRepositoryPatchArray []ImageRepositoryPatchInput

func (ImageRepositoryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRepositoryPatch)(nil)).Elem()
}

func (i ImageRepositoryPatchArray) ToImageRepositoryPatchArrayOutput() ImageRepositoryPatchArrayOutput {
	return i.ToImageRepositoryPatchArrayOutputWithContext(context.Background())
}

func (i ImageRepositoryPatchArray) ToImageRepositoryPatchArrayOutputWithContext(ctx context.Context) ImageRepositoryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryPatchArrayOutput)
}

// ImageRepositoryPatchMapInput is an input type that accepts ImageRepositoryPatchMap and ImageRepositoryPatchMapOutput values.
// You can construct a concrete instance of `ImageRepositoryPatchMapInput` via:
//
//	ImageRepositoryPatchMap{ "key": ImageRepositoryPatchArgs{...} }
type ImageRepositoryPatchMapInput interface {
	pulumi.Input

	ToImageRepositoryPatchMapOutput() ImageRepositoryPatchMapOutput
	ToImageRepositoryPatchMapOutputWithContext(context.Context) ImageRepositoryPatchMapOutput
}

type ImageRepositoryPatchMap map[string]ImageRepositoryPatchInput

func (ImageRepositoryPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRepositoryPatch)(nil)).Elem()
}

func (i ImageRepositoryPatchMap) ToImageRepositoryPatchMapOutput() ImageRepositoryPatchMapOutput {
	return i.ToImageRepositoryPatchMapOutputWithContext(context.Background())
}

func (i ImageRepositoryPatchMap) ToImageRepositoryPatchMapOutputWithContext(ctx context.Context) ImageRepositoryPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryPatchMapOutput)
}

type ImageRepositoryPatchOutput struct{ *pulumi.OutputState }

func (ImageRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryPatch)(nil)).Elem()
}

func (o ImageRepositoryPatchOutput) ToImageRepositoryPatchOutput() ImageRepositoryPatchOutput {
	return o
}

func (o ImageRepositoryPatchOutput) ToImageRepositoryPatchOutputWithContext(ctx context.Context) ImageRepositoryPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ImageRepositoryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ImageRepositoryPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ImageRepositoryPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ImageRepositoryPatchOutput) Spec() ImageRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryPatch) ImageRepositorySpecPatchPtrOutput { return v.Spec }).(ImageRepositorySpecPatchPtrOutput)
}

func (o ImageRepositoryPatchOutput) Status() ImageRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryPatch) ImageRepositoryStatusPatchPtrOutput { return v.Status }).(ImageRepositoryStatusPatchPtrOutput)
}

type ImageRepositoryPatchArrayOutput struct{ *pulumi.OutputState }

func (ImageRepositoryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRepositoryPatch)(nil)).Elem()
}

func (o ImageRepositoryPatchArrayOutput) ToImageRepositoryPatchArrayOutput() ImageRepositoryPatchArrayOutput {
	return o
}

func (o ImageRepositoryPatchArrayOutput) ToImageRepositoryPatchArrayOutputWithContext(ctx context.Context) ImageRepositoryPatchArrayOutput {
	return o
}

func (o ImageRepositoryPatchArrayOutput) Index(i pulumi.IntInput) ImageRepositoryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageRepositoryPatch {
		return vs[0].([]*ImageRepositoryPatch)[vs[1].(int)]
	}).(ImageRepositoryPatchOutput)
}

type ImageRepositoryPatchMapOutput struct{ *pulumi.OutputState }

func (ImageRepositoryPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRepositoryPatch)(nil)).Elem()
}

func (o ImageRepositoryPatchMapOutput) ToImageRepositoryPatchMapOutput() ImageRepositoryPatchMapOutput {
	return o
}

func (o ImageRepositoryPatchMapOutput) ToImageRepositoryPatchMapOutputWithContext(ctx context.Context) ImageRepositoryPatchMapOutput {
	return o
}

func (o ImageRepositoryPatchMapOutput) MapIndex(k pulumi.StringInput) ImageRepositoryPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageRepositoryPatch {
		return vs[0].(map[string]*ImageRepositoryPatch)[vs[1].(string)]
	}).(ImageRepositoryPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryPatchInput)(nil)).Elem(), &ImageRepositoryPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryPatchArrayInput)(nil)).Elem(), ImageRepositoryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRepositoryPatchMapInput)(nil)).Elem(), ImageRepositoryPatchMap{})
	pulumi.RegisterOutputType(ImageRepositoryPatchOutput{})
	pulumi.RegisterOutputType(ImageRepositoryPatchArrayOutput{})
	pulumi.RegisterOutputType(ImageRepositoryPatchMapOutput{})
}
