// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput   `pulumi:"metadata"`
	Spec     GitRepositorySpecPatchPtrOutput   `pulumi:"spec"`
	Status   GitRepositoryStatusPatchPtrOutput `pulumi:"status"`
}

// NewGitRepositoryPatch registers a new resource with the given unique name, arguments, and options.
func NewGitRepositoryPatch(ctx *pulumi.Context,
	name string, args *GitRepositoryPatchArgs, opts ...pulumi.ResourceOption) (*GitRepositoryPatch, error) {
	if args == nil {
		args = &GitRepositoryPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1")
	args.Kind = pulumi.StringPtr("GitRepository")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta1:GitRepositoryPatch"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta2:GitRepositoryPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GitRepositoryPatch
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1:GitRepositoryPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitRepositoryPatch gets an existing GitRepositoryPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitRepositoryPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitRepositoryPatchState, opts ...pulumi.ResourceOption) (*GitRepositoryPatch, error) {
	var resource GitRepositoryPatch
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1:GitRepositoryPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitRepositoryPatch resources.
type gitRepositoryPatchState struct {
}

type GitRepositoryPatchState struct {
}

func (GitRepositoryPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryPatchState)(nil)).Elem()
}

type gitRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *GitRepositorySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a GitRepositoryPatch resource.
type GitRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     GitRepositorySpecPatchPtrInput
}

func (GitRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryPatchArgs)(nil)).Elem()
}

type GitRepositoryPatchInput interface {
	pulumi.Input

	ToGitRepositoryPatchOutput() GitRepositoryPatchOutput
	ToGitRepositoryPatchOutputWithContext(ctx context.Context) GitRepositoryPatchOutput
}

func (*GitRepositoryPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryPatch)(nil)).Elem()
}

func (i *GitRepositoryPatch) ToGitRepositoryPatchOutput() GitRepositoryPatchOutput {
	return i.ToGitRepositoryPatchOutputWithContext(context.Background())
}

func (i *GitRepositoryPatch) ToGitRepositoryPatchOutputWithContext(ctx context.Context) GitRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryPatchOutput)
}

// GitRepositoryPatchArrayInput is an input type that accepts GitRepositoryPatchArray and GitRepositoryPatchArrayOutput values.
// You can construct a concrete instance of `GitRepositoryPatchArrayInput` via:
//
//	GitRepositoryPatchArray{ GitRepositoryPatchArgs{...} }
type GitRepositoryPatchArrayInput interface {
	pulumi.Input

	ToGitRepositoryPatchArrayOutput() GitRepositoryPatchArrayOutput
	ToGitRepositoryPatchArrayOutputWithContext(context.Context) GitRepositoryPatchArrayOutput
}

type GitRepositoryPatchArray []GitRepositoryPatchInput

func (GitRepositoryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepositoryPatch)(nil)).Elem()
}

func (i GitRepositoryPatchArray) ToGitRepositoryPatchArrayOutput() GitRepositoryPatchArrayOutput {
	return i.ToGitRepositoryPatchArrayOutputWithContext(context.Background())
}

func (i GitRepositoryPatchArray) ToGitRepositoryPatchArrayOutputWithContext(ctx context.Context) GitRepositoryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryPatchArrayOutput)
}

// GitRepositoryPatchMapInput is an input type that accepts GitRepositoryPatchMap and GitRepositoryPatchMapOutput values.
// You can construct a concrete instance of `GitRepositoryPatchMapInput` via:
//
//	GitRepositoryPatchMap{ "key": GitRepositoryPatchArgs{...} }
type GitRepositoryPatchMapInput interface {
	pulumi.Input

	ToGitRepositoryPatchMapOutput() GitRepositoryPatchMapOutput
	ToGitRepositoryPatchMapOutputWithContext(context.Context) GitRepositoryPatchMapOutput
}

type GitRepositoryPatchMap map[string]GitRepositoryPatchInput

func (GitRepositoryPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepositoryPatch)(nil)).Elem()
}

func (i GitRepositoryPatchMap) ToGitRepositoryPatchMapOutput() GitRepositoryPatchMapOutput {
	return i.ToGitRepositoryPatchMapOutputWithContext(context.Background())
}

func (i GitRepositoryPatchMap) ToGitRepositoryPatchMapOutputWithContext(ctx context.Context) GitRepositoryPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryPatchMapOutput)
}

type GitRepositoryPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryPatch)(nil)).Elem()
}

func (o GitRepositoryPatchOutput) ToGitRepositoryPatchOutput() GitRepositoryPatchOutput {
	return o
}

func (o GitRepositoryPatchOutput) ToGitRepositoryPatchOutputWithContext(ctx context.Context) GitRepositoryPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GitRepositoryPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositoryPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GitRepositoryPatchOutput) Spec() GitRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositoryPatch) GitRepositorySpecPatchPtrOutput { return v.Spec }).(GitRepositorySpecPatchPtrOutput)
}

func (o GitRepositoryPatchOutput) Status() GitRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositoryPatch) GitRepositoryStatusPatchPtrOutput { return v.Status }).(GitRepositoryStatusPatchPtrOutput)
}

type GitRepositoryPatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepositoryPatch)(nil)).Elem()
}

func (o GitRepositoryPatchArrayOutput) ToGitRepositoryPatchArrayOutput() GitRepositoryPatchArrayOutput {
	return o
}

func (o GitRepositoryPatchArrayOutput) ToGitRepositoryPatchArrayOutputWithContext(ctx context.Context) GitRepositoryPatchArrayOutput {
	return o
}

func (o GitRepositoryPatchArrayOutput) Index(i pulumi.IntInput) GitRepositoryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitRepositoryPatch {
		return vs[0].([]*GitRepositoryPatch)[vs[1].(int)]
	}).(GitRepositoryPatchOutput)
}

type GitRepositoryPatchMapOutput struct{ *pulumi.OutputState }

func (GitRepositoryPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepositoryPatch)(nil)).Elem()
}

func (o GitRepositoryPatchMapOutput) ToGitRepositoryPatchMapOutput() GitRepositoryPatchMapOutput {
	return o
}

func (o GitRepositoryPatchMapOutput) ToGitRepositoryPatchMapOutputWithContext(ctx context.Context) GitRepositoryPatchMapOutput {
	return o
}

func (o GitRepositoryPatchMapOutput) MapIndex(k pulumi.StringInput) GitRepositoryPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitRepositoryPatch {
		return vs[0].(map[string]*GitRepositoryPatch)[vs[1].(string)]
	}).(GitRepositoryPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryPatchInput)(nil)).Elem(), &GitRepositoryPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryPatchArrayInput)(nil)).Elem(), GitRepositoryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryPatchMapInput)(nil)).Elem(), GitRepositoryPatchMap{})
	pulumi.RegisterOutputType(GitRepositoryPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryPatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryPatchMapOutput{})
}
