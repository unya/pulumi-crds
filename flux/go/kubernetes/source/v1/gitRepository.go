// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GitRepository is the Schema for the gitrepositories API.
type GitRepository struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput      `pulumi:"metadata"`
	Spec     GitRepositorySpecOutput      `pulumi:"spec"`
	Status   GitRepositoryStatusPtrOutput `pulumi:"status"`
}

// NewGitRepository registers a new resource with the given unique name, arguments, and options.
func NewGitRepository(ctx *pulumi.Context,
	name string, args *GitRepositoryArgs, opts ...pulumi.ResourceOption) (*GitRepository, error) {
	if args == nil {
		args = &GitRepositoryArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1")
	args.Kind = pulumi.StringPtr("GitRepository")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta1:GitRepository"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta2:GitRepository"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GitRepository
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1:GitRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitRepository gets an existing GitRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitRepositoryState, opts ...pulumi.ResourceOption) (*GitRepository, error) {
	var resource GitRepository
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1:GitRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitRepository resources.
type gitRepositoryState struct {
}

type GitRepositoryState struct {
}

func (GitRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryState)(nil)).Elem()
}

type gitRepositoryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *GitRepositorySpec `pulumi:"spec"`
}

// The set of arguments for constructing a GitRepository resource.
type GitRepositoryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     GitRepositorySpecPtrInput
}

func (GitRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryArgs)(nil)).Elem()
}

type GitRepositoryInput interface {
	pulumi.Input

	ToGitRepositoryOutput() GitRepositoryOutput
	ToGitRepositoryOutputWithContext(ctx context.Context) GitRepositoryOutput
}

func (*GitRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepository)(nil)).Elem()
}

func (i *GitRepository) ToGitRepositoryOutput() GitRepositoryOutput {
	return i.ToGitRepositoryOutputWithContext(context.Background())
}

func (i *GitRepository) ToGitRepositoryOutputWithContext(ctx context.Context) GitRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryOutput)
}

// GitRepositoryArrayInput is an input type that accepts GitRepositoryArray and GitRepositoryArrayOutput values.
// You can construct a concrete instance of `GitRepositoryArrayInput` via:
//
//	GitRepositoryArray{ GitRepositoryArgs{...} }
type GitRepositoryArrayInput interface {
	pulumi.Input

	ToGitRepositoryArrayOutput() GitRepositoryArrayOutput
	ToGitRepositoryArrayOutputWithContext(context.Context) GitRepositoryArrayOutput
}

type GitRepositoryArray []GitRepositoryInput

func (GitRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepository)(nil)).Elem()
}

func (i GitRepositoryArray) ToGitRepositoryArrayOutput() GitRepositoryArrayOutput {
	return i.ToGitRepositoryArrayOutputWithContext(context.Background())
}

func (i GitRepositoryArray) ToGitRepositoryArrayOutputWithContext(ctx context.Context) GitRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryArrayOutput)
}

// GitRepositoryMapInput is an input type that accepts GitRepositoryMap and GitRepositoryMapOutput values.
// You can construct a concrete instance of `GitRepositoryMapInput` via:
//
//	GitRepositoryMap{ "key": GitRepositoryArgs{...} }
type GitRepositoryMapInput interface {
	pulumi.Input

	ToGitRepositoryMapOutput() GitRepositoryMapOutput
	ToGitRepositoryMapOutputWithContext(context.Context) GitRepositoryMapOutput
}

type GitRepositoryMap map[string]GitRepositoryInput

func (GitRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepository)(nil)).Elem()
}

func (i GitRepositoryMap) ToGitRepositoryMapOutput() GitRepositoryMapOutput {
	return i.ToGitRepositoryMapOutputWithContext(context.Background())
}

func (i GitRepositoryMap) ToGitRepositoryMapOutputWithContext(ctx context.Context) GitRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryMapOutput)
}

type GitRepositoryOutput struct{ *pulumi.OutputState }

func (GitRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepository)(nil)).Elem()
}

func (o GitRepositoryOutput) ToGitRepositoryOutput() GitRepositoryOutput {
	return o
}

func (o GitRepositoryOutput) ToGitRepositoryOutputWithContext(ctx context.Context) GitRepositoryOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepository) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GitRepositoryOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *GitRepository) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o GitRepositoryOutput) Spec() GitRepositorySpecOutput {
	return o.ApplyT(func(v *GitRepository) GitRepositorySpecOutput { return v.Spec }).(GitRepositorySpecOutput)
}

func (o GitRepositoryOutput) Status() GitRepositoryStatusPtrOutput {
	return o.ApplyT(func(v *GitRepository) GitRepositoryStatusPtrOutput { return v.Status }).(GitRepositoryStatusPtrOutput)
}

type GitRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepository)(nil)).Elem()
}

func (o GitRepositoryArrayOutput) ToGitRepositoryArrayOutput() GitRepositoryArrayOutput {
	return o
}

func (o GitRepositoryArrayOutput) ToGitRepositoryArrayOutputWithContext(ctx context.Context) GitRepositoryArrayOutput {
	return o
}

func (o GitRepositoryArrayOutput) Index(i pulumi.IntInput) GitRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitRepository {
		return vs[0].([]*GitRepository)[vs[1].(int)]
	}).(GitRepositoryOutput)
}

type GitRepositoryMapOutput struct{ *pulumi.OutputState }

func (GitRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepository)(nil)).Elem()
}

func (o GitRepositoryMapOutput) ToGitRepositoryMapOutput() GitRepositoryMapOutput {
	return o
}

func (o GitRepositoryMapOutput) ToGitRepositoryMapOutputWithContext(ctx context.Context) GitRepositoryMapOutput {
	return o
}

func (o GitRepositoryMapOutput) MapIndex(k pulumi.StringInput) GitRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitRepository {
		return vs[0].(map[string]*GitRepository)[vs[1].(string)]
	}).(GitRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryInput)(nil)).Elem(), &GitRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryArrayInput)(nil)).Elem(), GitRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryMapInput)(nil)).Elem(), GitRepositoryMap{})
	pulumi.RegisterOutputType(GitRepositoryOutput{})
	pulumi.RegisterOutputType(GitRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryMapOutput{})
}
