// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Bucket is the Schema for the buckets API.
type BucketType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *BucketSpec        `pulumi:"spec"`
	Status   *BucketStatus      `pulumi:"status"`
}

// BucketTypeInput is an input type that accepts BucketTypeArgs and BucketTypeOutput values.
// You can construct a concrete instance of `BucketTypeInput` via:
//
//	BucketTypeArgs{...}
type BucketTypeInput interface {
	pulumi.Input

	ToBucketTypeOutput() BucketTypeOutput
	ToBucketTypeOutputWithContext(context.Context) BucketTypeOutput
}

// Bucket is the Schema for the buckets API.
type BucketTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     BucketSpecPtrInput        `pulumi:"spec"`
	Status   BucketStatusPtrInput      `pulumi:"status"`
}

func (BucketTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketType)(nil)).Elem()
}

func (i BucketTypeArgs) ToBucketTypeOutput() BucketTypeOutput {
	return i.ToBucketTypeOutputWithContext(context.Background())
}

func (i BucketTypeArgs) ToBucketTypeOutputWithContext(ctx context.Context) BucketTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTypeOutput)
}

// BucketTypeArrayInput is an input type that accepts BucketTypeArray and BucketTypeArrayOutput values.
// You can construct a concrete instance of `BucketTypeArrayInput` via:
//
//	BucketTypeArray{ BucketTypeArgs{...} }
type BucketTypeArrayInput interface {
	pulumi.Input

	ToBucketTypeArrayOutput() BucketTypeArrayOutput
	ToBucketTypeArrayOutputWithContext(context.Context) BucketTypeArrayOutput
}

type BucketTypeArray []BucketTypeInput

func (BucketTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketType)(nil)).Elem()
}

func (i BucketTypeArray) ToBucketTypeArrayOutput() BucketTypeArrayOutput {
	return i.ToBucketTypeArrayOutputWithContext(context.Background())
}

func (i BucketTypeArray) ToBucketTypeArrayOutputWithContext(ctx context.Context) BucketTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTypeArrayOutput)
}

// Bucket is the Schema for the buckets API.
type BucketTypeOutput struct{ *pulumi.OutputState }

func (BucketTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketType)(nil)).Elem()
}

func (o BucketTypeOutput) ToBucketTypeOutput() BucketTypeOutput {
	return o
}

func (o BucketTypeOutput) ToBucketTypeOutputWithContext(ctx context.Context) BucketTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BucketTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BucketType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o BucketTypeOutput) Spec() BucketSpecPtrOutput {
	return o.ApplyT(func(v BucketType) *BucketSpec { return v.Spec }).(BucketSpecPtrOutput)
}

func (o BucketTypeOutput) Status() BucketStatusPtrOutput {
	return o.ApplyT(func(v BucketType) *BucketStatus { return v.Status }).(BucketStatusPtrOutput)
}

type BucketTypeArrayOutput struct{ *pulumi.OutputState }

func (BucketTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketType)(nil)).Elem()
}

func (o BucketTypeArrayOutput) ToBucketTypeArrayOutput() BucketTypeArrayOutput {
	return o
}

func (o BucketTypeArrayOutput) ToBucketTypeArrayOutputWithContext(ctx context.Context) BucketTypeArrayOutput {
	return o
}

func (o BucketTypeArrayOutput) Index(i pulumi.IntInput) BucketTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketType {
		return vs[0].([]BucketType)[vs[1].(int)]
	}).(BucketTypeOutput)
}

// BucketList is a list of Bucket
type BucketListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []BucketType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// BucketListTypeInput is an input type that accepts BucketListTypeArgs and BucketListTypeOutput values.
// You can construct a concrete instance of `BucketListTypeInput` via:
//
//	BucketListTypeArgs{...}
type BucketListTypeInput interface {
	pulumi.Input

	ToBucketListTypeOutput() BucketListTypeOutput
	ToBucketListTypeOutputWithContext(context.Context) BucketListTypeOutput
}

// BucketList is a list of Bucket
type BucketListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BucketTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (BucketListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketListType)(nil)).Elem()
}

func (i BucketListTypeArgs) ToBucketListTypeOutput() BucketListTypeOutput {
	return i.ToBucketListTypeOutputWithContext(context.Background())
}

func (i BucketListTypeArgs) ToBucketListTypeOutputWithContext(ctx context.Context) BucketListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketListTypeOutput)
}

// BucketList is a list of Bucket
type BucketListTypeOutput struct{ *pulumi.OutputState }

func (BucketListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketListType)(nil)).Elem()
}

func (o BucketListTypeOutput) ToBucketListTypeOutput() BucketListTypeOutput {
	return o
}

func (o BucketListTypeOutput) ToBucketListTypeOutputWithContext(ctx context.Context) BucketListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o BucketListTypeOutput) Items() BucketTypeArrayOutput {
	return o.ApplyT(func(v BucketListType) []BucketType { return v.Items }).(BucketTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v BucketListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Bucket is the Schema for the buckets API.
type BucketPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *BucketSpecPatch        `pulumi:"spec"`
	Status   *BucketStatusPatch      `pulumi:"status"`
}

// BucketPatchTypeInput is an input type that accepts BucketPatchTypeArgs and BucketPatchTypeOutput values.
// You can construct a concrete instance of `BucketPatchTypeInput` via:
//
//	BucketPatchTypeArgs{...}
type BucketPatchTypeInput interface {
	pulumi.Input

	ToBucketPatchTypeOutput() BucketPatchTypeOutput
	ToBucketPatchTypeOutputWithContext(context.Context) BucketPatchTypeOutput
}

// Bucket is the Schema for the buckets API.
type BucketPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     BucketSpecPatchPtrInput        `pulumi:"spec"`
	Status   BucketStatusPatchPtrInput      `pulumi:"status"`
}

func (BucketPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketPatchType)(nil)).Elem()
}

func (i BucketPatchTypeArgs) ToBucketPatchTypeOutput() BucketPatchTypeOutput {
	return i.ToBucketPatchTypeOutputWithContext(context.Background())
}

func (i BucketPatchTypeArgs) ToBucketPatchTypeOutputWithContext(ctx context.Context) BucketPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPatchTypeOutput)
}

// Bucket is the Schema for the buckets API.
type BucketPatchTypeOutput struct{ *pulumi.OutputState }

func (BucketPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketPatchType)(nil)).Elem()
}

func (o BucketPatchTypeOutput) ToBucketPatchTypeOutput() BucketPatchTypeOutput {
	return o
}

func (o BucketPatchTypeOutput) ToBucketPatchTypeOutputWithContext(ctx context.Context) BucketPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BucketPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o BucketPatchTypeOutput) Spec() BucketSpecPatchPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *BucketSpecPatch { return v.Spec }).(BucketSpecPatchPtrOutput)
}

func (o BucketPatchTypeOutput) Status() BucketStatusPatchPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *BucketStatusPatch { return v.Status }).(BucketStatusPatchPtrOutput)
}

// BucketSpec specifies the required configuration to produce an Artifact for
// an object storage bucket.
type BucketSpec struct {
	// BucketName is the name of the object storage bucket.
	BucketName    *string                  `pulumi:"bucketName"`
	CertSecretRef *BucketSpecCertSecretRef `pulumi:"certSecretRef"`
	// Endpoint is the object storage address the BucketName is located at.
	Endpoint *string `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP Endpoint.
	Insecure *bool `pulumi:"insecure"`
	// Interval at which the Bucket Endpoint is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// Prefix to use for server-side filtering of files in the Bucket.
	Prefix *string `pulumi:"prefix"`
	// Provider of the object storage bucket.
	// Defaults to 'generic', which expects an S3 (API) compatible object
	// storage.
	Provider       *string                   `pulumi:"provider"`
	ProxySecretRef *BucketSpecProxySecretRef `pulumi:"proxySecretRef"`
	// Region of the Endpoint where the BucketName is located in.
	Region    *string              `pulumi:"region"`
	SecretRef *BucketSpecSecretRef `pulumi:"secretRef"`
	Sts       *BucketSpecSts       `pulumi:"sts"`
	// Suspend tells the controller to suspend the reconciliation of this
	// Bucket.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for fetch operations, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
}

// BucketSpecInput is an input type that accepts BucketSpecArgs and BucketSpecOutput values.
// You can construct a concrete instance of `BucketSpecInput` via:
//
//	BucketSpecArgs{...}
type BucketSpecInput interface {
	pulumi.Input

	ToBucketSpecOutput() BucketSpecOutput
	ToBucketSpecOutputWithContext(context.Context) BucketSpecOutput
}

// BucketSpec specifies the required configuration to produce an Artifact for
// an object storage bucket.
type BucketSpecArgs struct {
	// BucketName is the name of the object storage bucket.
	BucketName    pulumi.StringPtrInput           `pulumi:"bucketName"`
	CertSecretRef BucketSpecCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// Endpoint is the object storage address the BucketName is located at.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP Endpoint.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval at which the Bucket Endpoint is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Prefix to use for server-side filtering of files in the Bucket.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// Provider of the object storage bucket.
	// Defaults to 'generic', which expects an S3 (API) compatible object
	// storage.
	Provider       pulumi.StringPtrInput            `pulumi:"provider"`
	ProxySecretRef BucketSpecProxySecretRefPtrInput `pulumi:"proxySecretRef"`
	// Region of the Endpoint where the BucketName is located in.
	Region    pulumi.StringPtrInput       `pulumi:"region"`
	SecretRef BucketSpecSecretRefPtrInput `pulumi:"secretRef"`
	Sts       BucketSpecStsPtrInput       `pulumi:"sts"`
	// Suspend tells the controller to suspend the reconciliation of this
	// Bucket.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for fetch operations, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BucketSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpec)(nil)).Elem()
}

func (i BucketSpecArgs) ToBucketSpecOutput() BucketSpecOutput {
	return i.ToBucketSpecOutputWithContext(context.Background())
}

func (i BucketSpecArgs) ToBucketSpecOutputWithContext(ctx context.Context) BucketSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecOutput)
}

func (i BucketSpecArgs) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return i.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (i BucketSpecArgs) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecOutput).ToBucketSpecPtrOutputWithContext(ctx)
}

// BucketSpecPtrInput is an input type that accepts BucketSpecArgs, BucketSpecPtr and BucketSpecPtrOutput values.
// You can construct a concrete instance of `BucketSpecPtrInput` via:
//
//	        BucketSpecArgs{...}
//
//	or:
//
//	        nil
type BucketSpecPtrInput interface {
	pulumi.Input

	ToBucketSpecPtrOutput() BucketSpecPtrOutput
	ToBucketSpecPtrOutputWithContext(context.Context) BucketSpecPtrOutput
}

type bucketSpecPtrType BucketSpecArgs

func BucketSpecPtr(v *BucketSpecArgs) BucketSpecPtrInput {
	return (*bucketSpecPtrType)(v)
}

func (*bucketSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpec)(nil)).Elem()
}

func (i *bucketSpecPtrType) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return i.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (i *bucketSpecPtrType) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPtrOutput)
}

// BucketSpec specifies the required configuration to produce an Artifact for
// an object storage bucket.
type BucketSpecOutput struct{ *pulumi.OutputState }

func (BucketSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpec)(nil)).Elem()
}

func (o BucketSpecOutput) ToBucketSpecOutput() BucketSpecOutput {
	return o
}

func (o BucketSpecOutput) ToBucketSpecOutputWithContext(ctx context.Context) BucketSpecOutput {
	return o
}

func (o BucketSpecOutput) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return o.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (o BucketSpecOutput) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpec) *BucketSpec {
		return &v
	}).(BucketSpecPtrOutput)
}

// BucketName is the name of the object storage bucket.
func (o BucketSpecOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o BucketSpecOutput) CertSecretRef() BucketSpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecCertSecretRef { return v.CertSecretRef }).(BucketSpecCertSecretRefPtrOutput)
}

// Endpoint is the object storage address the BucketName is located at.
func (o BucketSpecOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP Endpoint.
func (o BucketSpecOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpec) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval at which the Bucket Endpoint is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o BucketSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Prefix to use for server-side filtering of files in the Bucket.
func (o BucketSpecOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Provider of the object storage bucket.
// Defaults to 'generic', which expects an S3 (API) compatible object
// storage.
func (o BucketSpecOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o BucketSpecOutput) ProxySecretRef() BucketSpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecProxySecretRef { return v.ProxySecretRef }).(BucketSpecProxySecretRefPtrOutput)
}

// Region of the Endpoint where the BucketName is located in.
func (o BucketSpecOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o BucketSpecOutput) SecretRef() BucketSpecSecretRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecSecretRef { return v.SecretRef }).(BucketSpecSecretRefPtrOutput)
}

func (o BucketSpecOutput) Sts() BucketSpecStsPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecSts { return v.Sts }).(BucketSpecStsPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// Bucket.
func (o BucketSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for fetch operations, defaults to 60s.
func (o BucketSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BucketSpecPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpec)(nil)).Elem()
}

func (o BucketSpecPtrOutput) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return o
}

func (o BucketSpecPtrOutput) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return o
}

func (o BucketSpecPtrOutput) Elem() BucketSpecOutput {
	return o.ApplyT(func(v *BucketSpec) BucketSpec {
		if v != nil {
			return *v
		}
		var ret BucketSpec
		return ret
	}).(BucketSpecOutput)
}

// BucketName is the name of the object storage bucket.
func (o BucketSpecPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPtrOutput) CertSecretRef() BucketSpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(BucketSpecCertSecretRefPtrOutput)
}

// Endpoint is the object storage address the BucketName is located at.
func (o BucketSpecPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP Endpoint.
func (o BucketSpecPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the Bucket Endpoint is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o BucketSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Prefix to use for server-side filtering of files in the Bucket.
func (o BucketSpecPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// Provider of the object storage bucket.
// Defaults to 'generic', which expects an S3 (API) compatible object
// storage.
func (o BucketSpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPtrOutput) ProxySecretRef() BucketSpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecProxySecretRef {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(BucketSpecProxySecretRefPtrOutput)
}

// Region of the Endpoint where the BucketName is located in.
func (o BucketSpecPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPtrOutput) SecretRef() BucketSpecSecretRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(BucketSpecSecretRefPtrOutput)
}

func (o BucketSpecPtrOutput) Sts() BucketSpecStsPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecSts {
		if v == nil {
			return nil
		}
		return v.Sts
	}).(BucketSpecStsPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// Bucket.
func (o BucketSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for fetch operations, defaults to 60s.
func (o BucketSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// bucket. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `generic` provider.
type BucketSpecCertSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecCertSecretRefInput is an input type that accepts BucketSpecCertSecretRefArgs and BucketSpecCertSecretRefOutput values.
// You can construct a concrete instance of `BucketSpecCertSecretRefInput` via:
//
//	BucketSpecCertSecretRefArgs{...}
type BucketSpecCertSecretRefInput interface {
	pulumi.Input

	ToBucketSpecCertSecretRefOutput() BucketSpecCertSecretRefOutput
	ToBucketSpecCertSecretRefOutputWithContext(context.Context) BucketSpecCertSecretRefOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// bucket. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `generic` provider.
type BucketSpecCertSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecCertSecretRef)(nil)).Elem()
}

func (i BucketSpecCertSecretRefArgs) ToBucketSpecCertSecretRefOutput() BucketSpecCertSecretRefOutput {
	return i.ToBucketSpecCertSecretRefOutputWithContext(context.Background())
}

func (i BucketSpecCertSecretRefArgs) ToBucketSpecCertSecretRefOutputWithContext(ctx context.Context) BucketSpecCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecCertSecretRefOutput)
}

func (i BucketSpecCertSecretRefArgs) ToBucketSpecCertSecretRefPtrOutput() BucketSpecCertSecretRefPtrOutput {
	return i.ToBucketSpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecCertSecretRefArgs) ToBucketSpecCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecCertSecretRefOutput).ToBucketSpecCertSecretRefPtrOutputWithContext(ctx)
}

// BucketSpecCertSecretRefPtrInput is an input type that accepts BucketSpecCertSecretRefArgs, BucketSpecCertSecretRefPtr and BucketSpecCertSecretRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecCertSecretRefPtrInput` via:
//
//	        BucketSpecCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type BucketSpecCertSecretRefPtrInput interface {
	pulumi.Input

	ToBucketSpecCertSecretRefPtrOutput() BucketSpecCertSecretRefPtrOutput
	ToBucketSpecCertSecretRefPtrOutputWithContext(context.Context) BucketSpecCertSecretRefPtrOutput
}

type bucketSpecCertSecretRefPtrType BucketSpecCertSecretRefArgs

func BucketSpecCertSecretRefPtr(v *BucketSpecCertSecretRefArgs) BucketSpecCertSecretRefPtrInput {
	return (*bucketSpecCertSecretRefPtrType)(v)
}

func (*bucketSpecCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecCertSecretRef)(nil)).Elem()
}

func (i *bucketSpecCertSecretRefPtrType) ToBucketSpecCertSecretRefPtrOutput() BucketSpecCertSecretRefPtrOutput {
	return i.ToBucketSpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecCertSecretRefPtrType) ToBucketSpecCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecCertSecretRefPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// bucket. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `generic` provider.
type BucketSpecCertSecretRefOutput struct{ *pulumi.OutputState }

func (BucketSpecCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecCertSecretRef)(nil)).Elem()
}

func (o BucketSpecCertSecretRefOutput) ToBucketSpecCertSecretRefOutput() BucketSpecCertSecretRefOutput {
	return o
}

func (o BucketSpecCertSecretRefOutput) ToBucketSpecCertSecretRefOutputWithContext(ctx context.Context) BucketSpecCertSecretRefOutput {
	return o
}

func (o BucketSpecCertSecretRefOutput) ToBucketSpecCertSecretRefPtrOutput() BucketSpecCertSecretRefPtrOutput {
	return o.ToBucketSpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecCertSecretRefOutput) ToBucketSpecCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecCertSecretRef) *BucketSpecCertSecretRef {
		return &v
	}).(BucketSpecCertSecretRefPtrOutput)
}

// Name of the referent.
func (o BucketSpecCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecCertSecretRef)(nil)).Elem()
}

func (o BucketSpecCertSecretRefPtrOutput) ToBucketSpecCertSecretRefPtrOutput() BucketSpecCertSecretRefPtrOutput {
	return o
}

func (o BucketSpecCertSecretRefPtrOutput) ToBucketSpecCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPtrOutput {
	return o
}

func (o BucketSpecCertSecretRefPtrOutput) Elem() BucketSpecCertSecretRefOutput {
	return o.ApplyT(func(v *BucketSpecCertSecretRef) BucketSpecCertSecretRef {
		if v != nil {
			return *v
		}
		var ret BucketSpecCertSecretRef
		return ret
	}).(BucketSpecCertSecretRefOutput)
}

// Name of the referent.
func (o BucketSpecCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// bucket. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `generic` provider.
type BucketSpecCertSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecCertSecretRefPatchInput is an input type that accepts BucketSpecCertSecretRefPatchArgs and BucketSpecCertSecretRefPatchOutput values.
// You can construct a concrete instance of `BucketSpecCertSecretRefPatchInput` via:
//
//	BucketSpecCertSecretRefPatchArgs{...}
type BucketSpecCertSecretRefPatchInput interface {
	pulumi.Input

	ToBucketSpecCertSecretRefPatchOutput() BucketSpecCertSecretRefPatchOutput
	ToBucketSpecCertSecretRefPatchOutputWithContext(context.Context) BucketSpecCertSecretRefPatchOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// bucket. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `generic` provider.
type BucketSpecCertSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecCertSecretRefPatch)(nil)).Elem()
}

func (i BucketSpecCertSecretRefPatchArgs) ToBucketSpecCertSecretRefPatchOutput() BucketSpecCertSecretRefPatchOutput {
	return i.ToBucketSpecCertSecretRefPatchOutputWithContext(context.Background())
}

func (i BucketSpecCertSecretRefPatchArgs) ToBucketSpecCertSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecCertSecretRefPatchOutput)
}

func (i BucketSpecCertSecretRefPatchArgs) ToBucketSpecCertSecretRefPatchPtrOutput() BucketSpecCertSecretRefPatchPtrOutput {
	return i.ToBucketSpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecCertSecretRefPatchArgs) ToBucketSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecCertSecretRefPatchOutput).ToBucketSpecCertSecretRefPatchPtrOutputWithContext(ctx)
}

// BucketSpecCertSecretRefPatchPtrInput is an input type that accepts BucketSpecCertSecretRefPatchArgs, BucketSpecCertSecretRefPatchPtr and BucketSpecCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecCertSecretRefPatchPtrInput` via:
//
//	        BucketSpecCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecCertSecretRefPatchPtrOutput() BucketSpecCertSecretRefPatchPtrOutput
	ToBucketSpecCertSecretRefPatchPtrOutputWithContext(context.Context) BucketSpecCertSecretRefPatchPtrOutput
}

type bucketSpecCertSecretRefPatchPtrType BucketSpecCertSecretRefPatchArgs

func BucketSpecCertSecretRefPatchPtr(v *BucketSpecCertSecretRefPatchArgs) BucketSpecCertSecretRefPatchPtrInput {
	return (*bucketSpecCertSecretRefPatchPtrType)(v)
}

func (*bucketSpecCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecCertSecretRefPatch)(nil)).Elem()
}

func (i *bucketSpecCertSecretRefPatchPtrType) ToBucketSpecCertSecretRefPatchPtrOutput() BucketSpecCertSecretRefPatchPtrOutput {
	return i.ToBucketSpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecCertSecretRefPatchPtrType) ToBucketSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecCertSecretRefPatchPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// bucket. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `generic` provider.
type BucketSpecCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecCertSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecCertSecretRefPatchOutput) ToBucketSpecCertSecretRefPatchOutput() BucketSpecCertSecretRefPatchOutput {
	return o
}

func (o BucketSpecCertSecretRefPatchOutput) ToBucketSpecCertSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPatchOutput {
	return o
}

func (o BucketSpecCertSecretRefPatchOutput) ToBucketSpecCertSecretRefPatchPtrOutput() BucketSpecCertSecretRefPatchPtrOutput {
	return o.ToBucketSpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecCertSecretRefPatchOutput) ToBucketSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecCertSecretRefPatch) *BucketSpecCertSecretRefPatch {
		return &v
	}).(BucketSpecCertSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o BucketSpecCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecCertSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecCertSecretRefPatchPtrOutput) ToBucketSpecCertSecretRefPatchPtrOutput() BucketSpecCertSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecCertSecretRefPatchPtrOutput) ToBucketSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecCertSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecCertSecretRefPatchPtrOutput) Elem() BucketSpecCertSecretRefPatchOutput {
	return o.ApplyT(func(v *BucketSpecCertSecretRefPatch) BucketSpecCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecCertSecretRefPatch
		return ret
	}).(BucketSpecCertSecretRefPatchOutput)
}

// Name of the referent.
func (o BucketSpecCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// BucketSpec specifies the required configuration to produce an Artifact for
// an object storage bucket.
type BucketSpecPatch struct {
	// BucketName is the name of the object storage bucket.
	BucketName    *string                       `pulumi:"bucketName"`
	CertSecretRef *BucketSpecCertSecretRefPatch `pulumi:"certSecretRef"`
	// Endpoint is the object storage address the BucketName is located at.
	Endpoint *string `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP Endpoint.
	Insecure *bool `pulumi:"insecure"`
	// Interval at which the Bucket Endpoint is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// Prefix to use for server-side filtering of files in the Bucket.
	Prefix *string `pulumi:"prefix"`
	// Provider of the object storage bucket.
	// Defaults to 'generic', which expects an S3 (API) compatible object
	// storage.
	Provider       *string                        `pulumi:"provider"`
	ProxySecretRef *BucketSpecProxySecretRefPatch `pulumi:"proxySecretRef"`
	// Region of the Endpoint where the BucketName is located in.
	Region    *string                   `pulumi:"region"`
	SecretRef *BucketSpecSecretRefPatch `pulumi:"secretRef"`
	Sts       *BucketSpecStsPatch       `pulumi:"sts"`
	// Suspend tells the controller to suspend the reconciliation of this
	// Bucket.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for fetch operations, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
}

// BucketSpecPatchInput is an input type that accepts BucketSpecPatchArgs and BucketSpecPatchOutput values.
// You can construct a concrete instance of `BucketSpecPatchInput` via:
//
//	BucketSpecPatchArgs{...}
type BucketSpecPatchInput interface {
	pulumi.Input

	ToBucketSpecPatchOutput() BucketSpecPatchOutput
	ToBucketSpecPatchOutputWithContext(context.Context) BucketSpecPatchOutput
}

// BucketSpec specifies the required configuration to produce an Artifact for
// an object storage bucket.
type BucketSpecPatchArgs struct {
	// BucketName is the name of the object storage bucket.
	BucketName    pulumi.StringPtrInput                `pulumi:"bucketName"`
	CertSecretRef BucketSpecCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	// Endpoint is the object storage address the BucketName is located at.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP Endpoint.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval at which the Bucket Endpoint is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Prefix to use for server-side filtering of files in the Bucket.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// Provider of the object storage bucket.
	// Defaults to 'generic', which expects an S3 (API) compatible object
	// storage.
	Provider       pulumi.StringPtrInput                 `pulumi:"provider"`
	ProxySecretRef BucketSpecProxySecretRefPatchPtrInput `pulumi:"proxySecretRef"`
	// Region of the Endpoint where the BucketName is located in.
	Region    pulumi.StringPtrInput            `pulumi:"region"`
	SecretRef BucketSpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	Sts       BucketSpecStsPatchPtrInput       `pulumi:"sts"`
	// Suspend tells the controller to suspend the reconciliation of this
	// Bucket.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for fetch operations, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BucketSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecPatch)(nil)).Elem()
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchOutput() BucketSpecPatchOutput {
	return i.ToBucketSpecPatchOutputWithContext(context.Background())
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchOutputWithContext(ctx context.Context) BucketSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPatchOutput)
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return i.ToBucketSpecPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPatchOutput).ToBucketSpecPatchPtrOutputWithContext(ctx)
}

// BucketSpecPatchPtrInput is an input type that accepts BucketSpecPatchArgs, BucketSpecPatchPtr and BucketSpecPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecPatchPtrInput` via:
//
//	        BucketSpecPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput
	ToBucketSpecPatchPtrOutputWithContext(context.Context) BucketSpecPatchPtrOutput
}

type bucketSpecPatchPtrType BucketSpecPatchArgs

func BucketSpecPatchPtr(v *BucketSpecPatchArgs) BucketSpecPatchPtrInput {
	return (*bucketSpecPatchPtrType)(v)
}

func (*bucketSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecPatch)(nil)).Elem()
}

func (i *bucketSpecPatchPtrType) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return i.ToBucketSpecPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecPatchPtrType) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPatchPtrOutput)
}

// BucketSpec specifies the required configuration to produce an Artifact for
// an object storage bucket.
type BucketSpecPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecPatch)(nil)).Elem()
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchOutput() BucketSpecPatchOutput {
	return o
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchOutputWithContext(ctx context.Context) BucketSpecPatchOutput {
	return o
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return o.ToBucketSpecPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecPatch) *BucketSpecPatch {
		return &v
	}).(BucketSpecPatchPtrOutput)
}

// BucketName is the name of the object storage bucket.
func (o BucketSpecPatchOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchOutput) CertSecretRef() BucketSpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *BucketSpecCertSecretRefPatch { return v.CertSecretRef }).(BucketSpecCertSecretRefPatchPtrOutput)
}

// Endpoint is the object storage address the BucketName is located at.
func (o BucketSpecPatchOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecPatchOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP Endpoint.
func (o BucketSpecPatchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval at which the Bucket Endpoint is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o BucketSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Prefix to use for server-side filtering of files in the Bucket.
func (o BucketSpecPatchOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Provider of the object storage bucket.
// Defaults to 'generic', which expects an S3 (API) compatible object
// storage.
func (o BucketSpecPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchOutput) ProxySecretRef() BucketSpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *BucketSpecProxySecretRefPatch { return v.ProxySecretRef }).(BucketSpecProxySecretRefPatchPtrOutput)
}

// Region of the Endpoint where the BucketName is located in.
func (o BucketSpecPatchOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchOutput) SecretRef() BucketSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *BucketSpecSecretRefPatch { return v.SecretRef }).(BucketSpecSecretRefPatchPtrOutput)
}

func (o BucketSpecPatchOutput) Sts() BucketSpecStsPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *BucketSpecStsPatch { return v.Sts }).(BucketSpecStsPatchPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// Bucket.
func (o BucketSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for fetch operations, defaults to 60s.
func (o BucketSpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BucketSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecPatch)(nil)).Elem()
}

func (o BucketSpecPatchPtrOutput) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return o
}

func (o BucketSpecPatchPtrOutput) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return o
}

func (o BucketSpecPatchPtrOutput) Elem() BucketSpecPatchOutput {
	return o.ApplyT(func(v *BucketSpecPatch) BucketSpecPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecPatch
		return ret
	}).(BucketSpecPatchOutput)
}

// BucketName is the name of the object storage bucket.
func (o BucketSpecPatchPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchPtrOutput) CertSecretRef() BucketSpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *BucketSpecCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(BucketSpecCertSecretRefPatchPtrOutput)
}

// Endpoint is the object storage address the BucketName is located at.
func (o BucketSpecPatchPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecPatchPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP Endpoint.
func (o BucketSpecPatchPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the Bucket Endpoint is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o BucketSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Prefix to use for server-side filtering of files in the Bucket.
func (o BucketSpecPatchPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// Provider of the object storage bucket.
// Defaults to 'generic', which expects an S3 (API) compatible object
// storage.
func (o BucketSpecPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchPtrOutput) ProxySecretRef() BucketSpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *BucketSpecProxySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(BucketSpecProxySecretRefPatchPtrOutput)
}

// Region of the Endpoint where the BucketName is located in.
func (o BucketSpecPatchPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchPtrOutput) SecretRef() BucketSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *BucketSpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(BucketSpecSecretRefPatchPtrOutput)
}

func (o BucketSpecPatchPtrOutput) Sts() BucketSpecStsPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *BucketSpecStsPatch {
		if v == nil {
			return nil
		}
		return v.Sts
	}).(BucketSpecStsPatchPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// Bucket.
func (o BucketSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for fetch operations, defaults to 60s.
func (o BucketSpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Bucket server.
type BucketSpecProxySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecProxySecretRefInput is an input type that accepts BucketSpecProxySecretRefArgs and BucketSpecProxySecretRefOutput values.
// You can construct a concrete instance of `BucketSpecProxySecretRefInput` via:
//
//	BucketSpecProxySecretRefArgs{...}
type BucketSpecProxySecretRefInput interface {
	pulumi.Input

	ToBucketSpecProxySecretRefOutput() BucketSpecProxySecretRefOutput
	ToBucketSpecProxySecretRefOutputWithContext(context.Context) BucketSpecProxySecretRefOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Bucket server.
type BucketSpecProxySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecProxySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecProxySecretRef)(nil)).Elem()
}

func (i BucketSpecProxySecretRefArgs) ToBucketSpecProxySecretRefOutput() BucketSpecProxySecretRefOutput {
	return i.ToBucketSpecProxySecretRefOutputWithContext(context.Background())
}

func (i BucketSpecProxySecretRefArgs) ToBucketSpecProxySecretRefOutputWithContext(ctx context.Context) BucketSpecProxySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecProxySecretRefOutput)
}

func (i BucketSpecProxySecretRefArgs) ToBucketSpecProxySecretRefPtrOutput() BucketSpecProxySecretRefPtrOutput {
	return i.ToBucketSpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecProxySecretRefArgs) ToBucketSpecProxySecretRefPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecProxySecretRefOutput).ToBucketSpecProxySecretRefPtrOutputWithContext(ctx)
}

// BucketSpecProxySecretRefPtrInput is an input type that accepts BucketSpecProxySecretRefArgs, BucketSpecProxySecretRefPtr and BucketSpecProxySecretRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecProxySecretRefPtrInput` via:
//
//	        BucketSpecProxySecretRefArgs{...}
//
//	or:
//
//	        nil
type BucketSpecProxySecretRefPtrInput interface {
	pulumi.Input

	ToBucketSpecProxySecretRefPtrOutput() BucketSpecProxySecretRefPtrOutput
	ToBucketSpecProxySecretRefPtrOutputWithContext(context.Context) BucketSpecProxySecretRefPtrOutput
}

type bucketSpecProxySecretRefPtrType BucketSpecProxySecretRefArgs

func BucketSpecProxySecretRefPtr(v *BucketSpecProxySecretRefArgs) BucketSpecProxySecretRefPtrInput {
	return (*bucketSpecProxySecretRefPtrType)(v)
}

func (*bucketSpecProxySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecProxySecretRef)(nil)).Elem()
}

func (i *bucketSpecProxySecretRefPtrType) ToBucketSpecProxySecretRefPtrOutput() BucketSpecProxySecretRefPtrOutput {
	return i.ToBucketSpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecProxySecretRefPtrType) ToBucketSpecProxySecretRefPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecProxySecretRefPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Bucket server.
type BucketSpecProxySecretRefOutput struct{ *pulumi.OutputState }

func (BucketSpecProxySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecProxySecretRef)(nil)).Elem()
}

func (o BucketSpecProxySecretRefOutput) ToBucketSpecProxySecretRefOutput() BucketSpecProxySecretRefOutput {
	return o
}

func (o BucketSpecProxySecretRefOutput) ToBucketSpecProxySecretRefOutputWithContext(ctx context.Context) BucketSpecProxySecretRefOutput {
	return o
}

func (o BucketSpecProxySecretRefOutput) ToBucketSpecProxySecretRefPtrOutput() BucketSpecProxySecretRefPtrOutput {
	return o.ToBucketSpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecProxySecretRefOutput) ToBucketSpecProxySecretRefPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecProxySecretRef) *BucketSpecProxySecretRef {
		return &v
	}).(BucketSpecProxySecretRefPtrOutput)
}

// Name of the referent.
func (o BucketSpecProxySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecProxySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecProxySecretRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecProxySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecProxySecretRef)(nil)).Elem()
}

func (o BucketSpecProxySecretRefPtrOutput) ToBucketSpecProxySecretRefPtrOutput() BucketSpecProxySecretRefPtrOutput {
	return o
}

func (o BucketSpecProxySecretRefPtrOutput) ToBucketSpecProxySecretRefPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPtrOutput {
	return o
}

func (o BucketSpecProxySecretRefPtrOutput) Elem() BucketSpecProxySecretRefOutput {
	return o.ApplyT(func(v *BucketSpecProxySecretRef) BucketSpecProxySecretRef {
		if v != nil {
			return *v
		}
		var ret BucketSpecProxySecretRef
		return ret
	}).(BucketSpecProxySecretRefOutput)
}

// Name of the referent.
func (o BucketSpecProxySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecProxySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Bucket server.
type BucketSpecProxySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecProxySecretRefPatchInput is an input type that accepts BucketSpecProxySecretRefPatchArgs and BucketSpecProxySecretRefPatchOutput values.
// You can construct a concrete instance of `BucketSpecProxySecretRefPatchInput` via:
//
//	BucketSpecProxySecretRefPatchArgs{...}
type BucketSpecProxySecretRefPatchInput interface {
	pulumi.Input

	ToBucketSpecProxySecretRefPatchOutput() BucketSpecProxySecretRefPatchOutput
	ToBucketSpecProxySecretRefPatchOutputWithContext(context.Context) BucketSpecProxySecretRefPatchOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Bucket server.
type BucketSpecProxySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecProxySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecProxySecretRefPatch)(nil)).Elem()
}

func (i BucketSpecProxySecretRefPatchArgs) ToBucketSpecProxySecretRefPatchOutput() BucketSpecProxySecretRefPatchOutput {
	return i.ToBucketSpecProxySecretRefPatchOutputWithContext(context.Background())
}

func (i BucketSpecProxySecretRefPatchArgs) ToBucketSpecProxySecretRefPatchOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecProxySecretRefPatchOutput)
}

func (i BucketSpecProxySecretRefPatchArgs) ToBucketSpecProxySecretRefPatchPtrOutput() BucketSpecProxySecretRefPatchPtrOutput {
	return i.ToBucketSpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecProxySecretRefPatchArgs) ToBucketSpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecProxySecretRefPatchOutput).ToBucketSpecProxySecretRefPatchPtrOutputWithContext(ctx)
}

// BucketSpecProxySecretRefPatchPtrInput is an input type that accepts BucketSpecProxySecretRefPatchArgs, BucketSpecProxySecretRefPatchPtr and BucketSpecProxySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecProxySecretRefPatchPtrInput` via:
//
//	        BucketSpecProxySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecProxySecretRefPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecProxySecretRefPatchPtrOutput() BucketSpecProxySecretRefPatchPtrOutput
	ToBucketSpecProxySecretRefPatchPtrOutputWithContext(context.Context) BucketSpecProxySecretRefPatchPtrOutput
}

type bucketSpecProxySecretRefPatchPtrType BucketSpecProxySecretRefPatchArgs

func BucketSpecProxySecretRefPatchPtr(v *BucketSpecProxySecretRefPatchArgs) BucketSpecProxySecretRefPatchPtrInput {
	return (*bucketSpecProxySecretRefPatchPtrType)(v)
}

func (*bucketSpecProxySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecProxySecretRefPatch)(nil)).Elem()
}

func (i *bucketSpecProxySecretRefPatchPtrType) ToBucketSpecProxySecretRefPatchPtrOutput() BucketSpecProxySecretRefPatchPtrOutput {
	return i.ToBucketSpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecProxySecretRefPatchPtrType) ToBucketSpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecProxySecretRefPatchPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Bucket server.
type BucketSpecProxySecretRefPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecProxySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecProxySecretRefPatch)(nil)).Elem()
}

func (o BucketSpecProxySecretRefPatchOutput) ToBucketSpecProxySecretRefPatchOutput() BucketSpecProxySecretRefPatchOutput {
	return o
}

func (o BucketSpecProxySecretRefPatchOutput) ToBucketSpecProxySecretRefPatchOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPatchOutput {
	return o
}

func (o BucketSpecProxySecretRefPatchOutput) ToBucketSpecProxySecretRefPatchPtrOutput() BucketSpecProxySecretRefPatchPtrOutput {
	return o.ToBucketSpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecProxySecretRefPatchOutput) ToBucketSpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecProxySecretRefPatch) *BucketSpecProxySecretRefPatch {
		return &v
	}).(BucketSpecProxySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o BucketSpecProxySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecProxySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecProxySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecProxySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecProxySecretRefPatch)(nil)).Elem()
}

func (o BucketSpecProxySecretRefPatchPtrOutput) ToBucketSpecProxySecretRefPatchPtrOutput() BucketSpecProxySecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecProxySecretRefPatchPtrOutput) ToBucketSpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecProxySecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecProxySecretRefPatchPtrOutput) Elem() BucketSpecProxySecretRefPatchOutput {
	return o.ApplyT(func(v *BucketSpecProxySecretRefPatch) BucketSpecProxySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecProxySecretRefPatch
		return ret
	}).(BucketSpecProxySecretRefPatchOutput)
}

// Name of the referent.
func (o BucketSpecProxySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecProxySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecSecretRefInput is an input type that accepts BucketSpecSecretRefArgs and BucketSpecSecretRefOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefInput` via:
//
//	BucketSpecSecretRefArgs{...}
type BucketSpecSecretRefInput interface {
	pulumi.Input

	ToBucketSpecSecretRefOutput() BucketSpecSecretRefOutput
	ToBucketSpecSecretRefOutputWithContext(context.Context) BucketSpecSecretRefOutput
}

// SecretRef specifies the Secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRef)(nil)).Elem()
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefOutput() BucketSpecSecretRefOutput {
	return i.ToBucketSpecSecretRefOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefOutputWithContext(ctx context.Context) BucketSpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefOutput)
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return i.ToBucketSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefOutput).ToBucketSpecSecretRefPtrOutputWithContext(ctx)
}

// BucketSpecSecretRefPtrInput is an input type that accepts BucketSpecSecretRefArgs, BucketSpecSecretRefPtr and BucketSpecSecretRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefPtrInput` via:
//
//	        BucketSpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type BucketSpecSecretRefPtrInput interface {
	pulumi.Input

	ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput
	ToBucketSpecSecretRefPtrOutputWithContext(context.Context) BucketSpecSecretRefPtrOutput
}

type bucketSpecSecretRefPtrType BucketSpecSecretRefArgs

func BucketSpecSecretRefPtr(v *BucketSpecSecretRefArgs) BucketSpecSecretRefPtrInput {
	return (*bucketSpecSecretRefPtrType)(v)
}

func (*bucketSpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRef)(nil)).Elem()
}

func (i *bucketSpecSecretRefPtrType) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return i.ToBucketSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecSecretRefPtrType) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRef)(nil)).Elem()
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefOutput() BucketSpecSecretRefOutput {
	return o
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefOutputWithContext(ctx context.Context) BucketSpecSecretRefOutput {
	return o
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return o.ToBucketSpecSecretRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecSecretRef) *BucketSpecSecretRef {
		return &v
	}).(BucketSpecSecretRefPtrOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRef)(nil)).Elem()
}

func (o BucketSpecSecretRefPtrOutput) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return o
}

func (o BucketSpecSecretRefPtrOutput) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return o
}

func (o BucketSpecSecretRefPtrOutput) Elem() BucketSpecSecretRefOutput {
	return o.ApplyT(func(v *BucketSpecSecretRef) BucketSpecSecretRef {
		if v != nil {
			return *v
		}
		var ret BucketSpecSecretRef
		return ret
	}).(BucketSpecSecretRefOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecSecretRefPatchInput is an input type that accepts BucketSpecSecretRefPatchArgs and BucketSpecSecretRefPatchOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefPatchInput` via:
//
//	BucketSpecSecretRefPatchArgs{...}
type BucketSpecSecretRefPatchInput interface {
	pulumi.Input

	ToBucketSpecSecretRefPatchOutput() BucketSpecSecretRefPatchOutput
	ToBucketSpecSecretRefPatchOutputWithContext(context.Context) BucketSpecSecretRefPatchOutput
}

// SecretRef specifies the Secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRefPatch)(nil)).Elem()
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchOutput() BucketSpecSecretRefPatchOutput {
	return i.ToBucketSpecSecretRefPatchOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPatchOutput)
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return i.ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPatchOutput).ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx)
}

// BucketSpecSecretRefPatchPtrInput is an input type that accepts BucketSpecSecretRefPatchArgs, BucketSpecSecretRefPatchPtr and BucketSpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefPatchPtrInput` via:
//
//	        BucketSpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput
	ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Context) BucketSpecSecretRefPatchPtrOutput
}

type bucketSpecSecretRefPatchPtrType BucketSpecSecretRefPatchArgs

func BucketSpecSecretRefPatchPtr(v *BucketSpecSecretRefPatchArgs) BucketSpecSecretRefPatchPtrInput {
	return (*bucketSpecSecretRefPatchPtrType)(v)
}

func (*bucketSpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRefPatch)(nil)).Elem()
}

func (i *bucketSpecSecretRefPatchPtrType) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return i.ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecSecretRefPatchPtrType) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchOutput() BucketSpecSecretRefPatchOutput {
	return o
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchOutput {
	return o
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return o.ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecSecretRefPatch) *BucketSpecSecretRefPatch {
		return &v
	}).(BucketSpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecSecretRefPatchPtrOutput) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecSecretRefPatchPtrOutput) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecSecretRefPatchPtrOutput) Elem() BucketSpecSecretRefPatchOutput {
	return o.ApplyT(func(v *BucketSpecSecretRefPatch) BucketSpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecSecretRefPatch
		return ret
	}).(BucketSpecSecretRefPatchOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// STS specifies the required configuration to use a Security Token
// Service for fetching temporary credentials to authenticate in a
// Bucket provider.
//
// This field is only supported for the `aws` and `generic` providers.
type BucketSpecSts struct {
	CertSecretRef *BucketSpecStsCertSecretRef `pulumi:"certSecretRef"`
	// Endpoint is the HTTP/S endpoint of the Security Token Service from
	// where temporary credentials will be fetched.
	Endpoint *string `pulumi:"endpoint"`
	// Provider of the Security Token Service.
	Provider  *string                 `pulumi:"provider"`
	SecretRef *BucketSpecStsSecretRef `pulumi:"secretRef"`
}

// BucketSpecStsInput is an input type that accepts BucketSpecStsArgs and BucketSpecStsOutput values.
// You can construct a concrete instance of `BucketSpecStsInput` via:
//
//	BucketSpecStsArgs{...}
type BucketSpecStsInput interface {
	pulumi.Input

	ToBucketSpecStsOutput() BucketSpecStsOutput
	ToBucketSpecStsOutputWithContext(context.Context) BucketSpecStsOutput
}

// STS specifies the required configuration to use a Security Token
// Service for fetching temporary credentials to authenticate in a
// Bucket provider.
//
// This field is only supported for the `aws` and `generic` providers.
type BucketSpecStsArgs struct {
	CertSecretRef BucketSpecStsCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// Endpoint is the HTTP/S endpoint of the Security Token Service from
	// where temporary credentials will be fetched.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Provider of the Security Token Service.
	Provider  pulumi.StringPtrInput          `pulumi:"provider"`
	SecretRef BucketSpecStsSecretRefPtrInput `pulumi:"secretRef"`
}

func (BucketSpecStsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSts)(nil)).Elem()
}

func (i BucketSpecStsArgs) ToBucketSpecStsOutput() BucketSpecStsOutput {
	return i.ToBucketSpecStsOutputWithContext(context.Background())
}

func (i BucketSpecStsArgs) ToBucketSpecStsOutputWithContext(ctx context.Context) BucketSpecStsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsOutput)
}

func (i BucketSpecStsArgs) ToBucketSpecStsPtrOutput() BucketSpecStsPtrOutput {
	return i.ToBucketSpecStsPtrOutputWithContext(context.Background())
}

func (i BucketSpecStsArgs) ToBucketSpecStsPtrOutputWithContext(ctx context.Context) BucketSpecStsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsOutput).ToBucketSpecStsPtrOutputWithContext(ctx)
}

// BucketSpecStsPtrInput is an input type that accepts BucketSpecStsArgs, BucketSpecStsPtr and BucketSpecStsPtrOutput values.
// You can construct a concrete instance of `BucketSpecStsPtrInput` via:
//
//	        BucketSpecStsArgs{...}
//
//	or:
//
//	        nil
type BucketSpecStsPtrInput interface {
	pulumi.Input

	ToBucketSpecStsPtrOutput() BucketSpecStsPtrOutput
	ToBucketSpecStsPtrOutputWithContext(context.Context) BucketSpecStsPtrOutput
}

type bucketSpecStsPtrType BucketSpecStsArgs

func BucketSpecStsPtr(v *BucketSpecStsArgs) BucketSpecStsPtrInput {
	return (*bucketSpecStsPtrType)(v)
}

func (*bucketSpecStsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSts)(nil)).Elem()
}

func (i *bucketSpecStsPtrType) ToBucketSpecStsPtrOutput() BucketSpecStsPtrOutput {
	return i.ToBucketSpecStsPtrOutputWithContext(context.Background())
}

func (i *bucketSpecStsPtrType) ToBucketSpecStsPtrOutputWithContext(ctx context.Context) BucketSpecStsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsPtrOutput)
}

// STS specifies the required configuration to use a Security Token
// Service for fetching temporary credentials to authenticate in a
// Bucket provider.
//
// This field is only supported for the `aws` and `generic` providers.
type BucketSpecStsOutput struct{ *pulumi.OutputState }

func (BucketSpecStsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSts)(nil)).Elem()
}

func (o BucketSpecStsOutput) ToBucketSpecStsOutput() BucketSpecStsOutput {
	return o
}

func (o BucketSpecStsOutput) ToBucketSpecStsOutputWithContext(ctx context.Context) BucketSpecStsOutput {
	return o
}

func (o BucketSpecStsOutput) ToBucketSpecStsPtrOutput() BucketSpecStsPtrOutput {
	return o.ToBucketSpecStsPtrOutputWithContext(context.Background())
}

func (o BucketSpecStsOutput) ToBucketSpecStsPtrOutputWithContext(ctx context.Context) BucketSpecStsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecSts) *BucketSpecSts {
		return &v
	}).(BucketSpecStsPtrOutput)
}

func (o BucketSpecStsOutput) CertSecretRef() BucketSpecStsCertSecretRefPtrOutput {
	return o.ApplyT(func(v BucketSpecSts) *BucketSpecStsCertSecretRef { return v.CertSecretRef }).(BucketSpecStsCertSecretRefPtrOutput)
}

// Endpoint is the HTTP/S endpoint of the Security Token Service from
// where temporary credentials will be fetched.
func (o BucketSpecStsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecSts) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Provider of the Security Token Service.
func (o BucketSpecStsOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecSts) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o BucketSpecStsOutput) SecretRef() BucketSpecStsSecretRefPtrOutput {
	return o.ApplyT(func(v BucketSpecSts) *BucketSpecStsSecretRef { return v.SecretRef }).(BucketSpecStsSecretRefPtrOutput)
}

type BucketSpecStsPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecStsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSts)(nil)).Elem()
}

func (o BucketSpecStsPtrOutput) ToBucketSpecStsPtrOutput() BucketSpecStsPtrOutput {
	return o
}

func (o BucketSpecStsPtrOutput) ToBucketSpecStsPtrOutputWithContext(ctx context.Context) BucketSpecStsPtrOutput {
	return o
}

func (o BucketSpecStsPtrOutput) Elem() BucketSpecStsOutput {
	return o.ApplyT(func(v *BucketSpecSts) BucketSpecSts {
		if v != nil {
			return *v
		}
		var ret BucketSpecSts
		return ret
	}).(BucketSpecStsOutput)
}

func (o BucketSpecStsPtrOutput) CertSecretRef() BucketSpecStsCertSecretRefPtrOutput {
	return o.ApplyT(func(v *BucketSpecSts) *BucketSpecStsCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(BucketSpecStsCertSecretRefPtrOutput)
}

// Endpoint is the HTTP/S endpoint of the Security Token Service from
// where temporary credentials will be fetched.
func (o BucketSpecStsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecSts) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Provider of the Security Token Service.
func (o BucketSpecStsPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecSts) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecStsPtrOutput) SecretRef() BucketSpecStsSecretRefPtrOutput {
	return o.ApplyT(func(v *BucketSpecSts) *BucketSpecStsSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(BucketSpecStsSecretRefPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// STS endpoint. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `ldap` provider.
type BucketSpecStsCertSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecStsCertSecretRefInput is an input type that accepts BucketSpecStsCertSecretRefArgs and BucketSpecStsCertSecretRefOutput values.
// You can construct a concrete instance of `BucketSpecStsCertSecretRefInput` via:
//
//	BucketSpecStsCertSecretRefArgs{...}
type BucketSpecStsCertSecretRefInput interface {
	pulumi.Input

	ToBucketSpecStsCertSecretRefOutput() BucketSpecStsCertSecretRefOutput
	ToBucketSpecStsCertSecretRefOutputWithContext(context.Context) BucketSpecStsCertSecretRefOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// STS endpoint. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `ldap` provider.
type BucketSpecStsCertSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecStsCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsCertSecretRef)(nil)).Elem()
}

func (i BucketSpecStsCertSecretRefArgs) ToBucketSpecStsCertSecretRefOutput() BucketSpecStsCertSecretRefOutput {
	return i.ToBucketSpecStsCertSecretRefOutputWithContext(context.Background())
}

func (i BucketSpecStsCertSecretRefArgs) ToBucketSpecStsCertSecretRefOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsCertSecretRefOutput)
}

func (i BucketSpecStsCertSecretRefArgs) ToBucketSpecStsCertSecretRefPtrOutput() BucketSpecStsCertSecretRefPtrOutput {
	return i.ToBucketSpecStsCertSecretRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecStsCertSecretRefArgs) ToBucketSpecStsCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsCertSecretRefOutput).ToBucketSpecStsCertSecretRefPtrOutputWithContext(ctx)
}

// BucketSpecStsCertSecretRefPtrInput is an input type that accepts BucketSpecStsCertSecretRefArgs, BucketSpecStsCertSecretRefPtr and BucketSpecStsCertSecretRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecStsCertSecretRefPtrInput` via:
//
//	        BucketSpecStsCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type BucketSpecStsCertSecretRefPtrInput interface {
	pulumi.Input

	ToBucketSpecStsCertSecretRefPtrOutput() BucketSpecStsCertSecretRefPtrOutput
	ToBucketSpecStsCertSecretRefPtrOutputWithContext(context.Context) BucketSpecStsCertSecretRefPtrOutput
}

type bucketSpecStsCertSecretRefPtrType BucketSpecStsCertSecretRefArgs

func BucketSpecStsCertSecretRefPtr(v *BucketSpecStsCertSecretRefArgs) BucketSpecStsCertSecretRefPtrInput {
	return (*bucketSpecStsCertSecretRefPtrType)(v)
}

func (*bucketSpecStsCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsCertSecretRef)(nil)).Elem()
}

func (i *bucketSpecStsCertSecretRefPtrType) ToBucketSpecStsCertSecretRefPtrOutput() BucketSpecStsCertSecretRefPtrOutput {
	return i.ToBucketSpecStsCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecStsCertSecretRefPtrType) ToBucketSpecStsCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsCertSecretRefPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// STS endpoint. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `ldap` provider.
type BucketSpecStsCertSecretRefOutput struct{ *pulumi.OutputState }

func (BucketSpecStsCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsCertSecretRef)(nil)).Elem()
}

func (o BucketSpecStsCertSecretRefOutput) ToBucketSpecStsCertSecretRefOutput() BucketSpecStsCertSecretRefOutput {
	return o
}

func (o BucketSpecStsCertSecretRefOutput) ToBucketSpecStsCertSecretRefOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefOutput {
	return o
}

func (o BucketSpecStsCertSecretRefOutput) ToBucketSpecStsCertSecretRefPtrOutput() BucketSpecStsCertSecretRefPtrOutput {
	return o.ToBucketSpecStsCertSecretRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecStsCertSecretRefOutput) ToBucketSpecStsCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecStsCertSecretRef) *BucketSpecStsCertSecretRef {
		return &v
	}).(BucketSpecStsCertSecretRefPtrOutput)
}

// Name of the referent.
func (o BucketSpecStsCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecStsCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecStsCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecStsCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsCertSecretRef)(nil)).Elem()
}

func (o BucketSpecStsCertSecretRefPtrOutput) ToBucketSpecStsCertSecretRefPtrOutput() BucketSpecStsCertSecretRefPtrOutput {
	return o
}

func (o BucketSpecStsCertSecretRefPtrOutput) ToBucketSpecStsCertSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPtrOutput {
	return o
}

func (o BucketSpecStsCertSecretRefPtrOutput) Elem() BucketSpecStsCertSecretRefOutput {
	return o.ApplyT(func(v *BucketSpecStsCertSecretRef) BucketSpecStsCertSecretRef {
		if v != nil {
			return *v
		}
		var ret BucketSpecStsCertSecretRef
		return ret
	}).(BucketSpecStsCertSecretRefOutput)
}

// Name of the referent.
func (o BucketSpecStsCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// STS endpoint. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `ldap` provider.
type BucketSpecStsCertSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecStsCertSecretRefPatchInput is an input type that accepts BucketSpecStsCertSecretRefPatchArgs and BucketSpecStsCertSecretRefPatchOutput values.
// You can construct a concrete instance of `BucketSpecStsCertSecretRefPatchInput` via:
//
//	BucketSpecStsCertSecretRefPatchArgs{...}
type BucketSpecStsCertSecretRefPatchInput interface {
	pulumi.Input

	ToBucketSpecStsCertSecretRefPatchOutput() BucketSpecStsCertSecretRefPatchOutput
	ToBucketSpecStsCertSecretRefPatchOutputWithContext(context.Context) BucketSpecStsCertSecretRefPatchOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// STS endpoint. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `ldap` provider.
type BucketSpecStsCertSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecStsCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsCertSecretRefPatch)(nil)).Elem()
}

func (i BucketSpecStsCertSecretRefPatchArgs) ToBucketSpecStsCertSecretRefPatchOutput() BucketSpecStsCertSecretRefPatchOutput {
	return i.ToBucketSpecStsCertSecretRefPatchOutputWithContext(context.Background())
}

func (i BucketSpecStsCertSecretRefPatchArgs) ToBucketSpecStsCertSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsCertSecretRefPatchOutput)
}

func (i BucketSpecStsCertSecretRefPatchArgs) ToBucketSpecStsCertSecretRefPatchPtrOutput() BucketSpecStsCertSecretRefPatchPtrOutput {
	return i.ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecStsCertSecretRefPatchArgs) ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsCertSecretRefPatchOutput).ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(ctx)
}

// BucketSpecStsCertSecretRefPatchPtrInput is an input type that accepts BucketSpecStsCertSecretRefPatchArgs, BucketSpecStsCertSecretRefPatchPtr and BucketSpecStsCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecStsCertSecretRefPatchPtrInput` via:
//
//	        BucketSpecStsCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecStsCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecStsCertSecretRefPatchPtrOutput() BucketSpecStsCertSecretRefPatchPtrOutput
	ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(context.Context) BucketSpecStsCertSecretRefPatchPtrOutput
}

type bucketSpecStsCertSecretRefPatchPtrType BucketSpecStsCertSecretRefPatchArgs

func BucketSpecStsCertSecretRefPatchPtr(v *BucketSpecStsCertSecretRefPatchArgs) BucketSpecStsCertSecretRefPatchPtrInput {
	return (*bucketSpecStsCertSecretRefPatchPtrType)(v)
}

func (*bucketSpecStsCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsCertSecretRefPatch)(nil)).Elem()
}

func (i *bucketSpecStsCertSecretRefPatchPtrType) ToBucketSpecStsCertSecretRefPatchPtrOutput() BucketSpecStsCertSecretRefPatchPtrOutput {
	return i.ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecStsCertSecretRefPatchPtrType) ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsCertSecretRefPatchPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// STS endpoint. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// This field is only supported for the `ldap` provider.
type BucketSpecStsCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecStsCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsCertSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecStsCertSecretRefPatchOutput) ToBucketSpecStsCertSecretRefPatchOutput() BucketSpecStsCertSecretRefPatchOutput {
	return o
}

func (o BucketSpecStsCertSecretRefPatchOutput) ToBucketSpecStsCertSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPatchOutput {
	return o
}

func (o BucketSpecStsCertSecretRefPatchOutput) ToBucketSpecStsCertSecretRefPatchPtrOutput() BucketSpecStsCertSecretRefPatchPtrOutput {
	return o.ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecStsCertSecretRefPatchOutput) ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecStsCertSecretRefPatch) *BucketSpecStsCertSecretRefPatch {
		return &v
	}).(BucketSpecStsCertSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o BucketSpecStsCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecStsCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecStsCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecStsCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsCertSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecStsCertSecretRefPatchPtrOutput) ToBucketSpecStsCertSecretRefPatchPtrOutput() BucketSpecStsCertSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecStsCertSecretRefPatchPtrOutput) ToBucketSpecStsCertSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsCertSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecStsCertSecretRefPatchPtrOutput) Elem() BucketSpecStsCertSecretRefPatchOutput {
	return o.ApplyT(func(v *BucketSpecStsCertSecretRefPatch) BucketSpecStsCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecStsCertSecretRefPatch
		return ret
	}).(BucketSpecStsCertSecretRefPatchOutput)
}

// Name of the referent.
func (o BucketSpecStsCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// STS specifies the required configuration to use a Security Token
// Service for fetching temporary credentials to authenticate in a
// Bucket provider.
//
// This field is only supported for the `aws` and `generic` providers.
type BucketSpecStsPatch struct {
	CertSecretRef *BucketSpecStsCertSecretRefPatch `pulumi:"certSecretRef"`
	// Endpoint is the HTTP/S endpoint of the Security Token Service from
	// where temporary credentials will be fetched.
	Endpoint *string `pulumi:"endpoint"`
	// Provider of the Security Token Service.
	Provider  *string                      `pulumi:"provider"`
	SecretRef *BucketSpecStsSecretRefPatch `pulumi:"secretRef"`
}

// BucketSpecStsPatchInput is an input type that accepts BucketSpecStsPatchArgs and BucketSpecStsPatchOutput values.
// You can construct a concrete instance of `BucketSpecStsPatchInput` via:
//
//	BucketSpecStsPatchArgs{...}
type BucketSpecStsPatchInput interface {
	pulumi.Input

	ToBucketSpecStsPatchOutput() BucketSpecStsPatchOutput
	ToBucketSpecStsPatchOutputWithContext(context.Context) BucketSpecStsPatchOutput
}

// STS specifies the required configuration to use a Security Token
// Service for fetching temporary credentials to authenticate in a
// Bucket provider.
//
// This field is only supported for the `aws` and `generic` providers.
type BucketSpecStsPatchArgs struct {
	CertSecretRef BucketSpecStsCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	// Endpoint is the HTTP/S endpoint of the Security Token Service from
	// where temporary credentials will be fetched.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Provider of the Security Token Service.
	Provider  pulumi.StringPtrInput               `pulumi:"provider"`
	SecretRef BucketSpecStsSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (BucketSpecStsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsPatch)(nil)).Elem()
}

func (i BucketSpecStsPatchArgs) ToBucketSpecStsPatchOutput() BucketSpecStsPatchOutput {
	return i.ToBucketSpecStsPatchOutputWithContext(context.Background())
}

func (i BucketSpecStsPatchArgs) ToBucketSpecStsPatchOutputWithContext(ctx context.Context) BucketSpecStsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsPatchOutput)
}

func (i BucketSpecStsPatchArgs) ToBucketSpecStsPatchPtrOutput() BucketSpecStsPatchPtrOutput {
	return i.ToBucketSpecStsPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecStsPatchArgs) ToBucketSpecStsPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsPatchOutput).ToBucketSpecStsPatchPtrOutputWithContext(ctx)
}

// BucketSpecStsPatchPtrInput is an input type that accepts BucketSpecStsPatchArgs, BucketSpecStsPatchPtr and BucketSpecStsPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecStsPatchPtrInput` via:
//
//	        BucketSpecStsPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecStsPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecStsPatchPtrOutput() BucketSpecStsPatchPtrOutput
	ToBucketSpecStsPatchPtrOutputWithContext(context.Context) BucketSpecStsPatchPtrOutput
}

type bucketSpecStsPatchPtrType BucketSpecStsPatchArgs

func BucketSpecStsPatchPtr(v *BucketSpecStsPatchArgs) BucketSpecStsPatchPtrInput {
	return (*bucketSpecStsPatchPtrType)(v)
}

func (*bucketSpecStsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsPatch)(nil)).Elem()
}

func (i *bucketSpecStsPatchPtrType) ToBucketSpecStsPatchPtrOutput() BucketSpecStsPatchPtrOutput {
	return i.ToBucketSpecStsPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecStsPatchPtrType) ToBucketSpecStsPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsPatchPtrOutput)
}

// STS specifies the required configuration to use a Security Token
// Service for fetching temporary credentials to authenticate in a
// Bucket provider.
//
// This field is only supported for the `aws` and `generic` providers.
type BucketSpecStsPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecStsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsPatch)(nil)).Elem()
}

func (o BucketSpecStsPatchOutput) ToBucketSpecStsPatchOutput() BucketSpecStsPatchOutput {
	return o
}

func (o BucketSpecStsPatchOutput) ToBucketSpecStsPatchOutputWithContext(ctx context.Context) BucketSpecStsPatchOutput {
	return o
}

func (o BucketSpecStsPatchOutput) ToBucketSpecStsPatchPtrOutput() BucketSpecStsPatchPtrOutput {
	return o.ToBucketSpecStsPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecStsPatchOutput) ToBucketSpecStsPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecStsPatch) *BucketSpecStsPatch {
		return &v
	}).(BucketSpecStsPatchPtrOutput)
}

func (o BucketSpecStsPatchOutput) CertSecretRef() BucketSpecStsCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecStsPatch) *BucketSpecStsCertSecretRefPatch { return v.CertSecretRef }).(BucketSpecStsCertSecretRefPatchPtrOutput)
}

// Endpoint is the HTTP/S endpoint of the Security Token Service from
// where temporary credentials will be fetched.
func (o BucketSpecStsPatchOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecStsPatch) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Provider of the Security Token Service.
func (o BucketSpecStsPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecStsPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o BucketSpecStsPatchOutput) SecretRef() BucketSpecStsSecretRefPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecStsPatch) *BucketSpecStsSecretRefPatch { return v.SecretRef }).(BucketSpecStsSecretRefPatchPtrOutput)
}

type BucketSpecStsPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecStsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsPatch)(nil)).Elem()
}

func (o BucketSpecStsPatchPtrOutput) ToBucketSpecStsPatchPtrOutput() BucketSpecStsPatchPtrOutput {
	return o
}

func (o BucketSpecStsPatchPtrOutput) ToBucketSpecStsPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsPatchPtrOutput {
	return o
}

func (o BucketSpecStsPatchPtrOutput) Elem() BucketSpecStsPatchOutput {
	return o.ApplyT(func(v *BucketSpecStsPatch) BucketSpecStsPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecStsPatch
		return ret
	}).(BucketSpecStsPatchOutput)
}

func (o BucketSpecStsPatchPtrOutput) CertSecretRef() BucketSpecStsCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsPatch) *BucketSpecStsCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(BucketSpecStsCertSecretRefPatchPtrOutput)
}

// Endpoint is the HTTP/S endpoint of the Security Token Service from
// where temporary credentials will be fetched.
func (o BucketSpecStsPatchPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Provider of the Security Token Service.
func (o BucketSpecStsPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecStsPatchPtrOutput) SecretRef() BucketSpecStsSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsPatch) *BucketSpecStsSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(BucketSpecStsSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the STS endpoint. This Secret must contain the fields `username`
// and `password` and is supported only for the `ldap` provider.
type BucketSpecStsSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecStsSecretRefInput is an input type that accepts BucketSpecStsSecretRefArgs and BucketSpecStsSecretRefOutput values.
// You can construct a concrete instance of `BucketSpecStsSecretRefInput` via:
//
//	BucketSpecStsSecretRefArgs{...}
type BucketSpecStsSecretRefInput interface {
	pulumi.Input

	ToBucketSpecStsSecretRefOutput() BucketSpecStsSecretRefOutput
	ToBucketSpecStsSecretRefOutputWithContext(context.Context) BucketSpecStsSecretRefOutput
}

// SecretRef specifies the Secret containing authentication credentials
// for the STS endpoint. This Secret must contain the fields `username`
// and `password` and is supported only for the `ldap` provider.
type BucketSpecStsSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecStsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsSecretRef)(nil)).Elem()
}

func (i BucketSpecStsSecretRefArgs) ToBucketSpecStsSecretRefOutput() BucketSpecStsSecretRefOutput {
	return i.ToBucketSpecStsSecretRefOutputWithContext(context.Background())
}

func (i BucketSpecStsSecretRefArgs) ToBucketSpecStsSecretRefOutputWithContext(ctx context.Context) BucketSpecStsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsSecretRefOutput)
}

func (i BucketSpecStsSecretRefArgs) ToBucketSpecStsSecretRefPtrOutput() BucketSpecStsSecretRefPtrOutput {
	return i.ToBucketSpecStsSecretRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecStsSecretRefArgs) ToBucketSpecStsSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsSecretRefOutput).ToBucketSpecStsSecretRefPtrOutputWithContext(ctx)
}

// BucketSpecStsSecretRefPtrInput is an input type that accepts BucketSpecStsSecretRefArgs, BucketSpecStsSecretRefPtr and BucketSpecStsSecretRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecStsSecretRefPtrInput` via:
//
//	        BucketSpecStsSecretRefArgs{...}
//
//	or:
//
//	        nil
type BucketSpecStsSecretRefPtrInput interface {
	pulumi.Input

	ToBucketSpecStsSecretRefPtrOutput() BucketSpecStsSecretRefPtrOutput
	ToBucketSpecStsSecretRefPtrOutputWithContext(context.Context) BucketSpecStsSecretRefPtrOutput
}

type bucketSpecStsSecretRefPtrType BucketSpecStsSecretRefArgs

func BucketSpecStsSecretRefPtr(v *BucketSpecStsSecretRefArgs) BucketSpecStsSecretRefPtrInput {
	return (*bucketSpecStsSecretRefPtrType)(v)
}

func (*bucketSpecStsSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsSecretRef)(nil)).Elem()
}

func (i *bucketSpecStsSecretRefPtrType) ToBucketSpecStsSecretRefPtrOutput() BucketSpecStsSecretRefPtrOutput {
	return i.ToBucketSpecStsSecretRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecStsSecretRefPtrType) ToBucketSpecStsSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsSecretRefPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the STS endpoint. This Secret must contain the fields `username`
// and `password` and is supported only for the `ldap` provider.
type BucketSpecStsSecretRefOutput struct{ *pulumi.OutputState }

func (BucketSpecStsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsSecretRef)(nil)).Elem()
}

func (o BucketSpecStsSecretRefOutput) ToBucketSpecStsSecretRefOutput() BucketSpecStsSecretRefOutput {
	return o
}

func (o BucketSpecStsSecretRefOutput) ToBucketSpecStsSecretRefOutputWithContext(ctx context.Context) BucketSpecStsSecretRefOutput {
	return o
}

func (o BucketSpecStsSecretRefOutput) ToBucketSpecStsSecretRefPtrOutput() BucketSpecStsSecretRefPtrOutput {
	return o.ToBucketSpecStsSecretRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecStsSecretRefOutput) ToBucketSpecStsSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecStsSecretRef) *BucketSpecStsSecretRef {
		return &v
	}).(BucketSpecStsSecretRefPtrOutput)
}

// Name of the referent.
func (o BucketSpecStsSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecStsSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecStsSecretRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecStsSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsSecretRef)(nil)).Elem()
}

func (o BucketSpecStsSecretRefPtrOutput) ToBucketSpecStsSecretRefPtrOutput() BucketSpecStsSecretRefPtrOutput {
	return o
}

func (o BucketSpecStsSecretRefPtrOutput) ToBucketSpecStsSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPtrOutput {
	return o
}

func (o BucketSpecStsSecretRefPtrOutput) Elem() BucketSpecStsSecretRefOutput {
	return o.ApplyT(func(v *BucketSpecStsSecretRef) BucketSpecStsSecretRef {
		if v != nil {
			return *v
		}
		var ret BucketSpecStsSecretRef
		return ret
	}).(BucketSpecStsSecretRefOutput)
}

// Name of the referent.
func (o BucketSpecStsSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the STS endpoint. This Secret must contain the fields `username`
// and `password` and is supported only for the `ldap` provider.
type BucketSpecStsSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecStsSecretRefPatchInput is an input type that accepts BucketSpecStsSecretRefPatchArgs and BucketSpecStsSecretRefPatchOutput values.
// You can construct a concrete instance of `BucketSpecStsSecretRefPatchInput` via:
//
//	BucketSpecStsSecretRefPatchArgs{...}
type BucketSpecStsSecretRefPatchInput interface {
	pulumi.Input

	ToBucketSpecStsSecretRefPatchOutput() BucketSpecStsSecretRefPatchOutput
	ToBucketSpecStsSecretRefPatchOutputWithContext(context.Context) BucketSpecStsSecretRefPatchOutput
}

// SecretRef specifies the Secret containing authentication credentials
// for the STS endpoint. This Secret must contain the fields `username`
// and `password` and is supported only for the `ldap` provider.
type BucketSpecStsSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecStsSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsSecretRefPatch)(nil)).Elem()
}

func (i BucketSpecStsSecretRefPatchArgs) ToBucketSpecStsSecretRefPatchOutput() BucketSpecStsSecretRefPatchOutput {
	return i.ToBucketSpecStsSecretRefPatchOutputWithContext(context.Background())
}

func (i BucketSpecStsSecretRefPatchArgs) ToBucketSpecStsSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsSecretRefPatchOutput)
}

func (i BucketSpecStsSecretRefPatchArgs) ToBucketSpecStsSecretRefPatchPtrOutput() BucketSpecStsSecretRefPatchPtrOutput {
	return i.ToBucketSpecStsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecStsSecretRefPatchArgs) ToBucketSpecStsSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsSecretRefPatchOutput).ToBucketSpecStsSecretRefPatchPtrOutputWithContext(ctx)
}

// BucketSpecStsSecretRefPatchPtrInput is an input type that accepts BucketSpecStsSecretRefPatchArgs, BucketSpecStsSecretRefPatchPtr and BucketSpecStsSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecStsSecretRefPatchPtrInput` via:
//
//	        BucketSpecStsSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecStsSecretRefPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecStsSecretRefPatchPtrOutput() BucketSpecStsSecretRefPatchPtrOutput
	ToBucketSpecStsSecretRefPatchPtrOutputWithContext(context.Context) BucketSpecStsSecretRefPatchPtrOutput
}

type bucketSpecStsSecretRefPatchPtrType BucketSpecStsSecretRefPatchArgs

func BucketSpecStsSecretRefPatchPtr(v *BucketSpecStsSecretRefPatchArgs) BucketSpecStsSecretRefPatchPtrInput {
	return (*bucketSpecStsSecretRefPatchPtrType)(v)
}

func (*bucketSpecStsSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsSecretRefPatch)(nil)).Elem()
}

func (i *bucketSpecStsSecretRefPatchPtrType) ToBucketSpecStsSecretRefPatchPtrOutput() BucketSpecStsSecretRefPatchPtrOutput {
	return i.ToBucketSpecStsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecStsSecretRefPatchPtrType) ToBucketSpecStsSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecStsSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the STS endpoint. This Secret must contain the fields `username`
// and `password` and is supported only for the `ldap` provider.
type BucketSpecStsSecretRefPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecStsSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecStsSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecStsSecretRefPatchOutput) ToBucketSpecStsSecretRefPatchOutput() BucketSpecStsSecretRefPatchOutput {
	return o
}

func (o BucketSpecStsSecretRefPatchOutput) ToBucketSpecStsSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPatchOutput {
	return o
}

func (o BucketSpecStsSecretRefPatchOutput) ToBucketSpecStsSecretRefPatchPtrOutput() BucketSpecStsSecretRefPatchPtrOutput {
	return o.ToBucketSpecStsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecStsSecretRefPatchOutput) ToBucketSpecStsSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecStsSecretRefPatch) *BucketSpecStsSecretRefPatch {
		return &v
	}).(BucketSpecStsSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o BucketSpecStsSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecStsSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecStsSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecStsSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecStsSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecStsSecretRefPatchPtrOutput) ToBucketSpecStsSecretRefPatchPtrOutput() BucketSpecStsSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecStsSecretRefPatchPtrOutput) ToBucketSpecStsSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecStsSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecStsSecretRefPatchPtrOutput) Elem() BucketSpecStsSecretRefPatchOutput {
	return o.ApplyT(func(v *BucketSpecStsSecretRefPatch) BucketSpecStsSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecStsSecretRefPatch
		return ret
	}).(BucketSpecStsSecretRefPatchOutput)
}

// Name of the referent.
func (o BucketSpecStsSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecStsSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// BucketStatus records the observed state of a Bucket.
type BucketStatus struct {
	Artifact *BucketStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions []BucketStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Bucket object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore *string `pulumi:"observedIgnore"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url *string `pulumi:"url"`
}

// BucketStatusInput is an input type that accepts BucketStatusArgs and BucketStatusOutput values.
// You can construct a concrete instance of `BucketStatusInput` via:
//
//	BucketStatusArgs{...}
type BucketStatusInput interface {
	pulumi.Input

	ToBucketStatusOutput() BucketStatusOutput
	ToBucketStatusOutputWithContext(context.Context) BucketStatusOutput
}

// BucketStatus records the observed state of a Bucket.
type BucketStatusArgs struct {
	Artifact BucketStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions BucketStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Bucket object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore pulumi.StringPtrInput `pulumi:"observedIgnore"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatus)(nil)).Elem()
}

func (i BucketStatusArgs) ToBucketStatusOutput() BucketStatusOutput {
	return i.ToBucketStatusOutputWithContext(context.Background())
}

func (i BucketStatusArgs) ToBucketStatusOutputWithContext(ctx context.Context) BucketStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusOutput)
}

func (i BucketStatusArgs) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return i.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (i BucketStatusArgs) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusOutput).ToBucketStatusPtrOutputWithContext(ctx)
}

// BucketStatusPtrInput is an input type that accepts BucketStatusArgs, BucketStatusPtr and BucketStatusPtrOutput values.
// You can construct a concrete instance of `BucketStatusPtrInput` via:
//
//	        BucketStatusArgs{...}
//
//	or:
//
//	        nil
type BucketStatusPtrInput interface {
	pulumi.Input

	ToBucketStatusPtrOutput() BucketStatusPtrOutput
	ToBucketStatusPtrOutputWithContext(context.Context) BucketStatusPtrOutput
}

type bucketStatusPtrType BucketStatusArgs

func BucketStatusPtr(v *BucketStatusArgs) BucketStatusPtrInput {
	return (*bucketStatusPtrType)(v)
}

func (*bucketStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatus)(nil)).Elem()
}

func (i *bucketStatusPtrType) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return i.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (i *bucketStatusPtrType) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPtrOutput)
}

// BucketStatus records the observed state of a Bucket.
type BucketStatusOutput struct{ *pulumi.OutputState }

func (BucketStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatus)(nil)).Elem()
}

func (o BucketStatusOutput) ToBucketStatusOutput() BucketStatusOutput {
	return o
}

func (o BucketStatusOutput) ToBucketStatusOutputWithContext(ctx context.Context) BucketStatusOutput {
	return o
}

func (o BucketStatusOutput) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return o.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (o BucketStatusOutput) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatus) *BucketStatus {
		return &v
	}).(BucketStatusPtrOutput)
}

func (o BucketStatusOutput) Artifact() BucketStatusArtifactPtrOutput {
	return o.ApplyT(func(v BucketStatus) *BucketStatusArtifact { return v.Artifact }).(BucketStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusOutput) Conditions() BucketStatusConditionsArrayOutput {
	return o.ApplyT(func(v BucketStatus) []BucketStatusConditions { return v.Conditions }).(BucketStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Bucket object.
func (o BucketStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o BucketStatusOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatus) *string { return v.ObservedIgnore }).(pulumi.StringPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o BucketStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatus)(nil)).Elem()
}

func (o BucketStatusPtrOutput) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return o
}

func (o BucketStatusPtrOutput) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return o
}

func (o BucketStatusPtrOutput) Elem() BucketStatusOutput {
	return o.ApplyT(func(v *BucketStatus) BucketStatus {
		if v != nil {
			return *v
		}
		var ret BucketStatus
		return ret
	}).(BucketStatusOutput)
}

func (o BucketStatusPtrOutput) Artifact() BucketStatusArtifactPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *BucketStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(BucketStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusPtrOutput) Conditions() BucketStatusConditionsArrayOutput {
	return o.ApplyT(func(v *BucketStatus) []BucketStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(BucketStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Bucket object.
func (o BucketStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o BucketStatusPtrOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedIgnore
	}).(pulumi.StringPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o BucketStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the last successful Bucket reconciliation.
type BucketStatusArtifact struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// BucketStatusArtifactInput is an input type that accepts BucketStatusArtifactArgs and BucketStatusArtifactOutput values.
// You can construct a concrete instance of `BucketStatusArtifactInput` via:
//
//	BucketStatusArtifactArgs{...}
type BucketStatusArtifactInput interface {
	pulumi.Input

	ToBucketStatusArtifactOutput() BucketStatusArtifactOutput
	ToBucketStatusArtifactOutputWithContext(context.Context) BucketStatusArtifactOutput
}

// Artifact represents the last successful Bucket reconciliation.
type BucketStatusArtifactArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifact)(nil)).Elem()
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactOutput() BucketStatusArtifactOutput {
	return i.ToBucketStatusArtifactOutputWithContext(context.Background())
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactOutputWithContext(ctx context.Context) BucketStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactOutput)
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return i.ToBucketStatusArtifactPtrOutputWithContext(context.Background())
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactOutput).ToBucketStatusArtifactPtrOutputWithContext(ctx)
}

// BucketStatusArtifactPtrInput is an input type that accepts BucketStatusArtifactArgs, BucketStatusArtifactPtr and BucketStatusArtifactPtrOutput values.
// You can construct a concrete instance of `BucketStatusArtifactPtrInput` via:
//
//	        BucketStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type BucketStatusArtifactPtrInput interface {
	pulumi.Input

	ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput
	ToBucketStatusArtifactPtrOutputWithContext(context.Context) BucketStatusArtifactPtrOutput
}

type bucketStatusArtifactPtrType BucketStatusArtifactArgs

func BucketStatusArtifactPtr(v *BucketStatusArtifactArgs) BucketStatusArtifactPtrInput {
	return (*bucketStatusArtifactPtrType)(v)
}

func (*bucketStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifact)(nil)).Elem()
}

func (i *bucketStatusArtifactPtrType) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return i.ToBucketStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *bucketStatusArtifactPtrType) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPtrOutput)
}

// Artifact represents the last successful Bucket reconciliation.
type BucketStatusArtifactOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifact)(nil)).Elem()
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactOutput() BucketStatusArtifactOutput {
	return o
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactOutputWithContext(ctx context.Context) BucketStatusArtifactOutput {
	return o
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return o.ToBucketStatusArtifactPtrOutputWithContext(context.Background())
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatusArtifact) *BucketStatusArtifact {
		return &v
	}).(BucketStatusArtifactPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o BucketStatusArtifactOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o BucketStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o BucketStatusArtifactOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v BucketStatusArtifact) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o BucketStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o BucketStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o BucketStatusArtifactOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o BucketStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifact)(nil)).Elem()
}

func (o BucketStatusArtifactPtrOutput) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return o
}

func (o BucketStatusArtifactPtrOutput) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return o
}

func (o BucketStatusArtifactPtrOutput) Elem() BucketStatusArtifactOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) BucketStatusArtifact {
		if v != nil {
			return *v
		}
		var ret BucketStatusArtifact
		return ret
	}).(BucketStatusArtifactOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o BucketStatusArtifactPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o BucketStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o BucketStatusArtifactPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o BucketStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o BucketStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o BucketStatusArtifactPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o BucketStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the last successful Bucket reconciliation.
type BucketStatusArtifactPatch struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// BucketStatusArtifactPatchInput is an input type that accepts BucketStatusArtifactPatchArgs and BucketStatusArtifactPatchOutput values.
// You can construct a concrete instance of `BucketStatusArtifactPatchInput` via:
//
//	BucketStatusArtifactPatchArgs{...}
type BucketStatusArtifactPatchInput interface {
	pulumi.Input

	ToBucketStatusArtifactPatchOutput() BucketStatusArtifactPatchOutput
	ToBucketStatusArtifactPatchOutputWithContext(context.Context) BucketStatusArtifactPatchOutput
}

// Artifact represents the last successful Bucket reconciliation.
type BucketStatusArtifactPatchArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifactPatch)(nil)).Elem()
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchOutput() BucketStatusArtifactPatchOutput {
	return i.ToBucketStatusArtifactPatchOutputWithContext(context.Background())
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchOutputWithContext(ctx context.Context) BucketStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPatchOutput)
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return i.ToBucketStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPatchOutput).ToBucketStatusArtifactPatchPtrOutputWithContext(ctx)
}

// BucketStatusArtifactPatchPtrInput is an input type that accepts BucketStatusArtifactPatchArgs, BucketStatusArtifactPatchPtr and BucketStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `BucketStatusArtifactPatchPtrInput` via:
//
//	        BucketStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type BucketStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput
	ToBucketStatusArtifactPatchPtrOutputWithContext(context.Context) BucketStatusArtifactPatchPtrOutput
}

type bucketStatusArtifactPatchPtrType BucketStatusArtifactPatchArgs

func BucketStatusArtifactPatchPtr(v *BucketStatusArtifactPatchArgs) BucketStatusArtifactPatchPtrInput {
	return (*bucketStatusArtifactPatchPtrType)(v)
}

func (*bucketStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifactPatch)(nil)).Elem()
}

func (i *bucketStatusArtifactPatchPtrType) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return i.ToBucketStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *bucketStatusArtifactPatchPtrType) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPatchPtrOutput)
}

// Artifact represents the last successful Bucket reconciliation.
type BucketStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifactPatch)(nil)).Elem()
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchOutput() BucketStatusArtifactPatchOutput {
	return o
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchOutputWithContext(ctx context.Context) BucketStatusArtifactPatchOutput {
	return o
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return o.ToBucketStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatusArtifactPatch) *BucketStatusArtifactPatch {
		return &v
	}).(BucketStatusArtifactPatchPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o BucketStatusArtifactPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o BucketStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o BucketStatusArtifactPatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o BucketStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o BucketStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o BucketStatusArtifactPatchOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o BucketStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifactPatch)(nil)).Elem()
}

func (o BucketStatusArtifactPatchPtrOutput) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return o
}

func (o BucketStatusArtifactPatchPtrOutput) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return o
}

func (o BucketStatusArtifactPatchPtrOutput) Elem() BucketStatusArtifactPatchOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) BucketStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret BucketStatusArtifactPatch
		return ret
	}).(BucketStatusArtifactPatchOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o BucketStatusArtifactPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o BucketStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o BucketStatusArtifactPatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o BucketStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o BucketStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o BucketStatusArtifactPatchPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o BucketStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// BucketStatusConditionsInput is an input type that accepts BucketStatusConditionsArgs and BucketStatusConditionsOutput values.
// You can construct a concrete instance of `BucketStatusConditionsInput` via:
//
//	BucketStatusConditionsArgs{...}
type BucketStatusConditionsInput interface {
	pulumi.Input

	ToBucketStatusConditionsOutput() BucketStatusConditionsOutput
	ToBucketStatusConditionsOutputWithContext(context.Context) BucketStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BucketStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditions)(nil)).Elem()
}

func (i BucketStatusConditionsArgs) ToBucketStatusConditionsOutput() BucketStatusConditionsOutput {
	return i.ToBucketStatusConditionsOutputWithContext(context.Background())
}

func (i BucketStatusConditionsArgs) ToBucketStatusConditionsOutputWithContext(ctx context.Context) BucketStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsOutput)
}

// BucketStatusConditionsArrayInput is an input type that accepts BucketStatusConditionsArray and BucketStatusConditionsArrayOutput values.
// You can construct a concrete instance of `BucketStatusConditionsArrayInput` via:
//
//	BucketStatusConditionsArray{ BucketStatusConditionsArgs{...} }
type BucketStatusConditionsArrayInput interface {
	pulumi.Input

	ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput
	ToBucketStatusConditionsArrayOutputWithContext(context.Context) BucketStatusConditionsArrayOutput
}

type BucketStatusConditionsArray []BucketStatusConditionsInput

func (BucketStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditions)(nil)).Elem()
}

func (i BucketStatusConditionsArray) ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput {
	return i.ToBucketStatusConditionsArrayOutputWithContext(context.Background())
}

func (i BucketStatusConditionsArray) ToBucketStatusConditionsArrayOutputWithContext(ctx context.Context) BucketStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditions)(nil)).Elem()
}

func (o BucketStatusConditionsOutput) ToBucketStatusConditionsOutput() BucketStatusConditionsOutput {
	return o
}

func (o BucketStatusConditionsOutput) ToBucketStatusConditionsOutputWithContext(ctx context.Context) BucketStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o BucketStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o BucketStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o BucketStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o BucketStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o BucketStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o BucketStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BucketStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditions)(nil)).Elem()
}

func (o BucketStatusConditionsArrayOutput) ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput {
	return o
}

func (o BucketStatusConditionsArrayOutput) ToBucketStatusConditionsArrayOutputWithContext(ctx context.Context) BucketStatusConditionsArrayOutput {
	return o
}

func (o BucketStatusConditionsArrayOutput) Index(i pulumi.IntInput) BucketStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketStatusConditions {
		return vs[0].([]BucketStatusConditions)[vs[1].(int)]
	}).(BucketStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// BucketStatusConditionsPatchInput is an input type that accepts BucketStatusConditionsPatchArgs and BucketStatusConditionsPatchOutput values.
// You can construct a concrete instance of `BucketStatusConditionsPatchInput` via:
//
//	BucketStatusConditionsPatchArgs{...}
type BucketStatusConditionsPatchInput interface {
	pulumi.Input

	ToBucketStatusConditionsPatchOutput() BucketStatusConditionsPatchOutput
	ToBucketStatusConditionsPatchOutputWithContext(context.Context) BucketStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BucketStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditionsPatch)(nil)).Elem()
}

func (i BucketStatusConditionsPatchArgs) ToBucketStatusConditionsPatchOutput() BucketStatusConditionsPatchOutput {
	return i.ToBucketStatusConditionsPatchOutputWithContext(context.Background())
}

func (i BucketStatusConditionsPatchArgs) ToBucketStatusConditionsPatchOutputWithContext(ctx context.Context) BucketStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsPatchOutput)
}

// BucketStatusConditionsPatchArrayInput is an input type that accepts BucketStatusConditionsPatchArray and BucketStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `BucketStatusConditionsPatchArrayInput` via:
//
//	BucketStatusConditionsPatchArray{ BucketStatusConditionsPatchArgs{...} }
type BucketStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToBucketStatusConditionsPatchArrayOutput() BucketStatusConditionsPatchArrayOutput
	ToBucketStatusConditionsPatchArrayOutputWithContext(context.Context) BucketStatusConditionsPatchArrayOutput
}

type BucketStatusConditionsPatchArray []BucketStatusConditionsPatchInput

func (BucketStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditionsPatch)(nil)).Elem()
}

func (i BucketStatusConditionsPatchArray) ToBucketStatusConditionsPatchArrayOutput() BucketStatusConditionsPatchArrayOutput {
	return i.ToBucketStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i BucketStatusConditionsPatchArray) ToBucketStatusConditionsPatchArrayOutputWithContext(ctx context.Context) BucketStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditionsPatch)(nil)).Elem()
}

func (o BucketStatusConditionsPatchOutput) ToBucketStatusConditionsPatchOutput() BucketStatusConditionsPatchOutput {
	return o
}

func (o BucketStatusConditionsPatchOutput) ToBucketStatusConditionsPatchOutputWithContext(ctx context.Context) BucketStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o BucketStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o BucketStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o BucketStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o BucketStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o BucketStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o BucketStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BucketStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditionsPatch)(nil)).Elem()
}

func (o BucketStatusConditionsPatchArrayOutput) ToBucketStatusConditionsPatchArrayOutput() BucketStatusConditionsPatchArrayOutput {
	return o
}

func (o BucketStatusConditionsPatchArrayOutput) ToBucketStatusConditionsPatchArrayOutputWithContext(ctx context.Context) BucketStatusConditionsPatchArrayOutput {
	return o
}

func (o BucketStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) BucketStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketStatusConditionsPatch {
		return vs[0].([]BucketStatusConditionsPatch)[vs[1].(int)]
	}).(BucketStatusConditionsPatchOutput)
}

// BucketStatus records the observed state of a Bucket.
type BucketStatusPatch struct {
	Artifact *BucketStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions []BucketStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Bucket object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore *string `pulumi:"observedIgnore"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url *string `pulumi:"url"`
}

// BucketStatusPatchInput is an input type that accepts BucketStatusPatchArgs and BucketStatusPatchOutput values.
// You can construct a concrete instance of `BucketStatusPatchInput` via:
//
//	BucketStatusPatchArgs{...}
type BucketStatusPatchInput interface {
	pulumi.Input

	ToBucketStatusPatchOutput() BucketStatusPatchOutput
	ToBucketStatusPatchOutputWithContext(context.Context) BucketStatusPatchOutput
}

// BucketStatus records the observed state of a Bucket.
type BucketStatusPatchArgs struct {
	Artifact BucketStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions BucketStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Bucket object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore pulumi.StringPtrInput `pulumi:"observedIgnore"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusPatch)(nil)).Elem()
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchOutput() BucketStatusPatchOutput {
	return i.ToBucketStatusPatchOutputWithContext(context.Background())
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchOutputWithContext(ctx context.Context) BucketStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPatchOutput)
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return i.ToBucketStatusPatchPtrOutputWithContext(context.Background())
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPatchOutput).ToBucketStatusPatchPtrOutputWithContext(ctx)
}

// BucketStatusPatchPtrInput is an input type that accepts BucketStatusPatchArgs, BucketStatusPatchPtr and BucketStatusPatchPtrOutput values.
// You can construct a concrete instance of `BucketStatusPatchPtrInput` via:
//
//	        BucketStatusPatchArgs{...}
//
//	or:
//
//	        nil
type BucketStatusPatchPtrInput interface {
	pulumi.Input

	ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput
	ToBucketStatusPatchPtrOutputWithContext(context.Context) BucketStatusPatchPtrOutput
}

type bucketStatusPatchPtrType BucketStatusPatchArgs

func BucketStatusPatchPtr(v *BucketStatusPatchArgs) BucketStatusPatchPtrInput {
	return (*bucketStatusPatchPtrType)(v)
}

func (*bucketStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusPatch)(nil)).Elem()
}

func (i *bucketStatusPatchPtrType) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return i.ToBucketStatusPatchPtrOutputWithContext(context.Background())
}

func (i *bucketStatusPatchPtrType) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPatchPtrOutput)
}

// BucketStatus records the observed state of a Bucket.
type BucketStatusPatchOutput struct{ *pulumi.OutputState }

func (BucketStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusPatch)(nil)).Elem()
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchOutput() BucketStatusPatchOutput {
	return o
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchOutputWithContext(ctx context.Context) BucketStatusPatchOutput {
	return o
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return o.ToBucketStatusPatchPtrOutputWithContext(context.Background())
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatusPatch) *BucketStatusPatch {
		return &v
	}).(BucketStatusPatchPtrOutput)
}

func (o BucketStatusPatchOutput) Artifact() BucketStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *BucketStatusArtifactPatch { return v.Artifact }).(BucketStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusPatchOutput) Conditions() BucketStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v BucketStatusPatch) []BucketStatusConditionsPatch { return v.Conditions }).(BucketStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Bucket object.
func (o BucketStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o BucketStatusPatchOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *string { return v.ObservedIgnore }).(pulumi.StringPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o BucketStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusPatch)(nil)).Elem()
}

func (o BucketStatusPatchPtrOutput) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return o
}

func (o BucketStatusPatchPtrOutput) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return o
}

func (o BucketStatusPatchPtrOutput) Elem() BucketStatusPatchOutput {
	return o.ApplyT(func(v *BucketStatusPatch) BucketStatusPatch {
		if v != nil {
			return *v
		}
		var ret BucketStatusPatch
		return ret
	}).(BucketStatusPatchOutput)
}

func (o BucketStatusPatchPtrOutput) Artifact() BucketStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *BucketStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(BucketStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusPatchPtrOutput) Conditions() BucketStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *BucketStatusPatch) []BucketStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(BucketStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Bucket object.
func (o BucketStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o BucketStatusPatchPtrOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedIgnore
	}).(pulumi.StringPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o BucketStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *GitRepositorySpec   `pulumi:"spec"`
	Status   *GitRepositoryStatus `pulumi:"status"`
}

// GitRepositoryTypeInput is an input type that accepts GitRepositoryTypeArgs and GitRepositoryTypeOutput values.
// You can construct a concrete instance of `GitRepositoryTypeInput` via:
//
//	GitRepositoryTypeArgs{...}
type GitRepositoryTypeInput interface {
	pulumi.Input

	ToGitRepositoryTypeOutput() GitRepositoryTypeOutput
	ToGitRepositoryTypeOutputWithContext(context.Context) GitRepositoryTypeOutput
}

// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput   `pulumi:"metadata"`
	Spec     GitRepositorySpecPtrInput   `pulumi:"spec"`
	Status   GitRepositoryStatusPtrInput `pulumi:"status"`
}

func (GitRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryType)(nil)).Elem()
}

func (i GitRepositoryTypeArgs) ToGitRepositoryTypeOutput() GitRepositoryTypeOutput {
	return i.ToGitRepositoryTypeOutputWithContext(context.Background())
}

func (i GitRepositoryTypeArgs) ToGitRepositoryTypeOutputWithContext(ctx context.Context) GitRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryTypeOutput)
}

// GitRepositoryTypeArrayInput is an input type that accepts GitRepositoryTypeArray and GitRepositoryTypeArrayOutput values.
// You can construct a concrete instance of `GitRepositoryTypeArrayInput` via:
//
//	GitRepositoryTypeArray{ GitRepositoryTypeArgs{...} }
type GitRepositoryTypeArrayInput interface {
	pulumi.Input

	ToGitRepositoryTypeArrayOutput() GitRepositoryTypeArrayOutput
	ToGitRepositoryTypeArrayOutputWithContext(context.Context) GitRepositoryTypeArrayOutput
}

type GitRepositoryTypeArray []GitRepositoryTypeInput

func (GitRepositoryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryType)(nil)).Elem()
}

func (i GitRepositoryTypeArray) ToGitRepositoryTypeArrayOutput() GitRepositoryTypeArrayOutput {
	return i.ToGitRepositoryTypeArrayOutputWithContext(context.Background())
}

func (i GitRepositoryTypeArray) ToGitRepositoryTypeArrayOutputWithContext(ctx context.Context) GitRepositoryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryTypeArrayOutput)
}

// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryTypeOutput struct{ *pulumi.OutputState }

func (GitRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryType)(nil)).Elem()
}

func (o GitRepositoryTypeOutput) ToGitRepositoryTypeOutput() GitRepositoryTypeOutput {
	return o
}

func (o GitRepositoryTypeOutput) ToGitRepositoryTypeOutputWithContext(ctx context.Context) GitRepositoryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GitRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GitRepositoryTypeOutput) Spec() GitRepositorySpecPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *GitRepositorySpec { return v.Spec }).(GitRepositorySpecPtrOutput)
}

func (o GitRepositoryTypeOutput) Status() GitRepositoryStatusPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *GitRepositoryStatus { return v.Status }).(GitRepositoryStatusPtrOutput)
}

type GitRepositoryTypeArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryType)(nil)).Elem()
}

func (o GitRepositoryTypeArrayOutput) ToGitRepositoryTypeArrayOutput() GitRepositoryTypeArrayOutput {
	return o
}

func (o GitRepositoryTypeArrayOutput) ToGitRepositoryTypeArrayOutputWithContext(ctx context.Context) GitRepositoryTypeArrayOutput {
	return o
}

func (o GitRepositoryTypeArrayOutput) Index(i pulumi.IntInput) GitRepositoryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryType {
		return vs[0].([]GitRepositoryType)[vs[1].(int)]
	}).(GitRepositoryTypeOutput)
}

// GitRepositoryList is a list of GitRepository
type GitRepositoryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GitRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// GitRepositoryListTypeInput is an input type that accepts GitRepositoryListTypeArgs and GitRepositoryListTypeOutput values.
// You can construct a concrete instance of `GitRepositoryListTypeInput` via:
//
//	GitRepositoryListTypeArgs{...}
type GitRepositoryListTypeInput interface {
	pulumi.Input

	ToGitRepositoryListTypeOutput() GitRepositoryListTypeOutput
	ToGitRepositoryListTypeOutputWithContext(context.Context) GitRepositoryListTypeOutput
}

// GitRepositoryList is a list of GitRepository
type GitRepositoryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GitRepositoryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (GitRepositoryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryListType)(nil)).Elem()
}

func (i GitRepositoryListTypeArgs) ToGitRepositoryListTypeOutput() GitRepositoryListTypeOutput {
	return i.ToGitRepositoryListTypeOutputWithContext(context.Background())
}

func (i GitRepositoryListTypeArgs) ToGitRepositoryListTypeOutputWithContext(ctx context.Context) GitRepositoryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryListTypeOutput)
}

// GitRepositoryList is a list of GitRepository
type GitRepositoryListTypeOutput struct{ *pulumi.OutputState }

func (GitRepositoryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryListType)(nil)).Elem()
}

func (o GitRepositoryListTypeOutput) ToGitRepositoryListTypeOutput() GitRepositoryListTypeOutput {
	return o
}

func (o GitRepositoryListTypeOutput) ToGitRepositoryListTypeOutputWithContext(ctx context.Context) GitRepositoryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GitRepositoryListTypeOutput) Items() GitRepositoryTypeArrayOutput {
	return o.ApplyT(func(v GitRepositoryListType) []GitRepositoryType { return v.Items }).(GitRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v GitRepositoryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *GitRepositorySpecPatch   `pulumi:"spec"`
	Status   *GitRepositoryStatusPatch `pulumi:"status"`
}

// GitRepositoryPatchTypeInput is an input type that accepts GitRepositoryPatchTypeArgs and GitRepositoryPatchTypeOutput values.
// You can construct a concrete instance of `GitRepositoryPatchTypeInput` via:
//
//	GitRepositoryPatchTypeArgs{...}
type GitRepositoryPatchTypeInput interface {
	pulumi.Input

	ToGitRepositoryPatchTypeOutput() GitRepositoryPatchTypeOutput
	ToGitRepositoryPatchTypeOutputWithContext(context.Context) GitRepositoryPatchTypeOutput
}

// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput   `pulumi:"metadata"`
	Spec     GitRepositorySpecPatchPtrInput   `pulumi:"spec"`
	Status   GitRepositoryStatusPatchPtrInput `pulumi:"status"`
}

func (GitRepositoryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryPatchType)(nil)).Elem()
}

func (i GitRepositoryPatchTypeArgs) ToGitRepositoryPatchTypeOutput() GitRepositoryPatchTypeOutput {
	return i.ToGitRepositoryPatchTypeOutputWithContext(context.Background())
}

func (i GitRepositoryPatchTypeArgs) ToGitRepositoryPatchTypeOutputWithContext(ctx context.Context) GitRepositoryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryPatchTypeOutput)
}

// GitRepository is the Schema for the gitrepositories API.
type GitRepositoryPatchTypeOutput struct{ *pulumi.OutputState }

func (GitRepositoryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryPatchType)(nil)).Elem()
}

func (o GitRepositoryPatchTypeOutput) ToGitRepositoryPatchTypeOutput() GitRepositoryPatchTypeOutput {
	return o
}

func (o GitRepositoryPatchTypeOutput) ToGitRepositoryPatchTypeOutputWithContext(ctx context.Context) GitRepositoryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GitRepositoryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GitRepositoryPatchTypeOutput) Spec() GitRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *GitRepositorySpecPatch { return v.Spec }).(GitRepositorySpecPatchPtrOutput)
}

func (o GitRepositoryPatchTypeOutput) Status() GitRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *GitRepositoryStatusPatch { return v.Status }).(GitRepositoryStatusPatchPtrOutput)
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
type GitRepositorySpec struct {
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Include specifies a list of GitRepository resources which Artifacts
	// should be included in the Artifact produced for this GitRepository.
	Include []GitRepositorySpecInclude `pulumi:"include"`
	// Interval at which the GitRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// Provider used for authentication, can be 'azure', 'github', 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       *string                          `pulumi:"provider"`
	ProxySecretRef *GitRepositorySpecProxySecretRef `pulumi:"proxySecretRef"`
	// RecurseSubmodules enables the initialization of all submodules within
	// the GitRepository as cloned from the URL, using their default settings.
	RecurseSubmodules *bool                       `pulumi:"recurseSubmodules"`
	Ref               *GitRepositorySpecRef       `pulumi:"ref"`
	SecretRef         *GitRepositorySpecSecretRef `pulumi:"secretRef"`
	// SparseCheckout specifies a list of directories to checkout when cloning
	// the repository. If specified, only these directories are included in the
	// Artifact produced for this GitRepository.
	SparseCheckout []string `pulumi:"sparseCheckout"`
	// Suspend tells the controller to suspend the reconciliation of this
	// GitRepository.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for Git operations like cloning, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
	Url    *string                  `pulumi:"url"`
	Verify *GitRepositorySpecVerify `pulumi:"verify"`
}

// GitRepositorySpecInput is an input type that accepts GitRepositorySpecArgs and GitRepositorySpecOutput values.
// You can construct a concrete instance of `GitRepositorySpecInput` via:
//
//	GitRepositorySpecArgs{...}
type GitRepositorySpecInput interface {
	pulumi.Input

	ToGitRepositorySpecOutput() GitRepositorySpecOutput
	ToGitRepositorySpecOutputWithContext(context.Context) GitRepositorySpecOutput
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
type GitRepositorySpecArgs struct {
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Include specifies a list of GitRepository resources which Artifacts
	// should be included in the Artifact produced for this GitRepository.
	Include GitRepositorySpecIncludeArrayInput `pulumi:"include"`
	// Interval at which the GitRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Provider used for authentication, can be 'azure', 'github', 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       pulumi.StringPtrInput                   `pulumi:"provider"`
	ProxySecretRef GitRepositorySpecProxySecretRefPtrInput `pulumi:"proxySecretRef"`
	// RecurseSubmodules enables the initialization of all submodules within
	// the GitRepository as cloned from the URL, using their default settings.
	RecurseSubmodules pulumi.BoolPtrInput                `pulumi:"recurseSubmodules"`
	Ref               GitRepositorySpecRefPtrInput       `pulumi:"ref"`
	SecretRef         GitRepositorySpecSecretRefPtrInput `pulumi:"secretRef"`
	// SparseCheckout specifies a list of directories to checkout when cloning
	// the repository. If specified, only these directories are included in the
	// Artifact produced for this GitRepository.
	SparseCheckout pulumi.StringArrayInput `pulumi:"sparseCheckout"`
	// Suspend tells the controller to suspend the reconciliation of this
	// GitRepository.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for Git operations like cloning, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
	Url    pulumi.StringPtrInput           `pulumi:"url"`
	Verify GitRepositorySpecVerifyPtrInput `pulumi:"verify"`
}

func (GitRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpec)(nil)).Elem()
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecOutput() GitRepositorySpecOutput {
	return i.ToGitRepositorySpecOutputWithContext(context.Background())
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecOutputWithContext(ctx context.Context) GitRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecOutput)
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return i.ToGitRepositorySpecPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecOutput).ToGitRepositorySpecPtrOutputWithContext(ctx)
}

// GitRepositorySpecPtrInput is an input type that accepts GitRepositorySpecArgs, GitRepositorySpecPtr and GitRepositorySpecPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecPtrInput` via:
//
//	        GitRepositorySpecArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput
	ToGitRepositorySpecPtrOutputWithContext(context.Context) GitRepositorySpecPtrOutput
}

type gitRepositorySpecPtrType GitRepositorySpecArgs

func GitRepositorySpecPtr(v *GitRepositorySpecArgs) GitRepositorySpecPtrInput {
	return (*gitRepositorySpecPtrType)(v)
}

func (*gitRepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpec)(nil)).Elem()
}

func (i *gitRepositorySpecPtrType) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return i.ToGitRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecPtrType) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPtrOutput)
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
type GitRepositorySpecOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpec)(nil)).Elem()
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecOutput() GitRepositorySpecOutput {
	return o
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecOutputWithContext(ctx context.Context) GitRepositorySpecOutput {
	return o
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return o.ToGitRepositorySpecPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpec) *GitRepositorySpec {
		return &v
	}).(GitRepositorySpecPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Include specifies a list of GitRepository resources which Artifacts
// should be included in the Artifact produced for this GitRepository.
func (o GitRepositorySpecOutput) Include() GitRepositorySpecIncludeArrayOutput {
	return o.ApplyT(func(v GitRepositorySpec) []GitRepositorySpecInclude { return v.Include }).(GitRepositorySpecIncludeArrayOutput)
}

// Interval at which the GitRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o GitRepositorySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Provider used for authentication, can be 'azure', 'github', 'generic'.
// When not specified, defaults to 'generic'.
func (o GitRepositorySpecOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecOutput) ProxySecretRef() GitRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecProxySecretRef { return v.ProxySecretRef }).(GitRepositorySpecProxySecretRefPtrOutput)
}

// RecurseSubmodules enables the initialization of all submodules within
// the GitRepository as cloned from the URL, using their default settings.
func (o GitRepositorySpecOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *bool { return v.RecurseSubmodules }).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecOutput) Ref() GitRepositorySpecRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecRef { return v.Ref }).(GitRepositorySpecRefPtrOutput)
}

func (o GitRepositorySpecOutput) SecretRef() GitRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecSecretRef { return v.SecretRef }).(GitRepositorySpecSecretRefPtrOutput)
}

// SparseCheckout specifies a list of directories to checkout when cloning
// the repository. If specified, only these directories are included in the
// Artifact produced for this GitRepository.
func (o GitRepositorySpecOutput) SparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GitRepositorySpec) []string { return v.SparseCheckout }).(pulumi.StringArrayOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// GitRepository.
func (o GitRepositorySpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
func (o GitRepositorySpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecOutput) Verify() GitRepositorySpecVerifyPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecVerify { return v.Verify }).(GitRepositorySpecVerifyPtrOutput)
}

type GitRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpec)(nil)).Elem()
}

func (o GitRepositorySpecPtrOutput) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return o
}

func (o GitRepositorySpecPtrOutput) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return o
}

func (o GitRepositorySpecPtrOutput) Elem() GitRepositorySpecOutput {
	return o.ApplyT(func(v *GitRepositorySpec) GitRepositorySpec {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpec
		return ret
	}).(GitRepositorySpecOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Include specifies a list of GitRepository resources which Artifacts
// should be included in the Artifact produced for this GitRepository.
func (o GitRepositorySpecPtrOutput) Include() GitRepositorySpecIncludeArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpec) []GitRepositorySpecInclude {
		if v == nil {
			return nil
		}
		return v.Include
	}).(GitRepositorySpecIncludeArrayOutput)
}

// Interval at which the GitRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o GitRepositorySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Provider used for authentication, can be 'azure', 'github', 'generic'.
// When not specified, defaults to 'generic'.
func (o GitRepositorySpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPtrOutput) ProxySecretRef() GitRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecProxySecretRef {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(GitRepositorySpecProxySecretRefPtrOutput)
}

// RecurseSubmodules enables the initialization of all submodules within
// the GitRepository as cloned from the URL, using their default settings.
func (o GitRepositorySpecPtrOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.RecurseSubmodules
	}).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecPtrOutput) Ref() GitRepositorySpecRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecRef {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(GitRepositorySpecRefPtrOutput)
}

func (o GitRepositorySpecPtrOutput) SecretRef() GitRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecSecretRefPtrOutput)
}

// SparseCheckout specifies a list of directories to checkout when cloning
// the repository. If specified, only these directories are included in the
// Artifact produced for this GitRepository.
func (o GitRepositorySpecPtrOutput) SparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpec) []string {
		if v == nil {
			return nil
		}
		return v.SparseCheckout
	}).(pulumi.StringArrayOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// GitRepository.
func (o GitRepositorySpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
func (o GitRepositorySpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPtrOutput) Verify() GitRepositorySpecVerifyPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecVerify {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(GitRepositorySpecVerifyPtrOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositorySpecInclude struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   *string                             `pulumi:"fromPath"`
	Repository *GitRepositorySpecIncludeRepository `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath *string `pulumi:"toPath"`
}

// GitRepositorySpecIncludeInput is an input type that accepts GitRepositorySpecIncludeArgs and GitRepositorySpecIncludeOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeInput` via:
//
//	GitRepositorySpecIncludeArgs{...}
type GitRepositorySpecIncludeInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeOutput() GitRepositorySpecIncludeOutput
	ToGitRepositorySpecIncludeOutputWithContext(context.Context) GitRepositorySpecIncludeOutput
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositorySpecIncludeArgs struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   pulumi.StringPtrInput                      `pulumi:"fromPath"`
	Repository GitRepositorySpecIncludeRepositoryPtrInput `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath pulumi.StringPtrInput `pulumi:"toPath"`
}

func (GitRepositorySpecIncludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecInclude)(nil)).Elem()
}

func (i GitRepositorySpecIncludeArgs) ToGitRepositorySpecIncludeOutput() GitRepositorySpecIncludeOutput {
	return i.ToGitRepositorySpecIncludeOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeArgs) ToGitRepositorySpecIncludeOutputWithContext(ctx context.Context) GitRepositorySpecIncludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeOutput)
}

// GitRepositorySpecIncludeArrayInput is an input type that accepts GitRepositorySpecIncludeArray and GitRepositorySpecIncludeArrayOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeArrayInput` via:
//
//	GitRepositorySpecIncludeArray{ GitRepositorySpecIncludeArgs{...} }
type GitRepositorySpecIncludeArrayInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeArrayOutput() GitRepositorySpecIncludeArrayOutput
	ToGitRepositorySpecIncludeArrayOutputWithContext(context.Context) GitRepositorySpecIncludeArrayOutput
}

type GitRepositorySpecIncludeArray []GitRepositorySpecIncludeInput

func (GitRepositorySpecIncludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecInclude)(nil)).Elem()
}

func (i GitRepositorySpecIncludeArray) ToGitRepositorySpecIncludeArrayOutput() GitRepositorySpecIncludeArrayOutput {
	return i.ToGitRepositorySpecIncludeArrayOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeArray) ToGitRepositorySpecIncludeArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeArrayOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositorySpecIncludeOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecInclude)(nil)).Elem()
}

func (o GitRepositorySpecIncludeOutput) ToGitRepositorySpecIncludeOutput() GitRepositorySpecIncludeOutput {
	return o
}

func (o GitRepositorySpecIncludeOutput) ToGitRepositorySpecIncludeOutputWithContext(ctx context.Context) GitRepositorySpecIncludeOutput {
	return o
}

// FromPath specifies the path to copy contents from, defaults to the root
// of the Artifact.
func (o GitRepositorySpecIncludeOutput) FromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecInclude) *string { return v.FromPath }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecIncludeOutput) Repository() GitRepositorySpecIncludeRepositoryPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecInclude) *GitRepositorySpecIncludeRepository { return v.Repository }).(GitRepositorySpecIncludeRepositoryPtrOutput)
}

// ToPath specifies the path to copy contents to, defaults to the name of
// the GitRepositoryRef.
func (o GitRepositorySpecIncludeOutput) ToPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecInclude) *string { return v.ToPath }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludeArrayOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecInclude)(nil)).Elem()
}

func (o GitRepositorySpecIncludeArrayOutput) ToGitRepositorySpecIncludeArrayOutput() GitRepositorySpecIncludeArrayOutput {
	return o
}

func (o GitRepositorySpecIncludeArrayOutput) ToGitRepositorySpecIncludeArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludeArrayOutput {
	return o
}

func (o GitRepositorySpecIncludeArrayOutput) Index(i pulumi.IntInput) GitRepositorySpecIncludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositorySpecInclude {
		return vs[0].([]GitRepositorySpecInclude)[vs[1].(int)]
	}).(GitRepositorySpecIncludeOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositorySpecIncludePatch struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   *string                                  `pulumi:"fromPath"`
	Repository *GitRepositorySpecIncludeRepositoryPatch `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath *string `pulumi:"toPath"`
}

// GitRepositorySpecIncludePatchInput is an input type that accepts GitRepositorySpecIncludePatchArgs and GitRepositorySpecIncludePatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludePatchInput` via:
//
//	GitRepositorySpecIncludePatchArgs{...}
type GitRepositorySpecIncludePatchInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludePatchOutput() GitRepositorySpecIncludePatchOutput
	ToGitRepositorySpecIncludePatchOutputWithContext(context.Context) GitRepositorySpecIncludePatchOutput
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositorySpecIncludePatchArgs struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   pulumi.StringPtrInput                           `pulumi:"fromPath"`
	Repository GitRepositorySpecIncludeRepositoryPatchPtrInput `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath pulumi.StringPtrInput `pulumi:"toPath"`
}

func (GitRepositorySpecIncludePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (i GitRepositorySpecIncludePatchArgs) ToGitRepositorySpecIncludePatchOutput() GitRepositorySpecIncludePatchOutput {
	return i.ToGitRepositorySpecIncludePatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludePatchArgs) ToGitRepositorySpecIncludePatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludePatchOutput)
}

// GitRepositorySpecIncludePatchArrayInput is an input type that accepts GitRepositorySpecIncludePatchArray and GitRepositorySpecIncludePatchArrayOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludePatchArrayInput` via:
//
//	GitRepositorySpecIncludePatchArray{ GitRepositorySpecIncludePatchArgs{...} }
type GitRepositorySpecIncludePatchArrayInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludePatchArrayOutput() GitRepositorySpecIncludePatchArrayOutput
	ToGitRepositorySpecIncludePatchArrayOutputWithContext(context.Context) GitRepositorySpecIncludePatchArrayOutput
}

type GitRepositorySpecIncludePatchArray []GitRepositorySpecIncludePatchInput

func (GitRepositorySpecIncludePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (i GitRepositorySpecIncludePatchArray) ToGitRepositorySpecIncludePatchArrayOutput() GitRepositorySpecIncludePatchArrayOutput {
	return i.ToGitRepositorySpecIncludePatchArrayOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludePatchArray) ToGitRepositorySpecIncludePatchArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludePatchArrayOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositorySpecIncludePatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludePatchOutput) ToGitRepositorySpecIncludePatchOutput() GitRepositorySpecIncludePatchOutput {
	return o
}

func (o GitRepositorySpecIncludePatchOutput) ToGitRepositorySpecIncludePatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchOutput {
	return o
}

// FromPath specifies the path to copy contents from, defaults to the root
// of the Artifact.
func (o GitRepositorySpecIncludePatchOutput) FromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludePatch) *string { return v.FromPath }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecIncludePatchOutput) Repository() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludePatch) *GitRepositorySpecIncludeRepositoryPatch { return v.Repository }).(GitRepositorySpecIncludeRepositoryPatchPtrOutput)
}

// ToPath specifies the path to copy contents to, defaults to the name of
// the GitRepositoryRef.
func (o GitRepositorySpecIncludePatchOutput) ToPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludePatch) *string { return v.ToPath }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludePatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludePatchArrayOutput) ToGitRepositorySpecIncludePatchArrayOutput() GitRepositorySpecIncludePatchArrayOutput {
	return o
}

func (o GitRepositorySpecIncludePatchArrayOutput) ToGitRepositorySpecIncludePatchArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchArrayOutput {
	return o
}

func (o GitRepositorySpecIncludePatchArrayOutput) Index(i pulumi.IntInput) GitRepositorySpecIncludePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositorySpecIncludePatch {
		return vs[0].([]GitRepositorySpecIncludePatch)[vs[1].(int)]
	}).(GitRepositorySpecIncludePatchOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositorySpecIncludeRepository struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecIncludeRepositoryInput is an input type that accepts GitRepositorySpecIncludeRepositoryArgs and GitRepositorySpecIncludeRepositoryOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryInput` via:
//
//	GitRepositorySpecIncludeRepositoryArgs{...}
type GitRepositorySpecIncludeRepositoryInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryOutput() GitRepositorySpecIncludeRepositoryOutput
	ToGitRepositorySpecIncludeRepositoryOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryOutput
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositorySpecIncludeRepositoryArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecIncludeRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryOutput() GitRepositorySpecIncludeRepositoryOutput {
	return i.ToGitRepositorySpecIncludeRepositoryOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryOutput)
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryOutput).ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx)
}

// GitRepositorySpecIncludeRepositoryPtrInput is an input type that accepts GitRepositorySpecIncludeRepositoryArgs, GitRepositorySpecIncludeRepositoryPtr and GitRepositorySpecIncludeRepositoryPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryPtrInput` via:
//
//	        GitRepositorySpecIncludeRepositoryArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecIncludeRepositoryPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput
	ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryPtrOutput
}

type gitRepositorySpecIncludeRepositoryPtrType GitRepositorySpecIncludeRepositoryArgs

func GitRepositorySpecIncludeRepositoryPtr(v *GitRepositorySpecIncludeRepositoryArgs) GitRepositorySpecIncludeRepositoryPtrInput {
	return (*gitRepositorySpecIncludeRepositoryPtrType)(v)
}

func (*gitRepositorySpecIncludeRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (i *gitRepositorySpecIncludeRepositoryPtrType) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecIncludeRepositoryPtrType) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPtrOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositorySpecIncludeRepositoryOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryOutput() GitRepositorySpecIncludeRepositoryOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return o.ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecIncludeRepository) *GitRepositorySpecIncludeRepository {
		return &v
	}).(GitRepositorySpecIncludeRepositoryPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludeRepository) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludeRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryPtrOutput) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPtrOutput) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPtrOutput) Elem() GitRepositorySpecIncludeRepositoryOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepository) GitRepositorySpecIncludeRepository {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecIncludeRepository
		return ret
	}).(GitRepositorySpecIncludeRepositoryOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepository) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositorySpecIncludeRepositoryPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecIncludeRepositoryPatchInput is an input type that accepts GitRepositorySpecIncludeRepositoryPatchArgs and GitRepositorySpecIncludeRepositoryPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryPatchInput` via:
//
//	GitRepositorySpecIncludeRepositoryPatchArgs{...}
type GitRepositorySpecIncludeRepositoryPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryPatchOutput() GitRepositorySpecIncludeRepositoryPatchOutput
	ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryPatchOutput
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositorySpecIncludeRepositoryPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecIncludeRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchOutput() GitRepositorySpecIncludeRepositoryPatchOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPatchOutput)
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPatchOutput).ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecIncludeRepositoryPatchPtrInput is an input type that accepts GitRepositorySpecIncludeRepositoryPatchArgs, GitRepositorySpecIncludeRepositoryPatchPtr and GitRepositorySpecIncludeRepositoryPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryPatchPtrInput` via:
//
//	        GitRepositorySpecIncludeRepositoryPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecIncludeRepositoryPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput
	ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput
}

type gitRepositorySpecIncludeRepositoryPatchPtrType GitRepositorySpecIncludeRepositoryPatchArgs

func GitRepositorySpecIncludeRepositoryPatchPtr(v *GitRepositorySpecIncludeRepositoryPatchArgs) GitRepositorySpecIncludeRepositoryPatchPtrInput {
	return (*gitRepositorySpecIncludeRepositoryPatchPtrType)(v)
}

func (*gitRepositorySpecIncludeRepositoryPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (i *gitRepositorySpecIncludeRepositoryPatchPtrType) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecIncludeRepositoryPatchPtrType) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPatchPtrOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositorySpecIncludeRepositoryPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchOutput() GitRepositorySpecIncludeRepositoryPatchOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o.ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecIncludeRepositoryPatch) *GitRepositorySpecIncludeRepositoryPatch {
		return &v
	}).(GitRepositorySpecIncludeRepositoryPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludeRepositoryPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludeRepositoryPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) Elem() GitRepositorySpecIncludeRepositoryPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepositoryPatch) GitRepositorySpecIncludeRepositoryPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecIncludeRepositoryPatch
		return ret
	}).(GitRepositorySpecIncludeRepositoryPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepositoryPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
type GitRepositorySpecPatch struct {
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Include specifies a list of GitRepository resources which Artifacts
	// should be included in the Artifact produced for this GitRepository.
	Include []GitRepositorySpecIncludePatch `pulumi:"include"`
	// Interval at which the GitRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// Provider used for authentication, can be 'azure', 'github', 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       *string                               `pulumi:"provider"`
	ProxySecretRef *GitRepositorySpecProxySecretRefPatch `pulumi:"proxySecretRef"`
	// RecurseSubmodules enables the initialization of all submodules within
	// the GitRepository as cloned from the URL, using their default settings.
	RecurseSubmodules *bool                            `pulumi:"recurseSubmodules"`
	Ref               *GitRepositorySpecRefPatch       `pulumi:"ref"`
	SecretRef         *GitRepositorySpecSecretRefPatch `pulumi:"secretRef"`
	// SparseCheckout specifies a list of directories to checkout when cloning
	// the repository. If specified, only these directories are included in the
	// Artifact produced for this GitRepository.
	SparseCheckout []string `pulumi:"sparseCheckout"`
	// Suspend tells the controller to suspend the reconciliation of this
	// GitRepository.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for Git operations like cloning, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
	Url    *string                       `pulumi:"url"`
	Verify *GitRepositorySpecVerifyPatch `pulumi:"verify"`
}

// GitRepositorySpecPatchInput is an input type that accepts GitRepositorySpecPatchArgs and GitRepositorySpecPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecPatchInput` via:
//
//	GitRepositorySpecPatchArgs{...}
type GitRepositorySpecPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecPatchOutput() GitRepositorySpecPatchOutput
	ToGitRepositorySpecPatchOutputWithContext(context.Context) GitRepositorySpecPatchOutput
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
type GitRepositorySpecPatchArgs struct {
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Include specifies a list of GitRepository resources which Artifacts
	// should be included in the Artifact produced for this GitRepository.
	Include GitRepositorySpecIncludePatchArrayInput `pulumi:"include"`
	// Interval at which the GitRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Provider used for authentication, can be 'azure', 'github', 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       pulumi.StringPtrInput                        `pulumi:"provider"`
	ProxySecretRef GitRepositorySpecProxySecretRefPatchPtrInput `pulumi:"proxySecretRef"`
	// RecurseSubmodules enables the initialization of all submodules within
	// the GitRepository as cloned from the URL, using their default settings.
	RecurseSubmodules pulumi.BoolPtrInput                     `pulumi:"recurseSubmodules"`
	Ref               GitRepositorySpecRefPatchPtrInput       `pulumi:"ref"`
	SecretRef         GitRepositorySpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	// SparseCheckout specifies a list of directories to checkout when cloning
	// the repository. If specified, only these directories are included in the
	// Artifact produced for this GitRepository.
	SparseCheckout pulumi.StringArrayInput `pulumi:"sparseCheckout"`
	// Suspend tells the controller to suspend the reconciliation of this
	// GitRepository.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for Git operations like cloning, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
	Url    pulumi.StringPtrInput                `pulumi:"url"`
	Verify GitRepositorySpecVerifyPatchPtrInput `pulumi:"verify"`
}

func (GitRepositorySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecPatch)(nil)).Elem()
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchOutput() GitRepositorySpecPatchOutput {
	return i.ToGitRepositorySpecPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchOutputWithContext(ctx context.Context) GitRepositorySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPatchOutput)
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return i.ToGitRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPatchOutput).ToGitRepositorySpecPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecPatchPtrInput is an input type that accepts GitRepositorySpecPatchArgs, GitRepositorySpecPatchPtr and GitRepositorySpecPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecPatchPtrInput` via:
//
//	        GitRepositorySpecPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput
	ToGitRepositorySpecPatchPtrOutputWithContext(context.Context) GitRepositorySpecPatchPtrOutput
}

type gitRepositorySpecPatchPtrType GitRepositorySpecPatchArgs

func GitRepositorySpecPatchPtr(v *GitRepositorySpecPatchArgs) GitRepositorySpecPatchPtrInput {
	return (*gitRepositorySpecPatchPtrType)(v)
}

func (*gitRepositorySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecPatch)(nil)).Elem()
}

func (i *gitRepositorySpecPatchPtrType) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return i.ToGitRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecPatchPtrType) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPatchPtrOutput)
}

// GitRepositorySpec specifies the required configuration to produce an
// Artifact for a Git repository.
type GitRepositorySpecPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecPatch)(nil)).Elem()
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchOutput() GitRepositorySpecPatchOutput {
	return o
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchOutputWithContext(ctx context.Context) GitRepositorySpecPatchOutput {
	return o
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return o.ToGitRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecPatch) *GitRepositorySpecPatch {
		return &v
	}).(GitRepositorySpecPatchPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecPatchOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Include specifies a list of GitRepository resources which Artifacts
// should be included in the Artifact produced for this GitRepository.
func (o GitRepositorySpecPatchOutput) Include() GitRepositorySpecIncludePatchArrayOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) []GitRepositorySpecIncludePatch { return v.Include }).(GitRepositorySpecIncludePatchArrayOutput)
}

// Interval at which the GitRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o GitRepositorySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Provider used for authentication, can be 'azure', 'github', 'generic'.
// When not specified, defaults to 'generic'.
func (o GitRepositorySpecPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPatchOutput) ProxySecretRef() GitRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecProxySecretRefPatch { return v.ProxySecretRef }).(GitRepositorySpecProxySecretRefPatchPtrOutput)
}

// RecurseSubmodules enables the initialization of all submodules within
// the GitRepository as cloned from the URL, using their default settings.
func (o GitRepositorySpecPatchOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *bool { return v.RecurseSubmodules }).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecPatchOutput) Ref() GitRepositorySpecRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecRefPatch { return v.Ref }).(GitRepositorySpecRefPatchPtrOutput)
}

func (o GitRepositorySpecPatchOutput) SecretRef() GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecSecretRefPatch { return v.SecretRef }).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// SparseCheckout specifies a list of directories to checkout when cloning
// the repository. If specified, only these directories are included in the
// Artifact produced for this GitRepository.
func (o GitRepositorySpecPatchOutput) SparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) []string { return v.SparseCheckout }).(pulumi.StringArrayOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// GitRepository.
func (o GitRepositorySpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
func (o GitRepositorySpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPatchOutput) Verify() GitRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecVerifyPatch { return v.Verify }).(GitRepositorySpecVerifyPatchPtrOutput)
}

type GitRepositorySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecPatch)(nil)).Elem()
}

func (o GitRepositorySpecPatchPtrOutput) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return o
}

func (o GitRepositorySpecPatchPtrOutput) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return o
}

func (o GitRepositorySpecPatchPtrOutput) Elem() GitRepositorySpecPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) GitRepositorySpecPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecPatch
		return ret
	}).(GitRepositorySpecPatchOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecPatchPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Include specifies a list of GitRepository resources which Artifacts
// should be included in the Artifact produced for this GitRepository.
func (o GitRepositorySpecPatchPtrOutput) Include() GitRepositorySpecIncludePatchArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) []GitRepositorySpecIncludePatch {
		if v == nil {
			return nil
		}
		return v.Include
	}).(GitRepositorySpecIncludePatchArrayOutput)
}

// Interval at which the GitRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o GitRepositorySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Provider used for authentication, can be 'azure', 'github', 'generic'.
// When not specified, defaults to 'generic'.
func (o GitRepositorySpecPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) ProxySecretRef() GitRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecProxySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(GitRepositorySpecProxySecretRefPatchPtrOutput)
}

// RecurseSubmodules enables the initialization of all submodules within
// the GitRepository as cloned from the URL, using their default settings.
func (o GitRepositorySpecPatchPtrOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RecurseSubmodules
	}).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) Ref() GitRepositorySpecRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecRefPatch {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(GitRepositorySpecRefPatchPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) SecretRef() GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// SparseCheckout specifies a list of directories to checkout when cloning
// the repository. If specified, only these directories are included in the
// Artifact produced for this GitRepository.
func (o GitRepositorySpecPatchPtrOutput) SparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.SparseCheckout
	}).(pulumi.StringArrayOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// GitRepository.
func (o GitRepositorySpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// URL specifies the Git repository URL, it can be an HTTP/S or SSH address.
func (o GitRepositorySpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) Verify() GitRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecVerifyPatch {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(GitRepositorySpecVerifyPatchPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Git server.
type GitRepositorySpecProxySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecProxySecretRefInput is an input type that accepts GitRepositorySpecProxySecretRefArgs and GitRepositorySpecProxySecretRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecProxySecretRefInput` via:
//
//	GitRepositorySpecProxySecretRefArgs{...}
type GitRepositorySpecProxySecretRefInput interface {
	pulumi.Input

	ToGitRepositorySpecProxySecretRefOutput() GitRepositorySpecProxySecretRefOutput
	ToGitRepositorySpecProxySecretRefOutputWithContext(context.Context) GitRepositorySpecProxySecretRefOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Git server.
type GitRepositorySpecProxySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecProxySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecProxySecretRef)(nil)).Elem()
}

func (i GitRepositorySpecProxySecretRefArgs) ToGitRepositorySpecProxySecretRefOutput() GitRepositorySpecProxySecretRefOutput {
	return i.ToGitRepositorySpecProxySecretRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecProxySecretRefArgs) ToGitRepositorySpecProxySecretRefOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecProxySecretRefOutput)
}

func (i GitRepositorySpecProxySecretRefArgs) ToGitRepositorySpecProxySecretRefPtrOutput() GitRepositorySpecProxySecretRefPtrOutput {
	return i.ToGitRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecProxySecretRefArgs) ToGitRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecProxySecretRefOutput).ToGitRepositorySpecProxySecretRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecProxySecretRefPtrInput is an input type that accepts GitRepositorySpecProxySecretRefArgs, GitRepositorySpecProxySecretRefPtr and GitRepositorySpecProxySecretRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecProxySecretRefPtrInput` via:
//
//	        GitRepositorySpecProxySecretRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecProxySecretRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecProxySecretRefPtrOutput() GitRepositorySpecProxySecretRefPtrOutput
	ToGitRepositorySpecProxySecretRefPtrOutputWithContext(context.Context) GitRepositorySpecProxySecretRefPtrOutput
}

type gitRepositorySpecProxySecretRefPtrType GitRepositorySpecProxySecretRefArgs

func GitRepositorySpecProxySecretRefPtr(v *GitRepositorySpecProxySecretRefArgs) GitRepositorySpecProxySecretRefPtrInput {
	return (*gitRepositorySpecProxySecretRefPtrType)(v)
}

func (*gitRepositorySpecProxySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecProxySecretRef)(nil)).Elem()
}

func (i *gitRepositorySpecProxySecretRefPtrType) ToGitRepositorySpecProxySecretRefPtrOutput() GitRepositorySpecProxySecretRefPtrOutput {
	return i.ToGitRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecProxySecretRefPtrType) ToGitRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecProxySecretRefPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Git server.
type GitRepositorySpecProxySecretRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecProxySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecProxySecretRef)(nil)).Elem()
}

func (o GitRepositorySpecProxySecretRefOutput) ToGitRepositorySpecProxySecretRefOutput() GitRepositorySpecProxySecretRefOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefOutput) ToGitRepositorySpecProxySecretRefOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefOutput) ToGitRepositorySpecProxySecretRefPtrOutput() GitRepositorySpecProxySecretRefPtrOutput {
	return o.ToGitRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecProxySecretRefOutput) ToGitRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecProxySecretRef) *GitRepositorySpecProxySecretRef {
		return &v
	}).(GitRepositorySpecProxySecretRefPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecProxySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecProxySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecProxySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecProxySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecProxySecretRef)(nil)).Elem()
}

func (o GitRepositorySpecProxySecretRefPtrOutput) ToGitRepositorySpecProxySecretRefPtrOutput() GitRepositorySpecProxySecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefPtrOutput) ToGitRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefPtrOutput) Elem() GitRepositorySpecProxySecretRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecProxySecretRef) GitRepositorySpecProxySecretRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecProxySecretRef
		return ret
	}).(GitRepositorySpecProxySecretRefOutput)
}

// Name of the referent.
func (o GitRepositorySpecProxySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecProxySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Git server.
type GitRepositorySpecProxySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecProxySecretRefPatchInput is an input type that accepts GitRepositorySpecProxySecretRefPatchArgs and GitRepositorySpecProxySecretRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecProxySecretRefPatchInput` via:
//
//	GitRepositorySpecProxySecretRefPatchArgs{...}
type GitRepositorySpecProxySecretRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecProxySecretRefPatchOutput() GitRepositorySpecProxySecretRefPatchOutput
	ToGitRepositorySpecProxySecretRefPatchOutputWithContext(context.Context) GitRepositorySpecProxySecretRefPatchOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Git server.
type GitRepositorySpecProxySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecProxySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecProxySecretRefPatchArgs) ToGitRepositorySpecProxySecretRefPatchOutput() GitRepositorySpecProxySecretRefPatchOutput {
	return i.ToGitRepositorySpecProxySecretRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecProxySecretRefPatchArgs) ToGitRepositorySpecProxySecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecProxySecretRefPatchOutput)
}

func (i GitRepositorySpecProxySecretRefPatchArgs) ToGitRepositorySpecProxySecretRefPatchPtrOutput() GitRepositorySpecProxySecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecProxySecretRefPatchArgs) ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecProxySecretRefPatchOutput).ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecProxySecretRefPatchPtrInput is an input type that accepts GitRepositorySpecProxySecretRefPatchArgs, GitRepositorySpecProxySecretRefPatchPtr and GitRepositorySpecProxySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecProxySecretRefPatchPtrInput` via:
//
//	        GitRepositorySpecProxySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecProxySecretRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecProxySecretRefPatchPtrOutput() GitRepositorySpecProxySecretRefPatchPtrOutput
	ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecProxySecretRefPatchPtrOutput
}

type gitRepositorySpecProxySecretRefPatchPtrType GitRepositorySpecProxySecretRefPatchArgs

func GitRepositorySpecProxySecretRefPatchPtr(v *GitRepositorySpecProxySecretRefPatchArgs) GitRepositorySpecProxySecretRefPatchPtrInput {
	return (*gitRepositorySpecProxySecretRefPatchPtrType)(v)
}

func (*gitRepositorySpecProxySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecProxySecretRefPatchPtrType) ToGitRepositorySpecProxySecretRefPatchPtrOutput() GitRepositorySpecProxySecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecProxySecretRefPatchPtrType) ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecProxySecretRefPatchPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the Git server.
type GitRepositorySpecProxySecretRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecProxySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecProxySecretRefPatchOutput) ToGitRepositorySpecProxySecretRefPatchOutput() GitRepositorySpecProxySecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefPatchOutput) ToGitRepositorySpecProxySecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefPatchOutput) ToGitRepositorySpecProxySecretRefPatchPtrOutput() GitRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecProxySecretRefPatchOutput) ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecProxySecretRefPatch) *GitRepositorySpecProxySecretRefPatch {
		return &v
	}).(GitRepositorySpecProxySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecProxySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecProxySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecProxySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecProxySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecProxySecretRefPatchPtrOutput) ToGitRepositorySpecProxySecretRefPatchPtrOutput() GitRepositorySpecProxySecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefPatchPtrOutput) ToGitRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecProxySecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecProxySecretRefPatchPtrOutput) Elem() GitRepositorySpecProxySecretRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecProxySecretRefPatch) GitRepositorySpecProxySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecProxySecretRefPatch
		return ret
	}).(GitRepositorySpecProxySecretRefPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecProxySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecProxySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference specifies the Git reference to resolve and monitor for
// changes, defaults to the 'master' branch.
type GitRepositorySpecRef struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch *string `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit *string `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name *string `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag *string `pulumi:"tag"`
}

// GitRepositorySpecRefInput is an input type that accepts GitRepositorySpecRefArgs and GitRepositorySpecRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefInput` via:
//
//	GitRepositorySpecRefArgs{...}
type GitRepositorySpecRefInput interface {
	pulumi.Input

	ToGitRepositorySpecRefOutput() GitRepositorySpecRefOutput
	ToGitRepositorySpecRefOutputWithContext(context.Context) GitRepositorySpecRefOutput
}

// Reference specifies the Git reference to resolve and monitor for
// changes, defaults to the 'master' branch.
type GitRepositorySpecRefArgs struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name pulumi.StringPtrInput `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (GitRepositorySpecRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRef)(nil)).Elem()
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefOutput() GitRepositorySpecRefOutput {
	return i.ToGitRepositorySpecRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefOutputWithContext(ctx context.Context) GitRepositorySpecRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefOutput)
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return i.ToGitRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefOutput).ToGitRepositorySpecRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecRefPtrInput is an input type that accepts GitRepositorySpecRefArgs, GitRepositorySpecRefPtr and GitRepositorySpecRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefPtrInput` via:
//
//	        GitRepositorySpecRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput
	ToGitRepositorySpecRefPtrOutputWithContext(context.Context) GitRepositorySpecRefPtrOutput
}

type gitRepositorySpecRefPtrType GitRepositorySpecRefArgs

func GitRepositorySpecRefPtr(v *GitRepositorySpecRefArgs) GitRepositorySpecRefPtrInput {
	return (*gitRepositorySpecRefPtrType)(v)
}

func (*gitRepositorySpecRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRef)(nil)).Elem()
}

func (i *gitRepositorySpecRefPtrType) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return i.ToGitRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecRefPtrType) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPtrOutput)
}

// Reference specifies the Git reference to resolve and monitor for
// changes, defaults to the 'master' branch.
type GitRepositorySpecRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRef)(nil)).Elem()
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefOutput() GitRepositorySpecRefOutput {
	return o
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefOutputWithContext(ctx context.Context) GitRepositorySpecRefOutput {
	return o
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return o.ToGitRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecRef) *GitRepositorySpecRef {
		return &v
	}).(GitRepositorySpecRefPtrOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o GitRepositorySpecRefOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o GitRepositorySpecRefOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o GitRepositorySpecRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o GitRepositorySpecRefOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o GitRepositorySpecRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRef)(nil)).Elem()
}

func (o GitRepositorySpecRefPtrOutput) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return o
}

func (o GitRepositorySpecRefPtrOutput) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return o
}

func (o GitRepositorySpecRefPtrOutput) Elem() GitRepositorySpecRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) GitRepositorySpecRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecRef
		return ret
	}).(GitRepositorySpecRefOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o GitRepositorySpecRefPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o GitRepositorySpecRefPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o GitRepositorySpecRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o GitRepositorySpecRefPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o GitRepositorySpecRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Reference specifies the Git reference to resolve and monitor for
// changes, defaults to the 'master' branch.
type GitRepositorySpecRefPatch struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch *string `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit *string `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name *string `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag *string `pulumi:"tag"`
}

// GitRepositorySpecRefPatchInput is an input type that accepts GitRepositorySpecRefPatchArgs and GitRepositorySpecRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefPatchInput` via:
//
//	GitRepositorySpecRefPatchArgs{...}
type GitRepositorySpecRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecRefPatchOutput() GitRepositorySpecRefPatchOutput
	ToGitRepositorySpecRefPatchOutputWithContext(context.Context) GitRepositorySpecRefPatchOutput
}

// Reference specifies the Git reference to resolve and monitor for
// changes, defaults to the 'master' branch.
type GitRepositorySpecRefPatchArgs struct {
	// Branch to check out, defaults to 'master' if no other field is defined.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Commit SHA to check out, takes precedence over all reference fields.
	//
	// This can be combined with Branch to shallow clone the branch, in which
	// the commit is expected to exist.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
	//
	// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
	// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
	Name pulumi.StringPtrInput `pulumi:"name"`
	// SemVer tag expression to check out, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// Tag to check out, takes precedence over Branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (GitRepositorySpecRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchOutput() GitRepositorySpecRefPatchOutput {
	return i.ToGitRepositorySpecRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPatchOutput)
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return i.ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPatchOutput).ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecRefPatchPtrInput is an input type that accepts GitRepositorySpecRefPatchArgs, GitRepositorySpecRefPatchPtr and GitRepositorySpecRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefPatchPtrInput` via:
//
//	        GitRepositorySpecRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput
	ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecRefPatchPtrOutput
}

type gitRepositorySpecRefPatchPtrType GitRepositorySpecRefPatchArgs

func GitRepositorySpecRefPatchPtr(v *GitRepositorySpecRefPatchArgs) GitRepositorySpecRefPatchPtrInput {
	return (*gitRepositorySpecRefPatchPtrType)(v)
}

func (*gitRepositorySpecRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecRefPatchPtrType) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return i.ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecRefPatchPtrType) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPatchPtrOutput)
}

// Reference specifies the Git reference to resolve and monitor for
// changes, defaults to the 'master' branch.
type GitRepositorySpecRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchOutput() GitRepositorySpecRefPatchOutput {
	return o
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchOutput {
	return o
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return o.ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecRefPatch) *GitRepositorySpecRefPatch {
		return &v
	}).(GitRepositorySpecRefPatchPtrOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o GitRepositorySpecRefPatchOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o GitRepositorySpecRefPatchOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o GitRepositorySpecRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o GitRepositorySpecRefPatchOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o GitRepositorySpecRefPatchOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecRefPatchPtrOutput) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecRefPatchPtrOutput) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecRefPatchPtrOutput) Elem() GitRepositorySpecRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) GitRepositorySpecRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecRefPatch
		return ret
	}).(GitRepositorySpecRefPatchOutput)
}

// Branch to check out, defaults to 'master' if no other field is defined.
func (o GitRepositorySpecRefPatchPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Commit SHA to check out, takes precedence over all reference fields.
//
// This can be combined with Branch to shallow clone the branch, in which
// the commit is expected to exist.
func (o GitRepositorySpecRefPatchPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
//
// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
func (o GitRepositorySpecRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SemVer tag expression to check out, takes precedence over Tag.
func (o GitRepositorySpecRefPatchPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// Tag to check out, takes precedence over Branch.
func (o GitRepositorySpecRefPatchPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials for
// the GitRepository.
// For HTTPS repositories the Secret must contain 'username' and 'password'
// fields for basic auth or 'bearerToken' field for token auth.
// For SSH repositories the Secret must contain 'identity'
// and 'known_hosts' fields.
type GitRepositorySpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecSecretRefInput is an input type that accepts GitRepositorySpecSecretRefArgs and GitRepositorySpecSecretRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefInput` via:
//
//	GitRepositorySpecSecretRefArgs{...}
type GitRepositorySpecSecretRefInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefOutput() GitRepositorySpecSecretRefOutput
	ToGitRepositorySpecSecretRefOutputWithContext(context.Context) GitRepositorySpecSecretRefOutput
}

// SecretRef specifies the Secret containing authentication credentials for
// the GitRepository.
// For HTTPS repositories the Secret must contain 'username' and 'password'
// fields for basic auth or 'bearerToken' field for token auth.
// For SSH repositories the Secret must contain 'identity'
// and 'known_hosts' fields.
type GitRepositorySpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRef)(nil)).Elem()
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefOutput() GitRepositorySpecSecretRefOutput {
	return i.ToGitRepositorySpecSecretRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefOutput)
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return i.ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefOutput).ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecSecretRefPtrInput is an input type that accepts GitRepositorySpecSecretRefArgs, GitRepositorySpecSecretRefPtr and GitRepositorySpecSecretRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefPtrInput` via:
//
//	        GitRepositorySpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecSecretRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput
	ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Context) GitRepositorySpecSecretRefPtrOutput
}

type gitRepositorySpecSecretRefPtrType GitRepositorySpecSecretRefArgs

func GitRepositorySpecSecretRefPtr(v *GitRepositorySpecSecretRefArgs) GitRepositorySpecSecretRefPtrInput {
	return (*gitRepositorySpecSecretRefPtrType)(v)
}

func (*gitRepositorySpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRef)(nil)).Elem()
}

func (i *gitRepositorySpecSecretRefPtrType) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return i.ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecSecretRefPtrType) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials for
// the GitRepository.
// For HTTPS repositories the Secret must contain 'username' and 'password'
// fields for basic auth or 'bearerToken' field for token auth.
// For SSH repositories the Secret must contain 'identity'
// and 'known_hosts' fields.
type GitRepositorySpecSecretRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRef)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefOutput() GitRepositorySpecSecretRefOutput {
	return o
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefOutput {
	return o
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return o.ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecSecretRef) *GitRepositorySpecSecretRef {
		return &v
	}).(GitRepositorySpecSecretRefPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRef)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefPtrOutput) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPtrOutput) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPtrOutput) Elem() GitRepositorySpecSecretRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRef) GitRepositorySpecSecretRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecSecretRef
		return ret
	}).(GitRepositorySpecSecretRefOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials for
// the GitRepository.
// For HTTPS repositories the Secret must contain 'username' and 'password'
// fields for basic auth or 'bearerToken' field for token auth.
// For SSH repositories the Secret must contain 'identity'
// and 'known_hosts' fields.
type GitRepositorySpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecSecretRefPatchInput is an input type that accepts GitRepositorySpecSecretRefPatchArgs and GitRepositorySpecSecretRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefPatchInput` via:
//
//	GitRepositorySpecSecretRefPatchArgs{...}
type GitRepositorySpecSecretRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefPatchOutput() GitRepositorySpecSecretRefPatchOutput
	ToGitRepositorySpecSecretRefPatchOutputWithContext(context.Context) GitRepositorySpecSecretRefPatchOutput
}

// SecretRef specifies the Secret containing authentication credentials for
// the GitRepository.
// For HTTPS repositories the Secret must contain 'username' and 'password'
// fields for basic auth or 'bearerToken' field for token auth.
// For SSH repositories the Secret must contain 'identity'
// and 'known_hosts' fields.
type GitRepositorySpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchOutput() GitRepositorySpecSecretRefPatchOutput {
	return i.ToGitRepositorySpecSecretRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPatchOutput)
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPatchOutput).ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecSecretRefPatchPtrInput is an input type that accepts GitRepositorySpecSecretRefPatchArgs, GitRepositorySpecSecretRefPatchPtr and GitRepositorySpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefPatchPtrInput` via:
//
//	        GitRepositorySpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput
	ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecSecretRefPatchPtrOutput
}

type gitRepositorySpecSecretRefPatchPtrType GitRepositorySpecSecretRefPatchArgs

func GitRepositorySpecSecretRefPatchPtr(v *GitRepositorySpecSecretRefPatchArgs) GitRepositorySpecSecretRefPatchPtrInput {
	return (*gitRepositorySpecSecretRefPatchPtrType)(v)
}

func (*gitRepositorySpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecSecretRefPatchPtrType) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecSecretRefPatchPtrType) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials for
// the GitRepository.
// For HTTPS repositories the Secret must contain 'username' and 'password'
// fields for basic auth or 'bearerToken' field for token auth.
// For SSH repositories the Secret must contain 'identity'
// and 'known_hosts' fields.
type GitRepositorySpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchOutput() GitRepositorySpecSecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecSecretRefPatch) *GitRepositorySpecSecretRefPatch {
		return &v
	}).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefPatchPtrOutput) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchPtrOutput) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchPtrOutput) Elem() GitRepositorySpecSecretRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRefPatch) GitRepositorySpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecSecretRefPatch
		return ret
	}).(GitRepositorySpecSecretRefPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Verification specifies the configuration to verify the Git commit
// signature(s).
type GitRepositorySpecVerify struct {
	// Mode specifies which Git object(s) should be verified.
	//
	// The variants "head" and "HEAD" both imply the same thing, i.e. verify
	// the commit that the HEAD of the Git repository points to. The variant
	// "head" solely exists to ensure backwards compatibility.
	Mode      *string                           `pulumi:"mode"`
	SecretRef *GitRepositorySpecVerifySecretRef `pulumi:"secretRef"`
}

// GitRepositorySpecVerifyInput is an input type that accepts GitRepositorySpecVerifyArgs and GitRepositorySpecVerifyOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyInput` via:
//
//	GitRepositorySpecVerifyArgs{...}
type GitRepositorySpecVerifyInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyOutput() GitRepositorySpecVerifyOutput
	ToGitRepositorySpecVerifyOutputWithContext(context.Context) GitRepositorySpecVerifyOutput
}

// Verification specifies the configuration to verify the Git commit
// signature(s).
type GitRepositorySpecVerifyArgs struct {
	// Mode specifies which Git object(s) should be verified.
	//
	// The variants "head" and "HEAD" both imply the same thing, i.e. verify
	// the commit that the HEAD of the Git repository points to. The variant
	// "head" solely exists to ensure backwards compatibility.
	Mode      pulumi.StringPtrInput                    `pulumi:"mode"`
	SecretRef GitRepositorySpecVerifySecretRefPtrInput `pulumi:"secretRef"`
}

func (GitRepositorySpecVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerify)(nil)).Elem()
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyOutput() GitRepositorySpecVerifyOutput {
	return i.ToGitRepositorySpecVerifyOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyOutputWithContext(ctx context.Context) GitRepositorySpecVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyOutput)
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return i.ToGitRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyOutput).ToGitRepositorySpecVerifyPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifyPtrInput is an input type that accepts GitRepositorySpecVerifyArgs, GitRepositorySpecVerifyPtr and GitRepositorySpecVerifyPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyPtrInput` via:
//
//	        GitRepositorySpecVerifyArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifyPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput
	ToGitRepositorySpecVerifyPtrOutputWithContext(context.Context) GitRepositorySpecVerifyPtrOutput
}

type gitRepositorySpecVerifyPtrType GitRepositorySpecVerifyArgs

func GitRepositorySpecVerifyPtr(v *GitRepositorySpecVerifyArgs) GitRepositorySpecVerifyPtrInput {
	return (*gitRepositorySpecVerifyPtrType)(v)
}

func (*gitRepositorySpecVerifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerify)(nil)).Elem()
}

func (i *gitRepositorySpecVerifyPtrType) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return i.ToGitRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifyPtrType) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPtrOutput)
}

// Verification specifies the configuration to verify the Git commit
// signature(s).
type GitRepositorySpecVerifyOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerify)(nil)).Elem()
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyOutput() GitRepositorySpecVerifyOutput {
	return o
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyOutputWithContext(ctx context.Context) GitRepositorySpecVerifyOutput {
	return o
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return o.ToGitRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerify) *GitRepositorySpecVerify {
		return &v
	}).(GitRepositorySpecVerifyPtrOutput)
}

// Mode specifies which Git object(s) should be verified.
//
// The variants "head" and "HEAD" both imply the same thing, i.e. verify
// the commit that the HEAD of the Git repository points to. The variant
// "head" solely exists to ensure backwards compatibility.
func (o GitRepositorySpecVerifyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerify) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyOutput) SecretRef() GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerify) *GitRepositorySpecVerifySecretRef { return v.SecretRef }).(GitRepositorySpecVerifySecretRefPtrOutput)
}

type GitRepositorySpecVerifyPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerify)(nil)).Elem()
}

func (o GitRepositorySpecVerifyPtrOutput) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPtrOutput) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPtrOutput) Elem() GitRepositorySpecVerifyOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerify) GitRepositorySpecVerify {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerify
		return ret
	}).(GitRepositorySpecVerifyOutput)
}

// Mode specifies which Git object(s) should be verified.
//
// The variants "head" and "HEAD" both imply the same thing, i.e. verify
// the commit that the HEAD of the Git repository points to. The variant
// "head" solely exists to ensure backwards compatibility.
func (o GitRepositorySpecVerifyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerify) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyPtrOutput) SecretRef() GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerify) *GitRepositorySpecVerifySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecVerifySecretRefPtrOutput)
}

// Verification specifies the configuration to verify the Git commit
// signature(s).
type GitRepositorySpecVerifyPatch struct {
	// Mode specifies which Git object(s) should be verified.
	//
	// The variants "head" and "HEAD" both imply the same thing, i.e. verify
	// the commit that the HEAD of the Git repository points to. The variant
	// "head" solely exists to ensure backwards compatibility.
	Mode      *string                                `pulumi:"mode"`
	SecretRef *GitRepositorySpecVerifySecretRefPatch `pulumi:"secretRef"`
}

// GitRepositorySpecVerifyPatchInput is an input type that accepts GitRepositorySpecVerifyPatchArgs and GitRepositorySpecVerifyPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyPatchInput` via:
//
//	GitRepositorySpecVerifyPatchArgs{...}
type GitRepositorySpecVerifyPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyPatchOutput() GitRepositorySpecVerifyPatchOutput
	ToGitRepositorySpecVerifyPatchOutputWithContext(context.Context) GitRepositorySpecVerifyPatchOutput
}

// Verification specifies the configuration to verify the Git commit
// signature(s).
type GitRepositorySpecVerifyPatchArgs struct {
	// Mode specifies which Git object(s) should be verified.
	//
	// The variants "head" and "HEAD" both imply the same thing, i.e. verify
	// the commit that the HEAD of the Git repository points to. The variant
	// "head" solely exists to ensure backwards compatibility.
	Mode      pulumi.StringPtrInput                         `pulumi:"mode"`
	SecretRef GitRepositorySpecVerifySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (GitRepositorySpecVerifyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchOutput() GitRepositorySpecVerifyPatchOutput {
	return i.ToGitRepositorySpecVerifyPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPatchOutput)
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return i.ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPatchOutput).ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifyPatchPtrInput is an input type that accepts GitRepositorySpecVerifyPatchArgs, GitRepositorySpecVerifyPatchPtr and GitRepositorySpecVerifyPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyPatchPtrInput` via:
//
//	        GitRepositorySpecVerifyPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifyPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput
	ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Context) GitRepositorySpecVerifyPatchPtrOutput
}

type gitRepositorySpecVerifyPatchPtrType GitRepositorySpecVerifyPatchArgs

func GitRepositorySpecVerifyPatchPtr(v *GitRepositorySpecVerifyPatchArgs) GitRepositorySpecVerifyPatchPtrInput {
	return (*gitRepositorySpecVerifyPatchPtrType)(v)
}

func (*gitRepositorySpecVerifyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (i *gitRepositorySpecVerifyPatchPtrType) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return i.ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifyPatchPtrType) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPatchPtrOutput)
}

// Verification specifies the configuration to verify the Git commit
// signature(s).
type GitRepositorySpecVerifyPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchOutput() GitRepositorySpecVerifyPatchOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return o.ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerifyPatch) *GitRepositorySpecVerifyPatch {
		return &v
	}).(GitRepositorySpecVerifyPatchPtrOutput)
}

// Mode specifies which Git object(s) should be verified.
//
// The variants "head" and "HEAD" both imply the same thing, i.e. verify
// the commit that the HEAD of the Git repository points to. The variant
// "head" solely exists to ensure backwards compatibility.
func (o GitRepositorySpecVerifyPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifyPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyPatchOutput) SecretRef() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifyPatch) *GitRepositorySpecVerifySecretRefPatch { return v.SecretRef }).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

type GitRepositorySpecVerifyPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifyPatchPtrOutput) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchPtrOutput) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchPtrOutput) Elem() GitRepositorySpecVerifyPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifyPatch) GitRepositorySpecVerifyPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerifyPatch
		return ret
	}).(GitRepositorySpecVerifyPatchOutput)
}

// Mode specifies which Git object(s) should be verified.
//
// The variants "head" and "HEAD" both imply the same thing, i.e. verify
// the commit that the HEAD of the Git repository points to. The variant
// "head" solely exists to ensure backwards compatibility.
func (o GitRepositorySpecVerifyPatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyPatchPtrOutput) SecretRef() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifyPatch) *GitRepositorySpecVerifySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing the public keys of trusted Git
// authors.
type GitRepositorySpecVerifySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecVerifySecretRefInput is an input type that accepts GitRepositorySpecVerifySecretRefArgs and GitRepositorySpecVerifySecretRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefInput` via:
//
//	GitRepositorySpecVerifySecretRefArgs{...}
type GitRepositorySpecVerifySecretRefInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefOutput() GitRepositorySpecVerifySecretRefOutput
	ToGitRepositorySpecVerifySecretRefOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefOutput
}

// SecretRef specifies the Secret containing the public keys of trusted Git
// authors.
type GitRepositorySpecVerifySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecVerifySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefOutput() GitRepositorySpecVerifySecretRefOutput {
	return i.ToGitRepositorySpecVerifySecretRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefOutput)
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefOutput).ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifySecretRefPtrInput is an input type that accepts GitRepositorySpecVerifySecretRefArgs, GitRepositorySpecVerifySecretRefPtr and GitRepositorySpecVerifySecretRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefPtrInput` via:
//
//	        GitRepositorySpecVerifySecretRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifySecretRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput
	ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefPtrOutput
}

type gitRepositorySpecVerifySecretRefPtrType GitRepositorySpecVerifySecretRefArgs

func GitRepositorySpecVerifySecretRefPtr(v *GitRepositorySpecVerifySecretRefArgs) GitRepositorySpecVerifySecretRefPtrInput {
	return (*gitRepositorySpecVerifySecretRefPtrType)(v)
}

func (*gitRepositorySpecVerifySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (i *gitRepositorySpecVerifySecretRefPtrType) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifySecretRefPtrType) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPtrOutput)
}

// SecretRef specifies the Secret containing the public keys of trusted Git
// authors.
type GitRepositorySpecVerifySecretRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefOutput() GitRepositorySpecVerifySecretRefOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerifySecretRef) *GitRepositorySpecVerifySecretRef {
		return &v
	}).(GitRepositorySpecVerifySecretRefPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecVerifySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefPtrOutput) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPtrOutput) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPtrOutput) Elem() GitRepositorySpecVerifySecretRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRef) GitRepositorySpecVerifySecretRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerifySecretRef
		return ret
	}).(GitRepositorySpecVerifySecretRefOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing the public keys of trusted Git
// authors.
type GitRepositorySpecVerifySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecVerifySecretRefPatchInput is an input type that accepts GitRepositorySpecVerifySecretRefPatchArgs and GitRepositorySpecVerifySecretRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefPatchInput` via:
//
//	GitRepositorySpecVerifySecretRefPatchArgs{...}
type GitRepositorySpecVerifySecretRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefPatchOutput() GitRepositorySpecVerifySecretRefPatchOutput
	ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefPatchOutput
}

// SecretRef specifies the Secret containing the public keys of trusted Git
// authors.
type GitRepositorySpecVerifySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecVerifySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchOutput() GitRepositorySpecVerifySecretRefPatchOutput {
	return i.ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPatchOutput)
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPatchOutput).ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifySecretRefPatchPtrInput is an input type that accepts GitRepositorySpecVerifySecretRefPatchArgs, GitRepositorySpecVerifySecretRefPatchPtr and GitRepositorySpecVerifySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefPatchPtrInput` via:
//
//	        GitRepositorySpecVerifySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifySecretRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput
	ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput
}

type gitRepositorySpecVerifySecretRefPatchPtrType GitRepositorySpecVerifySecretRefPatchArgs

func GitRepositorySpecVerifySecretRefPatchPtr(v *GitRepositorySpecVerifySecretRefPatchArgs) GitRepositorySpecVerifySecretRefPatchPtrInput {
	return (*gitRepositorySpecVerifySecretRefPatchPtrType)(v)
}

func (*gitRepositorySpecVerifySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecVerifySecretRefPatchPtrType) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifySecretRefPatchPtrType) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing the public keys of trusted Git
// authors.
type GitRepositorySpecVerifySecretRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchOutput() GitRepositorySpecVerifySecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerifySecretRefPatch) *GitRepositorySpecVerifySecretRefPatch {
		return &v
	}).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecVerifySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) Elem() GitRepositorySpecVerifySecretRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRefPatch) GitRepositorySpecVerifySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerifySecretRefPatch
		return ret
	}).(GitRepositorySpecVerifySecretRefPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositoryStatus records the observed state of a Git repository.
type GitRepositoryStatus struct {
	Artifact *GitRepositoryStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions []GitRepositoryStatusConditions `pulumi:"conditions"`
	// IncludedArtifacts contains a list of the last successfully included
	// Artifacts as instructed by GitRepositorySpec.Include.
	IncludedArtifacts []GitRepositoryStatusIncludedArtifacts `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the GitRepository
	// object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore *string `pulumi:"observedIgnore"`
	// ObservedInclude is the observed list of GitRepository resources used to
	// produce the current Artifact.
	ObservedInclude []GitRepositoryStatusObservedInclude `pulumi:"observedInclude"`
	// ObservedRecurseSubmodules is the observed resource submodules
	// configuration used to produce the current Artifact.
	ObservedRecurseSubmodules *bool `pulumi:"observedRecurseSubmodules"`
	// ObservedSparseCheckout is the observed list of directories used to
	// produce the current Artifact.
	ObservedSparseCheckout []string `pulumi:"observedSparseCheckout"`
	// SourceVerificationMode is the last used verification mode indicating
	// which Git object(s) have been verified.
	SourceVerificationMode *string `pulumi:"sourceVerificationMode"`
}

// GitRepositoryStatusInput is an input type that accepts GitRepositoryStatusArgs and GitRepositoryStatusOutput values.
// You can construct a concrete instance of `GitRepositoryStatusInput` via:
//
//	GitRepositoryStatusArgs{...}
type GitRepositoryStatusInput interface {
	pulumi.Input

	ToGitRepositoryStatusOutput() GitRepositoryStatusOutput
	ToGitRepositoryStatusOutputWithContext(context.Context) GitRepositoryStatusOutput
}

// GitRepositoryStatus records the observed state of a Git repository.
type GitRepositoryStatusArgs struct {
	Artifact GitRepositoryStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions GitRepositoryStatusConditionsArrayInput `pulumi:"conditions"`
	// IncludedArtifacts contains a list of the last successfully included
	// Artifacts as instructed by GitRepositorySpec.Include.
	IncludedArtifacts GitRepositoryStatusIncludedArtifactsArrayInput `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the GitRepository
	// object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore pulumi.StringPtrInput `pulumi:"observedIgnore"`
	// ObservedInclude is the observed list of GitRepository resources used to
	// produce the current Artifact.
	ObservedInclude GitRepositoryStatusObservedIncludeArrayInput `pulumi:"observedInclude"`
	// ObservedRecurseSubmodules is the observed resource submodules
	// configuration used to produce the current Artifact.
	ObservedRecurseSubmodules pulumi.BoolPtrInput `pulumi:"observedRecurseSubmodules"`
	// ObservedSparseCheckout is the observed list of directories used to
	// produce the current Artifact.
	ObservedSparseCheckout pulumi.StringArrayInput `pulumi:"observedSparseCheckout"`
	// SourceVerificationMode is the last used verification mode indicating
	// which Git object(s) have been verified.
	SourceVerificationMode pulumi.StringPtrInput `pulumi:"sourceVerificationMode"`
}

func (GitRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatus)(nil)).Elem()
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusOutput() GitRepositoryStatusOutput {
	return i.ToGitRepositoryStatusOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusOutputWithContext(ctx context.Context) GitRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusOutput)
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return i.ToGitRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusOutput).ToGitRepositoryStatusPtrOutputWithContext(ctx)
}

// GitRepositoryStatusPtrInput is an input type that accepts GitRepositoryStatusArgs, GitRepositoryStatusPtr and GitRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusPtrInput` via:
//
//	        GitRepositoryStatusArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput
	ToGitRepositoryStatusPtrOutputWithContext(context.Context) GitRepositoryStatusPtrOutput
}

type gitRepositoryStatusPtrType GitRepositoryStatusArgs

func GitRepositoryStatusPtr(v *GitRepositoryStatusArgs) GitRepositoryStatusPtrInput {
	return (*gitRepositoryStatusPtrType)(v)
}

func (*gitRepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatus)(nil)).Elem()
}

func (i *gitRepositoryStatusPtrType) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return i.ToGitRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusPtrType) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPtrOutput)
}

// GitRepositoryStatus records the observed state of a Git repository.
type GitRepositoryStatusOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatus)(nil)).Elem()
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusOutput() GitRepositoryStatusOutput {
	return o
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusOutputWithContext(ctx context.Context) GitRepositoryStatusOutput {
	return o
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return o.ToGitRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatus) *GitRepositoryStatus {
		return &v
	}).(GitRepositoryStatusPtrOutput)
}

func (o GitRepositoryStatusOutput) Artifact() GitRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *GitRepositoryStatusArtifact { return v.Artifact }).(GitRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusOutput) Conditions() GitRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatus) []GitRepositoryStatusConditions { return v.Conditions }).(GitRepositoryStatusConditionsArrayOutput)
}

// IncludedArtifacts contains a list of the last successfully included
// Artifacts as instructed by GitRepositorySpec.Include.
func (o GitRepositoryStatusOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatus) []GitRepositoryStatusIncludedArtifacts { return v.IncludedArtifacts }).(GitRepositoryStatusIncludedArtifactsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the GitRepository
// object.
func (o GitRepositoryStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o GitRepositoryStatusOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *string { return v.ObservedIgnore }).(pulumi.StringPtrOutput)
}

// ObservedInclude is the observed list of GitRepository resources used to
// produce the current Artifact.
func (o GitRepositoryStatusOutput) ObservedInclude() GitRepositoryStatusObservedIncludeArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatus) []GitRepositoryStatusObservedInclude { return v.ObservedInclude }).(GitRepositoryStatusObservedIncludeArrayOutput)
}

// ObservedRecurseSubmodules is the observed resource submodules
// configuration used to produce the current Artifact.
func (o GitRepositoryStatusOutput) ObservedRecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *bool { return v.ObservedRecurseSubmodules }).(pulumi.BoolPtrOutput)
}

// ObservedSparseCheckout is the observed list of directories used to
// produce the current Artifact.
func (o GitRepositoryStatusOutput) ObservedSparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatus) []string { return v.ObservedSparseCheckout }).(pulumi.StringArrayOutput)
}

// SourceVerificationMode is the last used verification mode indicating
// which Git object(s) have been verified.
func (o GitRepositoryStatusOutput) SourceVerificationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *string { return v.SourceVerificationMode }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatus)(nil)).Elem()
}

func (o GitRepositoryStatusPtrOutput) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return o
}

func (o GitRepositoryStatusPtrOutput) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return o
}

func (o GitRepositoryStatusPtrOutput) Elem() GitRepositoryStatusOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) GitRepositoryStatus {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatus
		return ret
	}).(GitRepositoryStatusOutput)
}

func (o GitRepositoryStatusPtrOutput) Artifact() GitRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *GitRepositoryStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(GitRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusPtrOutput) Conditions() GitRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) []GitRepositoryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GitRepositoryStatusConditionsArrayOutput)
}

// IncludedArtifacts contains a list of the last successfully included
// Artifacts as instructed by GitRepositorySpec.Include.
func (o GitRepositoryStatusPtrOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) []GitRepositoryStatusIncludedArtifacts {
		if v == nil {
			return nil
		}
		return v.IncludedArtifacts
	}).(GitRepositoryStatusIncludedArtifactsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the GitRepository
// object.
func (o GitRepositoryStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o GitRepositoryStatusPtrOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedIgnore
	}).(pulumi.StringPtrOutput)
}

// ObservedInclude is the observed list of GitRepository resources used to
// produce the current Artifact.
func (o GitRepositoryStatusPtrOutput) ObservedInclude() GitRepositoryStatusObservedIncludeArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) []GitRepositoryStatusObservedInclude {
		if v == nil {
			return nil
		}
		return v.ObservedInclude
	}).(GitRepositoryStatusObservedIncludeArrayOutput)
}

// ObservedRecurseSubmodules is the observed resource submodules
// configuration used to produce the current Artifact.
func (o GitRepositoryStatusPtrOutput) ObservedRecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *bool {
		if v == nil {
			return nil
		}
		return v.ObservedRecurseSubmodules
	}).(pulumi.BoolPtrOutput)
}

// ObservedSparseCheckout is the observed list of directories used to
// produce the current Artifact.
func (o GitRepositoryStatusPtrOutput) ObservedSparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) []string {
		if v == nil {
			return nil
		}
		return v.ObservedSparseCheckout
	}).(pulumi.StringArrayOutput)
}

// SourceVerificationMode is the last used verification mode indicating
// which Git object(s) have been verified.
func (o GitRepositoryStatusPtrOutput) SourceVerificationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.SourceVerificationMode
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the last successful GitRepository reconciliation.
type GitRepositoryStatusArtifact struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusArtifactInput is an input type that accepts GitRepositoryStatusArtifactArgs and GitRepositoryStatusArtifactOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactInput` via:
//
//	GitRepositoryStatusArtifactArgs{...}
type GitRepositoryStatusArtifactInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactOutput() GitRepositoryStatusArtifactOutput
	ToGitRepositoryStatusArtifactOutputWithContext(context.Context) GitRepositoryStatusArtifactOutput
}

// Artifact represents the last successful GitRepository reconciliation.
type GitRepositoryStatusArtifactArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifact)(nil)).Elem()
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactOutput() GitRepositoryStatusArtifactOutput {
	return i.ToGitRepositoryStatusArtifactOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactOutput)
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return i.ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactOutput).ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx)
}

// GitRepositoryStatusArtifactPtrInput is an input type that accepts GitRepositoryStatusArtifactArgs, GitRepositoryStatusArtifactPtr and GitRepositoryStatusArtifactPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactPtrInput` via:
//
//	        GitRepositoryStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusArtifactPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput
	ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Context) GitRepositoryStatusArtifactPtrOutput
}

type gitRepositoryStatusArtifactPtrType GitRepositoryStatusArtifactArgs

func GitRepositoryStatusArtifactPtr(v *GitRepositoryStatusArtifactArgs) GitRepositoryStatusArtifactPtrInput {
	return (*gitRepositoryStatusArtifactPtrType)(v)
}

func (*gitRepositoryStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifact)(nil)).Elem()
}

func (i *gitRepositoryStatusArtifactPtrType) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return i.ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusArtifactPtrType) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPtrOutput)
}

// Artifact represents the last successful GitRepository reconciliation.
type GitRepositoryStatusArtifactOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifact)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactOutput() GitRepositoryStatusArtifactOutput {
	return o
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactOutput {
	return o
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return o.ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusArtifact) *GitRepositoryStatusArtifact {
		return &v
	}).(GitRepositoryStatusArtifactPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o GitRepositoryStatusArtifactOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o GitRepositoryStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o GitRepositoryStatusArtifactOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o GitRepositoryStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o GitRepositoryStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o GitRepositoryStatusArtifactOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o GitRepositoryStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifact)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactPtrOutput) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPtrOutput) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPtrOutput) Elem() GitRepositoryStatusArtifactOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) GitRepositoryStatusArtifact {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusArtifact
		return ret
	}).(GitRepositoryStatusArtifactOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o GitRepositoryStatusArtifactPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o GitRepositoryStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o GitRepositoryStatusArtifactPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o GitRepositoryStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o GitRepositoryStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o GitRepositoryStatusArtifactPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o GitRepositoryStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the last successful GitRepository reconciliation.
type GitRepositoryStatusArtifactPatch struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusArtifactPatchInput is an input type that accepts GitRepositoryStatusArtifactPatchArgs and GitRepositoryStatusArtifactPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactPatchInput` via:
//
//	GitRepositoryStatusArtifactPatchArgs{...}
type GitRepositoryStatusArtifactPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactPatchOutput() GitRepositoryStatusArtifactPatchOutput
	ToGitRepositoryStatusArtifactPatchOutputWithContext(context.Context) GitRepositoryStatusArtifactPatchOutput
}

// Artifact represents the last successful GitRepository reconciliation.
type GitRepositoryStatusArtifactPatchArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchOutput() GitRepositoryStatusArtifactPatchOutput {
	return i.ToGitRepositoryStatusArtifactPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPatchOutput)
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return i.ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPatchOutput).ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx)
}

// GitRepositoryStatusArtifactPatchPtrInput is an input type that accepts GitRepositoryStatusArtifactPatchArgs, GitRepositoryStatusArtifactPatchPtr and GitRepositoryStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactPatchPtrInput` via:
//
//	        GitRepositoryStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput
	ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Context) GitRepositoryStatusArtifactPatchPtrOutput
}

type gitRepositoryStatusArtifactPatchPtrType GitRepositoryStatusArtifactPatchArgs

func GitRepositoryStatusArtifactPatchPtr(v *GitRepositoryStatusArtifactPatchArgs) GitRepositoryStatusArtifactPatchPtrInput {
	return (*gitRepositoryStatusArtifactPatchPtrType)(v)
}

func (*gitRepositoryStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i *gitRepositoryStatusArtifactPatchPtrType) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return i.ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusArtifactPatchPtrType) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Artifact represents the last successful GitRepository reconciliation.
type GitRepositoryStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchOutput() GitRepositoryStatusArtifactPatchOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusArtifactPatch) *GitRepositoryStatusArtifactPatch {
		return &v
	}).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o GitRepositoryStatusArtifactPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o GitRepositoryStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o GitRepositoryStatusArtifactPatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o GitRepositoryStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o GitRepositoryStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o GitRepositoryStatusArtifactPatchOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o GitRepositoryStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactPatchPtrOutput) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchPtrOutput) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchPtrOutput) Elem() GitRepositoryStatusArtifactPatchOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) GitRepositoryStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusArtifactPatch
		return ret
	}).(GitRepositoryStatusArtifactPatchOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o GitRepositoryStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// GitRepositoryStatusConditionsInput is an input type that accepts GitRepositoryStatusConditionsArgs and GitRepositoryStatusConditionsOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsInput` via:
//
//	GitRepositoryStatusConditionsArgs{...}
type GitRepositoryStatusConditionsInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsOutput() GitRepositoryStatusConditionsOutput
	ToGitRepositoryStatusConditionsOutputWithContext(context.Context) GitRepositoryStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GitRepositoryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditions)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsArgs) ToGitRepositoryStatusConditionsOutput() GitRepositoryStatusConditionsOutput {
	return i.ToGitRepositoryStatusConditionsOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsArgs) ToGitRepositoryStatusConditionsOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsOutput)
}

// GitRepositoryStatusConditionsArrayInput is an input type that accepts GitRepositoryStatusConditionsArray and GitRepositoryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsArrayInput` via:
//
//	GitRepositoryStatusConditionsArray{ GitRepositoryStatusConditionsArgs{...} }
type GitRepositoryStatusConditionsArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsArrayOutput() GitRepositoryStatusConditionsArrayOutput
	ToGitRepositoryStatusConditionsArrayOutputWithContext(context.Context) GitRepositoryStatusConditionsArrayOutput
}

type GitRepositoryStatusConditionsArray []GitRepositoryStatusConditionsInput

func (GitRepositoryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditions)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsArray) ToGitRepositoryStatusConditionsArrayOutput() GitRepositoryStatusConditionsArrayOutput {
	return i.ToGitRepositoryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsArray) ToGitRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditions)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsOutput) ToGitRepositoryStatusConditionsOutput() GitRepositoryStatusConditionsOutput {
	return o
}

func (o GitRepositoryStatusConditionsOutput) ToGitRepositoryStatusConditionsOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GitRepositoryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GitRepositoryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GitRepositoryStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GitRepositoryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GitRepositoryStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o GitRepositoryStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditions)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsArrayOutput) ToGitRepositoryStatusConditionsArrayOutput() GitRepositoryStatusConditionsArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsArrayOutput) ToGitRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusConditions {
		return vs[0].([]GitRepositoryStatusConditions)[vs[1].(int)]
	}).(GitRepositoryStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// GitRepositoryStatusConditionsPatchInput is an input type that accepts GitRepositoryStatusConditionsPatchArgs and GitRepositoryStatusConditionsPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsPatchInput` via:
//
//	GitRepositoryStatusConditionsPatchArgs{...}
type GitRepositoryStatusConditionsPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsPatchOutput() GitRepositoryStatusConditionsPatchOutput
	ToGitRepositoryStatusConditionsPatchOutputWithContext(context.Context) GitRepositoryStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GitRepositoryStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsPatchArgs) ToGitRepositoryStatusConditionsPatchOutput() GitRepositoryStatusConditionsPatchOutput {
	return i.ToGitRepositoryStatusConditionsPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsPatchArgs) ToGitRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsPatchOutput)
}

// GitRepositoryStatusConditionsPatchArrayInput is an input type that accepts GitRepositoryStatusConditionsPatchArray and GitRepositoryStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsPatchArrayInput` via:
//
//	GitRepositoryStatusConditionsPatchArray{ GitRepositoryStatusConditionsPatchArgs{...} }
type GitRepositoryStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsPatchArrayOutput() GitRepositoryStatusConditionsPatchArrayOutput
	ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(context.Context) GitRepositoryStatusConditionsPatchArrayOutput
}

type GitRepositoryStatusConditionsPatchArray []GitRepositoryStatusConditionsPatchInput

func (GitRepositoryStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsPatchArray) ToGitRepositoryStatusConditionsPatchArrayOutput() GitRepositoryStatusConditionsPatchArrayOutput {
	return i.ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsPatchArray) ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsPatchOutput) ToGitRepositoryStatusConditionsPatchOutput() GitRepositoryStatusConditionsPatchOutput {
	return o
}

func (o GitRepositoryStatusConditionsPatchOutput) ToGitRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GitRepositoryStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GitRepositoryStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GitRepositoryStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GitRepositoryStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GitRepositoryStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o GitRepositoryStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsPatchArrayOutput) ToGitRepositoryStatusConditionsPatchArrayOutput() GitRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsPatchArrayOutput) ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusConditionsPatch {
		return vs[0].([]GitRepositoryStatusConditionsPatch)[vs[1].(int)]
	}).(GitRepositoryStatusConditionsPatchOutput)
}

// Artifact represents the output of a Source reconciliation.
type GitRepositoryStatusIncludedArtifacts struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusIncludedArtifactsInput is an input type that accepts GitRepositoryStatusIncludedArtifactsArgs and GitRepositoryStatusIncludedArtifactsOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsInput` via:
//
//	GitRepositoryStatusIncludedArtifactsArgs{...}
type GitRepositoryStatusIncludedArtifactsInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsOutput() GitRepositoryStatusIncludedArtifactsOutput
	ToGitRepositoryStatusIncludedArtifactsOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsOutput
}

// Artifact represents the output of a Source reconciliation.
type GitRepositoryStatusIncludedArtifactsArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusIncludedArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsArgs) ToGitRepositoryStatusIncludedArtifactsOutput() GitRepositoryStatusIncludedArtifactsOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsArgs) ToGitRepositoryStatusIncludedArtifactsOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsOutput)
}

// GitRepositoryStatusIncludedArtifactsArrayInput is an input type that accepts GitRepositoryStatusIncludedArtifactsArray and GitRepositoryStatusIncludedArtifactsArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsArrayInput` via:
//
//	GitRepositoryStatusIncludedArtifactsArray{ GitRepositoryStatusIncludedArtifactsArgs{...} }
type GitRepositoryStatusIncludedArtifactsArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsArrayOutput() GitRepositoryStatusIncludedArtifactsArrayOutput
	ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsArrayOutput
}

type GitRepositoryStatusIncludedArtifactsArray []GitRepositoryStatusIncludedArtifactsInput

func (GitRepositoryStatusIncludedArtifactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsArray) ToGitRepositoryStatusIncludedArtifactsArrayOutput() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsArray) ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsArrayOutput)
}

// Artifact represents the output of a Source reconciliation.
type GitRepositoryStatusIncludedArtifactsOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsOutput) ToGitRepositoryStatusIncludedArtifactsOutput() GitRepositoryStatusIncludedArtifactsOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsOutput) ToGitRepositoryStatusIncludedArtifactsOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsOutput {
	return o
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o GitRepositoryStatusIncludedArtifactsOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o GitRepositoryStatusIncludedArtifactsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o GitRepositoryStatusIncludedArtifactsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o GitRepositoryStatusIncludedArtifactsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o GitRepositoryStatusIncludedArtifactsOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o GitRepositoryStatusIncludedArtifactsOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o GitRepositoryStatusIncludedArtifactsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusIncludedArtifactsArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsArrayOutput) ToGitRepositoryStatusIncludedArtifactsArrayOutput() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsArrayOutput) ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusIncludedArtifactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusIncludedArtifacts {
		return vs[0].([]GitRepositoryStatusIncludedArtifacts)[vs[1].(int)]
	}).(GitRepositoryStatusIncludedArtifactsOutput)
}

// Artifact represents the output of a Source reconciliation.
type GitRepositoryStatusIncludedArtifactsPatch struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusIncludedArtifactsPatchInput is an input type that accepts GitRepositoryStatusIncludedArtifactsPatchArgs and GitRepositoryStatusIncludedArtifactsPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsPatchInput` via:
//
//	GitRepositoryStatusIncludedArtifactsPatchArgs{...}
type GitRepositoryStatusIncludedArtifactsPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsPatchOutput() GitRepositoryStatusIncludedArtifactsPatchOutput
	ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsPatchOutput
}

// Artifact represents the output of a Source reconciliation.
type GitRepositoryStatusIncludedArtifactsPatchArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusIncludedArtifactsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsPatchArgs) ToGitRepositoryStatusIncludedArtifactsPatchOutput() GitRepositoryStatusIncludedArtifactsPatchOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsPatchArgs) ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsPatchOutput)
}

// GitRepositoryStatusIncludedArtifactsPatchArrayInput is an input type that accepts GitRepositoryStatusIncludedArtifactsPatchArray and GitRepositoryStatusIncludedArtifactsPatchArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsPatchArrayInput` via:
//
//	GitRepositoryStatusIncludedArtifactsPatchArray{ GitRepositoryStatusIncludedArtifactsPatchArgs{...} }
type GitRepositoryStatusIncludedArtifactsPatchArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsPatchArrayOutput() GitRepositoryStatusIncludedArtifactsPatchArrayOutput
	ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsPatchArrayOutput
}

type GitRepositoryStatusIncludedArtifactsPatchArray []GitRepositoryStatusIncludedArtifactsPatchInput

func (GitRepositoryStatusIncludedArtifactsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsPatchArray) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutput() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsPatchArray) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsPatchArrayOutput)
}

// Artifact represents the output of a Source reconciliation.
type GitRepositoryStatusIncludedArtifactsPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsPatchOutput) ToGitRepositoryStatusIncludedArtifactsPatchOutput() GitRepositoryStatusIncludedArtifactsPatchOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsPatchOutput) ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchOutput {
	return o
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusIncludedArtifactsPatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsPatchArrayOutput) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutput() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsPatchArrayOutput) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsPatchArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusIncludedArtifactsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusIncludedArtifactsPatch {
		return vs[0].([]GitRepositoryStatusIncludedArtifactsPatch)[vs[1].(int)]
	}).(GitRepositoryStatusIncludedArtifactsPatchOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositoryStatusObservedInclude struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   *string                                       `pulumi:"fromPath"`
	Repository *GitRepositoryStatusObservedIncludeRepository `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath *string `pulumi:"toPath"`
}

// GitRepositoryStatusObservedIncludeInput is an input type that accepts GitRepositoryStatusObservedIncludeArgs and GitRepositoryStatusObservedIncludeOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludeInput` via:
//
//	GitRepositoryStatusObservedIncludeArgs{...}
type GitRepositoryStatusObservedIncludeInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludeOutput() GitRepositoryStatusObservedIncludeOutput
	ToGitRepositoryStatusObservedIncludeOutputWithContext(context.Context) GitRepositoryStatusObservedIncludeOutput
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositoryStatusObservedIncludeArgs struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   pulumi.StringPtrInput                                `pulumi:"fromPath"`
	Repository GitRepositoryStatusObservedIncludeRepositoryPtrInput `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath pulumi.StringPtrInput `pulumi:"toPath"`
}

func (GitRepositoryStatusObservedIncludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedInclude)(nil)).Elem()
}

func (i GitRepositoryStatusObservedIncludeArgs) ToGitRepositoryStatusObservedIncludeOutput() GitRepositoryStatusObservedIncludeOutput {
	return i.ToGitRepositoryStatusObservedIncludeOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludeArgs) ToGitRepositoryStatusObservedIncludeOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeOutput)
}

// GitRepositoryStatusObservedIncludeArrayInput is an input type that accepts GitRepositoryStatusObservedIncludeArray and GitRepositoryStatusObservedIncludeArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludeArrayInput` via:
//
//	GitRepositoryStatusObservedIncludeArray{ GitRepositoryStatusObservedIncludeArgs{...} }
type GitRepositoryStatusObservedIncludeArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludeArrayOutput() GitRepositoryStatusObservedIncludeArrayOutput
	ToGitRepositoryStatusObservedIncludeArrayOutputWithContext(context.Context) GitRepositoryStatusObservedIncludeArrayOutput
}

type GitRepositoryStatusObservedIncludeArray []GitRepositoryStatusObservedIncludeInput

func (GitRepositoryStatusObservedIncludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusObservedInclude)(nil)).Elem()
}

func (i GitRepositoryStatusObservedIncludeArray) ToGitRepositoryStatusObservedIncludeArrayOutput() GitRepositoryStatusObservedIncludeArrayOutput {
	return i.ToGitRepositoryStatusObservedIncludeArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludeArray) ToGitRepositoryStatusObservedIncludeArrayOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeArrayOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositoryStatusObservedIncludeOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedInclude)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludeOutput) ToGitRepositoryStatusObservedIncludeOutput() GitRepositoryStatusObservedIncludeOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeOutput) ToGitRepositoryStatusObservedIncludeOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeOutput {
	return o
}

// FromPath specifies the path to copy contents from, defaults to the root
// of the Artifact.
func (o GitRepositoryStatusObservedIncludeOutput) FromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedInclude) *string { return v.FromPath }).(pulumi.StringPtrOutput)
}

func (o GitRepositoryStatusObservedIncludeOutput) Repository() GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedInclude) *GitRepositoryStatusObservedIncludeRepository {
		return v.Repository
	}).(GitRepositoryStatusObservedIncludeRepositoryPtrOutput)
}

// ToPath specifies the path to copy contents to, defaults to the name of
// the GitRepositoryRef.
func (o GitRepositoryStatusObservedIncludeOutput) ToPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedInclude) *string { return v.ToPath }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusObservedIncludeArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusObservedInclude)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludeArrayOutput) ToGitRepositoryStatusObservedIncludeArrayOutput() GitRepositoryStatusObservedIncludeArrayOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeArrayOutput) ToGitRepositoryStatusObservedIncludeArrayOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeArrayOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusObservedIncludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusObservedInclude {
		return vs[0].([]GitRepositoryStatusObservedInclude)[vs[1].(int)]
	}).(GitRepositoryStatusObservedIncludeOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositoryStatusObservedIncludePatch struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   *string                                            `pulumi:"fromPath"`
	Repository *GitRepositoryStatusObservedIncludeRepositoryPatch `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath *string `pulumi:"toPath"`
}

// GitRepositoryStatusObservedIncludePatchInput is an input type that accepts GitRepositoryStatusObservedIncludePatchArgs and GitRepositoryStatusObservedIncludePatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludePatchInput` via:
//
//	GitRepositoryStatusObservedIncludePatchArgs{...}
type GitRepositoryStatusObservedIncludePatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludePatchOutput() GitRepositoryStatusObservedIncludePatchOutput
	ToGitRepositoryStatusObservedIncludePatchOutputWithContext(context.Context) GitRepositoryStatusObservedIncludePatchOutput
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositoryStatusObservedIncludePatchArgs struct {
	// FromPath specifies the path to copy contents from, defaults to the root
	// of the Artifact.
	FromPath   pulumi.StringPtrInput                                     `pulumi:"fromPath"`
	Repository GitRepositoryStatusObservedIncludeRepositoryPatchPtrInput `pulumi:"repository"`
	// ToPath specifies the path to copy contents to, defaults to the name of
	// the GitRepositoryRef.
	ToPath pulumi.StringPtrInput `pulumi:"toPath"`
}

func (GitRepositoryStatusObservedIncludePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedIncludePatch)(nil)).Elem()
}

func (i GitRepositoryStatusObservedIncludePatchArgs) ToGitRepositoryStatusObservedIncludePatchOutput() GitRepositoryStatusObservedIncludePatchOutput {
	return i.ToGitRepositoryStatusObservedIncludePatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludePatchArgs) ToGitRepositoryStatusObservedIncludePatchOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludePatchOutput)
}

// GitRepositoryStatusObservedIncludePatchArrayInput is an input type that accepts GitRepositoryStatusObservedIncludePatchArray and GitRepositoryStatusObservedIncludePatchArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludePatchArrayInput` via:
//
//	GitRepositoryStatusObservedIncludePatchArray{ GitRepositoryStatusObservedIncludePatchArgs{...} }
type GitRepositoryStatusObservedIncludePatchArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludePatchArrayOutput() GitRepositoryStatusObservedIncludePatchArrayOutput
	ToGitRepositoryStatusObservedIncludePatchArrayOutputWithContext(context.Context) GitRepositoryStatusObservedIncludePatchArrayOutput
}

type GitRepositoryStatusObservedIncludePatchArray []GitRepositoryStatusObservedIncludePatchInput

func (GitRepositoryStatusObservedIncludePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusObservedIncludePatch)(nil)).Elem()
}

func (i GitRepositoryStatusObservedIncludePatchArray) ToGitRepositoryStatusObservedIncludePatchArrayOutput() GitRepositoryStatusObservedIncludePatchArrayOutput {
	return i.ToGitRepositoryStatusObservedIncludePatchArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludePatchArray) ToGitRepositoryStatusObservedIncludePatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludePatchArrayOutput)
}

// GitRepositoryInclude specifies a local reference to a GitRepository which
// Artifact (sub-)contents must be included, and where they should be placed.
type GitRepositoryStatusObservedIncludePatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedIncludePatch)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludePatchOutput) ToGitRepositoryStatusObservedIncludePatchOutput() GitRepositoryStatusObservedIncludePatchOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludePatchOutput) ToGitRepositoryStatusObservedIncludePatchOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludePatchOutput {
	return o
}

// FromPath specifies the path to copy contents from, defaults to the root
// of the Artifact.
func (o GitRepositoryStatusObservedIncludePatchOutput) FromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedIncludePatch) *string { return v.FromPath }).(pulumi.StringPtrOutput)
}

func (o GitRepositoryStatusObservedIncludePatchOutput) Repository() GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedIncludePatch) *GitRepositoryStatusObservedIncludeRepositoryPatch {
		return v.Repository
	}).(GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput)
}

// ToPath specifies the path to copy contents to, defaults to the name of
// the GitRepositoryRef.
func (o GitRepositoryStatusObservedIncludePatchOutput) ToPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedIncludePatch) *string { return v.ToPath }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusObservedIncludePatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusObservedIncludePatch)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludePatchArrayOutput) ToGitRepositoryStatusObservedIncludePatchArrayOutput() GitRepositoryStatusObservedIncludePatchArrayOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludePatchArrayOutput) ToGitRepositoryStatusObservedIncludePatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludePatchArrayOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludePatchArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusObservedIncludePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusObservedIncludePatch {
		return vs[0].([]GitRepositoryStatusObservedIncludePatch)[vs[1].(int)]
	}).(GitRepositoryStatusObservedIncludePatchOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositoryStatusObservedIncludeRepository struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositoryStatusObservedIncludeRepositoryInput is an input type that accepts GitRepositoryStatusObservedIncludeRepositoryArgs and GitRepositoryStatusObservedIncludeRepositoryOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludeRepositoryInput` via:
//
//	GitRepositoryStatusObservedIncludeRepositoryArgs{...}
type GitRepositoryStatusObservedIncludeRepositoryInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludeRepositoryOutput() GitRepositoryStatusObservedIncludeRepositoryOutput
	ToGitRepositoryStatusObservedIncludeRepositoryOutputWithContext(context.Context) GitRepositoryStatusObservedIncludeRepositoryOutput
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositoryStatusObservedIncludeRepositoryArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositoryStatusObservedIncludeRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepository)(nil)).Elem()
}

func (i GitRepositoryStatusObservedIncludeRepositoryArgs) ToGitRepositoryStatusObservedIncludeRepositoryOutput() GitRepositoryStatusObservedIncludeRepositoryOutput {
	return i.ToGitRepositoryStatusObservedIncludeRepositoryOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludeRepositoryArgs) ToGitRepositoryStatusObservedIncludeRepositoryOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeRepositoryOutput)
}

func (i GitRepositoryStatusObservedIncludeRepositoryArgs) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return i.ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludeRepositoryArgs) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeRepositoryOutput).ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(ctx)
}

// GitRepositoryStatusObservedIncludeRepositoryPtrInput is an input type that accepts GitRepositoryStatusObservedIncludeRepositoryArgs, GitRepositoryStatusObservedIncludeRepositoryPtr and GitRepositoryStatusObservedIncludeRepositoryPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludeRepositoryPtrInput` via:
//
//	        GitRepositoryStatusObservedIncludeRepositoryArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusObservedIncludeRepositoryPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludeRepositoryPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPtrOutput
	ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(context.Context) GitRepositoryStatusObservedIncludeRepositoryPtrOutput
}

type gitRepositoryStatusObservedIncludeRepositoryPtrType GitRepositoryStatusObservedIncludeRepositoryArgs

func GitRepositoryStatusObservedIncludeRepositoryPtr(v *GitRepositoryStatusObservedIncludeRepositoryArgs) GitRepositoryStatusObservedIncludeRepositoryPtrInput {
	return (*gitRepositoryStatusObservedIncludeRepositoryPtrType)(v)
}

func (*gitRepositoryStatusObservedIncludeRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusObservedIncludeRepository)(nil)).Elem()
}

func (i *gitRepositoryStatusObservedIncludeRepositoryPtrType) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return i.ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusObservedIncludeRepositoryPtrType) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeRepositoryPtrOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositoryStatusObservedIncludeRepositoryOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludeRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepository)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludeRepositoryOutput) ToGitRepositoryStatusObservedIncludeRepositoryOutput() GitRepositoryStatusObservedIncludeRepositoryOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryOutput) ToGitRepositoryStatusObservedIncludeRepositoryOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryOutput) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return o.ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusObservedIncludeRepositoryOutput) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusObservedIncludeRepository) *GitRepositoryStatusObservedIncludeRepository {
		return &v
	}).(GitRepositoryStatusObservedIncludeRepositoryPtrOutput)
}

// Name of the referent.
func (o GitRepositoryStatusObservedIncludeRepositoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedIncludeRepository) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusObservedIncludeRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludeRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusObservedIncludeRepository)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludeRepositoryPtrOutput) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryPtrOutput) ToGitRepositoryStatusObservedIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPtrOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryPtrOutput) Elem() GitRepositoryStatusObservedIncludeRepositoryOutput {
	return o.ApplyT(func(v *GitRepositoryStatusObservedIncludeRepository) GitRepositoryStatusObservedIncludeRepository {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusObservedIncludeRepository
		return ret
	}).(GitRepositoryStatusObservedIncludeRepositoryOutput)
}

// Name of the referent.
func (o GitRepositoryStatusObservedIncludeRepositoryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusObservedIncludeRepository) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositoryStatusObservedIncludeRepositoryPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositoryStatusObservedIncludeRepositoryPatchInput is an input type that accepts GitRepositoryStatusObservedIncludeRepositoryPatchArgs and GitRepositoryStatusObservedIncludeRepositoryPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludeRepositoryPatchInput` via:
//
//	GitRepositoryStatusObservedIncludeRepositoryPatchArgs{...}
type GitRepositoryStatusObservedIncludeRepositoryPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludeRepositoryPatchOutput() GitRepositoryStatusObservedIncludeRepositoryPatchOutput
	ToGitRepositoryStatusObservedIncludeRepositoryPatchOutputWithContext(context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchOutput
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositoryStatusObservedIncludeRepositoryPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositoryStatusObservedIncludeRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepositoryPatch)(nil)).Elem()
}

func (i GitRepositoryStatusObservedIncludeRepositoryPatchArgs) ToGitRepositoryStatusObservedIncludeRepositoryPatchOutput() GitRepositoryStatusObservedIncludeRepositoryPatchOutput {
	return i.ToGitRepositoryStatusObservedIncludeRepositoryPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludeRepositoryPatchArgs) ToGitRepositoryStatusObservedIncludeRepositoryPatchOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeRepositoryPatchOutput)
}

func (i GitRepositoryStatusObservedIncludeRepositoryPatchArgs) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return i.ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusObservedIncludeRepositoryPatchArgs) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeRepositoryPatchOutput).ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(ctx)
}

// GitRepositoryStatusObservedIncludeRepositoryPatchPtrInput is an input type that accepts GitRepositoryStatusObservedIncludeRepositoryPatchArgs, GitRepositoryStatusObservedIncludeRepositoryPatchPtr and GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusObservedIncludeRepositoryPatchPtrInput` via:
//
//	        GitRepositoryStatusObservedIncludeRepositoryPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusObservedIncludeRepositoryPatchPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput
	ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput
}

type gitRepositoryStatusObservedIncludeRepositoryPatchPtrType GitRepositoryStatusObservedIncludeRepositoryPatchArgs

func GitRepositoryStatusObservedIncludeRepositoryPatchPtr(v *GitRepositoryStatusObservedIncludeRepositoryPatchArgs) GitRepositoryStatusObservedIncludeRepositoryPatchPtrInput {
	return (*gitRepositoryStatusObservedIncludeRepositoryPatchPtrType)(v)
}

func (*gitRepositoryStatusObservedIncludeRepositoryPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusObservedIncludeRepositoryPatch)(nil)).Elem()
}

func (i *gitRepositoryStatusObservedIncludeRepositoryPatchPtrType) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return i.ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusObservedIncludeRepositoryPatchPtrType) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput)
}

// GitRepositoryRef specifies the GitRepository which Artifact contents
// must be included.
type GitRepositoryStatusObservedIncludeRepositoryPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludeRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepositoryPatch)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchOutput) ToGitRepositoryStatusObservedIncludeRepositoryPatchOutput() GitRepositoryStatusObservedIncludeRepositoryPatchOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchOutput) ToGitRepositoryStatusObservedIncludeRepositoryPatchOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchOutput) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return o.ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchOutput) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusObservedIncludeRepositoryPatch) *GitRepositoryStatusObservedIncludeRepositoryPatch {
		return &v
	}).(GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositoryStatusObservedIncludeRepositoryPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusObservedIncludeRepositoryPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusObservedIncludeRepositoryPatch)(nil)).Elem()
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput() GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput) ToGitRepositoryStatusObservedIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput) Elem() GitRepositoryStatusObservedIncludeRepositoryPatchOutput {
	return o.ApplyT(func(v *GitRepositoryStatusObservedIncludeRepositoryPatch) GitRepositoryStatusObservedIncludeRepositoryPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusObservedIncludeRepositoryPatch
		return ret
	}).(GitRepositoryStatusObservedIncludeRepositoryPatchOutput)
}

// Name of the referent.
func (o GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusObservedIncludeRepositoryPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositoryStatus records the observed state of a Git repository.
type GitRepositoryStatusPatch struct {
	Artifact *GitRepositoryStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions []GitRepositoryStatusConditionsPatch `pulumi:"conditions"`
	// IncludedArtifacts contains a list of the last successfully included
	// Artifacts as instructed by GitRepositorySpec.Include.
	IncludedArtifacts []GitRepositoryStatusIncludedArtifactsPatch `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the GitRepository
	// object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore *string `pulumi:"observedIgnore"`
	// ObservedInclude is the observed list of GitRepository resources used to
	// produce the current Artifact.
	ObservedInclude []GitRepositoryStatusObservedIncludePatch `pulumi:"observedInclude"`
	// ObservedRecurseSubmodules is the observed resource submodules
	// configuration used to produce the current Artifact.
	ObservedRecurseSubmodules *bool `pulumi:"observedRecurseSubmodules"`
	// ObservedSparseCheckout is the observed list of directories used to
	// produce the current Artifact.
	ObservedSparseCheckout []string `pulumi:"observedSparseCheckout"`
	// SourceVerificationMode is the last used verification mode indicating
	// which Git object(s) have been verified.
	SourceVerificationMode *string `pulumi:"sourceVerificationMode"`
}

// GitRepositoryStatusPatchInput is an input type that accepts GitRepositoryStatusPatchArgs and GitRepositoryStatusPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusPatchInput` via:
//
//	GitRepositoryStatusPatchArgs{...}
type GitRepositoryStatusPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusPatchOutput() GitRepositoryStatusPatchOutput
	ToGitRepositoryStatusPatchOutputWithContext(context.Context) GitRepositoryStatusPatchOutput
}

// GitRepositoryStatus records the observed state of a Git repository.
type GitRepositoryStatusPatchArgs struct {
	Artifact GitRepositoryStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions GitRepositoryStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// IncludedArtifacts contains a list of the last successfully included
	// Artifacts as instructed by GitRepositorySpec.Include.
	IncludedArtifacts GitRepositoryStatusIncludedArtifactsPatchArrayInput `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the GitRepository
	// object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore pulumi.StringPtrInput `pulumi:"observedIgnore"`
	// ObservedInclude is the observed list of GitRepository resources used to
	// produce the current Artifact.
	ObservedInclude GitRepositoryStatusObservedIncludePatchArrayInput `pulumi:"observedInclude"`
	// ObservedRecurseSubmodules is the observed resource submodules
	// configuration used to produce the current Artifact.
	ObservedRecurseSubmodules pulumi.BoolPtrInput `pulumi:"observedRecurseSubmodules"`
	// ObservedSparseCheckout is the observed list of directories used to
	// produce the current Artifact.
	ObservedSparseCheckout pulumi.StringArrayInput `pulumi:"observedSparseCheckout"`
	// SourceVerificationMode is the last used verification mode indicating
	// which Git object(s) have been verified.
	SourceVerificationMode pulumi.StringPtrInput `pulumi:"sourceVerificationMode"`
}

func (GitRepositoryStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusPatch)(nil)).Elem()
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchOutput() GitRepositoryStatusPatchOutput {
	return i.ToGitRepositoryStatusPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchOutputWithContext(ctx context.Context) GitRepositoryStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPatchOutput)
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return i.ToGitRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPatchOutput).ToGitRepositoryStatusPatchPtrOutputWithContext(ctx)
}

// GitRepositoryStatusPatchPtrInput is an input type that accepts GitRepositoryStatusPatchArgs, GitRepositoryStatusPatchPtr and GitRepositoryStatusPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusPatchPtrInput` via:
//
//	        GitRepositoryStatusPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusPatchPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput
	ToGitRepositoryStatusPatchPtrOutputWithContext(context.Context) GitRepositoryStatusPatchPtrOutput
}

type gitRepositoryStatusPatchPtrType GitRepositoryStatusPatchArgs

func GitRepositoryStatusPatchPtr(v *GitRepositoryStatusPatchArgs) GitRepositoryStatusPatchPtrInput {
	return (*gitRepositoryStatusPatchPtrType)(v)
}

func (*gitRepositoryStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusPatch)(nil)).Elem()
}

func (i *gitRepositoryStatusPatchPtrType) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return i.ToGitRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusPatchPtrType) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPatchPtrOutput)
}

// GitRepositoryStatus records the observed state of a Git repository.
type GitRepositoryStatusPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusPatch)(nil)).Elem()
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchOutput() GitRepositoryStatusPatchOutput {
	return o
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchOutputWithContext(ctx context.Context) GitRepositoryStatusPatchOutput {
	return o
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return o.ToGitRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusPatch) *GitRepositoryStatusPatch {
		return &v
	}).(GitRepositoryStatusPatchPtrOutput)
}

func (o GitRepositoryStatusPatchOutput) Artifact() GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *GitRepositoryStatusArtifactPatch { return v.Artifact }).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusPatchOutput) Conditions() GitRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) []GitRepositoryStatusConditionsPatch { return v.Conditions }).(GitRepositoryStatusConditionsPatchArrayOutput)
}

// IncludedArtifacts contains a list of the last successfully included
// Artifacts as instructed by GitRepositorySpec.Include.
func (o GitRepositoryStatusPatchOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) []GitRepositoryStatusIncludedArtifactsPatch {
		return v.IncludedArtifacts
	}).(GitRepositoryStatusIncludedArtifactsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the GitRepository
// object.
func (o GitRepositoryStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o GitRepositoryStatusPatchOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *string { return v.ObservedIgnore }).(pulumi.StringPtrOutput)
}

// ObservedInclude is the observed list of GitRepository resources used to
// produce the current Artifact.
func (o GitRepositoryStatusPatchOutput) ObservedInclude() GitRepositoryStatusObservedIncludePatchArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) []GitRepositoryStatusObservedIncludePatch { return v.ObservedInclude }).(GitRepositoryStatusObservedIncludePatchArrayOutput)
}

// ObservedRecurseSubmodules is the observed resource submodules
// configuration used to produce the current Artifact.
func (o GitRepositoryStatusPatchOutput) ObservedRecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *bool { return v.ObservedRecurseSubmodules }).(pulumi.BoolPtrOutput)
}

// ObservedSparseCheckout is the observed list of directories used to
// produce the current Artifact.
func (o GitRepositoryStatusPatchOutput) ObservedSparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) []string { return v.ObservedSparseCheckout }).(pulumi.StringArrayOutput)
}

// SourceVerificationMode is the last used verification mode indicating
// which Git object(s) have been verified.
func (o GitRepositoryStatusPatchOutput) SourceVerificationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *string { return v.SourceVerificationMode }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusPatch)(nil)).Elem()
}

func (o GitRepositoryStatusPatchPtrOutput) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusPatchPtrOutput) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusPatchPtrOutput) Elem() GitRepositoryStatusPatchOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) GitRepositoryStatusPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusPatch
		return ret
	}).(GitRepositoryStatusPatchOutput)
}

func (o GitRepositoryStatusPatchPtrOutput) Artifact() GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *GitRepositoryStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusPatchPtrOutput) Conditions() GitRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) []GitRepositoryStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GitRepositoryStatusConditionsPatchArrayOutput)
}

// IncludedArtifacts contains a list of the last successfully included
// Artifacts as instructed by GitRepositorySpec.Include.
func (o GitRepositoryStatusPatchPtrOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) []GitRepositoryStatusIncludedArtifactsPatch {
		if v == nil {
			return nil
		}
		return v.IncludedArtifacts
	}).(GitRepositoryStatusIncludedArtifactsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the GitRepository
// object.
func (o GitRepositoryStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o GitRepositoryStatusPatchPtrOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedIgnore
	}).(pulumi.StringPtrOutput)
}

// ObservedInclude is the observed list of GitRepository resources used to
// produce the current Artifact.
func (o GitRepositoryStatusPatchPtrOutput) ObservedInclude() GitRepositoryStatusObservedIncludePatchArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) []GitRepositoryStatusObservedIncludePatch {
		if v == nil {
			return nil
		}
		return v.ObservedInclude
	}).(GitRepositoryStatusObservedIncludePatchArrayOutput)
}

// ObservedRecurseSubmodules is the observed resource submodules
// configuration used to produce the current Artifact.
func (o GitRepositoryStatusPatchPtrOutput) ObservedRecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ObservedRecurseSubmodules
	}).(pulumi.BoolPtrOutput)
}

// ObservedSparseCheckout is the observed list of directories used to
// produce the current Artifact.
func (o GitRepositoryStatusPatchPtrOutput) ObservedSparseCheckout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.ObservedSparseCheckout
	}).(pulumi.StringArrayOutput)
}

// SourceVerificationMode is the last used verification mode indicating
// which Git object(s) have been verified.
func (o GitRepositoryStatusPatchPtrOutput) SourceVerificationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.SourceVerificationMode
	}).(pulumi.StringPtrOutput)
}

// HelmChart is the Schema for the helmcharts API.
type HelmChartType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *HelmChartSpec     `pulumi:"spec"`
	Status   *HelmChartStatus   `pulumi:"status"`
}

// HelmChartTypeInput is an input type that accepts HelmChartTypeArgs and HelmChartTypeOutput values.
// You can construct a concrete instance of `HelmChartTypeInput` via:
//
//	HelmChartTypeArgs{...}
type HelmChartTypeInput interface {
	pulumi.Input

	ToHelmChartTypeOutput() HelmChartTypeOutput
	ToHelmChartTypeOutputWithContext(context.Context) HelmChartTypeOutput
}

// HelmChart is the Schema for the helmcharts API.
type HelmChartTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     HelmChartSpecPtrInput     `pulumi:"spec"`
	Status   HelmChartStatusPtrInput   `pulumi:"status"`
}

func (HelmChartTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartType)(nil)).Elem()
}

func (i HelmChartTypeArgs) ToHelmChartTypeOutput() HelmChartTypeOutput {
	return i.ToHelmChartTypeOutputWithContext(context.Background())
}

func (i HelmChartTypeArgs) ToHelmChartTypeOutputWithContext(ctx context.Context) HelmChartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartTypeOutput)
}

// HelmChartTypeArrayInput is an input type that accepts HelmChartTypeArray and HelmChartTypeArrayOutput values.
// You can construct a concrete instance of `HelmChartTypeArrayInput` via:
//
//	HelmChartTypeArray{ HelmChartTypeArgs{...} }
type HelmChartTypeArrayInput interface {
	pulumi.Input

	ToHelmChartTypeArrayOutput() HelmChartTypeArrayOutput
	ToHelmChartTypeArrayOutputWithContext(context.Context) HelmChartTypeArrayOutput
}

type HelmChartTypeArray []HelmChartTypeInput

func (HelmChartTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartType)(nil)).Elem()
}

func (i HelmChartTypeArray) ToHelmChartTypeArrayOutput() HelmChartTypeArrayOutput {
	return i.ToHelmChartTypeArrayOutputWithContext(context.Background())
}

func (i HelmChartTypeArray) ToHelmChartTypeArrayOutputWithContext(ctx context.Context) HelmChartTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartTypeArrayOutput)
}

// HelmChart is the Schema for the helmcharts API.
type HelmChartTypeOutput struct{ *pulumi.OutputState }

func (HelmChartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartType)(nil)).Elem()
}

func (o HelmChartTypeOutput) ToHelmChartTypeOutput() HelmChartTypeOutput {
	return o
}

func (o HelmChartTypeOutput) ToHelmChartTypeOutputWithContext(ctx context.Context) HelmChartTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmChartTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HelmChartType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HelmChartTypeOutput) Spec() HelmChartSpecPtrOutput {
	return o.ApplyT(func(v HelmChartType) *HelmChartSpec { return v.Spec }).(HelmChartSpecPtrOutput)
}

func (o HelmChartTypeOutput) Status() HelmChartStatusPtrOutput {
	return o.ApplyT(func(v HelmChartType) *HelmChartStatus { return v.Status }).(HelmChartStatusPtrOutput)
}

type HelmChartTypeArrayOutput struct{ *pulumi.OutputState }

func (HelmChartTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartType)(nil)).Elem()
}

func (o HelmChartTypeArrayOutput) ToHelmChartTypeArrayOutput() HelmChartTypeArrayOutput {
	return o
}

func (o HelmChartTypeArrayOutput) ToHelmChartTypeArrayOutputWithContext(ctx context.Context) HelmChartTypeArrayOutput {
	return o
}

func (o HelmChartTypeArrayOutput) Index(i pulumi.IntInput) HelmChartTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartType {
		return vs[0].([]HelmChartType)[vs[1].(int)]
	}).(HelmChartTypeOutput)
}

// HelmChartList is a list of HelmChart
type HelmChartListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmChartType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HelmChartListTypeInput is an input type that accepts HelmChartListTypeArgs and HelmChartListTypeOutput values.
// You can construct a concrete instance of `HelmChartListTypeInput` via:
//
//	HelmChartListTypeArgs{...}
type HelmChartListTypeInput interface {
	pulumi.Input

	ToHelmChartListTypeOutput() HelmChartListTypeOutput
	ToHelmChartListTypeOutputWithContext(context.Context) HelmChartListTypeOutput
}

// HelmChartList is a list of HelmChart
type HelmChartListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmChartTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HelmChartListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartListType)(nil)).Elem()
}

func (i HelmChartListTypeArgs) ToHelmChartListTypeOutput() HelmChartListTypeOutput {
	return i.ToHelmChartListTypeOutputWithContext(context.Background())
}

func (i HelmChartListTypeArgs) ToHelmChartListTypeOutputWithContext(ctx context.Context) HelmChartListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartListTypeOutput)
}

// HelmChartList is a list of HelmChart
type HelmChartListTypeOutput struct{ *pulumi.OutputState }

func (HelmChartListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartListType)(nil)).Elem()
}

func (o HelmChartListTypeOutput) ToHelmChartListTypeOutput() HelmChartListTypeOutput {
	return o
}

func (o HelmChartListTypeOutput) ToHelmChartListTypeOutputWithContext(ctx context.Context) HelmChartListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmChartListTypeOutput) Items() HelmChartTypeArrayOutput {
	return o.ApplyT(func(v HelmChartListType) []HelmChartType { return v.Items }).(HelmChartTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HelmChartListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// HelmChart is the Schema for the helmcharts API.
type HelmChartPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *HelmChartSpecPatch     `pulumi:"spec"`
	Status   *HelmChartStatusPatch   `pulumi:"status"`
}

// HelmChartPatchTypeInput is an input type that accepts HelmChartPatchTypeArgs and HelmChartPatchTypeOutput values.
// You can construct a concrete instance of `HelmChartPatchTypeInput` via:
//
//	HelmChartPatchTypeArgs{...}
type HelmChartPatchTypeInput interface {
	pulumi.Input

	ToHelmChartPatchTypeOutput() HelmChartPatchTypeOutput
	ToHelmChartPatchTypeOutputWithContext(context.Context) HelmChartPatchTypeOutput
}

// HelmChart is the Schema for the helmcharts API.
type HelmChartPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     HelmChartSpecPatchPtrInput     `pulumi:"spec"`
	Status   HelmChartStatusPatchPtrInput   `pulumi:"status"`
}

func (HelmChartPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartPatchType)(nil)).Elem()
}

func (i HelmChartPatchTypeArgs) ToHelmChartPatchTypeOutput() HelmChartPatchTypeOutput {
	return i.ToHelmChartPatchTypeOutputWithContext(context.Background())
}

func (i HelmChartPatchTypeArgs) ToHelmChartPatchTypeOutputWithContext(ctx context.Context) HelmChartPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartPatchTypeOutput)
}

// HelmChart is the Schema for the helmcharts API.
type HelmChartPatchTypeOutput struct{ *pulumi.OutputState }

func (HelmChartPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartPatchType)(nil)).Elem()
}

func (o HelmChartPatchTypeOutput) ToHelmChartPatchTypeOutput() HelmChartPatchTypeOutput {
	return o
}

func (o HelmChartPatchTypeOutput) ToHelmChartPatchTypeOutputWithContext(ctx context.Context) HelmChartPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmChartPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmChartPatchTypeOutput) Spec() HelmChartSpecPatchPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *HelmChartSpecPatch { return v.Spec }).(HelmChartSpecPatchPtrOutput)
}

func (o HelmChartPatchTypeOutput) Status() HelmChartStatusPatchPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *HelmChartStatusPatch { return v.Status }).(HelmChartStatusPatchPtrOutput)
}

// HelmChartSpec specifies the desired state of a Helm chart.
type HelmChartSpec struct {
	// Chart is the name or path the Helm chart is available at in the
	// SourceRef.
	Chart *string `pulumi:"chart"`
	// IgnoreMissingValuesFiles controls whether to silently ignore missing values
	// files rather than failing.
	IgnoreMissingValuesFiles *bool `pulumi:"ignoreMissingValuesFiles"`
	// Interval at which the HelmChart SourceRef is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// ReconcileStrategy determines what enables the creation of a new artifact.
	// Valid values are ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy *string                 `pulumi:"reconcileStrategy"`
	SourceRef         *HelmChartSpecSourceRef `pulumi:"sourceRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// source.
	Suspend *bool `pulumi:"suspend"`
	// ValuesFiles is an alternative list of values files to use as the chart
	// values (values.yaml is not included by default), expected to be a
	// relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file
	// overriding the first. Ignored when omitted.
	ValuesFiles []string             `pulumi:"valuesFiles"`
	Verify      *HelmChartSpecVerify `pulumi:"verify"`
	// Version is the chart version semver expression, ignored for charts from
	// GitRepository and Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// HelmChartSpecInput is an input type that accepts HelmChartSpecArgs and HelmChartSpecOutput values.
// You can construct a concrete instance of `HelmChartSpecInput` via:
//
//	HelmChartSpecArgs{...}
type HelmChartSpecInput interface {
	pulumi.Input

	ToHelmChartSpecOutput() HelmChartSpecOutput
	ToHelmChartSpecOutputWithContext(context.Context) HelmChartSpecOutput
}

// HelmChartSpec specifies the desired state of a Helm chart.
type HelmChartSpecArgs struct {
	// Chart is the name or path the Helm chart is available at in the
	// SourceRef.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// IgnoreMissingValuesFiles controls whether to silently ignore missing values
	// files rather than failing.
	IgnoreMissingValuesFiles pulumi.BoolPtrInput `pulumi:"ignoreMissingValuesFiles"`
	// Interval at which the HelmChart SourceRef is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// ReconcileStrategy determines what enables the creation of a new artifact.
	// Valid values are ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput          `pulumi:"reconcileStrategy"`
	SourceRef         HelmChartSpecSourceRefPtrInput `pulumi:"sourceRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// ValuesFiles is an alternative list of values files to use as the chart
	// values (values.yaml is not included by default), expected to be a
	// relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file
	// overriding the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput     `pulumi:"valuesFiles"`
	Verify      HelmChartSpecVerifyPtrInput `pulumi:"verify"`
	// Version is the chart version semver expression, ignored for charts from
	// GitRepository and Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmChartSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpec)(nil)).Elem()
}

func (i HelmChartSpecArgs) ToHelmChartSpecOutput() HelmChartSpecOutput {
	return i.ToHelmChartSpecOutputWithContext(context.Background())
}

func (i HelmChartSpecArgs) ToHelmChartSpecOutputWithContext(ctx context.Context) HelmChartSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecOutput)
}

func (i HelmChartSpecArgs) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return i.ToHelmChartSpecPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecArgs) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecOutput).ToHelmChartSpecPtrOutputWithContext(ctx)
}

// HelmChartSpecPtrInput is an input type that accepts HelmChartSpecArgs, HelmChartSpecPtr and HelmChartSpecPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecPtrInput` via:
//
//	        HelmChartSpecArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecPtrInput interface {
	pulumi.Input

	ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput
	ToHelmChartSpecPtrOutputWithContext(context.Context) HelmChartSpecPtrOutput
}

type helmChartSpecPtrType HelmChartSpecArgs

func HelmChartSpecPtr(v *HelmChartSpecArgs) HelmChartSpecPtrInput {
	return (*helmChartSpecPtrType)(v)
}

func (*helmChartSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpec)(nil)).Elem()
}

func (i *helmChartSpecPtrType) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return i.ToHelmChartSpecPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecPtrType) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPtrOutput)
}

// HelmChartSpec specifies the desired state of a Helm chart.
type HelmChartSpecOutput struct{ *pulumi.OutputState }

func (HelmChartSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpec)(nil)).Elem()
}

func (o HelmChartSpecOutput) ToHelmChartSpecOutput() HelmChartSpecOutput {
	return o
}

func (o HelmChartSpecOutput) ToHelmChartSpecOutputWithContext(ctx context.Context) HelmChartSpecOutput {
	return o
}

func (o HelmChartSpecOutput) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return o.ToHelmChartSpecPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecOutput) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpec) *HelmChartSpec {
		return &v
	}).(HelmChartSpecPtrOutput)
}

// Chart is the name or path the Helm chart is available at in the
// SourceRef.
func (o HelmChartSpecOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// IgnoreMissingValuesFiles controls whether to silently ignore missing values
// files rather than failing.
func (o HelmChartSpecOutput) IgnoreMissingValuesFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *bool { return v.IgnoreMissingValuesFiles }).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmChart SourceRef is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmChartSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// ReconcileStrategy determines what enables the creation of a new artifact.
// Valid values are ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecOutput) SourceRef() HelmChartSpecSourceRefPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *HelmChartSpecSourceRef { return v.SourceRef }).(HelmChartSpecSourceRefPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// source.
func (o HelmChartSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// ValuesFiles is an alternative list of values files to use as the chart
// values (values.yaml is not included by default), expected to be a
// relative path in the SourceRef.
// Values files are merged in the order of this list with the last file
// overriding the first. Ignored when omitted.
func (o HelmChartSpecOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmChartSpec) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

func (o HelmChartSpecOutput) Verify() HelmChartSpecVerifyPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *HelmChartSpecVerify { return v.Verify }).(HelmChartSpecVerifyPtrOutput)
}

// Version is the chart version semver expression, ignored for charts from
// GitRepository and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmChartSpecPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpec)(nil)).Elem()
}

func (o HelmChartSpecPtrOutput) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return o
}

func (o HelmChartSpecPtrOutput) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return o
}

func (o HelmChartSpecPtrOutput) Elem() HelmChartSpecOutput {
	return o.ApplyT(func(v *HelmChartSpec) HelmChartSpec {
		if v != nil {
			return *v
		}
		var ret HelmChartSpec
		return ret
	}).(HelmChartSpecOutput)
}

// Chart is the name or path the Helm chart is available at in the
// SourceRef.
func (o HelmChartSpecPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// IgnoreMissingValuesFiles controls whether to silently ignore missing values
// files rather than failing.
func (o HelmChartSpecPtrOutput) IgnoreMissingValuesFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreMissingValuesFiles
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmChart SourceRef is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmChartSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// ReconcileStrategy determines what enables the creation of a new artifact.
// Valid values are ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecPtrOutput) SourceRef() HelmChartSpecSourceRefPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *HelmChartSpecSourceRef {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(HelmChartSpecSourceRefPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// source.
func (o HelmChartSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// ValuesFiles is an alternative list of values files to use as the chart
// values (values.yaml is not included by default), expected to be a
// relative path in the SourceRef.
// Values files are merged in the order of this list with the last file
// overriding the first. Ignored when omitted.
func (o HelmChartSpecPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmChartSpec) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

func (o HelmChartSpecPtrOutput) Verify() HelmChartSpecVerifyPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *HelmChartSpecVerify {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(HelmChartSpecVerifyPtrOutput)
}

// Version is the chart version semver expression, ignored for charts from
// GitRepository and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// HelmChartSpec specifies the desired state of a Helm chart.
type HelmChartSpecPatch struct {
	// Chart is the name or path the Helm chart is available at in the
	// SourceRef.
	Chart *string `pulumi:"chart"`
	// IgnoreMissingValuesFiles controls whether to silently ignore missing values
	// files rather than failing.
	IgnoreMissingValuesFiles *bool `pulumi:"ignoreMissingValuesFiles"`
	// Interval at which the HelmChart SourceRef is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// ReconcileStrategy determines what enables the creation of a new artifact.
	// Valid values are ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy *string                      `pulumi:"reconcileStrategy"`
	SourceRef         *HelmChartSpecSourceRefPatch `pulumi:"sourceRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// source.
	Suspend *bool `pulumi:"suspend"`
	// ValuesFiles is an alternative list of values files to use as the chart
	// values (values.yaml is not included by default), expected to be a
	// relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file
	// overriding the first. Ignored when omitted.
	ValuesFiles []string                  `pulumi:"valuesFiles"`
	Verify      *HelmChartSpecVerifyPatch `pulumi:"verify"`
	// Version is the chart version semver expression, ignored for charts from
	// GitRepository and Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// HelmChartSpecPatchInput is an input type that accepts HelmChartSpecPatchArgs and HelmChartSpecPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecPatchInput` via:
//
//	HelmChartSpecPatchArgs{...}
type HelmChartSpecPatchInput interface {
	pulumi.Input

	ToHelmChartSpecPatchOutput() HelmChartSpecPatchOutput
	ToHelmChartSpecPatchOutputWithContext(context.Context) HelmChartSpecPatchOutput
}

// HelmChartSpec specifies the desired state of a Helm chart.
type HelmChartSpecPatchArgs struct {
	// Chart is the name or path the Helm chart is available at in the
	// SourceRef.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// IgnoreMissingValuesFiles controls whether to silently ignore missing values
	// files rather than failing.
	IgnoreMissingValuesFiles pulumi.BoolPtrInput `pulumi:"ignoreMissingValuesFiles"`
	// Interval at which the HelmChart SourceRef is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// ReconcileStrategy determines what enables the creation of a new artifact.
	// Valid values are ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput               `pulumi:"reconcileStrategy"`
	SourceRef         HelmChartSpecSourceRefPatchPtrInput `pulumi:"sourceRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// ValuesFiles is an alternative list of values files to use as the chart
	// values (values.yaml is not included by default), expected to be a
	// relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file
	// overriding the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput          `pulumi:"valuesFiles"`
	Verify      HelmChartSpecVerifyPatchPtrInput `pulumi:"verify"`
	// Version is the chart version semver expression, ignored for charts from
	// GitRepository and Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmChartSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecPatch)(nil)).Elem()
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchOutput() HelmChartSpecPatchOutput {
	return i.ToHelmChartSpecPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchOutputWithContext(ctx context.Context) HelmChartSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPatchOutput)
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return i.ToHelmChartSpecPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPatchOutput).ToHelmChartSpecPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecPatchPtrInput is an input type that accepts HelmChartSpecPatchArgs, HelmChartSpecPatchPtr and HelmChartSpecPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecPatchPtrInput` via:
//
//	        HelmChartSpecPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput
	ToHelmChartSpecPatchPtrOutputWithContext(context.Context) HelmChartSpecPatchPtrOutput
}

type helmChartSpecPatchPtrType HelmChartSpecPatchArgs

func HelmChartSpecPatchPtr(v *HelmChartSpecPatchArgs) HelmChartSpecPatchPtrInput {
	return (*helmChartSpecPatchPtrType)(v)
}

func (*helmChartSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecPatch)(nil)).Elem()
}

func (i *helmChartSpecPatchPtrType) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return i.ToHelmChartSpecPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecPatchPtrType) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPatchPtrOutput)
}

// HelmChartSpec specifies the desired state of a Helm chart.
type HelmChartSpecPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecPatch)(nil)).Elem()
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchOutput() HelmChartSpecPatchOutput {
	return o
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchOutputWithContext(ctx context.Context) HelmChartSpecPatchOutput {
	return o
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return o.ToHelmChartSpecPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecPatch) *HelmChartSpecPatch {
		return &v
	}).(HelmChartSpecPatchPtrOutput)
}

// Chart is the name or path the Helm chart is available at in the
// SourceRef.
func (o HelmChartSpecPatchOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// IgnoreMissingValuesFiles controls whether to silently ignore missing values
// files rather than failing.
func (o HelmChartSpecPatchOutput) IgnoreMissingValuesFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *bool { return v.IgnoreMissingValuesFiles }).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmChart SourceRef is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmChartSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// ReconcileStrategy determines what enables the creation of a new artifact.
// Valid values are ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecPatchOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecPatchOutput) SourceRef() HelmChartSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *HelmChartSpecSourceRefPatch { return v.SourceRef }).(HelmChartSpecSourceRefPatchPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// source.
func (o HelmChartSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// ValuesFiles is an alternative list of values files to use as the chart
// values (values.yaml is not included by default), expected to be a
// relative path in the SourceRef.
// Values files are merged in the order of this list with the last file
// overriding the first. Ignored when omitted.
func (o HelmChartSpecPatchOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

func (o HelmChartSpecPatchOutput) Verify() HelmChartSpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *HelmChartSpecVerifyPatch { return v.Verify }).(HelmChartSpecVerifyPatchPtrOutput)
}

// Version is the chart version semver expression, ignored for charts from
// GitRepository and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmChartSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecPatch)(nil)).Elem()
}

func (o HelmChartSpecPatchPtrOutput) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return o
}

func (o HelmChartSpecPatchPtrOutput) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return o
}

func (o HelmChartSpecPatchPtrOutput) Elem() HelmChartSpecPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) HelmChartSpecPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecPatch
		return ret
	}).(HelmChartSpecPatchOutput)
}

// Chart is the name or path the Helm chart is available at in the
// SourceRef.
func (o HelmChartSpecPatchPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// IgnoreMissingValuesFiles controls whether to silently ignore missing values
// files rather than failing.
func (o HelmChartSpecPatchPtrOutput) IgnoreMissingValuesFiles() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreMissingValuesFiles
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmChart SourceRef is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmChartSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// ReconcileStrategy determines what enables the creation of a new artifact.
// Valid values are ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecPatchPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecPatchPtrOutput) SourceRef() HelmChartSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *HelmChartSpecSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(HelmChartSpecSourceRefPatchPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// source.
func (o HelmChartSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// ValuesFiles is an alternative list of values files to use as the chart
// values (values.yaml is not included by default), expected to be a
// relative path in the SourceRef.
// Values files are merged in the order of this list with the last file
// overriding the first. Ignored when omitted.
func (o HelmChartSpecPatchPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

func (o HelmChartSpecPatchPtrOutput) Verify() HelmChartSpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *HelmChartSpecVerifyPatch {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(HelmChartSpecVerifyPatchPtrOutput)
}

// Version is the chart version semver expression, ignored for charts from
// GitRepository and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// SourceRef is the reference to the Source the chart is available at.
type HelmChartSpecSourceRef struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmChartSpecSourceRefInput is an input type that accepts HelmChartSpecSourceRefArgs and HelmChartSpecSourceRefOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefInput` via:
//
//	HelmChartSpecSourceRefArgs{...}
type HelmChartSpecSourceRefInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefOutput() HelmChartSpecSourceRefOutput
	ToHelmChartSpecSourceRefOutputWithContext(context.Context) HelmChartSpecSourceRefOutput
}

// SourceRef is the reference to the Source the chart is available at.
type HelmChartSpecSourceRefArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmChartSpecSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRef)(nil)).Elem()
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefOutput() HelmChartSpecSourceRefOutput {
	return i.ToHelmChartSpecSourceRefOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefOutputWithContext(ctx context.Context) HelmChartSpecSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefOutput)
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return i.ToHelmChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefOutput).ToHelmChartSpecSourceRefPtrOutputWithContext(ctx)
}

// HelmChartSpecSourceRefPtrInput is an input type that accepts HelmChartSpecSourceRefArgs, HelmChartSpecSourceRefPtr and HelmChartSpecSourceRefPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefPtrInput` via:
//
//	        HelmChartSpecSourceRefArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecSourceRefPtrInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput
	ToHelmChartSpecSourceRefPtrOutputWithContext(context.Context) HelmChartSpecSourceRefPtrOutput
}

type helmChartSpecSourceRefPtrType HelmChartSpecSourceRefArgs

func HelmChartSpecSourceRefPtr(v *HelmChartSpecSourceRefArgs) HelmChartSpecSourceRefPtrInput {
	return (*helmChartSpecSourceRefPtrType)(v)
}

func (*helmChartSpecSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRef)(nil)).Elem()
}

func (i *helmChartSpecSourceRefPtrType) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return i.ToHelmChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecSourceRefPtrType) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPtrOutput)
}

// SourceRef is the reference to the Source the chart is available at.
type HelmChartSpecSourceRefOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRef)(nil)).Elem()
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefOutput() HelmChartSpecSourceRefOutput {
	return o
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefOutputWithContext(ctx context.Context) HelmChartSpecSourceRefOutput {
	return o
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return o.ToHelmChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecSourceRef) *HelmChartSpecSourceRef {
		return &v
	}).(HelmChartSpecSourceRefPtrOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmChartSpecSourceRefPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRef)(nil)).Elem()
}

func (o HelmChartSpecSourceRefPtrOutput) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPtrOutput) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPtrOutput) Elem() HelmChartSpecSourceRefOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) HelmChartSpecSourceRef {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecSourceRef
		return ret
	}).(HelmChartSpecSourceRefOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SourceRef is the reference to the Source the chart is available at.
type HelmChartSpecSourceRefPatch struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmChartSpecSourceRefPatchInput is an input type that accepts HelmChartSpecSourceRefPatchArgs and HelmChartSpecSourceRefPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefPatchInput` via:
//
//	HelmChartSpecSourceRefPatchArgs{...}
type HelmChartSpecSourceRefPatchInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefPatchOutput() HelmChartSpecSourceRefPatchOutput
	ToHelmChartSpecSourceRefPatchOutputWithContext(context.Context) HelmChartSpecSourceRefPatchOutput
}

// SourceRef is the reference to the Source the chart is available at.
type HelmChartSpecSourceRefPatchArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmChartSpecSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchOutput() HelmChartSpecSourceRefPatchOutput {
	return i.ToHelmChartSpecSourceRefPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPatchOutput)
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return i.ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPatchOutput).ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecSourceRefPatchPtrInput is an input type that accepts HelmChartSpecSourceRefPatchArgs, HelmChartSpecSourceRefPatchPtr and HelmChartSpecSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefPatchPtrInput` via:
//
//	        HelmChartSpecSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecSourceRefPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput
	ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Context) HelmChartSpecSourceRefPatchPtrOutput
}

type helmChartSpecSourceRefPatchPtrType HelmChartSpecSourceRefPatchArgs

func HelmChartSpecSourceRefPatchPtr(v *HelmChartSpecSourceRefPatchArgs) HelmChartSpecSourceRefPatchPtrInput {
	return (*helmChartSpecSourceRefPatchPtrType)(v)
}

func (*helmChartSpecSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (i *helmChartSpecSourceRefPatchPtrType) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return i.ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecSourceRefPatchPtrType) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPatchPtrOutput)
}

// SourceRef is the reference to the Source the chart is available at.
type HelmChartSpecSourceRefPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchOutput() HelmChartSpecSourceRefPatchOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return o.ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecSourceRefPatch) *HelmChartSpecSourceRefPatch {
		return &v
	}).(HelmChartSpecSourceRefPatchPtrOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRefPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmChartSpecSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (o HelmChartSpecSourceRefPatchPtrOutput) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchPtrOutput) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchPtrOutput) Elem() HelmChartSpecSourceRefPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) HelmChartSpecSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecSourceRefPatch
		return ret
	}).(HelmChartSpecSourceRefPatchOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported when using HelmRepository source with spec.type 'oci'.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmChartSpecVerify struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity []HelmChartSpecVerifyMatchOIDCIdentity `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  *string                       `pulumi:"provider"`
	SecretRef *HelmChartSpecVerifySecretRef `pulumi:"secretRef"`
}

// HelmChartSpecVerifyInput is an input type that accepts HelmChartSpecVerifyArgs and HelmChartSpecVerifyOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyInput` via:
//
//	HelmChartSpecVerifyArgs{...}
type HelmChartSpecVerifyInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyOutput() HelmChartSpecVerifyOutput
	ToHelmChartSpecVerifyOutputWithContext(context.Context) HelmChartSpecVerifyOutput
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported when using HelmRepository source with spec.type 'oci'.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmChartSpecVerifyArgs struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity HelmChartSpecVerifyMatchOIDCIdentityArrayInput `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  pulumi.StringPtrInput                `pulumi:"provider"`
	SecretRef HelmChartSpecVerifySecretRefPtrInput `pulumi:"secretRef"`
}

func (HelmChartSpecVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerify)(nil)).Elem()
}

func (i HelmChartSpecVerifyArgs) ToHelmChartSpecVerifyOutput() HelmChartSpecVerifyOutput {
	return i.ToHelmChartSpecVerifyOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyArgs) ToHelmChartSpecVerifyOutputWithContext(ctx context.Context) HelmChartSpecVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyOutput)
}

func (i HelmChartSpecVerifyArgs) ToHelmChartSpecVerifyPtrOutput() HelmChartSpecVerifyPtrOutput {
	return i.ToHelmChartSpecVerifyPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyArgs) ToHelmChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyOutput).ToHelmChartSpecVerifyPtrOutputWithContext(ctx)
}

// HelmChartSpecVerifyPtrInput is an input type that accepts HelmChartSpecVerifyArgs, HelmChartSpecVerifyPtr and HelmChartSpecVerifyPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyPtrInput` via:
//
//	        HelmChartSpecVerifyArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecVerifyPtrInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyPtrOutput() HelmChartSpecVerifyPtrOutput
	ToHelmChartSpecVerifyPtrOutputWithContext(context.Context) HelmChartSpecVerifyPtrOutput
}

type helmChartSpecVerifyPtrType HelmChartSpecVerifyArgs

func HelmChartSpecVerifyPtr(v *HelmChartSpecVerifyArgs) HelmChartSpecVerifyPtrInput {
	return (*helmChartSpecVerifyPtrType)(v)
}

func (*helmChartSpecVerifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerify)(nil)).Elem()
}

func (i *helmChartSpecVerifyPtrType) ToHelmChartSpecVerifyPtrOutput() HelmChartSpecVerifyPtrOutput {
	return i.ToHelmChartSpecVerifyPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecVerifyPtrType) ToHelmChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported when using HelmRepository source with spec.type 'oci'.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmChartSpecVerifyOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerify)(nil)).Elem()
}

func (o HelmChartSpecVerifyOutput) ToHelmChartSpecVerifyOutput() HelmChartSpecVerifyOutput {
	return o
}

func (o HelmChartSpecVerifyOutput) ToHelmChartSpecVerifyOutputWithContext(ctx context.Context) HelmChartSpecVerifyOutput {
	return o
}

func (o HelmChartSpecVerifyOutput) ToHelmChartSpecVerifyPtrOutput() HelmChartSpecVerifyPtrOutput {
	return o.ToHelmChartSpecVerifyPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecVerifyOutput) ToHelmChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecVerify) *HelmChartSpecVerify {
		return &v
	}).(HelmChartSpecVerifyPtrOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o HelmChartSpecVerifyOutput) MatchOIDCIdentity() HelmChartSpecVerifyMatchOIDCIdentityArrayOutput {
	return o.ApplyT(func(v HelmChartSpecVerify) []HelmChartSpecVerifyMatchOIDCIdentity { return v.MatchOIDCIdentity }).(HelmChartSpecVerifyMatchOIDCIdentityArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o HelmChartSpecVerifyOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerify) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecVerifyOutput) SecretRef() HelmChartSpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerify) *HelmChartSpecVerifySecretRef { return v.SecretRef }).(HelmChartSpecVerifySecretRefPtrOutput)
}

type HelmChartSpecVerifyPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerify)(nil)).Elem()
}

func (o HelmChartSpecVerifyPtrOutput) ToHelmChartSpecVerifyPtrOutput() HelmChartSpecVerifyPtrOutput {
	return o
}

func (o HelmChartSpecVerifyPtrOutput) ToHelmChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPtrOutput {
	return o
}

func (o HelmChartSpecVerifyPtrOutput) Elem() HelmChartSpecVerifyOutput {
	return o.ApplyT(func(v *HelmChartSpecVerify) HelmChartSpecVerify {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecVerify
		return ret
	}).(HelmChartSpecVerifyOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o HelmChartSpecVerifyPtrOutput) MatchOIDCIdentity() HelmChartSpecVerifyMatchOIDCIdentityArrayOutput {
	return o.ApplyT(func(v *HelmChartSpecVerify) []HelmChartSpecVerifyMatchOIDCIdentity {
		if v == nil {
			return nil
		}
		return v.MatchOIDCIdentity
	}).(HelmChartSpecVerifyMatchOIDCIdentityArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o HelmChartSpecVerifyPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecVerify) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecVerifyPtrOutput) SecretRef() HelmChartSpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecVerify) *HelmChartSpecVerifySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmChartSpecVerifySecretRefPtrOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type HelmChartSpecVerifyMatchOIDCIdentity struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer *string `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject *string `pulumi:"subject"`
}

// HelmChartSpecVerifyMatchOIDCIdentityInput is an input type that accepts HelmChartSpecVerifyMatchOIDCIdentityArgs and HelmChartSpecVerifyMatchOIDCIdentityOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyMatchOIDCIdentityInput` via:
//
//	HelmChartSpecVerifyMatchOIDCIdentityArgs{...}
type HelmChartSpecVerifyMatchOIDCIdentityInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyMatchOIDCIdentityOutput() HelmChartSpecVerifyMatchOIDCIdentityOutput
	ToHelmChartSpecVerifyMatchOIDCIdentityOutputWithContext(context.Context) HelmChartSpecVerifyMatchOIDCIdentityOutput
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type HelmChartSpecVerifyMatchOIDCIdentityArgs struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (HelmChartSpecVerifyMatchOIDCIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (i HelmChartSpecVerifyMatchOIDCIdentityArgs) ToHelmChartSpecVerifyMatchOIDCIdentityOutput() HelmChartSpecVerifyMatchOIDCIdentityOutput {
	return i.ToHelmChartSpecVerifyMatchOIDCIdentityOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyMatchOIDCIdentityArgs) ToHelmChartSpecVerifyMatchOIDCIdentityOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyMatchOIDCIdentityOutput)
}

// HelmChartSpecVerifyMatchOIDCIdentityArrayInput is an input type that accepts HelmChartSpecVerifyMatchOIDCIdentityArray and HelmChartSpecVerifyMatchOIDCIdentityArrayOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyMatchOIDCIdentityArrayInput` via:
//
//	HelmChartSpecVerifyMatchOIDCIdentityArray{ HelmChartSpecVerifyMatchOIDCIdentityArgs{...} }
type HelmChartSpecVerifyMatchOIDCIdentityArrayInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutput() HelmChartSpecVerifyMatchOIDCIdentityArrayOutput
	ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutputWithContext(context.Context) HelmChartSpecVerifyMatchOIDCIdentityArrayOutput
}

type HelmChartSpecVerifyMatchOIDCIdentityArray []HelmChartSpecVerifyMatchOIDCIdentityInput

func (HelmChartSpecVerifyMatchOIDCIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (i HelmChartSpecVerifyMatchOIDCIdentityArray) ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutput() HelmChartSpecVerifyMatchOIDCIdentityArrayOutput {
	return i.ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyMatchOIDCIdentityArray) ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyMatchOIDCIdentityArrayOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type HelmChartSpecVerifyMatchOIDCIdentityOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyMatchOIDCIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (o HelmChartSpecVerifyMatchOIDCIdentityOutput) ToHelmChartSpecVerifyMatchOIDCIdentityOutput() HelmChartSpecVerifyMatchOIDCIdentityOutput {
	return o
}

func (o HelmChartSpecVerifyMatchOIDCIdentityOutput) ToHelmChartSpecVerifyMatchOIDCIdentityOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityOutput {
	return o
}

// Issuer specifies the regex pattern to match against to verify
// the OIDC issuer in the Fulcio certificate. The pattern must be a
// valid Go regular expression.
func (o HelmChartSpecVerifyMatchOIDCIdentityOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyMatchOIDCIdentity) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Subject specifies the regex pattern to match against to verify
// the identity subject in the Fulcio certificate. The pattern must
// be a valid Go regular expression.
func (o HelmChartSpecVerifyMatchOIDCIdentityOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyMatchOIDCIdentity) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type HelmChartSpecVerifyMatchOIDCIdentityArrayOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyMatchOIDCIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (o HelmChartSpecVerifyMatchOIDCIdentityArrayOutput) ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutput() HelmChartSpecVerifyMatchOIDCIdentityArrayOutput {
	return o
}

func (o HelmChartSpecVerifyMatchOIDCIdentityArrayOutput) ToHelmChartSpecVerifyMatchOIDCIdentityArrayOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityArrayOutput {
	return o
}

func (o HelmChartSpecVerifyMatchOIDCIdentityArrayOutput) Index(i pulumi.IntInput) HelmChartSpecVerifyMatchOIDCIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartSpecVerifyMatchOIDCIdentity {
		return vs[0].([]HelmChartSpecVerifyMatchOIDCIdentity)[vs[1].(int)]
	}).(HelmChartSpecVerifyMatchOIDCIdentityOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type HelmChartSpecVerifyMatchOIDCIdentityPatch struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer *string `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject *string `pulumi:"subject"`
}

// HelmChartSpecVerifyMatchOIDCIdentityPatchInput is an input type that accepts HelmChartSpecVerifyMatchOIDCIdentityPatchArgs and HelmChartSpecVerifyMatchOIDCIdentityPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyMatchOIDCIdentityPatchInput` via:
//
//	HelmChartSpecVerifyMatchOIDCIdentityPatchArgs{...}
type HelmChartSpecVerifyMatchOIDCIdentityPatchInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutput() HelmChartSpecVerifyMatchOIDCIdentityPatchOutput
	ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutputWithContext(context.Context) HelmChartSpecVerifyMatchOIDCIdentityPatchOutput
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type HelmChartSpecVerifyMatchOIDCIdentityPatchArgs struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (HelmChartSpecVerifyMatchOIDCIdentityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (i HelmChartSpecVerifyMatchOIDCIdentityPatchArgs) ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutput() HelmChartSpecVerifyMatchOIDCIdentityPatchOutput {
	return i.ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyMatchOIDCIdentityPatchArgs) ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyMatchOIDCIdentityPatchOutput)
}

// HelmChartSpecVerifyMatchOIDCIdentityPatchArrayInput is an input type that accepts HelmChartSpecVerifyMatchOIDCIdentityPatchArray and HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyMatchOIDCIdentityPatchArrayInput` via:
//
//	HelmChartSpecVerifyMatchOIDCIdentityPatchArray{ HelmChartSpecVerifyMatchOIDCIdentityPatchArgs{...} }
type HelmChartSpecVerifyMatchOIDCIdentityPatchArrayInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput() HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput
	ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(context.Context) HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput
}

type HelmChartSpecVerifyMatchOIDCIdentityPatchArray []HelmChartSpecVerifyMatchOIDCIdentityPatchInput

func (HelmChartSpecVerifyMatchOIDCIdentityPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (i HelmChartSpecVerifyMatchOIDCIdentityPatchArray) ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput() HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return i.ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyMatchOIDCIdentityPatchArray) ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type HelmChartSpecVerifyMatchOIDCIdentityPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyMatchOIDCIdentityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (o HelmChartSpecVerifyMatchOIDCIdentityPatchOutput) ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutput() HelmChartSpecVerifyMatchOIDCIdentityPatchOutput {
	return o
}

func (o HelmChartSpecVerifyMatchOIDCIdentityPatchOutput) ToHelmChartSpecVerifyMatchOIDCIdentityPatchOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityPatchOutput {
	return o
}

// Issuer specifies the regex pattern to match against to verify
// the OIDC issuer in the Fulcio certificate. The pattern must be a
// valid Go regular expression.
func (o HelmChartSpecVerifyMatchOIDCIdentityPatchOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyMatchOIDCIdentityPatch) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Subject specifies the regex pattern to match against to verify
// the identity subject in the Fulcio certificate. The pattern must
// be a valid Go regular expression.
func (o HelmChartSpecVerifyMatchOIDCIdentityPatchOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyMatchOIDCIdentityPatch) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (o HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput) ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput() HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o
}

func (o HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput) ToHelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(ctx context.Context) HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o
}

func (o HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput) Index(i pulumi.IntInput) HelmChartSpecVerifyMatchOIDCIdentityPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartSpecVerifyMatchOIDCIdentityPatch {
		return vs[0].([]HelmChartSpecVerifyMatchOIDCIdentityPatch)[vs[1].(int)]
	}).(HelmChartSpecVerifyMatchOIDCIdentityPatchOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported when using HelmRepository source with spec.type 'oci'.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmChartSpecVerifyPatch struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity []HelmChartSpecVerifyMatchOIDCIdentityPatch `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  *string                            `pulumi:"provider"`
	SecretRef *HelmChartSpecVerifySecretRefPatch `pulumi:"secretRef"`
}

// HelmChartSpecVerifyPatchInput is an input type that accepts HelmChartSpecVerifyPatchArgs and HelmChartSpecVerifyPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyPatchInput` via:
//
//	HelmChartSpecVerifyPatchArgs{...}
type HelmChartSpecVerifyPatchInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyPatchOutput() HelmChartSpecVerifyPatchOutput
	ToHelmChartSpecVerifyPatchOutputWithContext(context.Context) HelmChartSpecVerifyPatchOutput
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported when using HelmRepository source with spec.type 'oci'.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmChartSpecVerifyPatchArgs struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity HelmChartSpecVerifyMatchOIDCIdentityPatchArrayInput `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  pulumi.StringPtrInput                     `pulumi:"provider"`
	SecretRef HelmChartSpecVerifySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (HelmChartSpecVerifyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifyPatch)(nil)).Elem()
}

func (i HelmChartSpecVerifyPatchArgs) ToHelmChartSpecVerifyPatchOutput() HelmChartSpecVerifyPatchOutput {
	return i.ToHelmChartSpecVerifyPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyPatchArgs) ToHelmChartSpecVerifyPatchOutputWithContext(ctx context.Context) HelmChartSpecVerifyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyPatchOutput)
}

func (i HelmChartSpecVerifyPatchArgs) ToHelmChartSpecVerifyPatchPtrOutput() HelmChartSpecVerifyPatchPtrOutput {
	return i.ToHelmChartSpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifyPatchArgs) ToHelmChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyPatchOutput).ToHelmChartSpecVerifyPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecVerifyPatchPtrInput is an input type that accepts HelmChartSpecVerifyPatchArgs, HelmChartSpecVerifyPatchPtr and HelmChartSpecVerifyPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifyPatchPtrInput` via:
//
//	        HelmChartSpecVerifyPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecVerifyPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecVerifyPatchPtrOutput() HelmChartSpecVerifyPatchPtrOutput
	ToHelmChartSpecVerifyPatchPtrOutputWithContext(context.Context) HelmChartSpecVerifyPatchPtrOutput
}

type helmChartSpecVerifyPatchPtrType HelmChartSpecVerifyPatchArgs

func HelmChartSpecVerifyPatchPtr(v *HelmChartSpecVerifyPatchArgs) HelmChartSpecVerifyPatchPtrInput {
	return (*helmChartSpecVerifyPatchPtrType)(v)
}

func (*helmChartSpecVerifyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerifyPatch)(nil)).Elem()
}

func (i *helmChartSpecVerifyPatchPtrType) ToHelmChartSpecVerifyPatchPtrOutput() HelmChartSpecVerifyPatchPtrOutput {
	return i.ToHelmChartSpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecVerifyPatchPtrType) ToHelmChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifyPatchPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported when using HelmRepository source with spec.type 'oci'.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmChartSpecVerifyPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifyPatch)(nil)).Elem()
}

func (o HelmChartSpecVerifyPatchOutput) ToHelmChartSpecVerifyPatchOutput() HelmChartSpecVerifyPatchOutput {
	return o
}

func (o HelmChartSpecVerifyPatchOutput) ToHelmChartSpecVerifyPatchOutputWithContext(ctx context.Context) HelmChartSpecVerifyPatchOutput {
	return o
}

func (o HelmChartSpecVerifyPatchOutput) ToHelmChartSpecVerifyPatchPtrOutput() HelmChartSpecVerifyPatchPtrOutput {
	return o.ToHelmChartSpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecVerifyPatchOutput) ToHelmChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecVerifyPatch) *HelmChartSpecVerifyPatch {
		return &v
	}).(HelmChartSpecVerifyPatchPtrOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o HelmChartSpecVerifyPatchOutput) MatchOIDCIdentity() HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyPatch) []HelmChartSpecVerifyMatchOIDCIdentityPatch {
		return v.MatchOIDCIdentity
	}).(HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o HelmChartSpecVerifyPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecVerifyPatchOutput) SecretRef() HelmChartSpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifyPatch) *HelmChartSpecVerifySecretRefPatch { return v.SecretRef }).(HelmChartSpecVerifySecretRefPatchPtrOutput)
}

type HelmChartSpecVerifyPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerifyPatch)(nil)).Elem()
}

func (o HelmChartSpecVerifyPatchPtrOutput) ToHelmChartSpecVerifyPatchPtrOutput() HelmChartSpecVerifyPatchPtrOutput {
	return o
}

func (o HelmChartSpecVerifyPatchPtrOutput) ToHelmChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifyPatchPtrOutput {
	return o
}

func (o HelmChartSpecVerifyPatchPtrOutput) Elem() HelmChartSpecVerifyPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifyPatch) HelmChartSpecVerifyPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecVerifyPatch
		return ret
	}).(HelmChartSpecVerifyPatchOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o HelmChartSpecVerifyPatchPtrOutput) MatchOIDCIdentity() HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifyPatch) []HelmChartSpecVerifyMatchOIDCIdentityPatch {
		if v == nil {
			return nil
		}
		return v.MatchOIDCIdentity
	}).(HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o HelmChartSpecVerifyPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecVerifyPatchPtrOutput) SecretRef() HelmChartSpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifyPatch) *HelmChartSpecVerifySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmChartSpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmChartSpecVerifySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmChartSpecVerifySecretRefInput is an input type that accepts HelmChartSpecVerifySecretRefArgs and HelmChartSpecVerifySecretRefOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifySecretRefInput` via:
//
//	HelmChartSpecVerifySecretRefArgs{...}
type HelmChartSpecVerifySecretRefInput interface {
	pulumi.Input

	ToHelmChartSpecVerifySecretRefOutput() HelmChartSpecVerifySecretRefOutput
	ToHelmChartSpecVerifySecretRefOutputWithContext(context.Context) HelmChartSpecVerifySecretRefOutput
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmChartSpecVerifySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmChartSpecVerifySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifySecretRef)(nil)).Elem()
}

func (i HelmChartSpecVerifySecretRefArgs) ToHelmChartSpecVerifySecretRefOutput() HelmChartSpecVerifySecretRefOutput {
	return i.ToHelmChartSpecVerifySecretRefOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifySecretRefArgs) ToHelmChartSpecVerifySecretRefOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifySecretRefOutput)
}

func (i HelmChartSpecVerifySecretRefArgs) ToHelmChartSpecVerifySecretRefPtrOutput() HelmChartSpecVerifySecretRefPtrOutput {
	return i.ToHelmChartSpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifySecretRefArgs) ToHelmChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifySecretRefOutput).ToHelmChartSpecVerifySecretRefPtrOutputWithContext(ctx)
}

// HelmChartSpecVerifySecretRefPtrInput is an input type that accepts HelmChartSpecVerifySecretRefArgs, HelmChartSpecVerifySecretRefPtr and HelmChartSpecVerifySecretRefPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifySecretRefPtrInput` via:
//
//	        HelmChartSpecVerifySecretRefArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecVerifySecretRefPtrInput interface {
	pulumi.Input

	ToHelmChartSpecVerifySecretRefPtrOutput() HelmChartSpecVerifySecretRefPtrOutput
	ToHelmChartSpecVerifySecretRefPtrOutputWithContext(context.Context) HelmChartSpecVerifySecretRefPtrOutput
}

type helmChartSpecVerifySecretRefPtrType HelmChartSpecVerifySecretRefArgs

func HelmChartSpecVerifySecretRefPtr(v *HelmChartSpecVerifySecretRefArgs) HelmChartSpecVerifySecretRefPtrInput {
	return (*helmChartSpecVerifySecretRefPtrType)(v)
}

func (*helmChartSpecVerifySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerifySecretRef)(nil)).Elem()
}

func (i *helmChartSpecVerifySecretRefPtrType) ToHelmChartSpecVerifySecretRefPtrOutput() HelmChartSpecVerifySecretRefPtrOutput {
	return i.ToHelmChartSpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecVerifySecretRefPtrType) ToHelmChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifySecretRefPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmChartSpecVerifySecretRefOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifySecretRef)(nil)).Elem()
}

func (o HelmChartSpecVerifySecretRefOutput) ToHelmChartSpecVerifySecretRefOutput() HelmChartSpecVerifySecretRefOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefOutput) ToHelmChartSpecVerifySecretRefOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefOutput) ToHelmChartSpecVerifySecretRefPtrOutput() HelmChartSpecVerifySecretRefPtrOutput {
	return o.ToHelmChartSpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecVerifySecretRefOutput) ToHelmChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecVerifySecretRef) *HelmChartSpecVerifySecretRef {
		return &v
	}).(HelmChartSpecVerifySecretRefPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecVerifySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmChartSpecVerifySecretRefPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerifySecretRef)(nil)).Elem()
}

func (o HelmChartSpecVerifySecretRefPtrOutput) ToHelmChartSpecVerifySecretRefPtrOutput() HelmChartSpecVerifySecretRefPtrOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefPtrOutput) ToHelmChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPtrOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefPtrOutput) Elem() HelmChartSpecVerifySecretRefOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifySecretRef) HelmChartSpecVerifySecretRef {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecVerifySecretRef
		return ret
	}).(HelmChartSpecVerifySecretRefOutput)
}

// Name of the referent.
func (o HelmChartSpecVerifySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmChartSpecVerifySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmChartSpecVerifySecretRefPatchInput is an input type that accepts HelmChartSpecVerifySecretRefPatchArgs and HelmChartSpecVerifySecretRefPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifySecretRefPatchInput` via:
//
//	HelmChartSpecVerifySecretRefPatchArgs{...}
type HelmChartSpecVerifySecretRefPatchInput interface {
	pulumi.Input

	ToHelmChartSpecVerifySecretRefPatchOutput() HelmChartSpecVerifySecretRefPatchOutput
	ToHelmChartSpecVerifySecretRefPatchOutputWithContext(context.Context) HelmChartSpecVerifySecretRefPatchOutput
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmChartSpecVerifySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmChartSpecVerifySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (i HelmChartSpecVerifySecretRefPatchArgs) ToHelmChartSpecVerifySecretRefPatchOutput() HelmChartSpecVerifySecretRefPatchOutput {
	return i.ToHelmChartSpecVerifySecretRefPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifySecretRefPatchArgs) ToHelmChartSpecVerifySecretRefPatchOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifySecretRefPatchOutput)
}

func (i HelmChartSpecVerifySecretRefPatchArgs) ToHelmChartSpecVerifySecretRefPatchPtrOutput() HelmChartSpecVerifySecretRefPatchPtrOutput {
	return i.ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecVerifySecretRefPatchArgs) ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifySecretRefPatchOutput).ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecVerifySecretRefPatchPtrInput is an input type that accepts HelmChartSpecVerifySecretRefPatchArgs, HelmChartSpecVerifySecretRefPatchPtr and HelmChartSpecVerifySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecVerifySecretRefPatchPtrInput` via:
//
//	        HelmChartSpecVerifySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecVerifySecretRefPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecVerifySecretRefPatchPtrOutput() HelmChartSpecVerifySecretRefPatchPtrOutput
	ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Context) HelmChartSpecVerifySecretRefPatchPtrOutput
}

type helmChartSpecVerifySecretRefPatchPtrType HelmChartSpecVerifySecretRefPatchArgs

func HelmChartSpecVerifySecretRefPatchPtr(v *HelmChartSpecVerifySecretRefPatchArgs) HelmChartSpecVerifySecretRefPatchPtrInput {
	return (*helmChartSpecVerifySecretRefPatchPtrType)(v)
}

func (*helmChartSpecVerifySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (i *helmChartSpecVerifySecretRefPatchPtrType) ToHelmChartSpecVerifySecretRefPatchPtrOutput() HelmChartSpecVerifySecretRefPatchPtrOutput {
	return i.ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecVerifySecretRefPatchPtrType) ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmChartSpecVerifySecretRefPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (o HelmChartSpecVerifySecretRefPatchOutput) ToHelmChartSpecVerifySecretRefPatchOutput() HelmChartSpecVerifySecretRefPatchOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefPatchOutput) ToHelmChartSpecVerifySecretRefPatchOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPatchOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefPatchOutput) ToHelmChartSpecVerifySecretRefPatchPtrOutput() HelmChartSpecVerifySecretRefPatchPtrOutput {
	return o.ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecVerifySecretRefPatchOutput) ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecVerifySecretRefPatch) *HelmChartSpecVerifySecretRefPatch {
		return &v
	}).(HelmChartSpecVerifySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecVerifySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecVerifySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmChartSpecVerifySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecVerifySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (o HelmChartSpecVerifySecretRefPatchPtrOutput) ToHelmChartSpecVerifySecretRefPatchPtrOutput() HelmChartSpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefPatchPtrOutput) ToHelmChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o HelmChartSpecVerifySecretRefPatchPtrOutput) Elem() HelmChartSpecVerifySecretRefPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifySecretRefPatch) HelmChartSpecVerifySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecVerifySecretRefPatch
		return ret
	}).(HelmChartSpecVerifySecretRefPatchOutput)
}

// Name of the referent.
func (o HelmChartSpecVerifySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecVerifySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HelmChartStatus records the observed state of the HelmChart.
type HelmChartStatus struct {
	Artifact *HelmChartStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions []HelmChartStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedChartName is the last observed chart name as specified by the
	// resolved chart reference.
	ObservedChartName *string `pulumi:"observedChartName"`
	// ObservedGeneration is the last observed generation of the HelmChart
	// object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedSourceArtifactRevision is the last observed Artifact.Revision
	// of the HelmChartSpec.SourceRef.
	ObservedSourceArtifactRevision *string `pulumi:"observedSourceArtifactRevision"`
	// ObservedValuesFiles are the observed value files of the last successful
	// reconciliation.
	// It matches the chart in the last successfully reconciled artifact.
	ObservedValuesFiles []string `pulumi:"observedValuesFiles"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url *string `pulumi:"url"`
}

// HelmChartStatusInput is an input type that accepts HelmChartStatusArgs and HelmChartStatusOutput values.
// You can construct a concrete instance of `HelmChartStatusInput` via:
//
//	HelmChartStatusArgs{...}
type HelmChartStatusInput interface {
	pulumi.Input

	ToHelmChartStatusOutput() HelmChartStatusOutput
	ToHelmChartStatusOutputWithContext(context.Context) HelmChartStatusOutput
}

// HelmChartStatus records the observed state of the HelmChart.
type HelmChartStatusArgs struct {
	Artifact HelmChartStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions HelmChartStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedChartName is the last observed chart name as specified by the
	// resolved chart reference.
	ObservedChartName pulumi.StringPtrInput `pulumi:"observedChartName"`
	// ObservedGeneration is the last observed generation of the HelmChart
	// object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedSourceArtifactRevision is the last observed Artifact.Revision
	// of the HelmChartSpec.SourceRef.
	ObservedSourceArtifactRevision pulumi.StringPtrInput `pulumi:"observedSourceArtifactRevision"`
	// ObservedValuesFiles are the observed value files of the last successful
	// reconciliation.
	// It matches the chart in the last successfully reconciled artifact.
	ObservedValuesFiles pulumi.StringArrayInput `pulumi:"observedValuesFiles"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatus)(nil)).Elem()
}

func (i HelmChartStatusArgs) ToHelmChartStatusOutput() HelmChartStatusOutput {
	return i.ToHelmChartStatusOutputWithContext(context.Background())
}

func (i HelmChartStatusArgs) ToHelmChartStatusOutputWithContext(ctx context.Context) HelmChartStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusOutput)
}

func (i HelmChartStatusArgs) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return i.ToHelmChartStatusPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusArgs) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusOutput).ToHelmChartStatusPtrOutputWithContext(ctx)
}

// HelmChartStatusPtrInput is an input type that accepts HelmChartStatusArgs, HelmChartStatusPtr and HelmChartStatusPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusPtrInput` via:
//
//	        HelmChartStatusArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusPtrInput interface {
	pulumi.Input

	ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput
	ToHelmChartStatusPtrOutputWithContext(context.Context) HelmChartStatusPtrOutput
}

type helmChartStatusPtrType HelmChartStatusArgs

func HelmChartStatusPtr(v *HelmChartStatusArgs) HelmChartStatusPtrInput {
	return (*helmChartStatusPtrType)(v)
}

func (*helmChartStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatus)(nil)).Elem()
}

func (i *helmChartStatusPtrType) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return i.ToHelmChartStatusPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusPtrType) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPtrOutput)
}

// HelmChartStatus records the observed state of the HelmChart.
type HelmChartStatusOutput struct{ *pulumi.OutputState }

func (HelmChartStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatus)(nil)).Elem()
}

func (o HelmChartStatusOutput) ToHelmChartStatusOutput() HelmChartStatusOutput {
	return o
}

func (o HelmChartStatusOutput) ToHelmChartStatusOutputWithContext(ctx context.Context) HelmChartStatusOutput {
	return o
}

func (o HelmChartStatusOutput) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return o.ToHelmChartStatusPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusOutput) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatus) *HelmChartStatus {
		return &v
	}).(HelmChartStatusPtrOutput)
}

func (o HelmChartStatusOutput) Artifact() HelmChartStatusArtifactPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *HelmChartStatusArtifact { return v.Artifact }).(HelmChartStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusOutput) Conditions() HelmChartStatusConditionsArrayOutput {
	return o.ApplyT(func(v HelmChartStatus) []HelmChartStatusConditions { return v.Conditions }).(HelmChartStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedChartName is the last observed chart name as specified by the
// resolved chart reference.
func (o HelmChartStatusOutput) ObservedChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *string { return v.ObservedChartName }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmChart
// object.
func (o HelmChartStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedSourceArtifactRevision is the last observed Artifact.Revision
// of the HelmChartSpec.SourceRef.
func (o HelmChartStatusOutput) ObservedSourceArtifactRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *string { return v.ObservedSourceArtifactRevision }).(pulumi.StringPtrOutput)
}

// ObservedValuesFiles are the observed value files of the last successful
// reconciliation.
// It matches the chart in the last successfully reconciled artifact.
func (o HelmChartStatusOutput) ObservedValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmChartStatus) []string { return v.ObservedValuesFiles }).(pulumi.StringArrayOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o HelmChartStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatus)(nil)).Elem()
}

func (o HelmChartStatusPtrOutput) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return o
}

func (o HelmChartStatusPtrOutput) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return o
}

func (o HelmChartStatusPtrOutput) Elem() HelmChartStatusOutput {
	return o.ApplyT(func(v *HelmChartStatus) HelmChartStatus {
		if v != nil {
			return *v
		}
		var ret HelmChartStatus
		return ret
	}).(HelmChartStatusOutput)
}

func (o HelmChartStatusPtrOutput) Artifact() HelmChartStatusArtifactPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *HelmChartStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmChartStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusPtrOutput) Conditions() HelmChartStatusConditionsArrayOutput {
	return o.ApplyT(func(v *HelmChartStatus) []HelmChartStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmChartStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedChartName is the last observed chart name as specified by the
// resolved chart reference.
func (o HelmChartStatusPtrOutput) ObservedChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedChartName
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmChart
// object.
func (o HelmChartStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedSourceArtifactRevision is the last observed Artifact.Revision
// of the HelmChartSpec.SourceRef.
func (o HelmChartStatusPtrOutput) ObservedSourceArtifactRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedSourceArtifactRevision
	}).(pulumi.StringPtrOutput)
}

// ObservedValuesFiles are the observed value files of the last successful
// reconciliation.
// It matches the chart in the last successfully reconciled artifact.
func (o HelmChartStatusPtrOutput) ObservedValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmChartStatus) []string {
		if v == nil {
			return nil
		}
		return v.ObservedValuesFiles
	}).(pulumi.StringArrayOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o HelmChartStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful reconciliation.
type HelmChartStatusArtifact struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// HelmChartStatusArtifactInput is an input type that accepts HelmChartStatusArtifactArgs and HelmChartStatusArtifactOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactInput` via:
//
//	HelmChartStatusArtifactArgs{...}
type HelmChartStatusArtifactInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactOutput() HelmChartStatusArtifactOutput
	ToHelmChartStatusArtifactOutputWithContext(context.Context) HelmChartStatusArtifactOutput
}

// Artifact represents the output of the last successful reconciliation.
type HelmChartStatusArtifactArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifact)(nil)).Elem()
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactOutput() HelmChartStatusArtifactOutput {
	return i.ToHelmChartStatusArtifactOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactOutputWithContext(ctx context.Context) HelmChartStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactOutput)
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return i.ToHelmChartStatusArtifactPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactOutput).ToHelmChartStatusArtifactPtrOutputWithContext(ctx)
}

// HelmChartStatusArtifactPtrInput is an input type that accepts HelmChartStatusArtifactArgs, HelmChartStatusArtifactPtr and HelmChartStatusArtifactPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactPtrInput` via:
//
//	        HelmChartStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusArtifactPtrInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput
	ToHelmChartStatusArtifactPtrOutputWithContext(context.Context) HelmChartStatusArtifactPtrOutput
}

type helmChartStatusArtifactPtrType HelmChartStatusArtifactArgs

func HelmChartStatusArtifactPtr(v *HelmChartStatusArtifactArgs) HelmChartStatusArtifactPtrInput {
	return (*helmChartStatusArtifactPtrType)(v)
}

func (*helmChartStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifact)(nil)).Elem()
}

func (i *helmChartStatusArtifactPtrType) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return i.ToHelmChartStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusArtifactPtrType) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPtrOutput)
}

// Artifact represents the output of the last successful reconciliation.
type HelmChartStatusArtifactOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifact)(nil)).Elem()
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactOutput() HelmChartStatusArtifactOutput {
	return o
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactOutputWithContext(ctx context.Context) HelmChartStatusArtifactOutput {
	return o
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return o.ToHelmChartStatusArtifactPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatusArtifact) *HelmChartStatusArtifact {
		return &v
	}).(HelmChartStatusArtifactPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmChartStatusArtifactOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmChartStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmChartStatusArtifactOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmChartStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmChartStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmChartStatusArtifactOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmChartStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifact)(nil)).Elem()
}

func (o HelmChartStatusArtifactPtrOutput) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPtrOutput) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPtrOutput) Elem() HelmChartStatusArtifactOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) HelmChartStatusArtifact {
		if v != nil {
			return *v
		}
		var ret HelmChartStatusArtifact
		return ret
	}).(HelmChartStatusArtifactOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmChartStatusArtifactPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmChartStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmChartStatusArtifactPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmChartStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmChartStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmChartStatusArtifactPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmChartStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful reconciliation.
type HelmChartStatusArtifactPatch struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// HelmChartStatusArtifactPatchInput is an input type that accepts HelmChartStatusArtifactPatchArgs and HelmChartStatusArtifactPatchOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactPatchInput` via:
//
//	HelmChartStatusArtifactPatchArgs{...}
type HelmChartStatusArtifactPatchInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactPatchOutput() HelmChartStatusArtifactPatchOutput
	ToHelmChartStatusArtifactPatchOutputWithContext(context.Context) HelmChartStatusArtifactPatchOutput
}

// Artifact represents the output of the last successful reconciliation.
type HelmChartStatusArtifactPatchArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchOutput() HelmChartStatusArtifactPatchOutput {
	return i.ToHelmChartStatusArtifactPatchOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPatchOutput)
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return i.ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPatchOutput).ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx)
}

// HelmChartStatusArtifactPatchPtrInput is an input type that accepts HelmChartStatusArtifactPatchArgs, HelmChartStatusArtifactPatchPtr and HelmChartStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactPatchPtrInput` via:
//
//	        HelmChartStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput
	ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Context) HelmChartStatusArtifactPatchPtrOutput
}

type helmChartStatusArtifactPatchPtrType HelmChartStatusArtifactPatchArgs

func HelmChartStatusArtifactPatchPtr(v *HelmChartStatusArtifactPatchArgs) HelmChartStatusArtifactPatchPtrInput {
	return (*helmChartStatusArtifactPatchPtrType)(v)
}

func (*helmChartStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (i *helmChartStatusArtifactPatchPtrType) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return i.ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusArtifactPatchPtrType) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPatchPtrOutput)
}

// Artifact represents the output of the last successful reconciliation.
type HelmChartStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchOutput() HelmChartStatusArtifactPatchOutput {
	return o
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchOutput {
	return o
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return o.ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatusArtifactPatch) *HelmChartStatusArtifactPatch {
		return &v
	}).(HelmChartStatusArtifactPatchPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmChartStatusArtifactPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmChartStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmChartStatusArtifactPatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmChartStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmChartStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmChartStatusArtifactPatchOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmChartStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (o HelmChartStatusArtifactPatchPtrOutput) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPatchPtrOutput) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPatchPtrOutput) Elem() HelmChartStatusArtifactPatchOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) HelmChartStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartStatusArtifactPatch
		return ret
	}).(HelmChartStatusArtifactPatchOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmChartStatusArtifactPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmChartStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmChartStatusArtifactPatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmChartStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmChartStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmChartStatusArtifactPatchPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmChartStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmChartStatusConditionsInput is an input type that accepts HelmChartStatusConditionsArgs and HelmChartStatusConditionsOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsInput` via:
//
//	HelmChartStatusConditionsArgs{...}
type HelmChartStatusConditionsInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsOutput() HelmChartStatusConditionsOutput
	ToHelmChartStatusConditionsOutputWithContext(context.Context) HelmChartStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmChartStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditions)(nil)).Elem()
}

func (i HelmChartStatusConditionsArgs) ToHelmChartStatusConditionsOutput() HelmChartStatusConditionsOutput {
	return i.ToHelmChartStatusConditionsOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsArgs) ToHelmChartStatusConditionsOutputWithContext(ctx context.Context) HelmChartStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsOutput)
}

// HelmChartStatusConditionsArrayInput is an input type that accepts HelmChartStatusConditionsArray and HelmChartStatusConditionsArrayOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsArrayInput` via:
//
//	HelmChartStatusConditionsArray{ HelmChartStatusConditionsArgs{...} }
type HelmChartStatusConditionsArrayInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsArrayOutput() HelmChartStatusConditionsArrayOutput
	ToHelmChartStatusConditionsArrayOutputWithContext(context.Context) HelmChartStatusConditionsArrayOutput
}

type HelmChartStatusConditionsArray []HelmChartStatusConditionsInput

func (HelmChartStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditions)(nil)).Elem()
}

func (i HelmChartStatusConditionsArray) ToHelmChartStatusConditionsArrayOutput() HelmChartStatusConditionsArrayOutput {
	return i.ToHelmChartStatusConditionsArrayOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsArray) ToHelmChartStatusConditionsArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditions)(nil)).Elem()
}

func (o HelmChartStatusConditionsOutput) ToHelmChartStatusConditionsOutput() HelmChartStatusConditionsOutput {
	return o
}

func (o HelmChartStatusConditionsOutput) ToHelmChartStatusConditionsOutputWithContext(ctx context.Context) HelmChartStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmChartStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmChartStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmChartStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmChartStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmChartStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmChartStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmChartStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditions)(nil)).Elem()
}

func (o HelmChartStatusConditionsArrayOutput) ToHelmChartStatusConditionsArrayOutput() HelmChartStatusConditionsArrayOutput {
	return o
}

func (o HelmChartStatusConditionsArrayOutput) ToHelmChartStatusConditionsArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsArrayOutput {
	return o
}

func (o HelmChartStatusConditionsArrayOutput) Index(i pulumi.IntInput) HelmChartStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartStatusConditions {
		return vs[0].([]HelmChartStatusConditions)[vs[1].(int)]
	}).(HelmChartStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmChartStatusConditionsPatchInput is an input type that accepts HelmChartStatusConditionsPatchArgs and HelmChartStatusConditionsPatchOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsPatchInput` via:
//
//	HelmChartStatusConditionsPatchArgs{...}
type HelmChartStatusConditionsPatchInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsPatchOutput() HelmChartStatusConditionsPatchOutput
	ToHelmChartStatusConditionsPatchOutputWithContext(context.Context) HelmChartStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmChartStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (i HelmChartStatusConditionsPatchArgs) ToHelmChartStatusConditionsPatchOutput() HelmChartStatusConditionsPatchOutput {
	return i.ToHelmChartStatusConditionsPatchOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsPatchArgs) ToHelmChartStatusConditionsPatchOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsPatchOutput)
}

// HelmChartStatusConditionsPatchArrayInput is an input type that accepts HelmChartStatusConditionsPatchArray and HelmChartStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsPatchArrayInput` via:
//
//	HelmChartStatusConditionsPatchArray{ HelmChartStatusConditionsPatchArgs{...} }
type HelmChartStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsPatchArrayOutput() HelmChartStatusConditionsPatchArrayOutput
	ToHelmChartStatusConditionsPatchArrayOutputWithContext(context.Context) HelmChartStatusConditionsPatchArrayOutput
}

type HelmChartStatusConditionsPatchArray []HelmChartStatusConditionsPatchInput

func (HelmChartStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (i HelmChartStatusConditionsPatchArray) ToHelmChartStatusConditionsPatchArrayOutput() HelmChartStatusConditionsPatchArrayOutput {
	return i.ToHelmChartStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsPatchArray) ToHelmChartStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (o HelmChartStatusConditionsPatchOutput) ToHelmChartStatusConditionsPatchOutput() HelmChartStatusConditionsPatchOutput {
	return o
}

func (o HelmChartStatusConditionsPatchOutput) ToHelmChartStatusConditionsPatchOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmChartStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmChartStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmChartStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmChartStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmChartStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmChartStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmChartStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (o HelmChartStatusConditionsPatchArrayOutput) ToHelmChartStatusConditionsPatchArrayOutput() HelmChartStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmChartStatusConditionsPatchArrayOutput) ToHelmChartStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmChartStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) HelmChartStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartStatusConditionsPatch {
		return vs[0].([]HelmChartStatusConditionsPatch)[vs[1].(int)]
	}).(HelmChartStatusConditionsPatchOutput)
}

// HelmChartStatus records the observed state of the HelmChart.
type HelmChartStatusPatch struct {
	Artifact *HelmChartStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions []HelmChartStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedChartName is the last observed chart name as specified by the
	// resolved chart reference.
	ObservedChartName *string `pulumi:"observedChartName"`
	// ObservedGeneration is the last observed generation of the HelmChart
	// object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedSourceArtifactRevision is the last observed Artifact.Revision
	// of the HelmChartSpec.SourceRef.
	ObservedSourceArtifactRevision *string `pulumi:"observedSourceArtifactRevision"`
	// ObservedValuesFiles are the observed value files of the last successful
	// reconciliation.
	// It matches the chart in the last successfully reconciled artifact.
	ObservedValuesFiles []string `pulumi:"observedValuesFiles"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url *string `pulumi:"url"`
}

// HelmChartStatusPatchInput is an input type that accepts HelmChartStatusPatchArgs and HelmChartStatusPatchOutput values.
// You can construct a concrete instance of `HelmChartStatusPatchInput` via:
//
//	HelmChartStatusPatchArgs{...}
type HelmChartStatusPatchInput interface {
	pulumi.Input

	ToHelmChartStatusPatchOutput() HelmChartStatusPatchOutput
	ToHelmChartStatusPatchOutputWithContext(context.Context) HelmChartStatusPatchOutput
}

// HelmChartStatus records the observed state of the HelmChart.
type HelmChartStatusPatchArgs struct {
	Artifact HelmChartStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions HelmChartStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedChartName is the last observed chart name as specified by the
	// resolved chart reference.
	ObservedChartName pulumi.StringPtrInput `pulumi:"observedChartName"`
	// ObservedGeneration is the last observed generation of the HelmChart
	// object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedSourceArtifactRevision is the last observed Artifact.Revision
	// of the HelmChartSpec.SourceRef.
	ObservedSourceArtifactRevision pulumi.StringPtrInput `pulumi:"observedSourceArtifactRevision"`
	// ObservedValuesFiles are the observed value files of the last successful
	// reconciliation.
	// It matches the chart in the last successfully reconciled artifact.
	ObservedValuesFiles pulumi.StringArrayInput `pulumi:"observedValuesFiles"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// BucketStatus.Artifact data is recommended.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusPatch)(nil)).Elem()
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchOutput() HelmChartStatusPatchOutput {
	return i.ToHelmChartStatusPatchOutputWithContext(context.Background())
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchOutputWithContext(ctx context.Context) HelmChartStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPatchOutput)
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return i.ToHelmChartStatusPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPatchOutput).ToHelmChartStatusPatchPtrOutputWithContext(ctx)
}

// HelmChartStatusPatchPtrInput is an input type that accepts HelmChartStatusPatchArgs, HelmChartStatusPatchPtr and HelmChartStatusPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusPatchPtrInput` via:
//
//	        HelmChartStatusPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusPatchPtrInput interface {
	pulumi.Input

	ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput
	ToHelmChartStatusPatchPtrOutputWithContext(context.Context) HelmChartStatusPatchPtrOutput
}

type helmChartStatusPatchPtrType HelmChartStatusPatchArgs

func HelmChartStatusPatchPtr(v *HelmChartStatusPatchArgs) HelmChartStatusPatchPtrInput {
	return (*helmChartStatusPatchPtrType)(v)
}

func (*helmChartStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusPatch)(nil)).Elem()
}

func (i *helmChartStatusPatchPtrType) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return i.ToHelmChartStatusPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusPatchPtrType) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPatchPtrOutput)
}

// HelmChartStatus records the observed state of the HelmChart.
type HelmChartStatusPatchOutput struct{ *pulumi.OutputState }

func (HelmChartStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusPatch)(nil)).Elem()
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchOutput() HelmChartStatusPatchOutput {
	return o
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchOutputWithContext(ctx context.Context) HelmChartStatusPatchOutput {
	return o
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return o.ToHelmChartStatusPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatusPatch) *HelmChartStatusPatch {
		return &v
	}).(HelmChartStatusPatchPtrOutput)
}

func (o HelmChartStatusPatchOutput) Artifact() HelmChartStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *HelmChartStatusArtifactPatch { return v.Artifact }).(HelmChartStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusPatchOutput) Conditions() HelmChartStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) []HelmChartStatusConditionsPatch { return v.Conditions }).(HelmChartStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedChartName is the last observed chart name as specified by the
// resolved chart reference.
func (o HelmChartStatusPatchOutput) ObservedChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *string { return v.ObservedChartName }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmChart
// object.
func (o HelmChartStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedSourceArtifactRevision is the last observed Artifact.Revision
// of the HelmChartSpec.SourceRef.
func (o HelmChartStatusPatchOutput) ObservedSourceArtifactRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *string { return v.ObservedSourceArtifactRevision }).(pulumi.StringPtrOutput)
}

// ObservedValuesFiles are the observed value files of the last successful
// reconciliation.
// It matches the chart in the last successfully reconciled artifact.
func (o HelmChartStatusPatchOutput) ObservedValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) []string { return v.ObservedValuesFiles }).(pulumi.StringArrayOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o HelmChartStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusPatch)(nil)).Elem()
}

func (o HelmChartStatusPatchPtrOutput) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return o
}

func (o HelmChartStatusPatchPtrOutput) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return o
}

func (o HelmChartStatusPatchPtrOutput) Elem() HelmChartStatusPatchOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) HelmChartStatusPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartStatusPatch
		return ret
	}).(HelmChartStatusPatchOutput)
}

func (o HelmChartStatusPatchPtrOutput) Artifact() HelmChartStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *HelmChartStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmChartStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusPatchPtrOutput) Conditions() HelmChartStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) []HelmChartStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmChartStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedChartName is the last observed chart name as specified by the
// resolved chart reference.
func (o HelmChartStatusPatchPtrOutput) ObservedChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedChartName
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmChart
// object.
func (o HelmChartStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedSourceArtifactRevision is the last observed Artifact.Revision
// of the HelmChartSpec.SourceRef.
func (o HelmChartStatusPatchPtrOutput) ObservedSourceArtifactRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedSourceArtifactRevision
	}).(pulumi.StringPtrOutput)
}

// ObservedValuesFiles are the observed value files of the last successful
// reconciliation.
// It matches the chart in the last successfully reconciled artifact.
func (o HelmChartStatusPatchPtrOutput) ObservedValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.ObservedValuesFiles
	}).(pulumi.StringArrayOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// BucketStatus.Artifact data is recommended.
func (o HelmChartStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// HelmRepository is the Schema for the helmrepositories API.
type HelmRepositoryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta    `pulumi:"metadata"`
	Spec     *HelmRepositorySpec   `pulumi:"spec"`
	Status   *HelmRepositoryStatus `pulumi:"status"`
}

// HelmRepositoryTypeInput is an input type that accepts HelmRepositoryTypeArgs and HelmRepositoryTypeOutput values.
// You can construct a concrete instance of `HelmRepositoryTypeInput` via:
//
//	HelmRepositoryTypeArgs{...}
type HelmRepositoryTypeInput interface {
	pulumi.Input

	ToHelmRepositoryTypeOutput() HelmRepositoryTypeOutput
	ToHelmRepositoryTypeOutputWithContext(context.Context) HelmRepositoryTypeOutput
}

// HelmRepository is the Schema for the helmrepositories API.
type HelmRepositoryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput    `pulumi:"metadata"`
	Spec     HelmRepositorySpecPtrInput   `pulumi:"spec"`
	Status   HelmRepositoryStatusPtrInput `pulumi:"status"`
}

func (HelmRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryType)(nil)).Elem()
}

func (i HelmRepositoryTypeArgs) ToHelmRepositoryTypeOutput() HelmRepositoryTypeOutput {
	return i.ToHelmRepositoryTypeOutputWithContext(context.Background())
}

func (i HelmRepositoryTypeArgs) ToHelmRepositoryTypeOutputWithContext(ctx context.Context) HelmRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryTypeOutput)
}

// HelmRepositoryTypeArrayInput is an input type that accepts HelmRepositoryTypeArray and HelmRepositoryTypeArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryTypeArrayInput` via:
//
//	HelmRepositoryTypeArray{ HelmRepositoryTypeArgs{...} }
type HelmRepositoryTypeArrayInput interface {
	pulumi.Input

	ToHelmRepositoryTypeArrayOutput() HelmRepositoryTypeArrayOutput
	ToHelmRepositoryTypeArrayOutputWithContext(context.Context) HelmRepositoryTypeArrayOutput
}

type HelmRepositoryTypeArray []HelmRepositoryTypeInput

func (HelmRepositoryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryType)(nil)).Elem()
}

func (i HelmRepositoryTypeArray) ToHelmRepositoryTypeArrayOutput() HelmRepositoryTypeArrayOutput {
	return i.ToHelmRepositoryTypeArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryTypeArray) ToHelmRepositoryTypeArrayOutputWithContext(ctx context.Context) HelmRepositoryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryTypeArrayOutput)
}

// HelmRepository is the Schema for the helmrepositories API.
type HelmRepositoryTypeOutput struct{ *pulumi.OutputState }

func (HelmRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryType)(nil)).Elem()
}

func (o HelmRepositoryTypeOutput) ToHelmRepositoryTypeOutput() HelmRepositoryTypeOutput {
	return o
}

func (o HelmRepositoryTypeOutput) ToHelmRepositoryTypeOutputWithContext(ctx context.Context) HelmRepositoryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HelmRepositoryTypeOutput) Spec() HelmRepositorySpecPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *HelmRepositorySpec { return v.Spec }).(HelmRepositorySpecPtrOutput)
}

func (o HelmRepositoryTypeOutput) Status() HelmRepositoryStatusPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *HelmRepositoryStatus { return v.Status }).(HelmRepositoryStatusPtrOutput)
}

type HelmRepositoryTypeArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryType)(nil)).Elem()
}

func (o HelmRepositoryTypeArrayOutput) ToHelmRepositoryTypeArrayOutput() HelmRepositoryTypeArrayOutput {
	return o
}

func (o HelmRepositoryTypeArrayOutput) ToHelmRepositoryTypeArrayOutputWithContext(ctx context.Context) HelmRepositoryTypeArrayOutput {
	return o
}

func (o HelmRepositoryTypeArrayOutput) Index(i pulumi.IntInput) HelmRepositoryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositoryType {
		return vs[0].([]HelmRepositoryType)[vs[1].(int)]
	}).(HelmRepositoryTypeOutput)
}

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HelmRepositoryListTypeInput is an input type that accepts HelmRepositoryListTypeArgs and HelmRepositoryListTypeOutput values.
// You can construct a concrete instance of `HelmRepositoryListTypeInput` via:
//
//	HelmRepositoryListTypeArgs{...}
type HelmRepositoryListTypeInput interface {
	pulumi.Input

	ToHelmRepositoryListTypeOutput() HelmRepositoryListTypeOutput
	ToHelmRepositoryListTypeOutputWithContext(context.Context) HelmRepositoryListTypeOutput
}

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmRepositoryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HelmRepositoryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryListType)(nil)).Elem()
}

func (i HelmRepositoryListTypeArgs) ToHelmRepositoryListTypeOutput() HelmRepositoryListTypeOutput {
	return i.ToHelmRepositoryListTypeOutputWithContext(context.Background())
}

func (i HelmRepositoryListTypeArgs) ToHelmRepositoryListTypeOutputWithContext(ctx context.Context) HelmRepositoryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryListTypeOutput)
}

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryListTypeOutput struct{ *pulumi.OutputState }

func (HelmRepositoryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryListType)(nil)).Elem()
}

func (o HelmRepositoryListTypeOutput) ToHelmRepositoryListTypeOutput() HelmRepositoryListTypeOutput {
	return o
}

func (o HelmRepositoryListTypeOutput) ToHelmRepositoryListTypeOutputWithContext(ctx context.Context) HelmRepositoryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmRepositoryListTypeOutput) Items() HelmRepositoryTypeArrayOutput {
	return o.ApplyT(func(v HelmRepositoryListType) []HelmRepositoryType { return v.Items }).(HelmRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HelmRepositoryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// HelmRepository is the Schema for the helmrepositories API.
type HelmRepositoryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch    `pulumi:"metadata"`
	Spec     *HelmRepositorySpecPatch   `pulumi:"spec"`
	Status   *HelmRepositoryStatusPatch `pulumi:"status"`
}

// HelmRepositoryPatchTypeInput is an input type that accepts HelmRepositoryPatchTypeArgs and HelmRepositoryPatchTypeOutput values.
// You can construct a concrete instance of `HelmRepositoryPatchTypeInput` via:
//
//	HelmRepositoryPatchTypeArgs{...}
type HelmRepositoryPatchTypeInput interface {
	pulumi.Input

	ToHelmRepositoryPatchTypeOutput() HelmRepositoryPatchTypeOutput
	ToHelmRepositoryPatchTypeOutputWithContext(context.Context) HelmRepositoryPatchTypeOutput
}

// HelmRepository is the Schema for the helmrepositories API.
type HelmRepositoryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput    `pulumi:"metadata"`
	Spec     HelmRepositorySpecPatchPtrInput   `pulumi:"spec"`
	Status   HelmRepositoryStatusPatchPtrInput `pulumi:"status"`
}

func (HelmRepositoryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryPatchType)(nil)).Elem()
}

func (i HelmRepositoryPatchTypeArgs) ToHelmRepositoryPatchTypeOutput() HelmRepositoryPatchTypeOutput {
	return i.ToHelmRepositoryPatchTypeOutputWithContext(context.Background())
}

func (i HelmRepositoryPatchTypeArgs) ToHelmRepositoryPatchTypeOutputWithContext(ctx context.Context) HelmRepositoryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryPatchTypeOutput)
}

// HelmRepository is the Schema for the helmrepositories API.
type HelmRepositoryPatchTypeOutput struct{ *pulumi.OutputState }

func (HelmRepositoryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryPatchType)(nil)).Elem()
}

func (o HelmRepositoryPatchTypeOutput) ToHelmRepositoryPatchTypeOutput() HelmRepositoryPatchTypeOutput {
	return o
}

func (o HelmRepositoryPatchTypeOutput) ToHelmRepositoryPatchTypeOutputWithContext(ctx context.Context) HelmRepositoryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmRepositoryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmRepositoryPatchTypeOutput) Spec() HelmRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *HelmRepositorySpecPatch { return v.Spec }).(HelmRepositorySpecPatchPtrOutput)
}

func (o HelmRepositoryPatchTypeOutput) Status() HelmRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *HelmRepositoryStatusPatch { return v.Status }).(HelmRepositoryStatusPatchPtrOutput)
}

// HelmRepositorySpec specifies the required configuration to produce an
// Artifact for a Helm repository index YAML.
type HelmRepositorySpec struct {
	AccessFrom    *HelmRepositorySpecAccessFrom    `pulumi:"accessFrom"`
	CertSecretRef *HelmRepositorySpecCertSecretRef `pulumi:"certSecretRef"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	// This field is only taken into account if the .spec.type field is set to 'oci'.
	Insecure *bool `pulumi:"insecure"`
	// Interval at which the HelmRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed
	// on to a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the
	// index differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result
	// in credentials getting stolen in a MITM-attack.
	PassCredentials *bool `pulumi:"passCredentials"`
	// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
	// When not specified, defaults to 'generic'.
	Provider  *string                      `pulumi:"provider"`
	SecretRef *HelmRepositorySpecSecretRef `pulumi:"secretRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// HelmRepository.
	Suspend *bool `pulumi:"suspend"`
	// Timeout is used for the index fetch operation for an HTTPS helm repository,
	// and for remote OCI Repository operations like pulling for an OCI helm
	// chart by the associated HelmChart.
	// Its default value is 60s.
	Timeout *string `pulumi:"timeout"`
	// Type of the HelmRepository.
	// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
	Type *string `pulumi:"type"`
	// URL of the Helm repository, a valid URL contains at least a protocol and
	// host.
	Url *string `pulumi:"url"`
}

// HelmRepositorySpecInput is an input type that accepts HelmRepositorySpecArgs and HelmRepositorySpecOutput values.
// You can construct a concrete instance of `HelmRepositorySpecInput` via:
//
//	HelmRepositorySpecArgs{...}
type HelmRepositorySpecInput interface {
	pulumi.Input

	ToHelmRepositorySpecOutput() HelmRepositorySpecOutput
	ToHelmRepositorySpecOutputWithContext(context.Context) HelmRepositorySpecOutput
}

// HelmRepositorySpec specifies the required configuration to produce an
// Artifact for a Helm repository index YAML.
type HelmRepositorySpecArgs struct {
	AccessFrom    HelmRepositorySpecAccessFromPtrInput    `pulumi:"accessFrom"`
	CertSecretRef HelmRepositorySpecCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	// This field is only taken into account if the .spec.type field is set to 'oci'.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval at which the HelmRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed
	// on to a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the
	// index differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result
	// in credentials getting stolen in a MITM-attack.
	PassCredentials pulumi.BoolPtrInput `pulumi:"passCredentials"`
	// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
	// When not specified, defaults to 'generic'.
	Provider  pulumi.StringPtrInput               `pulumi:"provider"`
	SecretRef HelmRepositorySpecSecretRefPtrInput `pulumi:"secretRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// HelmRepository.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout is used for the index fetch operation for an HTTPS helm repository,
	// and for remote OCI Repository operations like pulling for an OCI helm
	// chart by the associated HelmChart.
	// Its default value is 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type of the HelmRepository.
	// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
	Type pulumi.StringPtrInput `pulumi:"type"`
	// URL of the Helm repository, a valid URL contains at least a protocol and
	// host.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpec)(nil)).Elem()
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecOutput() HelmRepositorySpecOutput {
	return i.ToHelmRepositorySpecOutputWithContext(context.Background())
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecOutputWithContext(ctx context.Context) HelmRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecOutput)
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return i.ToHelmRepositorySpecPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecOutput).ToHelmRepositorySpecPtrOutputWithContext(ctx)
}

// HelmRepositorySpecPtrInput is an input type that accepts HelmRepositorySpecArgs, HelmRepositorySpecPtr and HelmRepositorySpecPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecPtrInput` via:
//
//	        HelmRepositorySpecArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput
	ToHelmRepositorySpecPtrOutputWithContext(context.Context) HelmRepositorySpecPtrOutput
}

type helmRepositorySpecPtrType HelmRepositorySpecArgs

func HelmRepositorySpecPtr(v *HelmRepositorySpecArgs) HelmRepositorySpecPtrInput {
	return (*helmRepositorySpecPtrType)(v)
}

func (*helmRepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpec)(nil)).Elem()
}

func (i *helmRepositorySpecPtrType) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return i.ToHelmRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecPtrType) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPtrOutput)
}

// HelmRepositorySpec specifies the required configuration to produce an
// Artifact for a Helm repository index YAML.
type HelmRepositorySpecOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpec)(nil)).Elem()
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecOutput() HelmRepositorySpecOutput {
	return o
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecOutputWithContext(ctx context.Context) HelmRepositorySpecOutput {
	return o
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return o.ToHelmRepositorySpecPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpec) *HelmRepositorySpec {
		return &v
	}).(HelmRepositorySpecPtrOutput)
}

func (o HelmRepositorySpecOutput) AccessFrom() HelmRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *HelmRepositorySpecAccessFrom { return v.AccessFrom }).(HelmRepositorySpecAccessFromPtrOutput)
}

func (o HelmRepositorySpecOutput) CertSecretRef() HelmRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *HelmRepositorySpecCertSecretRef { return v.CertSecretRef }).(HelmRepositorySpecCertSecretRefPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
// This field is only taken into account if the .spec.type field is set to 'oci'.
func (o HelmRepositorySpecOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmRepositorySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed
// on to a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the
// index differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result
// in credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *bool { return v.PassCredentials }).(pulumi.BoolPtrOutput)
}

// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
// When not specified, defaults to 'generic'.
func (o HelmRepositorySpecOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o HelmRepositorySpecOutput) SecretRef() HelmRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *HelmRepositorySpecSecretRef { return v.SecretRef }).(HelmRepositorySpecSecretRefPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// HelmRepository.
func (o HelmRepositorySpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout is used for the index fetch operation for an HTTPS helm repository,
// and for remote OCI Repository operations like pulling for an OCI helm
// chart by the associated HelmChart.
// Its default value is 60s.
func (o HelmRepositorySpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type of the HelmRepository.
// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
func (o HelmRepositorySpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// URL of the Helm repository, a valid URL contains at least a protocol and
// host.
func (o HelmRepositorySpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpec)(nil)).Elem()
}

func (o HelmRepositorySpecPtrOutput) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return o
}

func (o HelmRepositorySpecPtrOutput) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return o
}

func (o HelmRepositorySpecPtrOutput) Elem() HelmRepositorySpecOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) HelmRepositorySpec {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpec
		return ret
	}).(HelmRepositorySpecOutput)
}

func (o HelmRepositorySpecPtrOutput) AccessFrom() HelmRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *HelmRepositorySpecAccessFrom {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(HelmRepositorySpecAccessFromPtrOutput)
}

func (o HelmRepositorySpecPtrOutput) CertSecretRef() HelmRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *HelmRepositorySpecCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(HelmRepositorySpecCertSecretRefPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
// This field is only taken into account if the .spec.type field is set to 'oci'.
func (o HelmRepositorySpecPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmRepositorySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed
// on to a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the
// index differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result
// in credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecPtrOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.PassCredentials
	}).(pulumi.BoolPtrOutput)
}

// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
// When not specified, defaults to 'generic'.
func (o HelmRepositorySpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o HelmRepositorySpecPtrOutput) SecretRef() HelmRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *HelmRepositorySpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmRepositorySpecSecretRefPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// HelmRepository.
func (o HelmRepositorySpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout is used for the index fetch operation for an HTTPS helm repository,
// and for remote OCI Repository operations like pulling for an OCI helm
// chart by the associated HelmChart.
// Its default value is 60s.
func (o HelmRepositorySpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Type of the HelmRepository.
// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
func (o HelmRepositorySpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// URL of the Helm repository, a valid URL contains at least a protocol and
// host.
func (o HelmRepositorySpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// AccessFrom specifies an Access Control List for allowing cross-namespace
// references to this object.
// NOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092
type HelmRepositorySpecAccessFrom struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []HelmRepositorySpecAccessFromNamespaceSelectors `pulumi:"namespaceSelectors"`
}

// HelmRepositorySpecAccessFromInput is an input type that accepts HelmRepositorySpecAccessFromArgs and HelmRepositorySpecAccessFromOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromInput` via:
//
//	HelmRepositorySpecAccessFromArgs{...}
type HelmRepositorySpecAccessFromInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromOutput() HelmRepositorySpecAccessFromOutput
	ToHelmRepositorySpecAccessFromOutputWithContext(context.Context) HelmRepositorySpecAccessFromOutput
}

// AccessFrom specifies an Access Control List for allowing cross-namespace
// references to this object.
// NOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092
type HelmRepositorySpecAccessFromArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput `pulumi:"namespaceSelectors"`
}

func (HelmRepositorySpecAccessFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromOutput() HelmRepositorySpecAccessFromOutput {
	return i.ToHelmRepositorySpecAccessFromOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromOutput)
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromOutput).ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx)
}

// HelmRepositorySpecAccessFromPtrInput is an input type that accepts HelmRepositorySpecAccessFromArgs, HelmRepositorySpecAccessFromPtr and HelmRepositorySpecAccessFromPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromPtrInput` via:
//
//	        HelmRepositorySpecAccessFromArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecAccessFromPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput
	ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Context) HelmRepositorySpecAccessFromPtrOutput
}

type helmRepositorySpecAccessFromPtrType HelmRepositorySpecAccessFromArgs

func HelmRepositorySpecAccessFromPtr(v *HelmRepositorySpecAccessFromArgs) HelmRepositorySpecAccessFromPtrInput {
	return (*helmRepositorySpecAccessFromPtrType)(v)
}

func (*helmRepositorySpecAccessFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (i *helmRepositorySpecAccessFromPtrType) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecAccessFromPtrType) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPtrOutput)
}

// AccessFrom specifies an Access Control List for allowing cross-namespace
// references to this object.
// NOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092
type HelmRepositorySpecAccessFromOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromOutput() HelmRepositorySpecAccessFromOutput {
	return o
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromOutput {
	return o
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return o.ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecAccessFrom) *HelmRepositorySpecAccessFrom {
		return &v
	}).(HelmRepositorySpecAccessFromPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFrom) []HelmRepositorySpecAccessFromNamespaceSelectors {
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

type HelmRepositorySpecAccessFromPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromPtrOutput) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPtrOutput) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPtrOutput) Elem() HelmRepositorySpecAccessFromOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFrom) HelmRepositorySpecAccessFrom {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecAccessFrom
		return ret
	}).(HelmRepositorySpecAccessFromOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromPtrOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFrom) []HelmRepositorySpecAccessFromNamespaceSelectors {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectors struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HelmRepositorySpecAccessFromNamespaceSelectorsInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsArgs and HelmRepositorySpecAccessFromNamespaceSelectorsOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsArgs{...}
type HelmRepositorySpecAccessFromNamespaceSelectorsInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsOutput() HelmRepositorySpecAccessFromNamespaceSelectorsOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HelmRepositorySpecAccessFromNamespaceSelectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutput() HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsArray and HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsArray{ HelmRepositorySpecAccessFromNamespaceSelectorsArgs{...} }
type HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput
}

type HelmRepositorySpecAccessFromNamespaceSelectorsArray []HelmRepositorySpecAccessFromNamespaceSelectorsInput

func (HelmRepositorySpecAccessFromNamespaceSelectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutput() HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HelmRepositorySpecAccessFromNamespaceSelectorsOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFromNamespaceSelectors) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) Index(i pulumi.IntInput) HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositorySpecAccessFromNamespaceSelectors {
		return vs[0].([]HelmRepositorySpecAccessFromNamespaceSelectors)[vs[1].(int)]
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsPatch struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs and HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...}
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray and HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray{ HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...} }
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
}

type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray []HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFromNamespaceSelectorsPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) Index(i pulumi.IntInput) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositorySpecAccessFromNamespaceSelectorsPatch {
		return vs[0].([]HelmRepositorySpecAccessFromNamespaceSelectorsPatch)[vs[1].(int)]
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// AccessFrom specifies an Access Control List for allowing cross-namespace
// references to this object.
// NOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092
type HelmRepositorySpecAccessFromPatch struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []HelmRepositorySpecAccessFromNamespaceSelectorsPatch `pulumi:"namespaceSelectors"`
}

// HelmRepositorySpecAccessFromPatchInput is an input type that accepts HelmRepositorySpecAccessFromPatchArgs and HelmRepositorySpecAccessFromPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromPatchInput` via:
//
//	HelmRepositorySpecAccessFromPatchArgs{...}
type HelmRepositorySpecAccessFromPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromPatchOutput() HelmRepositorySpecAccessFromPatchOutput
	ToHelmRepositorySpecAccessFromPatchOutputWithContext(context.Context) HelmRepositorySpecAccessFromPatchOutput
}

// AccessFrom specifies an Access Control List for allowing cross-namespace
// references to this object.
// NOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092
type HelmRepositorySpecAccessFromPatchArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput `pulumi:"namespaceSelectors"`
}

func (HelmRepositorySpecAccessFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchOutput() HelmRepositorySpecAccessFromPatchOutput {
	return i.ToHelmRepositorySpecAccessFromPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPatchOutput)
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPatchOutput).ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecAccessFromPatchPtrInput is an input type that accepts HelmRepositorySpecAccessFromPatchArgs, HelmRepositorySpecAccessFromPatchPtr and HelmRepositorySpecAccessFromPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromPatchPtrInput` via:
//
//	        HelmRepositorySpecAccessFromPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecAccessFromPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput
	ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Context) HelmRepositorySpecAccessFromPatchPtrOutput
}

type helmRepositorySpecAccessFromPatchPtrType HelmRepositorySpecAccessFromPatchArgs

func HelmRepositorySpecAccessFromPatchPtr(v *HelmRepositorySpecAccessFromPatchArgs) HelmRepositorySpecAccessFromPatchPtrInput {
	return (*helmRepositorySpecAccessFromPatchPtrType)(v)
}

func (*helmRepositorySpecAccessFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i *helmRepositorySpecAccessFromPatchPtrType) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecAccessFromPatchPtrType) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

// AccessFrom specifies an Access Control List for allowing cross-namespace
// references to this object.
// NOTE: Not implemented, provisional as of https://github.com/fluxcd/flux2/pull/2092
type HelmRepositorySpecAccessFromPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchOutput() HelmRepositorySpecAccessFromPatchOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecAccessFromPatch) *HelmRepositorySpecAccessFromPatch {
		return &v
	}).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromPatchOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFromPatch) []HelmRepositorySpecAccessFromNamespaceSelectorsPatch {
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

type HelmRepositorySpecAccessFromPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromPatchPtrOutput) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchPtrOutput) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchPtrOutput) Elem() HelmRepositorySpecAccessFromPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFromPatch) HelmRepositorySpecAccessFromPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecAccessFromPatch
		return ret
	}).(HelmRepositorySpecAccessFromPatchOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromPatchPtrOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFromPatch) []HelmRepositorySpecAccessFromNamespaceSelectorsPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// It takes precedence over the values specified in the Secret referred
// to by `.spec.secretRef`.
type HelmRepositorySpecCertSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmRepositorySpecCertSecretRefInput is an input type that accepts HelmRepositorySpecCertSecretRefArgs and HelmRepositorySpecCertSecretRefOutput values.
// You can construct a concrete instance of `HelmRepositorySpecCertSecretRefInput` via:
//
//	HelmRepositorySpecCertSecretRefArgs{...}
type HelmRepositorySpecCertSecretRefInput interface {
	pulumi.Input

	ToHelmRepositorySpecCertSecretRefOutput() HelmRepositorySpecCertSecretRefOutput
	ToHelmRepositorySpecCertSecretRefOutputWithContext(context.Context) HelmRepositorySpecCertSecretRefOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// It takes precedence over the values specified in the Secret referred
// to by `.spec.secretRef`.
type HelmRepositorySpecCertSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmRepositorySpecCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecCertSecretRef)(nil)).Elem()
}

func (i HelmRepositorySpecCertSecretRefArgs) ToHelmRepositorySpecCertSecretRefOutput() HelmRepositorySpecCertSecretRefOutput {
	return i.ToHelmRepositorySpecCertSecretRefOutputWithContext(context.Background())
}

func (i HelmRepositorySpecCertSecretRefArgs) ToHelmRepositorySpecCertSecretRefOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecCertSecretRefOutput)
}

func (i HelmRepositorySpecCertSecretRefArgs) ToHelmRepositorySpecCertSecretRefPtrOutput() HelmRepositorySpecCertSecretRefPtrOutput {
	return i.ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecCertSecretRefArgs) ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecCertSecretRefOutput).ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(ctx)
}

// HelmRepositorySpecCertSecretRefPtrInput is an input type that accepts HelmRepositorySpecCertSecretRefArgs, HelmRepositorySpecCertSecretRefPtr and HelmRepositorySpecCertSecretRefPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecCertSecretRefPtrInput` via:
//
//	        HelmRepositorySpecCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecCertSecretRefPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecCertSecretRefPtrOutput() HelmRepositorySpecCertSecretRefPtrOutput
	ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(context.Context) HelmRepositorySpecCertSecretRefPtrOutput
}

type helmRepositorySpecCertSecretRefPtrType HelmRepositorySpecCertSecretRefArgs

func HelmRepositorySpecCertSecretRefPtr(v *HelmRepositorySpecCertSecretRefArgs) HelmRepositorySpecCertSecretRefPtrInput {
	return (*helmRepositorySpecCertSecretRefPtrType)(v)
}

func (*helmRepositorySpecCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecCertSecretRef)(nil)).Elem()
}

func (i *helmRepositorySpecCertSecretRefPtrType) ToHelmRepositorySpecCertSecretRefPtrOutput() HelmRepositorySpecCertSecretRefPtrOutput {
	return i.ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecCertSecretRefPtrType) ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecCertSecretRefPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// It takes precedence over the values specified in the Secret referred
// to by `.spec.secretRef`.
type HelmRepositorySpecCertSecretRefOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecCertSecretRef)(nil)).Elem()
}

func (o HelmRepositorySpecCertSecretRefOutput) ToHelmRepositorySpecCertSecretRefOutput() HelmRepositorySpecCertSecretRefOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefOutput) ToHelmRepositorySpecCertSecretRefOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefOutput) ToHelmRepositorySpecCertSecretRefPtrOutput() HelmRepositorySpecCertSecretRefPtrOutput {
	return o.ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecCertSecretRefOutput) ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecCertSecretRef) *HelmRepositorySpecCertSecretRef {
		return &v
	}).(HelmRepositorySpecCertSecretRefPtrOutput)
}

// Name of the referent.
func (o HelmRepositorySpecCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecCertSecretRef)(nil)).Elem()
}

func (o HelmRepositorySpecCertSecretRefPtrOutput) ToHelmRepositorySpecCertSecretRefPtrOutput() HelmRepositorySpecCertSecretRefPtrOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefPtrOutput) ToHelmRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPtrOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefPtrOutput) Elem() HelmRepositorySpecCertSecretRefOutput {
	return o.ApplyT(func(v *HelmRepositorySpecCertSecretRef) HelmRepositorySpecCertSecretRef {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecCertSecretRef
		return ret
	}).(HelmRepositorySpecCertSecretRefOutput)
}

// Name of the referent.
func (o HelmRepositorySpecCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// It takes precedence over the values specified in the Secret referred
// to by `.spec.secretRef`.
type HelmRepositorySpecCertSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmRepositorySpecCertSecretRefPatchInput is an input type that accepts HelmRepositorySpecCertSecretRefPatchArgs and HelmRepositorySpecCertSecretRefPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecCertSecretRefPatchInput` via:
//
//	HelmRepositorySpecCertSecretRefPatchArgs{...}
type HelmRepositorySpecCertSecretRefPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecCertSecretRefPatchOutput() HelmRepositorySpecCertSecretRefPatchOutput
	ToHelmRepositorySpecCertSecretRefPatchOutputWithContext(context.Context) HelmRepositorySpecCertSecretRefPatchOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// It takes precedence over the values specified in the Secret referred
// to by `.spec.secretRef`.
type HelmRepositorySpecCertSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmRepositorySpecCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (i HelmRepositorySpecCertSecretRefPatchArgs) ToHelmRepositorySpecCertSecretRefPatchOutput() HelmRepositorySpecCertSecretRefPatchOutput {
	return i.ToHelmRepositorySpecCertSecretRefPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecCertSecretRefPatchArgs) ToHelmRepositorySpecCertSecretRefPatchOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecCertSecretRefPatchOutput)
}

func (i HelmRepositorySpecCertSecretRefPatchArgs) ToHelmRepositorySpecCertSecretRefPatchPtrOutput() HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return i.ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecCertSecretRefPatchArgs) ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecCertSecretRefPatchOutput).ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecCertSecretRefPatchPtrInput is an input type that accepts HelmRepositorySpecCertSecretRefPatchArgs, HelmRepositorySpecCertSecretRefPatchPtr and HelmRepositorySpecCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecCertSecretRefPatchPtrInput` via:
//
//	        HelmRepositorySpecCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecCertSecretRefPatchPtrOutput() HelmRepositorySpecCertSecretRefPatchPtrOutput
	ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Context) HelmRepositorySpecCertSecretRefPatchPtrOutput
}

type helmRepositorySpecCertSecretRefPatchPtrType HelmRepositorySpecCertSecretRefPatchArgs

func HelmRepositorySpecCertSecretRefPatchPtr(v *HelmRepositorySpecCertSecretRefPatchArgs) HelmRepositorySpecCertSecretRefPatchPtrInput {
	return (*helmRepositorySpecCertSecretRefPatchPtrType)(v)
}

func (*helmRepositorySpecCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (i *helmRepositorySpecCertSecretRefPatchPtrType) ToHelmRepositorySpecCertSecretRefPatchPtrOutput() HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return i.ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecCertSecretRefPatchPtrType) ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecCertSecretRefPatchPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
//
// It takes precedence over the values specified in the Secret referred
// to by `.spec.secretRef`.
type HelmRepositorySpecCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (o HelmRepositorySpecCertSecretRefPatchOutput) ToHelmRepositorySpecCertSecretRefPatchOutput() HelmRepositorySpecCertSecretRefPatchOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefPatchOutput) ToHelmRepositorySpecCertSecretRefPatchOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPatchOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefPatchOutput) ToHelmRepositorySpecCertSecretRefPatchPtrOutput() HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecCertSecretRefPatchOutput) ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecCertSecretRefPatch) *HelmRepositorySpecCertSecretRefPatch {
		return &v
	}).(HelmRepositorySpecCertSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o HelmRepositorySpecCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (o HelmRepositorySpecCertSecretRefPatchPtrOutput) ToHelmRepositorySpecCertSecretRefPatchPtrOutput() HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefPatchPtrOutput) ToHelmRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecCertSecretRefPatchPtrOutput) Elem() HelmRepositorySpecCertSecretRefPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecCertSecretRefPatch) HelmRepositorySpecCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecCertSecretRefPatch
		return ret
	}).(HelmRepositorySpecCertSecretRefPatchOutput)
}

// Name of the referent.
func (o HelmRepositorySpecCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HelmRepositorySpec specifies the required configuration to produce an
// Artifact for a Helm repository index YAML.
type HelmRepositorySpecPatch struct {
	AccessFrom    *HelmRepositorySpecAccessFromPatch    `pulumi:"accessFrom"`
	CertSecretRef *HelmRepositorySpecCertSecretRefPatch `pulumi:"certSecretRef"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	// This field is only taken into account if the .spec.type field is set to 'oci'.
	Insecure *bool `pulumi:"insecure"`
	// Interval at which the HelmRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval *string `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed
	// on to a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the
	// index differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result
	// in credentials getting stolen in a MITM-attack.
	PassCredentials *bool `pulumi:"passCredentials"`
	// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
	// When not specified, defaults to 'generic'.
	Provider  *string                           `pulumi:"provider"`
	SecretRef *HelmRepositorySpecSecretRefPatch `pulumi:"secretRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// HelmRepository.
	Suspend *bool `pulumi:"suspend"`
	// Timeout is used for the index fetch operation for an HTTPS helm repository,
	// and for remote OCI Repository operations like pulling for an OCI helm
	// chart by the associated HelmChart.
	// Its default value is 60s.
	Timeout *string `pulumi:"timeout"`
	// Type of the HelmRepository.
	// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
	Type *string `pulumi:"type"`
	// URL of the Helm repository, a valid URL contains at least a protocol and
	// host.
	Url *string `pulumi:"url"`
}

// HelmRepositorySpecPatchInput is an input type that accepts HelmRepositorySpecPatchArgs and HelmRepositorySpecPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecPatchInput` via:
//
//	HelmRepositorySpecPatchArgs{...}
type HelmRepositorySpecPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecPatchOutput() HelmRepositorySpecPatchOutput
	ToHelmRepositorySpecPatchOutputWithContext(context.Context) HelmRepositorySpecPatchOutput
}

// HelmRepositorySpec specifies the required configuration to produce an
// Artifact for a Helm repository index YAML.
type HelmRepositorySpecPatchArgs struct {
	AccessFrom    HelmRepositorySpecAccessFromPatchPtrInput    `pulumi:"accessFrom"`
	CertSecretRef HelmRepositorySpecCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	// This field is only taken into account if the .spec.type field is set to 'oci'.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval at which the HelmRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed
	// on to a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the
	// index differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result
	// in credentials getting stolen in a MITM-attack.
	PassCredentials pulumi.BoolPtrInput `pulumi:"passCredentials"`
	// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
	// When not specified, defaults to 'generic'.
	Provider  pulumi.StringPtrInput                    `pulumi:"provider"`
	SecretRef HelmRepositorySpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	// Suspend tells the controller to suspend the reconciliation of this
	// HelmRepository.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout is used for the index fetch operation for an HTTPS helm repository,
	// and for remote OCI Repository operations like pulling for an OCI helm
	// chart by the associated HelmChart.
	// Its default value is 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type of the HelmRepository.
	// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
	Type pulumi.StringPtrInput `pulumi:"type"`
	// URL of the Helm repository, a valid URL contains at least a protocol and
	// host.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositorySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecPatch)(nil)).Elem()
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchOutput() HelmRepositorySpecPatchOutput {
	return i.ToHelmRepositorySpecPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchOutputWithContext(ctx context.Context) HelmRepositorySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPatchOutput)
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return i.ToHelmRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPatchOutput).ToHelmRepositorySpecPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecPatchPtrInput is an input type that accepts HelmRepositorySpecPatchArgs, HelmRepositorySpecPatchPtr and HelmRepositorySpecPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecPatchPtrInput` via:
//
//	        HelmRepositorySpecPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput
	ToHelmRepositorySpecPatchPtrOutputWithContext(context.Context) HelmRepositorySpecPatchPtrOutput
}

type helmRepositorySpecPatchPtrType HelmRepositorySpecPatchArgs

func HelmRepositorySpecPatchPtr(v *HelmRepositorySpecPatchArgs) HelmRepositorySpecPatchPtrInput {
	return (*helmRepositorySpecPatchPtrType)(v)
}

func (*helmRepositorySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecPatch)(nil)).Elem()
}

func (i *helmRepositorySpecPatchPtrType) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return i.ToHelmRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecPatchPtrType) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPatchPtrOutput)
}

// HelmRepositorySpec specifies the required configuration to produce an
// Artifact for a Helm repository index YAML.
type HelmRepositorySpecPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecPatch)(nil)).Elem()
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchOutput() HelmRepositorySpecPatchOutput {
	return o
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchOutputWithContext(ctx context.Context) HelmRepositorySpecPatchOutput {
	return o
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return o.ToHelmRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecPatch) *HelmRepositorySpecPatch {
		return &v
	}).(HelmRepositorySpecPatchPtrOutput)
}

func (o HelmRepositorySpecPatchOutput) AccessFrom() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *HelmRepositorySpecAccessFromPatch { return v.AccessFrom }).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

func (o HelmRepositorySpecPatchOutput) CertSecretRef() HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *HelmRepositorySpecCertSecretRefPatch { return v.CertSecretRef }).(HelmRepositorySpecCertSecretRefPatchPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
// This field is only taken into account if the .spec.type field is set to 'oci'.
func (o HelmRepositorySpecPatchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmRepositorySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed
// on to a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the
// index differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result
// in credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecPatchOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *bool { return v.PassCredentials }).(pulumi.BoolPtrOutput)
}

// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
// When not specified, defaults to 'generic'.
func (o HelmRepositorySpecPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o HelmRepositorySpecPatchOutput) SecretRef() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *HelmRepositorySpecSecretRefPatch { return v.SecretRef }).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// HelmRepository.
func (o HelmRepositorySpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout is used for the index fetch operation for an HTTPS helm repository,
// and for remote OCI Repository operations like pulling for an OCI helm
// chart by the associated HelmChart.
// Its default value is 60s.
func (o HelmRepositorySpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type of the HelmRepository.
// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
func (o HelmRepositorySpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// URL of the Helm repository, a valid URL contains at least a protocol and
// host.
func (o HelmRepositorySpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecPatch)(nil)).Elem()
}

func (o HelmRepositorySpecPatchPtrOutput) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecPatchPtrOutput) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecPatchPtrOutput) Elem() HelmRepositorySpecPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) HelmRepositorySpecPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecPatch
		return ret
	}).(HelmRepositorySpecPatchOutput)
}

func (o HelmRepositorySpecPatchPtrOutput) AccessFrom() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *HelmRepositorySpecAccessFromPatch {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

func (o HelmRepositorySpecPatchPtrOutput) CertSecretRef() HelmRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *HelmRepositorySpecCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(HelmRepositorySpecCertSecretRefPatchPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
// This field is only taken into account if the .spec.type field is set to 'oci'.
func (o HelmRepositorySpecPatchPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the HelmRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmRepositorySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed
// on to a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the
// index differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result
// in credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecPatchPtrOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PassCredentials
	}).(pulumi.BoolPtrOutput)
}

// Provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// This field is optional, and only taken into account if the .spec.type field is set to 'oci'.
// When not specified, defaults to 'generic'.
func (o HelmRepositorySpecPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o HelmRepositorySpecPatchPtrOutput) SecretRef() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *HelmRepositorySpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// Suspend tells the controller to suspend the reconciliation of this
// HelmRepository.
func (o HelmRepositorySpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout is used for the index fetch operation for an HTTPS helm repository,
// and for remote OCI Repository operations like pulling for an OCI helm
// chart by the associated HelmChart.
// Its default value is 60s.
func (o HelmRepositorySpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Type of the HelmRepository.
// When this field is set to  "oci", the URL field value must be prefixed with "oci://".
func (o HelmRepositorySpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// URL of the Helm repository, a valid URL contains at least a protocol and
// host.
func (o HelmRepositorySpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the HelmRepository.
// For HTTP/S basic auth the secret must contain 'username' and 'password'
// fields.
// Support for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'
// keys is deprecated. Please use `.spec.certSecretRef` instead.
type HelmRepositorySpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmRepositorySpecSecretRefInput is an input type that accepts HelmRepositorySpecSecretRefArgs and HelmRepositorySpecSecretRefOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefInput` via:
//
//	HelmRepositorySpecSecretRefArgs{...}
type HelmRepositorySpecSecretRefInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefOutput() HelmRepositorySpecSecretRefOutput
	ToHelmRepositorySpecSecretRefOutputWithContext(context.Context) HelmRepositorySpecSecretRefOutput
}

// SecretRef specifies the Secret containing authentication credentials
// for the HelmRepository.
// For HTTP/S basic auth the secret must contain 'username' and 'password'
// fields.
// Support for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'
// keys is deprecated. Please use `.spec.certSecretRef` instead.
type HelmRepositorySpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmRepositorySpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefOutput() HelmRepositorySpecSecretRefOutput {
	return i.ToHelmRepositorySpecSecretRefOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefOutput)
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefOutput).ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx)
}

// HelmRepositorySpecSecretRefPtrInput is an input type that accepts HelmRepositorySpecSecretRefArgs, HelmRepositorySpecSecretRefPtr and HelmRepositorySpecSecretRefPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefPtrInput` via:
//
//	        HelmRepositorySpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecSecretRefPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput
	ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Context) HelmRepositorySpecSecretRefPtrOutput
}

type helmRepositorySpecSecretRefPtrType HelmRepositorySpecSecretRefArgs

func HelmRepositorySpecSecretRefPtr(v *HelmRepositorySpecSecretRefArgs) HelmRepositorySpecSecretRefPtrInput {
	return (*helmRepositorySpecSecretRefPtrType)(v)
}

func (*helmRepositorySpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (i *helmRepositorySpecSecretRefPtrType) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecSecretRefPtrType) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the HelmRepository.
// For HTTP/S basic auth the secret must contain 'username' and 'password'
// fields.
// Support for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'
// keys is deprecated. Please use `.spec.certSecretRef` instead.
type HelmRepositorySpecSecretRefOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefOutput() HelmRepositorySpecSecretRefOutput {
	return o
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefOutput {
	return o
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return o.ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecSecretRef) *HelmRepositorySpecSecretRef {
		return &v
	}).(HelmRepositorySpecSecretRefPtrOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefPtrOutput) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPtrOutput) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPtrOutput) Elem() HelmRepositorySpecSecretRefOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRef) HelmRepositorySpecSecretRef {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecSecretRef
		return ret
	}).(HelmRepositorySpecSecretRefOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the HelmRepository.
// For HTTP/S basic auth the secret must contain 'username' and 'password'
// fields.
// Support for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'
// keys is deprecated. Please use `.spec.certSecretRef` instead.
type HelmRepositorySpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmRepositorySpecSecretRefPatchInput is an input type that accepts HelmRepositorySpecSecretRefPatchArgs and HelmRepositorySpecSecretRefPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefPatchInput` via:
//
//	HelmRepositorySpecSecretRefPatchArgs{...}
type HelmRepositorySpecSecretRefPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefPatchOutput() HelmRepositorySpecSecretRefPatchOutput
	ToHelmRepositorySpecSecretRefPatchOutputWithContext(context.Context) HelmRepositorySpecSecretRefPatchOutput
}

// SecretRef specifies the Secret containing authentication credentials
// for the HelmRepository.
// For HTTP/S basic auth the secret must contain 'username' and 'password'
// fields.
// Support for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'
// keys is deprecated. Please use `.spec.certSecretRef` instead.
type HelmRepositorySpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmRepositorySpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchOutput() HelmRepositorySpecSecretRefPatchOutput {
	return i.ToHelmRepositorySpecSecretRefPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPatchOutput)
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPatchOutput).ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecSecretRefPatchPtrInput is an input type that accepts HelmRepositorySpecSecretRefPatchArgs, HelmRepositorySpecSecretRefPatchPtr and HelmRepositorySpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefPatchPtrInput` via:
//
//	        HelmRepositorySpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput
	ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Context) HelmRepositorySpecSecretRefPatchPtrOutput
}

type helmRepositorySpecSecretRefPatchPtrType HelmRepositorySpecSecretRefPatchArgs

func HelmRepositorySpecSecretRefPatchPtr(v *HelmRepositorySpecSecretRefPatchArgs) HelmRepositorySpecSecretRefPatchPtrInput {
	return (*helmRepositorySpecSecretRefPatchPtrType)(v)
}

func (*helmRepositorySpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i *helmRepositorySpecSecretRefPatchPtrType) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecSecretRefPatchPtrType) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing authentication credentials
// for the HelmRepository.
// For HTTP/S basic auth the secret must contain 'username' and 'password'
// fields.
// Support for TLS auth using the 'certFile' and 'keyFile', and/or 'caFile'
// keys is deprecated. Please use `.spec.certSecretRef` instead.
type HelmRepositorySpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchOutput() HelmRepositorySpecSecretRefPatchOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecSecretRefPatch) *HelmRepositorySpecSecretRefPatch {
		return &v
	}).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefPatchPtrOutput) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchPtrOutput) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchPtrOutput) Elem() HelmRepositorySpecSecretRefPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRefPatch) HelmRepositorySpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecSecretRefPatch
		return ret
	}).(HelmRepositorySpecSecretRefPatchOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HelmRepositoryStatus records the observed state of the HelmRepository.
type HelmRepositoryStatus struct {
	Artifact *HelmRepositoryStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions []HelmRepositoryStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the HelmRepository
	// object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// HelmRepositoryStatus.Artifact data is recommended.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusInput is an input type that accepts HelmRepositoryStatusArgs and HelmRepositoryStatusOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusInput` via:
//
//	HelmRepositoryStatusArgs{...}
type HelmRepositoryStatusInput interface {
	pulumi.Input

	ToHelmRepositoryStatusOutput() HelmRepositoryStatusOutput
	ToHelmRepositoryStatusOutputWithContext(context.Context) HelmRepositoryStatusOutput
}

// HelmRepositoryStatus records the observed state of the HelmRepository.
type HelmRepositoryStatusArgs struct {
	Artifact HelmRepositoryStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions HelmRepositoryStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the HelmRepository
	// object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// HelmRepositoryStatus.Artifact data is recommended.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatus)(nil)).Elem()
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusOutput() HelmRepositoryStatusOutput {
	return i.ToHelmRepositoryStatusOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusOutputWithContext(ctx context.Context) HelmRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusOutput)
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return i.ToHelmRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusOutput).ToHelmRepositoryStatusPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusPtrInput is an input type that accepts HelmRepositoryStatusArgs, HelmRepositoryStatusPtr and HelmRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusPtrInput` via:
//
//	        HelmRepositoryStatusArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput
	ToHelmRepositoryStatusPtrOutputWithContext(context.Context) HelmRepositoryStatusPtrOutput
}

type helmRepositoryStatusPtrType HelmRepositoryStatusArgs

func HelmRepositoryStatusPtr(v *HelmRepositoryStatusArgs) HelmRepositoryStatusPtrInput {
	return (*helmRepositoryStatusPtrType)(v)
}

func (*helmRepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatus)(nil)).Elem()
}

func (i *helmRepositoryStatusPtrType) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return i.ToHelmRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusPtrType) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPtrOutput)
}

// HelmRepositoryStatus records the observed state of the HelmRepository.
type HelmRepositoryStatusOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatus)(nil)).Elem()
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusOutput() HelmRepositoryStatusOutput {
	return o
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusOutputWithContext(ctx context.Context) HelmRepositoryStatusOutput {
	return o
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return o.ToHelmRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatus) *HelmRepositoryStatus {
		return &v
	}).(HelmRepositoryStatusPtrOutput)
}

func (o HelmRepositoryStatusOutput) Artifact() HelmRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *HelmRepositoryStatusArtifact { return v.Artifact }).(HelmRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusOutput) Conditions() HelmRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) []HelmRepositoryStatusConditions { return v.Conditions }).(HelmRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmRepository
// object.
func (o HelmRepositoryStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// HelmRepositoryStatus.Artifact data is recommended.
func (o HelmRepositoryStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatus)(nil)).Elem()
}

func (o HelmRepositoryStatusPtrOutput) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return o
}

func (o HelmRepositoryStatusPtrOutput) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return o
}

func (o HelmRepositoryStatusPtrOutput) Elem() HelmRepositoryStatusOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) HelmRepositoryStatus {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatus
		return ret
	}).(HelmRepositoryStatusOutput)
}

func (o HelmRepositoryStatusPtrOutput) Artifact() HelmRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *HelmRepositoryStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusPtrOutput) Conditions() HelmRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) []HelmRepositoryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmRepository
// object.
func (o HelmRepositoryStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// HelmRepositoryStatus.Artifact data is recommended.
func (o HelmRepositoryStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the last successful HelmRepository reconciliation.
type HelmRepositoryStatusArtifact struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusArtifactInput is an input type that accepts HelmRepositoryStatusArtifactArgs and HelmRepositoryStatusArtifactOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactInput` via:
//
//	HelmRepositoryStatusArtifactArgs{...}
type HelmRepositoryStatusArtifactInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactOutput() HelmRepositoryStatusArtifactOutput
	ToHelmRepositoryStatusArtifactOutputWithContext(context.Context) HelmRepositoryStatusArtifactOutput
}

// Artifact represents the last successful HelmRepository reconciliation.
type HelmRepositoryStatusArtifactArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactOutput() HelmRepositoryStatusArtifactOutput {
	return i.ToHelmRepositoryStatusArtifactOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactOutput)
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactOutput).ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusArtifactPtrInput is an input type that accepts HelmRepositoryStatusArtifactArgs, HelmRepositoryStatusArtifactPtr and HelmRepositoryStatusArtifactPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactPtrInput` via:
//
//	        HelmRepositoryStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusArtifactPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput
	ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Context) HelmRepositoryStatusArtifactPtrOutput
}

type helmRepositoryStatusArtifactPtrType HelmRepositoryStatusArtifactArgs

func HelmRepositoryStatusArtifactPtr(v *HelmRepositoryStatusArtifactArgs) HelmRepositoryStatusArtifactPtrInput {
	return (*helmRepositoryStatusArtifactPtrType)(v)
}

func (*helmRepositoryStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (i *helmRepositoryStatusArtifactPtrType) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusArtifactPtrType) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPtrOutput)
}

// Artifact represents the last successful HelmRepository reconciliation.
type HelmRepositoryStatusArtifactOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactOutput() HelmRepositoryStatusArtifactOutput {
	return o
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactOutput {
	return o
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return o.ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatusArtifact) *HelmRepositoryStatusArtifact {
		return &v
	}).(HelmRepositoryStatusArtifactPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmRepositoryStatusArtifactOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmRepositoryStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmRepositoryStatusArtifactOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmRepositoryStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmRepositoryStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmRepositoryStatusArtifactOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmRepositoryStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactPtrOutput) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPtrOutput) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPtrOutput) Elem() HelmRepositoryStatusArtifactOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) HelmRepositoryStatusArtifact {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatusArtifact
		return ret
	}).(HelmRepositoryStatusArtifactOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmRepositoryStatusArtifactPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmRepositoryStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmRepositoryStatusArtifactPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmRepositoryStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmRepositoryStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmRepositoryStatusArtifactPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmRepositoryStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the last successful HelmRepository reconciliation.
type HelmRepositoryStatusArtifactPatch struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusArtifactPatchInput is an input type that accepts HelmRepositoryStatusArtifactPatchArgs and HelmRepositoryStatusArtifactPatchOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactPatchInput` via:
//
//	HelmRepositoryStatusArtifactPatchArgs{...}
type HelmRepositoryStatusArtifactPatchInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactPatchOutput() HelmRepositoryStatusArtifactPatchOutput
	ToHelmRepositoryStatusArtifactPatchOutputWithContext(context.Context) HelmRepositoryStatusArtifactPatchOutput
}

// Artifact represents the last successful HelmRepository reconciliation.
type HelmRepositoryStatusArtifactPatchArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchOutput() HelmRepositoryStatusArtifactPatchOutput {
	return i.ToHelmRepositoryStatusArtifactPatchOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPatchOutput)
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPatchOutput).ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusArtifactPatchPtrInput is an input type that accepts HelmRepositoryStatusArtifactPatchArgs, HelmRepositoryStatusArtifactPatchPtr and HelmRepositoryStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactPatchPtrInput` via:
//
//	        HelmRepositoryStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput
	ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Context) HelmRepositoryStatusArtifactPatchPtrOutput
}

type helmRepositoryStatusArtifactPatchPtrType HelmRepositoryStatusArtifactPatchArgs

func HelmRepositoryStatusArtifactPatchPtr(v *HelmRepositoryStatusArtifactPatchArgs) HelmRepositoryStatusArtifactPatchPtrInput {
	return (*helmRepositoryStatusArtifactPatchPtrType)(v)
}

func (*helmRepositoryStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i *helmRepositoryStatusArtifactPatchPtrType) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusArtifactPatchPtrType) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Artifact represents the last successful HelmRepository reconciliation.
type HelmRepositoryStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchOutput() HelmRepositoryStatusArtifactPatchOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatusArtifactPatch) *HelmRepositoryStatusArtifactPatch {
		return &v
	}).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmRepositoryStatusArtifactPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmRepositoryStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmRepositoryStatusArtifactPatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmRepositoryStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmRepositoryStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmRepositoryStatusArtifactPatchOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmRepositoryStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactPatchPtrOutput) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchPtrOutput) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchPtrOutput) Elem() HelmRepositoryStatusArtifactPatchOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) HelmRepositoryStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatusArtifactPatch
		return ret
	}).(HelmRepositoryStatusArtifactPatchOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmRepositoryStatusConditionsInput is an input type that accepts HelmRepositoryStatusConditionsArgs and HelmRepositoryStatusConditionsOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsInput` via:
//
//	HelmRepositoryStatusConditionsArgs{...}
type HelmRepositoryStatusConditionsInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsOutput() HelmRepositoryStatusConditionsOutput
	ToHelmRepositoryStatusConditionsOutputWithContext(context.Context) HelmRepositoryStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmRepositoryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditions)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsArgs) ToHelmRepositoryStatusConditionsOutput() HelmRepositoryStatusConditionsOutput {
	return i.ToHelmRepositoryStatusConditionsOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsArgs) ToHelmRepositoryStatusConditionsOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsOutput)
}

// HelmRepositoryStatusConditionsArrayInput is an input type that accepts HelmRepositoryStatusConditionsArray and HelmRepositoryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsArrayInput` via:
//
//	HelmRepositoryStatusConditionsArray{ HelmRepositoryStatusConditionsArgs{...} }
type HelmRepositoryStatusConditionsArrayInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsArrayOutput() HelmRepositoryStatusConditionsArrayOutput
	ToHelmRepositoryStatusConditionsArrayOutputWithContext(context.Context) HelmRepositoryStatusConditionsArrayOutput
}

type HelmRepositoryStatusConditionsArray []HelmRepositoryStatusConditionsInput

func (HelmRepositoryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditions)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsArray) ToHelmRepositoryStatusConditionsArrayOutput() HelmRepositoryStatusConditionsArrayOutput {
	return i.ToHelmRepositoryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsArray) ToHelmRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditions)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsOutput) ToHelmRepositoryStatusConditionsOutput() HelmRepositoryStatusConditionsOutput {
	return o
}

func (o HelmRepositoryStatusConditionsOutput) ToHelmRepositoryStatusConditionsOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmRepositoryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmRepositoryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmRepositoryStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmRepositoryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmRepositoryStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmRepositoryStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditions)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsArrayOutput) ToHelmRepositoryStatusConditionsArrayOutput() HelmRepositoryStatusConditionsArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsArrayOutput) ToHelmRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsArrayOutput) Index(i pulumi.IntInput) HelmRepositoryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositoryStatusConditions {
		return vs[0].([]HelmRepositoryStatusConditions)[vs[1].(int)]
	}).(HelmRepositoryStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmRepositoryStatusConditionsPatchInput is an input type that accepts HelmRepositoryStatusConditionsPatchArgs and HelmRepositoryStatusConditionsPatchOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsPatchInput` via:
//
//	HelmRepositoryStatusConditionsPatchArgs{...}
type HelmRepositoryStatusConditionsPatchInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsPatchOutput() HelmRepositoryStatusConditionsPatchOutput
	ToHelmRepositoryStatusConditionsPatchOutputWithContext(context.Context) HelmRepositoryStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmRepositoryStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsPatchArgs) ToHelmRepositoryStatusConditionsPatchOutput() HelmRepositoryStatusConditionsPatchOutput {
	return i.ToHelmRepositoryStatusConditionsPatchOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsPatchArgs) ToHelmRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsPatchOutput)
}

// HelmRepositoryStatusConditionsPatchArrayInput is an input type that accepts HelmRepositoryStatusConditionsPatchArray and HelmRepositoryStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsPatchArrayInput` via:
//
//	HelmRepositoryStatusConditionsPatchArray{ HelmRepositoryStatusConditionsPatchArgs{...} }
type HelmRepositoryStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsPatchArrayOutput() HelmRepositoryStatusConditionsPatchArrayOutput
	ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(context.Context) HelmRepositoryStatusConditionsPatchArrayOutput
}

type HelmRepositoryStatusConditionsPatchArray []HelmRepositoryStatusConditionsPatchInput

func (HelmRepositoryStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsPatchArray) ToHelmRepositoryStatusConditionsPatchArrayOutput() HelmRepositoryStatusConditionsPatchArrayOutput {
	return i.ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsPatchArray) ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsPatchOutput) ToHelmRepositoryStatusConditionsPatchOutput() HelmRepositoryStatusConditionsPatchOutput {
	return o
}

func (o HelmRepositoryStatusConditionsPatchOutput) ToHelmRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmRepositoryStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmRepositoryStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmRepositoryStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmRepositoryStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmRepositoryStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmRepositoryStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsPatchArrayOutput) ToHelmRepositoryStatusConditionsPatchArrayOutput() HelmRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsPatchArrayOutput) ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) HelmRepositoryStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositoryStatusConditionsPatch {
		return vs[0].([]HelmRepositoryStatusConditionsPatch)[vs[1].(int)]
	}).(HelmRepositoryStatusConditionsPatchOutput)
}

// HelmRepositoryStatus records the observed state of the HelmRepository.
type HelmRepositoryStatusPatch struct {
	Artifact *HelmRepositoryStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions []HelmRepositoryStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the HelmRepository
	// object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// HelmRepositoryStatus.Artifact data is recommended.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusPatchInput is an input type that accepts HelmRepositoryStatusPatchArgs and HelmRepositoryStatusPatchOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusPatchInput` via:
//
//	HelmRepositoryStatusPatchArgs{...}
type HelmRepositoryStatusPatchInput interface {
	pulumi.Input

	ToHelmRepositoryStatusPatchOutput() HelmRepositoryStatusPatchOutput
	ToHelmRepositoryStatusPatchOutputWithContext(context.Context) HelmRepositoryStatusPatchOutput
}

// HelmRepositoryStatus records the observed state of the HelmRepository.
type HelmRepositoryStatusPatchArgs struct {
	Artifact HelmRepositoryStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions HelmRepositoryStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the HelmRepository
	// object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the dynamic fetch link for the latest Artifact.
	// It is provided on a "best effort" basis, and using the precise
	// HelmRepositoryStatus.Artifact data is recommended.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchOutput() HelmRepositoryStatusPatchOutput {
	return i.ToHelmRepositoryStatusPatchOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPatchOutput)
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return i.ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPatchOutput).ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusPatchPtrInput is an input type that accepts HelmRepositoryStatusPatchArgs, HelmRepositoryStatusPatchPtr and HelmRepositoryStatusPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusPatchPtrInput` via:
//
//	        HelmRepositoryStatusPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput
	ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Context) HelmRepositoryStatusPatchPtrOutput
}

type helmRepositoryStatusPatchPtrType HelmRepositoryStatusPatchArgs

func HelmRepositoryStatusPatchPtr(v *HelmRepositoryStatusPatchArgs) HelmRepositoryStatusPatchPtrInput {
	return (*helmRepositoryStatusPatchPtrType)(v)
}

func (*helmRepositoryStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusPatch)(nil)).Elem()
}

func (i *helmRepositoryStatusPatchPtrType) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return i.ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusPatchPtrType) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPatchPtrOutput)
}

// HelmRepositoryStatus records the observed state of the HelmRepository.
type HelmRepositoryStatusPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchOutput() HelmRepositoryStatusPatchOutput {
	return o
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchOutput {
	return o
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return o.ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatusPatch) *HelmRepositoryStatusPatch {
		return &v
	}).(HelmRepositoryStatusPatchPtrOutput)
}

func (o HelmRepositoryStatusPatchOutput) Artifact() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *HelmRepositoryStatusArtifactPatch { return v.Artifact }).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusPatchOutput) Conditions() HelmRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) []HelmRepositoryStatusConditionsPatch { return v.Conditions }).(HelmRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmRepository
// object.
func (o HelmRepositoryStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// HelmRepositoryStatus.Artifact data is recommended.
func (o HelmRepositoryStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusPatchPtrOutput) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusPatchPtrOutput) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusPatchPtrOutput) Elem() HelmRepositoryStatusPatchOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) HelmRepositoryStatusPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatusPatch
		return ret
	}).(HelmRepositoryStatusPatchOutput)
}

func (o HelmRepositoryStatusPatchPtrOutput) Artifact() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *HelmRepositoryStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusPatchPtrOutput) Conditions() HelmRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) []HelmRepositoryStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the HelmRepository
// object.
func (o HelmRepositoryStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the dynamic fetch link for the latest Artifact.
// It is provided on a "best effort" basis, and using the precise
// HelmRepositoryStatus.Artifact data is recommended.
func (o HelmRepositoryStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *OCIRepositorySpec   `pulumi:"spec"`
	Status   *OCIRepositoryStatus `pulumi:"status"`
}

// OCIRepositoryTypeInput is an input type that accepts OCIRepositoryTypeArgs and OCIRepositoryTypeOutput values.
// You can construct a concrete instance of `OCIRepositoryTypeInput` via:
//
//	OCIRepositoryTypeArgs{...}
type OCIRepositoryTypeInput interface {
	pulumi.Input

	ToOCIRepositoryTypeOutput() OCIRepositoryTypeOutput
	ToOCIRepositoryTypeOutputWithContext(context.Context) OCIRepositoryTypeOutput
}

// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput   `pulumi:"metadata"`
	Spec     OCIRepositorySpecPtrInput   `pulumi:"spec"`
	Status   OCIRepositoryStatusPtrInput `pulumi:"status"`
}

func (OCIRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryType)(nil)).Elem()
}

func (i OCIRepositoryTypeArgs) ToOCIRepositoryTypeOutput() OCIRepositoryTypeOutput {
	return i.ToOCIRepositoryTypeOutputWithContext(context.Background())
}

func (i OCIRepositoryTypeArgs) ToOCIRepositoryTypeOutputWithContext(ctx context.Context) OCIRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryTypeOutput)
}

// OCIRepositoryTypeArrayInput is an input type that accepts OCIRepositoryTypeArray and OCIRepositoryTypeArrayOutput values.
// You can construct a concrete instance of `OCIRepositoryTypeArrayInput` via:
//
//	OCIRepositoryTypeArray{ OCIRepositoryTypeArgs{...} }
type OCIRepositoryTypeArrayInput interface {
	pulumi.Input

	ToOCIRepositoryTypeArrayOutput() OCIRepositoryTypeArrayOutput
	ToOCIRepositoryTypeArrayOutputWithContext(context.Context) OCIRepositoryTypeArrayOutput
}

type OCIRepositoryTypeArray []OCIRepositoryTypeInput

func (OCIRepositoryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositoryType)(nil)).Elem()
}

func (i OCIRepositoryTypeArray) ToOCIRepositoryTypeArrayOutput() OCIRepositoryTypeArrayOutput {
	return i.ToOCIRepositoryTypeArrayOutputWithContext(context.Background())
}

func (i OCIRepositoryTypeArray) ToOCIRepositoryTypeArrayOutputWithContext(ctx context.Context) OCIRepositoryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryTypeArrayOutput)
}

// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryTypeOutput struct{ *pulumi.OutputState }

func (OCIRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryType)(nil)).Elem()
}

func (o OCIRepositoryTypeOutput) ToOCIRepositoryTypeOutput() OCIRepositoryTypeOutput {
	return o
}

func (o OCIRepositoryTypeOutput) ToOCIRepositoryTypeOutputWithContext(ctx context.Context) OCIRepositoryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OCIRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OCIRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v OCIRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o OCIRepositoryTypeOutput) Spec() OCIRepositorySpecPtrOutput {
	return o.ApplyT(func(v OCIRepositoryType) *OCIRepositorySpec { return v.Spec }).(OCIRepositorySpecPtrOutput)
}

func (o OCIRepositoryTypeOutput) Status() OCIRepositoryStatusPtrOutput {
	return o.ApplyT(func(v OCIRepositoryType) *OCIRepositoryStatus { return v.Status }).(OCIRepositoryStatusPtrOutput)
}

type OCIRepositoryTypeArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositoryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositoryType)(nil)).Elem()
}

func (o OCIRepositoryTypeArrayOutput) ToOCIRepositoryTypeArrayOutput() OCIRepositoryTypeArrayOutput {
	return o
}

func (o OCIRepositoryTypeArrayOutput) ToOCIRepositoryTypeArrayOutputWithContext(ctx context.Context) OCIRepositoryTypeArrayOutput {
	return o
}

func (o OCIRepositoryTypeArrayOutput) Index(i pulumi.IntInput) OCIRepositoryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OCIRepositoryType {
		return vs[0].([]OCIRepositoryType)[vs[1].(int)]
	}).(OCIRepositoryTypeOutput)
}

// OCIRepositoryList is a list of OCIRepository
type OCIRepositoryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []OCIRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// OCIRepositoryListTypeInput is an input type that accepts OCIRepositoryListTypeArgs and OCIRepositoryListTypeOutput values.
// You can construct a concrete instance of `OCIRepositoryListTypeInput` via:
//
//	OCIRepositoryListTypeArgs{...}
type OCIRepositoryListTypeInput interface {
	pulumi.Input

	ToOCIRepositoryListTypeOutput() OCIRepositoryListTypeOutput
	ToOCIRepositoryListTypeOutputWithContext(context.Context) OCIRepositoryListTypeOutput
}

// OCIRepositoryList is a list of OCIRepository
type OCIRepositoryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OCIRepositoryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (OCIRepositoryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryListType)(nil)).Elem()
}

func (i OCIRepositoryListTypeArgs) ToOCIRepositoryListTypeOutput() OCIRepositoryListTypeOutput {
	return i.ToOCIRepositoryListTypeOutputWithContext(context.Background())
}

func (i OCIRepositoryListTypeArgs) ToOCIRepositoryListTypeOutputWithContext(ctx context.Context) OCIRepositoryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryListTypeOutput)
}

// OCIRepositoryList is a list of OCIRepository
type OCIRepositoryListTypeOutput struct{ *pulumi.OutputState }

func (OCIRepositoryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryListType)(nil)).Elem()
}

func (o OCIRepositoryListTypeOutput) ToOCIRepositoryListTypeOutput() OCIRepositoryListTypeOutput {
	return o
}

func (o OCIRepositoryListTypeOutput) ToOCIRepositoryListTypeOutputWithContext(ctx context.Context) OCIRepositoryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OCIRepositoryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o OCIRepositoryListTypeOutput) Items() OCIRepositoryTypeArrayOutput {
	return o.ApplyT(func(v OCIRepositoryListType) []OCIRepositoryType { return v.Items }).(OCIRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v OCIRepositoryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *OCIRepositorySpecPatch   `pulumi:"spec"`
	Status   *OCIRepositoryStatusPatch `pulumi:"status"`
}

// OCIRepositoryPatchTypeInput is an input type that accepts OCIRepositoryPatchTypeArgs and OCIRepositoryPatchTypeOutput values.
// You can construct a concrete instance of `OCIRepositoryPatchTypeInput` via:
//
//	OCIRepositoryPatchTypeArgs{...}
type OCIRepositoryPatchTypeInput interface {
	pulumi.Input

	ToOCIRepositoryPatchTypeOutput() OCIRepositoryPatchTypeOutput
	ToOCIRepositoryPatchTypeOutputWithContext(context.Context) OCIRepositoryPatchTypeOutput
}

// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput   `pulumi:"metadata"`
	Spec     OCIRepositorySpecPatchPtrInput   `pulumi:"spec"`
	Status   OCIRepositoryStatusPatchPtrInput `pulumi:"status"`
}

func (OCIRepositoryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryPatchType)(nil)).Elem()
}

func (i OCIRepositoryPatchTypeArgs) ToOCIRepositoryPatchTypeOutput() OCIRepositoryPatchTypeOutput {
	return i.ToOCIRepositoryPatchTypeOutputWithContext(context.Background())
}

func (i OCIRepositoryPatchTypeArgs) ToOCIRepositoryPatchTypeOutputWithContext(ctx context.Context) OCIRepositoryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryPatchTypeOutput)
}

// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryPatchTypeOutput struct{ *pulumi.OutputState }

func (OCIRepositoryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryPatchType)(nil)).Elem()
}

func (o OCIRepositoryPatchTypeOutput) ToOCIRepositoryPatchTypeOutput() OCIRepositoryPatchTypeOutput {
	return o
}

func (o OCIRepositoryPatchTypeOutput) ToOCIRepositoryPatchTypeOutputWithContext(ctx context.Context) OCIRepositoryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OCIRepositoryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OCIRepositoryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositoryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o OCIRepositoryPatchTypeOutput) Spec() OCIRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositoryPatchType) *OCIRepositorySpecPatch { return v.Spec }).(OCIRepositorySpecPatchPtrOutput)
}

func (o OCIRepositoryPatchTypeOutput) Status() OCIRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositoryPatchType) *OCIRepositoryStatusPatch { return v.Status }).(OCIRepositoryStatusPatchPtrOutput)
}

// OCIRepositorySpec defines the desired state of OCIRepository
type OCIRepositorySpec struct {
	CertSecretRef *OCIRepositorySpecCertSecretRef `pulumi:"certSecretRef"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure *bool `pulumi:"insecure"`
	// Interval at which the OCIRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval      *string                         `pulumi:"interval"`
	LayerSelector *OCIRepositorySpecLayerSelector `pulumi:"layerSelector"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       *string                          `pulumi:"provider"`
	ProxySecretRef *OCIRepositorySpecProxySecretRef `pulumi:"proxySecretRef"`
	Ref            *OCIRepositorySpecRef            `pulumi:"ref"`
	SecretRef      *OCIRepositorySpecSecretRef      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets. For more information:
	// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// URL is a reference to an OCI artifact repository hosted
	// on a remote container registry.
	Url    *string                  `pulumi:"url"`
	Verify *OCIRepositorySpecVerify `pulumi:"verify"`
}

// OCIRepositorySpecInput is an input type that accepts OCIRepositorySpecArgs and OCIRepositorySpecOutput values.
// You can construct a concrete instance of `OCIRepositorySpecInput` via:
//
//	OCIRepositorySpecArgs{...}
type OCIRepositorySpecInput interface {
	pulumi.Input

	ToOCIRepositorySpecOutput() OCIRepositorySpecOutput
	ToOCIRepositorySpecOutputWithContext(context.Context) OCIRepositorySpecOutput
}

// OCIRepositorySpec defines the desired state of OCIRepository
type OCIRepositorySpecArgs struct {
	CertSecretRef OCIRepositorySpecCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval at which the OCIRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval      pulumi.StringPtrInput                  `pulumi:"interval"`
	LayerSelector OCIRepositorySpecLayerSelectorPtrInput `pulumi:"layerSelector"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       pulumi.StringPtrInput                   `pulumi:"provider"`
	ProxySecretRef OCIRepositorySpecProxySecretRefPtrInput `pulumi:"proxySecretRef"`
	Ref            OCIRepositorySpecRefPtrInput            `pulumi:"ref"`
	SecretRef      OCIRepositorySpecSecretRefPtrInput      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets. For more information:
	// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// URL is a reference to an OCI artifact repository hosted
	// on a remote container registry.
	Url    pulumi.StringPtrInput           `pulumi:"url"`
	Verify OCIRepositorySpecVerifyPtrInput `pulumi:"verify"`
}

func (OCIRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpec)(nil)).Elem()
}

func (i OCIRepositorySpecArgs) ToOCIRepositorySpecOutput() OCIRepositorySpecOutput {
	return i.ToOCIRepositorySpecOutputWithContext(context.Background())
}

func (i OCIRepositorySpecArgs) ToOCIRepositorySpecOutputWithContext(ctx context.Context) OCIRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecOutput)
}

func (i OCIRepositorySpecArgs) ToOCIRepositorySpecPtrOutput() OCIRepositorySpecPtrOutput {
	return i.ToOCIRepositorySpecPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecArgs) ToOCIRepositorySpecPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecOutput).ToOCIRepositorySpecPtrOutputWithContext(ctx)
}

// OCIRepositorySpecPtrInput is an input type that accepts OCIRepositorySpecArgs, OCIRepositorySpecPtr and OCIRepositorySpecPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecPtrInput` via:
//
//	        OCIRepositorySpecArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecPtrOutput() OCIRepositorySpecPtrOutput
	ToOCIRepositorySpecPtrOutputWithContext(context.Context) OCIRepositorySpecPtrOutput
}

type ocirepositorySpecPtrType OCIRepositorySpecArgs

func OCIRepositorySpecPtr(v *OCIRepositorySpecArgs) OCIRepositorySpecPtrInput {
	return (*ocirepositorySpecPtrType)(v)
}

func (*ocirepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpec)(nil)).Elem()
}

func (i *ocirepositorySpecPtrType) ToOCIRepositorySpecPtrOutput() OCIRepositorySpecPtrOutput {
	return i.ToOCIRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecPtrType) ToOCIRepositorySpecPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecPtrOutput)
}

// OCIRepositorySpec defines the desired state of OCIRepository
type OCIRepositorySpecOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpec)(nil)).Elem()
}

func (o OCIRepositorySpecOutput) ToOCIRepositorySpecOutput() OCIRepositorySpecOutput {
	return o
}

func (o OCIRepositorySpecOutput) ToOCIRepositorySpecOutputWithContext(ctx context.Context) OCIRepositorySpecOutput {
	return o
}

func (o OCIRepositorySpecOutput) ToOCIRepositorySpecPtrOutput() OCIRepositorySpecPtrOutput {
	return o.ToOCIRepositorySpecPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecOutput) ToOCIRepositorySpecPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpec) *OCIRepositorySpec {
		return &v
	}).(OCIRepositorySpecPtrOutput)
}

func (o OCIRepositorySpecOutput) CertSecretRef() OCIRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *OCIRepositorySpecCertSecretRef { return v.CertSecretRef }).(OCIRepositorySpecCertSecretRefPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o OCIRepositorySpecOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o OCIRepositorySpecOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval at which the OCIRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o OCIRepositorySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecOutput) LayerSelector() OCIRepositorySpecLayerSelectorPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *OCIRepositorySpecLayerSelector { return v.LayerSelector }).(OCIRepositorySpecLayerSelectorPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o OCIRepositorySpecOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecOutput) ProxySecretRef() OCIRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *OCIRepositorySpecProxySecretRef { return v.ProxySecretRef }).(OCIRepositorySpecProxySecretRefPtrOutput)
}

func (o OCIRepositorySpecOutput) Ref() OCIRepositorySpecRefPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *OCIRepositorySpecRef { return v.Ref }).(OCIRepositorySpecRefPtrOutput)
}

func (o OCIRepositorySpecOutput) SecretRef() OCIRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *OCIRepositorySpecSecretRef { return v.SecretRef }).(OCIRepositorySpecSecretRefPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets. For more information:
// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
func (o OCIRepositorySpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o OCIRepositorySpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
func (o OCIRepositorySpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// URL is a reference to an OCI artifact repository hosted
// on a remote container registry.
func (o OCIRepositorySpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecOutput) Verify() OCIRepositorySpecVerifyPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpec) *OCIRepositorySpecVerify { return v.Verify }).(OCIRepositorySpecVerifyPtrOutput)
}

type OCIRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpec)(nil)).Elem()
}

func (o OCIRepositorySpecPtrOutput) ToOCIRepositorySpecPtrOutput() OCIRepositorySpecPtrOutput {
	return o
}

func (o OCIRepositorySpecPtrOutput) ToOCIRepositorySpecPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPtrOutput {
	return o
}

func (o OCIRepositorySpecPtrOutput) Elem() OCIRepositorySpecOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) OCIRepositorySpec {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpec
		return ret
	}).(OCIRepositorySpecOutput)
}

func (o OCIRepositorySpecPtrOutput) CertSecretRef() OCIRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *OCIRepositorySpecCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(OCIRepositorySpecCertSecretRefPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o OCIRepositorySpecPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o OCIRepositorySpecPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the OCIRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o OCIRepositorySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPtrOutput) LayerSelector() OCIRepositorySpecLayerSelectorPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *OCIRepositorySpecLayerSelector {
		if v == nil {
			return nil
		}
		return v.LayerSelector
	}).(OCIRepositorySpecLayerSelectorPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o OCIRepositorySpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPtrOutput) ProxySecretRef() OCIRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *OCIRepositorySpecProxySecretRef {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(OCIRepositorySpecProxySecretRefPtrOutput)
}

func (o OCIRepositorySpecPtrOutput) Ref() OCIRepositorySpecRefPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *OCIRepositorySpecRef {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(OCIRepositorySpecRefPtrOutput)
}

func (o OCIRepositorySpecPtrOutput) SecretRef() OCIRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *OCIRepositorySpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(OCIRepositorySpecSecretRefPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets. For more information:
// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
func (o OCIRepositorySpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o OCIRepositorySpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
func (o OCIRepositorySpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// URL is a reference to an OCI artifact repository hosted
// on a remote container registry.
func (o OCIRepositorySpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPtrOutput) Verify() OCIRepositorySpecVerifyPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpec) *OCIRepositorySpecVerify {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(OCIRepositorySpecVerifyPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
type OCIRepositorySpecCertSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecCertSecretRefInput is an input type that accepts OCIRepositorySpecCertSecretRefArgs and OCIRepositorySpecCertSecretRefOutput values.
// You can construct a concrete instance of `OCIRepositorySpecCertSecretRefInput` via:
//
//	OCIRepositorySpecCertSecretRefArgs{...}
type OCIRepositorySpecCertSecretRefInput interface {
	pulumi.Input

	ToOCIRepositorySpecCertSecretRefOutput() OCIRepositorySpecCertSecretRefOutput
	ToOCIRepositorySpecCertSecretRefOutputWithContext(context.Context) OCIRepositorySpecCertSecretRefOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
type OCIRepositorySpecCertSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecCertSecretRef)(nil)).Elem()
}

func (i OCIRepositorySpecCertSecretRefArgs) ToOCIRepositorySpecCertSecretRefOutput() OCIRepositorySpecCertSecretRefOutput {
	return i.ToOCIRepositorySpecCertSecretRefOutputWithContext(context.Background())
}

func (i OCIRepositorySpecCertSecretRefArgs) ToOCIRepositorySpecCertSecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecCertSecretRefOutput)
}

func (i OCIRepositorySpecCertSecretRefArgs) ToOCIRepositorySpecCertSecretRefPtrOutput() OCIRepositorySpecCertSecretRefPtrOutput {
	return i.ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecCertSecretRefArgs) ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecCertSecretRefOutput).ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(ctx)
}

// OCIRepositorySpecCertSecretRefPtrInput is an input type that accepts OCIRepositorySpecCertSecretRefArgs, OCIRepositorySpecCertSecretRefPtr and OCIRepositorySpecCertSecretRefPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecCertSecretRefPtrInput` via:
//
//	        OCIRepositorySpecCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecCertSecretRefPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecCertSecretRefPtrOutput() OCIRepositorySpecCertSecretRefPtrOutput
	ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(context.Context) OCIRepositorySpecCertSecretRefPtrOutput
}

type ocirepositorySpecCertSecretRefPtrType OCIRepositorySpecCertSecretRefArgs

func OCIRepositorySpecCertSecretRefPtr(v *OCIRepositorySpecCertSecretRefArgs) OCIRepositorySpecCertSecretRefPtrInput {
	return (*ocirepositorySpecCertSecretRefPtrType)(v)
}

func (*ocirepositorySpecCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecCertSecretRef)(nil)).Elem()
}

func (i *ocirepositorySpecCertSecretRefPtrType) ToOCIRepositorySpecCertSecretRefPtrOutput() OCIRepositorySpecCertSecretRefPtrOutput {
	return i.ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecCertSecretRefPtrType) ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecCertSecretRefPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
type OCIRepositorySpecCertSecretRefOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecCertSecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecCertSecretRefOutput) ToOCIRepositorySpecCertSecretRefOutput() OCIRepositorySpecCertSecretRefOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefOutput) ToOCIRepositorySpecCertSecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefOutput) ToOCIRepositorySpecCertSecretRefPtrOutput() OCIRepositorySpecCertSecretRefPtrOutput {
	return o.ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecCertSecretRefOutput) ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecCertSecretRef) *OCIRepositorySpecCertSecretRef {
		return &v
	}).(OCIRepositorySpecCertSecretRefPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecCertSecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecCertSecretRefPtrOutput) ToOCIRepositorySpecCertSecretRefPtrOutput() OCIRepositorySpecCertSecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefPtrOutput) ToOCIRepositorySpecCertSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefPtrOutput) Elem() OCIRepositorySpecCertSecretRefOutput {
	return o.ApplyT(func(v *OCIRepositorySpecCertSecretRef) OCIRepositorySpecCertSecretRef {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecCertSecretRef
		return ret
	}).(OCIRepositorySpecCertSecretRefOutput)
}

// Name of the referent.
func (o OCIRepositorySpecCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
type OCIRepositorySpecCertSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecCertSecretRefPatchInput is an input type that accepts OCIRepositorySpecCertSecretRefPatchArgs and OCIRepositorySpecCertSecretRefPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecCertSecretRefPatchInput` via:
//
//	OCIRepositorySpecCertSecretRefPatchArgs{...}
type OCIRepositorySpecCertSecretRefPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecCertSecretRefPatchOutput() OCIRepositorySpecCertSecretRefPatchOutput
	ToOCIRepositorySpecCertSecretRefPatchOutputWithContext(context.Context) OCIRepositorySpecCertSecretRefPatchOutput
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
type OCIRepositorySpecCertSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (i OCIRepositorySpecCertSecretRefPatchArgs) ToOCIRepositorySpecCertSecretRefPatchOutput() OCIRepositorySpecCertSecretRefPatchOutput {
	return i.ToOCIRepositorySpecCertSecretRefPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecCertSecretRefPatchArgs) ToOCIRepositorySpecCertSecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecCertSecretRefPatchOutput)
}

func (i OCIRepositorySpecCertSecretRefPatchArgs) ToOCIRepositorySpecCertSecretRefPatchPtrOutput() OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecCertSecretRefPatchArgs) ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecCertSecretRefPatchOutput).ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecCertSecretRefPatchPtrInput is an input type that accepts OCIRepositorySpecCertSecretRefPatchArgs, OCIRepositorySpecCertSecretRefPatchPtr and OCIRepositorySpecCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecCertSecretRefPatchPtrInput` via:
//
//	        OCIRepositorySpecCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecCertSecretRefPatchPtrOutput() OCIRepositorySpecCertSecretRefPatchPtrOutput
	ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Context) OCIRepositorySpecCertSecretRefPatchPtrOutput
}

type ocirepositorySpecCertSecretRefPatchPtrType OCIRepositorySpecCertSecretRefPatchArgs

func OCIRepositorySpecCertSecretRefPatchPtr(v *OCIRepositorySpecCertSecretRefPatchArgs) OCIRepositorySpecCertSecretRefPatchPtrInput {
	return (*ocirepositorySpecCertSecretRefPatchPtrType)(v)
}

func (*ocirepositorySpecCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (i *ocirepositorySpecCertSecretRefPatchPtrType) ToOCIRepositorySpecCertSecretRefPatchPtrOutput() OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecCertSecretRefPatchPtrType) ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecCertSecretRefPatchPtrOutput)
}

// CertSecretRef can be given the name of a Secret containing
// either or both of
//
//   - a PEM-encoded client certificate (`tls.crt`) and private
//     key (`tls.key`);
//   - a PEM-encoded CA certificate (`ca.crt`)
//
// and whichever are supplied, will be used for connecting to the
// registry. The client cert and key are useful if you are
// authenticating with a certificate; the CA cert is useful if
// you are using a self-signed server certificate. The Secret must
// be of type `Opaque` or `kubernetes.io/tls`.
type OCIRepositorySpecCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecCertSecretRefPatchOutput) ToOCIRepositorySpecCertSecretRefPatchOutput() OCIRepositorySpecCertSecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefPatchOutput) ToOCIRepositorySpecCertSecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefPatchOutput) ToOCIRepositorySpecCertSecretRefPatchPtrOutput() OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecCertSecretRefPatchOutput) ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecCertSecretRefPatch) *OCIRepositorySpecCertSecretRefPatch {
		return &v
	}).(OCIRepositorySpecCertSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecCertSecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecCertSecretRefPatchPtrOutput) ToOCIRepositorySpecCertSecretRefPatchPtrOutput() OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefPatchPtrOutput) ToOCIRepositorySpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecCertSecretRefPatchPtrOutput) Elem() OCIRepositorySpecCertSecretRefPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecCertSecretRefPatch) OCIRepositorySpecCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecCertSecretRefPatch
		return ret
	}).(OCIRepositorySpecCertSecretRefPatchOutput)
}

// Name of the referent.
func (o OCIRepositorySpecCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// LayerSelector specifies which layer should be extracted from the OCI artifact.
// When not specified, the first layer found in the artifact is selected.
type OCIRepositorySpecLayerSelector struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType *string `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation *string `pulumi:"operation"`
}

// OCIRepositorySpecLayerSelectorInput is an input type that accepts OCIRepositorySpecLayerSelectorArgs and OCIRepositorySpecLayerSelectorOutput values.
// You can construct a concrete instance of `OCIRepositorySpecLayerSelectorInput` via:
//
//	OCIRepositorySpecLayerSelectorArgs{...}
type OCIRepositorySpecLayerSelectorInput interface {
	pulumi.Input

	ToOCIRepositorySpecLayerSelectorOutput() OCIRepositorySpecLayerSelectorOutput
	ToOCIRepositorySpecLayerSelectorOutputWithContext(context.Context) OCIRepositorySpecLayerSelectorOutput
}

// LayerSelector specifies which layer should be extracted from the OCI artifact.
// When not specified, the first layer found in the artifact is selected.
type OCIRepositorySpecLayerSelectorArgs struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
}

func (OCIRepositorySpecLayerSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecLayerSelector)(nil)).Elem()
}

func (i OCIRepositorySpecLayerSelectorArgs) ToOCIRepositorySpecLayerSelectorOutput() OCIRepositorySpecLayerSelectorOutput {
	return i.ToOCIRepositorySpecLayerSelectorOutputWithContext(context.Background())
}

func (i OCIRepositorySpecLayerSelectorArgs) ToOCIRepositorySpecLayerSelectorOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecLayerSelectorOutput)
}

func (i OCIRepositorySpecLayerSelectorArgs) ToOCIRepositorySpecLayerSelectorPtrOutput() OCIRepositorySpecLayerSelectorPtrOutput {
	return i.ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecLayerSelectorArgs) ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecLayerSelectorOutput).ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(ctx)
}

// OCIRepositorySpecLayerSelectorPtrInput is an input type that accepts OCIRepositorySpecLayerSelectorArgs, OCIRepositorySpecLayerSelectorPtr and OCIRepositorySpecLayerSelectorPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecLayerSelectorPtrInput` via:
//
//	        OCIRepositorySpecLayerSelectorArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecLayerSelectorPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecLayerSelectorPtrOutput() OCIRepositorySpecLayerSelectorPtrOutput
	ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(context.Context) OCIRepositorySpecLayerSelectorPtrOutput
}

type ocirepositorySpecLayerSelectorPtrType OCIRepositorySpecLayerSelectorArgs

func OCIRepositorySpecLayerSelectorPtr(v *OCIRepositorySpecLayerSelectorArgs) OCIRepositorySpecLayerSelectorPtrInput {
	return (*ocirepositorySpecLayerSelectorPtrType)(v)
}

func (*ocirepositorySpecLayerSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecLayerSelector)(nil)).Elem()
}

func (i *ocirepositorySpecLayerSelectorPtrType) ToOCIRepositorySpecLayerSelectorPtrOutput() OCIRepositorySpecLayerSelectorPtrOutput {
	return i.ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecLayerSelectorPtrType) ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecLayerSelectorPtrOutput)
}

// LayerSelector specifies which layer should be extracted from the OCI artifact.
// When not specified, the first layer found in the artifact is selected.
type OCIRepositorySpecLayerSelectorOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecLayerSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecLayerSelector)(nil)).Elem()
}

func (o OCIRepositorySpecLayerSelectorOutput) ToOCIRepositorySpecLayerSelectorOutput() OCIRepositorySpecLayerSelectorOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorOutput) ToOCIRepositorySpecLayerSelectorOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorOutput) ToOCIRepositorySpecLayerSelectorPtrOutput() OCIRepositorySpecLayerSelectorPtrOutput {
	return o.ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecLayerSelectorOutput) ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecLayerSelector) *OCIRepositorySpecLayerSelector {
		return &v
	}).(OCIRepositorySpecLayerSelectorPtrOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositorySpecLayerSelectorOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecLayerSelector) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositorySpecLayerSelectorOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecLayerSelector) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecLayerSelectorPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecLayerSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecLayerSelector)(nil)).Elem()
}

func (o OCIRepositorySpecLayerSelectorPtrOutput) ToOCIRepositorySpecLayerSelectorPtrOutput() OCIRepositorySpecLayerSelectorPtrOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorPtrOutput) ToOCIRepositorySpecLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPtrOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorPtrOutput) Elem() OCIRepositorySpecLayerSelectorOutput {
	return o.ApplyT(func(v *OCIRepositorySpecLayerSelector) OCIRepositorySpecLayerSelector {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecLayerSelector
		return ret
	}).(OCIRepositorySpecLayerSelectorOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositorySpecLayerSelectorPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecLayerSelector) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositorySpecLayerSelectorPtrOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecLayerSelector) *string {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(pulumi.StringPtrOutput)
}

// LayerSelector specifies which layer should be extracted from the OCI artifact.
// When not specified, the first layer found in the artifact is selected.
type OCIRepositorySpecLayerSelectorPatch struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType *string `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation *string `pulumi:"operation"`
}

// OCIRepositorySpecLayerSelectorPatchInput is an input type that accepts OCIRepositorySpecLayerSelectorPatchArgs and OCIRepositorySpecLayerSelectorPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecLayerSelectorPatchInput` via:
//
//	OCIRepositorySpecLayerSelectorPatchArgs{...}
type OCIRepositorySpecLayerSelectorPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecLayerSelectorPatchOutput() OCIRepositorySpecLayerSelectorPatchOutput
	ToOCIRepositorySpecLayerSelectorPatchOutputWithContext(context.Context) OCIRepositorySpecLayerSelectorPatchOutput
}

// LayerSelector specifies which layer should be extracted from the OCI artifact.
// When not specified, the first layer found in the artifact is selected.
type OCIRepositorySpecLayerSelectorPatchArgs struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
}

func (OCIRepositorySpecLayerSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecLayerSelectorPatch)(nil)).Elem()
}

func (i OCIRepositorySpecLayerSelectorPatchArgs) ToOCIRepositorySpecLayerSelectorPatchOutput() OCIRepositorySpecLayerSelectorPatchOutput {
	return i.ToOCIRepositorySpecLayerSelectorPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecLayerSelectorPatchArgs) ToOCIRepositorySpecLayerSelectorPatchOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecLayerSelectorPatchOutput)
}

func (i OCIRepositorySpecLayerSelectorPatchArgs) ToOCIRepositorySpecLayerSelectorPatchPtrOutput() OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return i.ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecLayerSelectorPatchArgs) ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecLayerSelectorPatchOutput).ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecLayerSelectorPatchPtrInput is an input type that accepts OCIRepositorySpecLayerSelectorPatchArgs, OCIRepositorySpecLayerSelectorPatchPtr and OCIRepositorySpecLayerSelectorPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecLayerSelectorPatchPtrInput` via:
//
//	        OCIRepositorySpecLayerSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecLayerSelectorPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecLayerSelectorPatchPtrOutput() OCIRepositorySpecLayerSelectorPatchPtrOutput
	ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(context.Context) OCIRepositorySpecLayerSelectorPatchPtrOutput
}

type ocirepositorySpecLayerSelectorPatchPtrType OCIRepositorySpecLayerSelectorPatchArgs

func OCIRepositorySpecLayerSelectorPatchPtr(v *OCIRepositorySpecLayerSelectorPatchArgs) OCIRepositorySpecLayerSelectorPatchPtrInput {
	return (*ocirepositorySpecLayerSelectorPatchPtrType)(v)
}

func (*ocirepositorySpecLayerSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecLayerSelectorPatch)(nil)).Elem()
}

func (i *ocirepositorySpecLayerSelectorPatchPtrType) ToOCIRepositorySpecLayerSelectorPatchPtrOutput() OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return i.ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecLayerSelectorPatchPtrType) ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecLayerSelectorPatchPtrOutput)
}

// LayerSelector specifies which layer should be extracted from the OCI artifact.
// When not specified, the first layer found in the artifact is selected.
type OCIRepositorySpecLayerSelectorPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecLayerSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecLayerSelectorPatch)(nil)).Elem()
}

func (o OCIRepositorySpecLayerSelectorPatchOutput) ToOCIRepositorySpecLayerSelectorPatchOutput() OCIRepositorySpecLayerSelectorPatchOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorPatchOutput) ToOCIRepositorySpecLayerSelectorPatchOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPatchOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorPatchOutput) ToOCIRepositorySpecLayerSelectorPatchPtrOutput() OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return o.ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecLayerSelectorPatchOutput) ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecLayerSelectorPatch) *OCIRepositorySpecLayerSelectorPatch {
		return &v
	}).(OCIRepositorySpecLayerSelectorPatchPtrOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositorySpecLayerSelectorPatchOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecLayerSelectorPatch) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositorySpecLayerSelectorPatchOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecLayerSelectorPatch) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecLayerSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecLayerSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecLayerSelectorPatch)(nil)).Elem()
}

func (o OCIRepositorySpecLayerSelectorPatchPtrOutput) ToOCIRepositorySpecLayerSelectorPatchPtrOutput() OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorPatchPtrOutput) ToOCIRepositorySpecLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecLayerSelectorPatchPtrOutput) Elem() OCIRepositorySpecLayerSelectorPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecLayerSelectorPatch) OCIRepositorySpecLayerSelectorPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecLayerSelectorPatch
		return ret
	}).(OCIRepositorySpecLayerSelectorPatchOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositorySpecLayerSelectorPatchPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecLayerSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositorySpecLayerSelectorPatchPtrOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecLayerSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(pulumi.StringPtrOutput)
}

// OCIRepositorySpec defines the desired state of OCIRepository
type OCIRepositorySpecPatch struct {
	CertSecretRef *OCIRepositorySpecCertSecretRefPatch `pulumi:"certSecretRef"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure *bool `pulumi:"insecure"`
	// Interval at which the OCIRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval      *string                              `pulumi:"interval"`
	LayerSelector *OCIRepositorySpecLayerSelectorPatch `pulumi:"layerSelector"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       *string                               `pulumi:"provider"`
	ProxySecretRef *OCIRepositorySpecProxySecretRefPatch `pulumi:"proxySecretRef"`
	Ref            *OCIRepositorySpecRefPatch            `pulumi:"ref"`
	SecretRef      *OCIRepositorySpecSecretRefPatch      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets. For more information:
	// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// URL is a reference to an OCI artifact repository hosted
	// on a remote container registry.
	Url    *string                       `pulumi:"url"`
	Verify *OCIRepositorySpecVerifyPatch `pulumi:"verify"`
}

// OCIRepositorySpecPatchInput is an input type that accepts OCIRepositorySpecPatchArgs and OCIRepositorySpecPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecPatchInput` via:
//
//	OCIRepositorySpecPatchArgs{...}
type OCIRepositorySpecPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecPatchOutput() OCIRepositorySpecPatchOutput
	ToOCIRepositorySpecPatchOutputWithContext(context.Context) OCIRepositorySpecPatchOutput
}

// OCIRepositorySpec defines the desired state of OCIRepository
type OCIRepositorySpecPatchArgs struct {
	CertSecretRef OCIRepositorySpecCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS HTTP container registry.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Interval at which the OCIRepository URL is checked for updates.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval      pulumi.StringPtrInput                       `pulumi:"interval"`
	LayerSelector OCIRepositorySpecLayerSelectorPatchPtrInput `pulumi:"layerSelector"`
	// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
	// When not specified, defaults to 'generic'.
	Provider       pulumi.StringPtrInput                        `pulumi:"provider"`
	ProxySecretRef OCIRepositorySpecProxySecretRefPatchPtrInput `pulumi:"proxySecretRef"`
	Ref            OCIRepositorySpecRefPatchPtrInput            `pulumi:"ref"`
	SecretRef      OCIRepositorySpecSecretRefPatchPtrInput      `pulumi:"secretRef"`
	// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
	// the image pull if the service account has attached pull secrets. For more information:
	// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// URL is a reference to an OCI artifact repository hosted
	// on a remote container registry.
	Url    pulumi.StringPtrInput                `pulumi:"url"`
	Verify OCIRepositorySpecVerifyPatchPtrInput `pulumi:"verify"`
}

func (OCIRepositorySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecPatch)(nil)).Elem()
}

func (i OCIRepositorySpecPatchArgs) ToOCIRepositorySpecPatchOutput() OCIRepositorySpecPatchOutput {
	return i.ToOCIRepositorySpecPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecPatchArgs) ToOCIRepositorySpecPatchOutputWithContext(ctx context.Context) OCIRepositorySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecPatchOutput)
}

func (i OCIRepositorySpecPatchArgs) ToOCIRepositorySpecPatchPtrOutput() OCIRepositorySpecPatchPtrOutput {
	return i.ToOCIRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecPatchArgs) ToOCIRepositorySpecPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecPatchOutput).ToOCIRepositorySpecPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecPatchPtrInput is an input type that accepts OCIRepositorySpecPatchArgs, OCIRepositorySpecPatchPtr and OCIRepositorySpecPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecPatchPtrInput` via:
//
//	        OCIRepositorySpecPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecPatchPtrOutput() OCIRepositorySpecPatchPtrOutput
	ToOCIRepositorySpecPatchPtrOutputWithContext(context.Context) OCIRepositorySpecPatchPtrOutput
}

type ocirepositorySpecPatchPtrType OCIRepositorySpecPatchArgs

func OCIRepositorySpecPatchPtr(v *OCIRepositorySpecPatchArgs) OCIRepositorySpecPatchPtrInput {
	return (*ocirepositorySpecPatchPtrType)(v)
}

func (*ocirepositorySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecPatch)(nil)).Elem()
}

func (i *ocirepositorySpecPatchPtrType) ToOCIRepositorySpecPatchPtrOutput() OCIRepositorySpecPatchPtrOutput {
	return i.ToOCIRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecPatchPtrType) ToOCIRepositorySpecPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecPatchPtrOutput)
}

// OCIRepositorySpec defines the desired state of OCIRepository
type OCIRepositorySpecPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecPatch)(nil)).Elem()
}

func (o OCIRepositorySpecPatchOutput) ToOCIRepositorySpecPatchOutput() OCIRepositorySpecPatchOutput {
	return o
}

func (o OCIRepositorySpecPatchOutput) ToOCIRepositorySpecPatchOutputWithContext(ctx context.Context) OCIRepositorySpecPatchOutput {
	return o
}

func (o OCIRepositorySpecPatchOutput) ToOCIRepositorySpecPatchPtrOutput() OCIRepositorySpecPatchPtrOutput {
	return o.ToOCIRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecPatchOutput) ToOCIRepositorySpecPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecPatch) *OCIRepositorySpecPatch {
		return &v
	}).(OCIRepositorySpecPatchPtrOutput)
}

func (o OCIRepositorySpecPatchOutput) CertSecretRef() OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *OCIRepositorySpecCertSecretRefPatch { return v.CertSecretRef }).(OCIRepositorySpecCertSecretRefPatchPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o OCIRepositorySpecPatchOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o OCIRepositorySpecPatchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Interval at which the OCIRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o OCIRepositorySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPatchOutput) LayerSelector() OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *OCIRepositorySpecLayerSelectorPatch { return v.LayerSelector }).(OCIRepositorySpecLayerSelectorPatchPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o OCIRepositorySpecPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPatchOutput) ProxySecretRef() OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *OCIRepositorySpecProxySecretRefPatch { return v.ProxySecretRef }).(OCIRepositorySpecProxySecretRefPatchPtrOutput)
}

func (o OCIRepositorySpecPatchOutput) Ref() OCIRepositorySpecRefPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *OCIRepositorySpecRefPatch { return v.Ref }).(OCIRepositorySpecRefPatchPtrOutput)
}

func (o OCIRepositorySpecPatchOutput) SecretRef() OCIRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *OCIRepositorySpecSecretRefPatch { return v.SecretRef }).(OCIRepositorySpecSecretRefPatchPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets. For more information:
// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
func (o OCIRepositorySpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o OCIRepositorySpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
func (o OCIRepositorySpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// URL is a reference to an OCI artifact repository hosted
// on a remote container registry.
func (o OCIRepositorySpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPatchOutput) Verify() OCIRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecPatch) *OCIRepositorySpecVerifyPatch { return v.Verify }).(OCIRepositorySpecVerifyPatchPtrOutput)
}

type OCIRepositorySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecPatch)(nil)).Elem()
}

func (o OCIRepositorySpecPatchPtrOutput) ToOCIRepositorySpecPatchPtrOutput() OCIRepositorySpecPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecPatchPtrOutput) ToOCIRepositorySpecPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecPatchPtrOutput) Elem() OCIRepositorySpecPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) OCIRepositorySpecPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecPatch
		return ret
	}).(OCIRepositorySpecPatchOutput)
}

func (o OCIRepositorySpecPatchPtrOutput) CertSecretRef() OCIRepositorySpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *OCIRepositorySpecCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(OCIRepositorySpecCertSecretRefPatchPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o OCIRepositorySpecPatchPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS HTTP container registry.
func (o OCIRepositorySpecPatchPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Interval at which the OCIRepository URL is checked for updates.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o OCIRepositorySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPatchPtrOutput) LayerSelector() OCIRepositorySpecLayerSelectorPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *OCIRepositorySpecLayerSelectorPatch {
		if v == nil {
			return nil
		}
		return v.LayerSelector
	}).(OCIRepositorySpecLayerSelectorPatchPtrOutput)
}

// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
func (o OCIRepositorySpecPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPatchPtrOutput) ProxySecretRef() OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *OCIRepositorySpecProxySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.ProxySecretRef
	}).(OCIRepositorySpecProxySecretRefPatchPtrOutput)
}

func (o OCIRepositorySpecPatchPtrOutput) Ref() OCIRepositorySpecRefPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *OCIRepositorySpecRefPatch {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(OCIRepositorySpecRefPatchPtrOutput)
}

func (o OCIRepositorySpecPatchPtrOutput) SecretRef() OCIRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *OCIRepositorySpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(OCIRepositorySpecSecretRefPatchPtrOutput)
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
// the image pull if the service account has attached pull secrets. For more information:
// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
func (o OCIRepositorySpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o OCIRepositorySpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout for remote OCI Repository operations like pulling, defaults to 60s.
func (o OCIRepositorySpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// URL is a reference to an OCI artifact repository hosted
// on a remote container registry.
func (o OCIRepositorySpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecPatchPtrOutput) Verify() OCIRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecPatch) *OCIRepositorySpecVerifyPatch {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(OCIRepositorySpecVerifyPatchPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type OCIRepositorySpecProxySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecProxySecretRefInput is an input type that accepts OCIRepositorySpecProxySecretRefArgs and OCIRepositorySpecProxySecretRefOutput values.
// You can construct a concrete instance of `OCIRepositorySpecProxySecretRefInput` via:
//
//	OCIRepositorySpecProxySecretRefArgs{...}
type OCIRepositorySpecProxySecretRefInput interface {
	pulumi.Input

	ToOCIRepositorySpecProxySecretRefOutput() OCIRepositorySpecProxySecretRefOutput
	ToOCIRepositorySpecProxySecretRefOutputWithContext(context.Context) OCIRepositorySpecProxySecretRefOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type OCIRepositorySpecProxySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecProxySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecProxySecretRef)(nil)).Elem()
}

func (i OCIRepositorySpecProxySecretRefArgs) ToOCIRepositorySpecProxySecretRefOutput() OCIRepositorySpecProxySecretRefOutput {
	return i.ToOCIRepositorySpecProxySecretRefOutputWithContext(context.Background())
}

func (i OCIRepositorySpecProxySecretRefArgs) ToOCIRepositorySpecProxySecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecProxySecretRefOutput)
}

func (i OCIRepositorySpecProxySecretRefArgs) ToOCIRepositorySpecProxySecretRefPtrOutput() OCIRepositorySpecProxySecretRefPtrOutput {
	return i.ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecProxySecretRefArgs) ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecProxySecretRefOutput).ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(ctx)
}

// OCIRepositorySpecProxySecretRefPtrInput is an input type that accepts OCIRepositorySpecProxySecretRefArgs, OCIRepositorySpecProxySecretRefPtr and OCIRepositorySpecProxySecretRefPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecProxySecretRefPtrInput` via:
//
//	        OCIRepositorySpecProxySecretRefArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecProxySecretRefPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecProxySecretRefPtrOutput() OCIRepositorySpecProxySecretRefPtrOutput
	ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(context.Context) OCIRepositorySpecProxySecretRefPtrOutput
}

type ocirepositorySpecProxySecretRefPtrType OCIRepositorySpecProxySecretRefArgs

func OCIRepositorySpecProxySecretRefPtr(v *OCIRepositorySpecProxySecretRefArgs) OCIRepositorySpecProxySecretRefPtrInput {
	return (*ocirepositorySpecProxySecretRefPtrType)(v)
}

func (*ocirepositorySpecProxySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecProxySecretRef)(nil)).Elem()
}

func (i *ocirepositorySpecProxySecretRefPtrType) ToOCIRepositorySpecProxySecretRefPtrOutput() OCIRepositorySpecProxySecretRefPtrOutput {
	return i.ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecProxySecretRefPtrType) ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecProxySecretRefPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type OCIRepositorySpecProxySecretRefOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecProxySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecProxySecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecProxySecretRefOutput) ToOCIRepositorySpecProxySecretRefOutput() OCIRepositorySpecProxySecretRefOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefOutput) ToOCIRepositorySpecProxySecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefOutput) ToOCIRepositorySpecProxySecretRefPtrOutput() OCIRepositorySpecProxySecretRefPtrOutput {
	return o.ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecProxySecretRefOutput) ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecProxySecretRef) *OCIRepositorySpecProxySecretRef {
		return &v
	}).(OCIRepositorySpecProxySecretRefPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecProxySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecProxySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecProxySecretRefPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecProxySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecProxySecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecProxySecretRefPtrOutput) ToOCIRepositorySpecProxySecretRefPtrOutput() OCIRepositorySpecProxySecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefPtrOutput) ToOCIRepositorySpecProxySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefPtrOutput) Elem() OCIRepositorySpecProxySecretRefOutput {
	return o.ApplyT(func(v *OCIRepositorySpecProxySecretRef) OCIRepositorySpecProxySecretRef {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecProxySecretRef
		return ret
	}).(OCIRepositorySpecProxySecretRefOutput)
}

// Name of the referent.
func (o OCIRepositorySpecProxySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecProxySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type OCIRepositorySpecProxySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecProxySecretRefPatchInput is an input type that accepts OCIRepositorySpecProxySecretRefPatchArgs and OCIRepositorySpecProxySecretRefPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecProxySecretRefPatchInput` via:
//
//	OCIRepositorySpecProxySecretRefPatchArgs{...}
type OCIRepositorySpecProxySecretRefPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecProxySecretRefPatchOutput() OCIRepositorySpecProxySecretRefPatchOutput
	ToOCIRepositorySpecProxySecretRefPatchOutputWithContext(context.Context) OCIRepositorySpecProxySecretRefPatchOutput
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type OCIRepositorySpecProxySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecProxySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (i OCIRepositorySpecProxySecretRefPatchArgs) ToOCIRepositorySpecProxySecretRefPatchOutput() OCIRepositorySpecProxySecretRefPatchOutput {
	return i.ToOCIRepositorySpecProxySecretRefPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecProxySecretRefPatchArgs) ToOCIRepositorySpecProxySecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecProxySecretRefPatchOutput)
}

func (i OCIRepositorySpecProxySecretRefPatchArgs) ToOCIRepositorySpecProxySecretRefPatchPtrOutput() OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecProxySecretRefPatchArgs) ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecProxySecretRefPatchOutput).ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecProxySecretRefPatchPtrInput is an input type that accepts OCIRepositorySpecProxySecretRefPatchArgs, OCIRepositorySpecProxySecretRefPatchPtr and OCIRepositorySpecProxySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecProxySecretRefPatchPtrInput` via:
//
//	        OCIRepositorySpecProxySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecProxySecretRefPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecProxySecretRefPatchPtrOutput() OCIRepositorySpecProxySecretRefPatchPtrOutput
	ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Context) OCIRepositorySpecProxySecretRefPatchPtrOutput
}

type ocirepositorySpecProxySecretRefPatchPtrType OCIRepositorySpecProxySecretRefPatchArgs

func OCIRepositorySpecProxySecretRefPatchPtr(v *OCIRepositorySpecProxySecretRefPatchArgs) OCIRepositorySpecProxySecretRefPatchPtrInput {
	return (*ocirepositorySpecProxySecretRefPatchPtrType)(v)
}

func (*ocirepositorySpecProxySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (i *ocirepositorySpecProxySecretRefPatchPtrType) ToOCIRepositorySpecProxySecretRefPatchPtrOutput() OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecProxySecretRefPatchPtrType) ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecProxySecretRefPatchPtrOutput)
}

// ProxySecretRef specifies the Secret containing the proxy configuration
// to use while communicating with the container registry.
type OCIRepositorySpecProxySecretRefPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecProxySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecProxySecretRefPatchOutput) ToOCIRepositorySpecProxySecretRefPatchOutput() OCIRepositorySpecProxySecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefPatchOutput) ToOCIRepositorySpecProxySecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefPatchOutput) ToOCIRepositorySpecProxySecretRefPatchPtrOutput() OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecProxySecretRefPatchOutput) ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecProxySecretRefPatch) *OCIRepositorySpecProxySecretRefPatch {
		return &v
	}).(OCIRepositorySpecProxySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecProxySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecProxySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecProxySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecProxySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecProxySecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecProxySecretRefPatchPtrOutput) ToOCIRepositorySpecProxySecretRefPatchPtrOutput() OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefPatchPtrOutput) ToOCIRepositorySpecProxySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecProxySecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecProxySecretRefPatchPtrOutput) Elem() OCIRepositorySpecProxySecretRefPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecProxySecretRefPatch) OCIRepositorySpecProxySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecProxySecretRefPatch
		return ret
	}).(OCIRepositorySpecProxySecretRefPatchOutput)
}

// Name of the referent.
func (o OCIRepositorySpecProxySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecProxySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The OCI reference to pull and monitor for changes,
// defaults to the latest tag.
type OCIRepositorySpecRef struct {
	// Digest is the image digest to pull, takes precedence over SemVer.
	// The value should be in the format 'sha256:<HASH>'.
	Digest *string `pulumi:"digest"`
	// SemVer is the range of tags to pull selecting the latest within
	// the range, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// SemverFilter is a regex pattern to filter the tags within the SemVer range.
	SemverFilter *string `pulumi:"semverFilter"`
	// Tag is the image tag to pull, defaults to latest.
	Tag *string `pulumi:"tag"`
}

// OCIRepositorySpecRefInput is an input type that accepts OCIRepositorySpecRefArgs and OCIRepositorySpecRefOutput values.
// You can construct a concrete instance of `OCIRepositorySpecRefInput` via:
//
//	OCIRepositorySpecRefArgs{...}
type OCIRepositorySpecRefInput interface {
	pulumi.Input

	ToOCIRepositorySpecRefOutput() OCIRepositorySpecRefOutput
	ToOCIRepositorySpecRefOutputWithContext(context.Context) OCIRepositorySpecRefOutput
}

// The OCI reference to pull and monitor for changes,
// defaults to the latest tag.
type OCIRepositorySpecRefArgs struct {
	// Digest is the image digest to pull, takes precedence over SemVer.
	// The value should be in the format 'sha256:<HASH>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// SemVer is the range of tags to pull selecting the latest within
	// the range, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// SemverFilter is a regex pattern to filter the tags within the SemVer range.
	SemverFilter pulumi.StringPtrInput `pulumi:"semverFilter"`
	// Tag is the image tag to pull, defaults to latest.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (OCIRepositorySpecRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecRef)(nil)).Elem()
}

func (i OCIRepositorySpecRefArgs) ToOCIRepositorySpecRefOutput() OCIRepositorySpecRefOutput {
	return i.ToOCIRepositorySpecRefOutputWithContext(context.Background())
}

func (i OCIRepositorySpecRefArgs) ToOCIRepositorySpecRefOutputWithContext(ctx context.Context) OCIRepositorySpecRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecRefOutput)
}

func (i OCIRepositorySpecRefArgs) ToOCIRepositorySpecRefPtrOutput() OCIRepositorySpecRefPtrOutput {
	return i.ToOCIRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecRefArgs) ToOCIRepositorySpecRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecRefOutput).ToOCIRepositorySpecRefPtrOutputWithContext(ctx)
}

// OCIRepositorySpecRefPtrInput is an input type that accepts OCIRepositorySpecRefArgs, OCIRepositorySpecRefPtr and OCIRepositorySpecRefPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecRefPtrInput` via:
//
//	        OCIRepositorySpecRefArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecRefPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecRefPtrOutput() OCIRepositorySpecRefPtrOutput
	ToOCIRepositorySpecRefPtrOutputWithContext(context.Context) OCIRepositorySpecRefPtrOutput
}

type ocirepositorySpecRefPtrType OCIRepositorySpecRefArgs

func OCIRepositorySpecRefPtr(v *OCIRepositorySpecRefArgs) OCIRepositorySpecRefPtrInput {
	return (*ocirepositorySpecRefPtrType)(v)
}

func (*ocirepositorySpecRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecRef)(nil)).Elem()
}

func (i *ocirepositorySpecRefPtrType) ToOCIRepositorySpecRefPtrOutput() OCIRepositorySpecRefPtrOutput {
	return i.ToOCIRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecRefPtrType) ToOCIRepositorySpecRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecRefPtrOutput)
}

// The OCI reference to pull and monitor for changes,
// defaults to the latest tag.
type OCIRepositorySpecRefOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecRef)(nil)).Elem()
}

func (o OCIRepositorySpecRefOutput) ToOCIRepositorySpecRefOutput() OCIRepositorySpecRefOutput {
	return o
}

func (o OCIRepositorySpecRefOutput) ToOCIRepositorySpecRefOutputWithContext(ctx context.Context) OCIRepositorySpecRefOutput {
	return o
}

func (o OCIRepositorySpecRefOutput) ToOCIRepositorySpecRefPtrOutput() OCIRepositorySpecRefPtrOutput {
	return o.ToOCIRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecRefOutput) ToOCIRepositorySpecRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecRef) *OCIRepositorySpecRef {
		return &v
	}).(OCIRepositorySpecRefPtrOutput)
}

// Digest is the image digest to pull, takes precedence over SemVer.
// The value should be in the format 'sha256:<HASH>'.
func (o OCIRepositorySpecRefOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRef) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// SemVer is the range of tags to pull selecting the latest within
// the range, takes precedence over Tag.
func (o OCIRepositorySpecRefOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRef) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// SemverFilter is a regex pattern to filter the tags within the SemVer range.
func (o OCIRepositorySpecRefOutput) SemverFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRef) *string { return v.SemverFilter }).(pulumi.StringPtrOutput)
}

// Tag is the image tag to pull, defaults to latest.
func (o OCIRepositorySpecRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecRefPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecRef)(nil)).Elem()
}

func (o OCIRepositorySpecRefPtrOutput) ToOCIRepositorySpecRefPtrOutput() OCIRepositorySpecRefPtrOutput {
	return o
}

func (o OCIRepositorySpecRefPtrOutput) ToOCIRepositorySpecRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPtrOutput {
	return o
}

func (o OCIRepositorySpecRefPtrOutput) Elem() OCIRepositorySpecRefOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRef) OCIRepositorySpecRef {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecRef
		return ret
	}).(OCIRepositorySpecRefOutput)
}

// Digest is the image digest to pull, takes precedence over SemVer.
// The value should be in the format 'sha256:<HASH>'.
func (o OCIRepositorySpecRefPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// SemVer is the range of tags to pull selecting the latest within
// the range, takes precedence over Tag.
func (o OCIRepositorySpecRefPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// SemverFilter is a regex pattern to filter the tags within the SemVer range.
func (o OCIRepositorySpecRefPtrOutput) SemverFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.SemverFilter
	}).(pulumi.StringPtrOutput)
}

// Tag is the image tag to pull, defaults to latest.
func (o OCIRepositorySpecRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The OCI reference to pull and monitor for changes,
// defaults to the latest tag.
type OCIRepositorySpecRefPatch struct {
	// Digest is the image digest to pull, takes precedence over SemVer.
	// The value should be in the format 'sha256:<HASH>'.
	Digest *string `pulumi:"digest"`
	// SemVer is the range of tags to pull selecting the latest within
	// the range, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// SemverFilter is a regex pattern to filter the tags within the SemVer range.
	SemverFilter *string `pulumi:"semverFilter"`
	// Tag is the image tag to pull, defaults to latest.
	Tag *string `pulumi:"tag"`
}

// OCIRepositorySpecRefPatchInput is an input type that accepts OCIRepositorySpecRefPatchArgs and OCIRepositorySpecRefPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecRefPatchInput` via:
//
//	OCIRepositorySpecRefPatchArgs{...}
type OCIRepositorySpecRefPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecRefPatchOutput() OCIRepositorySpecRefPatchOutput
	ToOCIRepositorySpecRefPatchOutputWithContext(context.Context) OCIRepositorySpecRefPatchOutput
}

// The OCI reference to pull and monitor for changes,
// defaults to the latest tag.
type OCIRepositorySpecRefPatchArgs struct {
	// Digest is the image digest to pull, takes precedence over SemVer.
	// The value should be in the format 'sha256:<HASH>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// SemVer is the range of tags to pull selecting the latest within
	// the range, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// SemverFilter is a regex pattern to filter the tags within the SemVer range.
	SemverFilter pulumi.StringPtrInput `pulumi:"semverFilter"`
	// Tag is the image tag to pull, defaults to latest.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (OCIRepositorySpecRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecRefPatch)(nil)).Elem()
}

func (i OCIRepositorySpecRefPatchArgs) ToOCIRepositorySpecRefPatchOutput() OCIRepositorySpecRefPatchOutput {
	return i.ToOCIRepositorySpecRefPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecRefPatchArgs) ToOCIRepositorySpecRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecRefPatchOutput)
}

func (i OCIRepositorySpecRefPatchArgs) ToOCIRepositorySpecRefPatchPtrOutput() OCIRepositorySpecRefPatchPtrOutput {
	return i.ToOCIRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecRefPatchArgs) ToOCIRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecRefPatchOutput).ToOCIRepositorySpecRefPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecRefPatchPtrInput is an input type that accepts OCIRepositorySpecRefPatchArgs, OCIRepositorySpecRefPatchPtr and OCIRepositorySpecRefPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecRefPatchPtrInput` via:
//
//	        OCIRepositorySpecRefPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecRefPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecRefPatchPtrOutput() OCIRepositorySpecRefPatchPtrOutput
	ToOCIRepositorySpecRefPatchPtrOutputWithContext(context.Context) OCIRepositorySpecRefPatchPtrOutput
}

type ocirepositorySpecRefPatchPtrType OCIRepositorySpecRefPatchArgs

func OCIRepositorySpecRefPatchPtr(v *OCIRepositorySpecRefPatchArgs) OCIRepositorySpecRefPatchPtrInput {
	return (*ocirepositorySpecRefPatchPtrType)(v)
}

func (*ocirepositorySpecRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecRefPatch)(nil)).Elem()
}

func (i *ocirepositorySpecRefPatchPtrType) ToOCIRepositorySpecRefPatchPtrOutput() OCIRepositorySpecRefPatchPtrOutput {
	return i.ToOCIRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecRefPatchPtrType) ToOCIRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecRefPatchPtrOutput)
}

// The OCI reference to pull and monitor for changes,
// defaults to the latest tag.
type OCIRepositorySpecRefPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecRefPatchOutput) ToOCIRepositorySpecRefPatchOutput() OCIRepositorySpecRefPatchOutput {
	return o
}

func (o OCIRepositorySpecRefPatchOutput) ToOCIRepositorySpecRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecRefPatchOutput {
	return o
}

func (o OCIRepositorySpecRefPatchOutput) ToOCIRepositorySpecRefPatchPtrOutput() OCIRepositorySpecRefPatchPtrOutput {
	return o.ToOCIRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecRefPatchOutput) ToOCIRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecRefPatch) *OCIRepositorySpecRefPatch {
		return &v
	}).(OCIRepositorySpecRefPatchPtrOutput)
}

// Digest is the image digest to pull, takes precedence over SemVer.
// The value should be in the format 'sha256:<HASH>'.
func (o OCIRepositorySpecRefPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRefPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// SemVer is the range of tags to pull selecting the latest within
// the range, takes precedence over Tag.
func (o OCIRepositorySpecRefPatchOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRefPatch) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// SemverFilter is a regex pattern to filter the tags within the SemVer range.
func (o OCIRepositorySpecRefPatchOutput) SemverFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRefPatch) *string { return v.SemverFilter }).(pulumi.StringPtrOutput)
}

// Tag is the image tag to pull, defaults to latest.
func (o OCIRepositorySpecRefPatchOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecRefPatch) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecRefPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecRefPatchPtrOutput) ToOCIRepositorySpecRefPatchPtrOutput() OCIRepositorySpecRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecRefPatchPtrOutput) ToOCIRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecRefPatchPtrOutput) Elem() OCIRepositorySpecRefPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRefPatch) OCIRepositorySpecRefPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecRefPatch
		return ret
	}).(OCIRepositorySpecRefPatchOutput)
}

// Digest is the image digest to pull, takes precedence over SemVer.
// The value should be in the format 'sha256:<HASH>'.
func (o OCIRepositorySpecRefPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// SemVer is the range of tags to pull selecting the latest within
// the range, takes precedence over Tag.
func (o OCIRepositorySpecRefPatchPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// SemverFilter is a regex pattern to filter the tags within the SemVer range.
func (o OCIRepositorySpecRefPatchPtrOutput) SemverFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.SemverFilter
	}).(pulumi.StringPtrOutput)
}

// Tag is the image tag to pull, defaults to latest.
func (o OCIRepositorySpecRefPatchPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// SecretRef contains the secret name containing the registry login
// credentials to resolve image metadata.
// The secret must be of type kubernetes.io/dockerconfigjson.
type OCIRepositorySpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecSecretRefInput is an input type that accepts OCIRepositorySpecSecretRefArgs and OCIRepositorySpecSecretRefOutput values.
// You can construct a concrete instance of `OCIRepositorySpecSecretRefInput` via:
//
//	OCIRepositorySpecSecretRefArgs{...}
type OCIRepositorySpecSecretRefInput interface {
	pulumi.Input

	ToOCIRepositorySpecSecretRefOutput() OCIRepositorySpecSecretRefOutput
	ToOCIRepositorySpecSecretRefOutputWithContext(context.Context) OCIRepositorySpecSecretRefOutput
}

// SecretRef contains the secret name containing the registry login
// credentials to resolve image metadata.
// The secret must be of type kubernetes.io/dockerconfigjson.
type OCIRepositorySpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecSecretRef)(nil)).Elem()
}

func (i OCIRepositorySpecSecretRefArgs) ToOCIRepositorySpecSecretRefOutput() OCIRepositorySpecSecretRefOutput {
	return i.ToOCIRepositorySpecSecretRefOutputWithContext(context.Background())
}

func (i OCIRepositorySpecSecretRefArgs) ToOCIRepositorySpecSecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecSecretRefOutput)
}

func (i OCIRepositorySpecSecretRefArgs) ToOCIRepositorySpecSecretRefPtrOutput() OCIRepositorySpecSecretRefPtrOutput {
	return i.ToOCIRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecSecretRefArgs) ToOCIRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecSecretRefOutput).ToOCIRepositorySpecSecretRefPtrOutputWithContext(ctx)
}

// OCIRepositorySpecSecretRefPtrInput is an input type that accepts OCIRepositorySpecSecretRefArgs, OCIRepositorySpecSecretRefPtr and OCIRepositorySpecSecretRefPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecSecretRefPtrInput` via:
//
//	        OCIRepositorySpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecSecretRefPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecSecretRefPtrOutput() OCIRepositorySpecSecretRefPtrOutput
	ToOCIRepositorySpecSecretRefPtrOutputWithContext(context.Context) OCIRepositorySpecSecretRefPtrOutput
}

type ocirepositorySpecSecretRefPtrType OCIRepositorySpecSecretRefArgs

func OCIRepositorySpecSecretRefPtr(v *OCIRepositorySpecSecretRefArgs) OCIRepositorySpecSecretRefPtrInput {
	return (*ocirepositorySpecSecretRefPtrType)(v)
}

func (*ocirepositorySpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecSecretRef)(nil)).Elem()
}

func (i *ocirepositorySpecSecretRefPtrType) ToOCIRepositorySpecSecretRefPtrOutput() OCIRepositorySpecSecretRefPtrOutput {
	return i.ToOCIRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecSecretRefPtrType) ToOCIRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecSecretRefPtrOutput)
}

// SecretRef contains the secret name containing the registry login
// credentials to resolve image metadata.
// The secret must be of type kubernetes.io/dockerconfigjson.
type OCIRepositorySpecSecretRefOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecSecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecSecretRefOutput) ToOCIRepositorySpecSecretRefOutput() OCIRepositorySpecSecretRefOutput {
	return o
}

func (o OCIRepositorySpecSecretRefOutput) ToOCIRepositorySpecSecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefOutput {
	return o
}

func (o OCIRepositorySpecSecretRefOutput) ToOCIRepositorySpecSecretRefPtrOutput() OCIRepositorySpecSecretRefPtrOutput {
	return o.ToOCIRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecSecretRefOutput) ToOCIRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecSecretRef) *OCIRepositorySpecSecretRef {
		return &v
	}).(OCIRepositorySpecSecretRefPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecSecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecSecretRefPtrOutput) ToOCIRepositorySpecSecretRefPtrOutput() OCIRepositorySpecSecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecSecretRefPtrOutput) ToOCIRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecSecretRefPtrOutput) Elem() OCIRepositorySpecSecretRefOutput {
	return o.ApplyT(func(v *OCIRepositorySpecSecretRef) OCIRepositorySpecSecretRef {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecSecretRef
		return ret
	}).(OCIRepositorySpecSecretRefOutput)
}

// Name of the referent.
func (o OCIRepositorySpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef contains the secret name containing the registry login
// credentials to resolve image metadata.
// The secret must be of type kubernetes.io/dockerconfigjson.
type OCIRepositorySpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecSecretRefPatchInput is an input type that accepts OCIRepositorySpecSecretRefPatchArgs and OCIRepositorySpecSecretRefPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecSecretRefPatchInput` via:
//
//	OCIRepositorySpecSecretRefPatchArgs{...}
type OCIRepositorySpecSecretRefPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecSecretRefPatchOutput() OCIRepositorySpecSecretRefPatchOutput
	ToOCIRepositorySpecSecretRefPatchOutputWithContext(context.Context) OCIRepositorySpecSecretRefPatchOutput
}

// SecretRef contains the secret name containing the registry login
// credentials to resolve image metadata.
// The secret must be of type kubernetes.io/dockerconfigjson.
type OCIRepositorySpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i OCIRepositorySpecSecretRefPatchArgs) ToOCIRepositorySpecSecretRefPatchOutput() OCIRepositorySpecSecretRefPatchOutput {
	return i.ToOCIRepositorySpecSecretRefPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecSecretRefPatchArgs) ToOCIRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecSecretRefPatchOutput)
}

func (i OCIRepositorySpecSecretRefPatchArgs) ToOCIRepositorySpecSecretRefPatchPtrOutput() OCIRepositorySpecSecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecSecretRefPatchArgs) ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecSecretRefPatchOutput).ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecSecretRefPatchPtrInput is an input type that accepts OCIRepositorySpecSecretRefPatchArgs, OCIRepositorySpecSecretRefPatchPtr and OCIRepositorySpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecSecretRefPatchPtrInput` via:
//
//	        OCIRepositorySpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecSecretRefPatchPtrOutput() OCIRepositorySpecSecretRefPatchPtrOutput
	ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(context.Context) OCIRepositorySpecSecretRefPatchPtrOutput
}

type ocirepositorySpecSecretRefPatchPtrType OCIRepositorySpecSecretRefPatchArgs

func OCIRepositorySpecSecretRefPatchPtr(v *OCIRepositorySpecSecretRefPatchArgs) OCIRepositorySpecSecretRefPatchPtrInput {
	return (*ocirepositorySpecSecretRefPatchPtrType)(v)
}

func (*ocirepositorySpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i *ocirepositorySpecSecretRefPatchPtrType) ToOCIRepositorySpecSecretRefPatchPtrOutput() OCIRepositorySpecSecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecSecretRefPatchPtrType) ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecSecretRefPatchPtrOutput)
}

// SecretRef contains the secret name containing the registry login
// credentials to resolve image metadata.
// The secret must be of type kubernetes.io/dockerconfigjson.
type OCIRepositorySpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecSecretRefPatchOutput) ToOCIRepositorySpecSecretRefPatchOutput() OCIRepositorySpecSecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecSecretRefPatchOutput) ToOCIRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecSecretRefPatchOutput) ToOCIRepositorySpecSecretRefPatchPtrOutput() OCIRepositorySpecSecretRefPatchPtrOutput {
	return o.ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecSecretRefPatchOutput) ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecSecretRefPatch) *OCIRepositorySpecSecretRefPatch {
		return &v
	}).(OCIRepositorySpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecSecretRefPatchPtrOutput) ToOCIRepositorySpecSecretRefPatchPtrOutput() OCIRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecSecretRefPatchPtrOutput) ToOCIRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecSecretRefPatchPtrOutput) Elem() OCIRepositorySpecSecretRefPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecSecretRefPatch) OCIRepositorySpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecSecretRefPatch
		return ret
	}).(OCIRepositorySpecSecretRefPatchOutput)
}

// Name of the referent.
func (o OCIRepositorySpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
type OCIRepositorySpecVerify struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity []OCIRepositorySpecVerifyMatchOIDCIdentity `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  *string                           `pulumi:"provider"`
	SecretRef *OCIRepositorySpecVerifySecretRef `pulumi:"secretRef"`
}

// OCIRepositorySpecVerifyInput is an input type that accepts OCIRepositorySpecVerifyArgs and OCIRepositorySpecVerifyOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyInput` via:
//
//	OCIRepositorySpecVerifyArgs{...}
type OCIRepositorySpecVerifyInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyOutput() OCIRepositorySpecVerifyOutput
	ToOCIRepositorySpecVerifyOutputWithContext(context.Context) OCIRepositorySpecVerifyOutput
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
type OCIRepositorySpecVerifyArgs struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity OCIRepositorySpecVerifyMatchOIDCIdentityArrayInput `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  pulumi.StringPtrInput                    `pulumi:"provider"`
	SecretRef OCIRepositorySpecVerifySecretRefPtrInput `pulumi:"secretRef"`
}

func (OCIRepositorySpecVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerify)(nil)).Elem()
}

func (i OCIRepositorySpecVerifyArgs) ToOCIRepositorySpecVerifyOutput() OCIRepositorySpecVerifyOutput {
	return i.ToOCIRepositorySpecVerifyOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyArgs) ToOCIRepositorySpecVerifyOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyOutput)
}

func (i OCIRepositorySpecVerifyArgs) ToOCIRepositorySpecVerifyPtrOutput() OCIRepositorySpecVerifyPtrOutput {
	return i.ToOCIRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyArgs) ToOCIRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyOutput).ToOCIRepositorySpecVerifyPtrOutputWithContext(ctx)
}

// OCIRepositorySpecVerifyPtrInput is an input type that accepts OCIRepositorySpecVerifyArgs, OCIRepositorySpecVerifyPtr and OCIRepositorySpecVerifyPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyPtrInput` via:
//
//	        OCIRepositorySpecVerifyArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecVerifyPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyPtrOutput() OCIRepositorySpecVerifyPtrOutput
	ToOCIRepositorySpecVerifyPtrOutputWithContext(context.Context) OCIRepositorySpecVerifyPtrOutput
}

type ocirepositorySpecVerifyPtrType OCIRepositorySpecVerifyArgs

func OCIRepositorySpecVerifyPtr(v *OCIRepositorySpecVerifyArgs) OCIRepositorySpecVerifyPtrInput {
	return (*ocirepositorySpecVerifyPtrType)(v)
}

func (*ocirepositorySpecVerifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerify)(nil)).Elem()
}

func (i *ocirepositorySpecVerifyPtrType) ToOCIRepositorySpecVerifyPtrOutput() OCIRepositorySpecVerifyPtrOutput {
	return i.ToOCIRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecVerifyPtrType) ToOCIRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
type OCIRepositorySpecVerifyOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerify)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyOutput) ToOCIRepositorySpecVerifyOutput() OCIRepositorySpecVerifyOutput {
	return o
}

func (o OCIRepositorySpecVerifyOutput) ToOCIRepositorySpecVerifyOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyOutput {
	return o
}

func (o OCIRepositorySpecVerifyOutput) ToOCIRepositorySpecVerifyPtrOutput() OCIRepositorySpecVerifyPtrOutput {
	return o.ToOCIRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecVerifyOutput) ToOCIRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecVerify) *OCIRepositorySpecVerify {
		return &v
	}).(OCIRepositorySpecVerifyPtrOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o OCIRepositorySpecVerifyOutput) MatchOIDCIdentity() OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerify) []OCIRepositorySpecVerifyMatchOIDCIdentity { return v.MatchOIDCIdentity }).(OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o OCIRepositorySpecVerifyOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerify) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecVerifyOutput) SecretRef() OCIRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerify) *OCIRepositorySpecVerifySecretRef { return v.SecretRef }).(OCIRepositorySpecVerifySecretRefPtrOutput)
}

type OCIRepositorySpecVerifyPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerify)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyPtrOutput) ToOCIRepositorySpecVerifyPtrOutput() OCIRepositorySpecVerifyPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifyPtrOutput) ToOCIRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifyPtrOutput) Elem() OCIRepositorySpecVerifyOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerify) OCIRepositorySpecVerify {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecVerify
		return ret
	}).(OCIRepositorySpecVerifyOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o OCIRepositorySpecVerifyPtrOutput) MatchOIDCIdentity() OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerify) []OCIRepositorySpecVerifyMatchOIDCIdentity {
		if v == nil {
			return nil
		}
		return v.MatchOIDCIdentity
	}).(OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o OCIRepositorySpecVerifyPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerify) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecVerifyPtrOutput) SecretRef() OCIRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerify) *OCIRepositorySpecVerifySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(OCIRepositorySpecVerifySecretRefPtrOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type OCIRepositorySpecVerifyMatchOIDCIdentity struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer *string `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject *string `pulumi:"subject"`
}

// OCIRepositorySpecVerifyMatchOIDCIdentityInput is an input type that accepts OCIRepositorySpecVerifyMatchOIDCIdentityArgs and OCIRepositorySpecVerifyMatchOIDCIdentityOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyMatchOIDCIdentityInput` via:
//
//	OCIRepositorySpecVerifyMatchOIDCIdentityArgs{...}
type OCIRepositorySpecVerifyMatchOIDCIdentityInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyMatchOIDCIdentityOutput() OCIRepositorySpecVerifyMatchOIDCIdentityOutput
	ToOCIRepositorySpecVerifyMatchOIDCIdentityOutputWithContext(context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityOutput
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type OCIRepositorySpecVerifyMatchOIDCIdentityArgs struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (OCIRepositorySpecVerifyMatchOIDCIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityArgs) ToOCIRepositorySpecVerifyMatchOIDCIdentityOutput() OCIRepositorySpecVerifyMatchOIDCIdentityOutput {
	return i.ToOCIRepositorySpecVerifyMatchOIDCIdentityOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityArgs) ToOCIRepositorySpecVerifyMatchOIDCIdentityOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyMatchOIDCIdentityOutput)
}

// OCIRepositorySpecVerifyMatchOIDCIdentityArrayInput is an input type that accepts OCIRepositorySpecVerifyMatchOIDCIdentityArray and OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyMatchOIDCIdentityArrayInput` via:
//
//	OCIRepositorySpecVerifyMatchOIDCIdentityArray{ OCIRepositorySpecVerifyMatchOIDCIdentityArgs{...} }
type OCIRepositorySpecVerifyMatchOIDCIdentityArrayInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput() OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput
	ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutputWithContext(context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput
}

type OCIRepositorySpecVerifyMatchOIDCIdentityArray []OCIRepositorySpecVerifyMatchOIDCIdentityInput

func (OCIRepositorySpecVerifyMatchOIDCIdentityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositorySpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityArray) ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput() OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput {
	return i.ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityArray) ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type OCIRepositorySpecVerifyMatchOIDCIdentityOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyMatchOIDCIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityOutput() OCIRepositorySpecVerifyMatchOIDCIdentityOutput {
	return o
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityOutput {
	return o
}

// Issuer specifies the regex pattern to match against to verify
// the OIDC issuer in the Fulcio certificate. The pattern must be a
// valid Go regular expression.
func (o OCIRepositorySpecVerifyMatchOIDCIdentityOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyMatchOIDCIdentity) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Subject specifies the regex pattern to match against to verify
// the identity subject in the Fulcio certificate. The pattern must
// be a valid Go regular expression.
func (o OCIRepositorySpecVerifyMatchOIDCIdentityOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyMatchOIDCIdentity) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositorySpecVerifyMatchOIDCIdentity)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput() OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput {
	return o
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityArrayOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput {
	return o
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput) Index(i pulumi.IntInput) OCIRepositorySpecVerifyMatchOIDCIdentityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OCIRepositorySpecVerifyMatchOIDCIdentity {
		return vs[0].([]OCIRepositorySpecVerifyMatchOIDCIdentity)[vs[1].(int)]
	}).(OCIRepositorySpecVerifyMatchOIDCIdentityOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type OCIRepositorySpecVerifyMatchOIDCIdentityPatch struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer *string `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject *string `pulumi:"subject"`
}

// OCIRepositorySpecVerifyMatchOIDCIdentityPatchInput is an input type that accepts OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs and OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyMatchOIDCIdentityPatchInput` via:
//
//	OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs{...}
type OCIRepositorySpecVerifyMatchOIDCIdentityPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput() OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput
	ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutputWithContext(context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs struct {
	// Issuer specifies the regex pattern to match against to verify
	// the OIDC issuer in the Fulcio certificate. The pattern must be a
	// valid Go regular expression.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Subject specifies the regex pattern to match against to verify
	// the identity subject in the Fulcio certificate. The pattern must
	// be a valid Go regular expression.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
}

func (OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput() OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput {
	return i.ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput)
}

// OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayInput is an input type that accepts OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray and OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayInput` via:
//
//	OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray{ OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs{...} }
type OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput() OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput
	ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput
}

type OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray []OCIRepositorySpecVerifyMatchOIDCIdentityPatchInput

func (OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositorySpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput() OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return i.ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput)
}

// OIDCIdentityMatch specifies options for verifying the certificate identity,
// i.e. the issuer and the subject of the certificate.
type OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput() OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput {
	return o
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput {
	return o
}

// Issuer specifies the regex pattern to match against to verify
// the OIDC issuer in the Fulcio certificate. The pattern must be a
// valid Go regular expression.
func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyMatchOIDCIdentityPatch) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Subject specifies the regex pattern to match against to verify
// the identity subject in the Fulcio certificate. The pattern must
// be a valid Go regular expression.
func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyMatchOIDCIdentityPatch) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositorySpecVerifyMatchOIDCIdentityPatch)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput() OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput) ToOCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o
}

func (o OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput) Index(i pulumi.IntInput) OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OCIRepositorySpecVerifyMatchOIDCIdentityPatch {
		return vs[0].([]OCIRepositorySpecVerifyMatchOIDCIdentityPatch)[vs[1].(int)]
	}).(OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
type OCIRepositorySpecVerifyPatch struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity []OCIRepositorySpecVerifyMatchOIDCIdentityPatch `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  *string                                `pulumi:"provider"`
	SecretRef *OCIRepositorySpecVerifySecretRefPatch `pulumi:"secretRef"`
}

// OCIRepositorySpecVerifyPatchInput is an input type that accepts OCIRepositorySpecVerifyPatchArgs and OCIRepositorySpecVerifyPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyPatchInput` via:
//
//	OCIRepositorySpecVerifyPatchArgs{...}
type OCIRepositorySpecVerifyPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyPatchOutput() OCIRepositorySpecVerifyPatchOutput
	ToOCIRepositorySpecVerifyPatchOutputWithContext(context.Context) OCIRepositorySpecVerifyPatchOutput
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
type OCIRepositorySpecVerifyPatchArgs struct {
	// MatchOIDCIdentity specifies the identity matching criteria to use
	// while verifying an OCI artifact which was signed using Cosign keyless
	// signing. The artifact's identity is deemed to be verified if any of the
	// specified matchers match against the identity.
	MatchOIDCIdentity OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayInput `pulumi:"matchOIDCIdentity"`
	// Provider specifies the technology used to sign the OCI Artifact.
	Provider  pulumi.StringPtrInput                         `pulumi:"provider"`
	SecretRef OCIRepositorySpecVerifySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (OCIRepositorySpecVerifyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifyPatch)(nil)).Elem()
}

func (i OCIRepositorySpecVerifyPatchArgs) ToOCIRepositorySpecVerifyPatchOutput() OCIRepositorySpecVerifyPatchOutput {
	return i.ToOCIRepositorySpecVerifyPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyPatchArgs) ToOCIRepositorySpecVerifyPatchOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyPatchOutput)
}

func (i OCIRepositorySpecVerifyPatchArgs) ToOCIRepositorySpecVerifyPatchPtrOutput() OCIRepositorySpecVerifyPatchPtrOutput {
	return i.ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifyPatchArgs) ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyPatchOutput).ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecVerifyPatchPtrInput is an input type that accepts OCIRepositorySpecVerifyPatchArgs, OCIRepositorySpecVerifyPatchPtr and OCIRepositorySpecVerifyPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifyPatchPtrInput` via:
//
//	        OCIRepositorySpecVerifyPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecVerifyPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifyPatchPtrOutput() OCIRepositorySpecVerifyPatchPtrOutput
	ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(context.Context) OCIRepositorySpecVerifyPatchPtrOutput
}

type ocirepositorySpecVerifyPatchPtrType OCIRepositorySpecVerifyPatchArgs

func OCIRepositorySpecVerifyPatchPtr(v *OCIRepositorySpecVerifyPatchArgs) OCIRepositorySpecVerifyPatchPtrInput {
	return (*ocirepositorySpecVerifyPatchPtrType)(v)
}

func (*ocirepositorySpecVerifyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerifyPatch)(nil)).Elem()
}

func (i *ocirepositorySpecVerifyPatchPtrType) ToOCIRepositorySpecVerifyPatchPtrOutput() OCIRepositorySpecVerifyPatchPtrOutput {
	return i.ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecVerifyPatchPtrType) ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifyPatchPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
type OCIRepositorySpecVerifyPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifyPatch)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyPatchOutput) ToOCIRepositorySpecVerifyPatchOutput() OCIRepositorySpecVerifyPatchOutput {
	return o
}

func (o OCIRepositorySpecVerifyPatchOutput) ToOCIRepositorySpecVerifyPatchOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPatchOutput {
	return o
}

func (o OCIRepositorySpecVerifyPatchOutput) ToOCIRepositorySpecVerifyPatchPtrOutput() OCIRepositorySpecVerifyPatchPtrOutput {
	return o.ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecVerifyPatchOutput) ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecVerifyPatch) *OCIRepositorySpecVerifyPatch {
		return &v
	}).(OCIRepositorySpecVerifyPatchPtrOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o OCIRepositorySpecVerifyPatchOutput) MatchOIDCIdentity() OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyPatch) []OCIRepositorySpecVerifyMatchOIDCIdentityPatch {
		return v.MatchOIDCIdentity
	}).(OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o OCIRepositorySpecVerifyPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecVerifyPatchOutput) SecretRef() OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifyPatch) *OCIRepositorySpecVerifySecretRefPatch { return v.SecretRef }).(OCIRepositorySpecVerifySecretRefPatchPtrOutput)
}

type OCIRepositorySpecVerifyPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerifyPatch)(nil)).Elem()
}

func (o OCIRepositorySpecVerifyPatchPtrOutput) ToOCIRepositorySpecVerifyPatchPtrOutput() OCIRepositorySpecVerifyPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifyPatchPtrOutput) ToOCIRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifyPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifyPatchPtrOutput) Elem() OCIRepositorySpecVerifyPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifyPatch) OCIRepositorySpecVerifyPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecVerifyPatch
		return ret
	}).(OCIRepositorySpecVerifyPatchOutput)
}

// MatchOIDCIdentity specifies the identity matching criteria to use
// while verifying an OCI artifact which was signed using Cosign keyless
// signing. The artifact's identity is deemed to be verified if any of the
// specified matchers match against the identity.
func (o OCIRepositorySpecVerifyPatchPtrOutput) MatchOIDCIdentity() OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifyPatch) []OCIRepositorySpecVerifyMatchOIDCIdentityPatch {
		if v == nil {
			return nil
		}
		return v.MatchOIDCIdentity
	}).(OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput)
}

// Provider specifies the technology used to sign the OCI Artifact.
func (o OCIRepositorySpecVerifyPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositorySpecVerifyPatchPtrOutput) SecretRef() OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifyPatch) *OCIRepositorySpecVerifySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(OCIRepositorySpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type OCIRepositorySpecVerifySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecVerifySecretRefInput is an input type that accepts OCIRepositorySpecVerifySecretRefArgs and OCIRepositorySpecVerifySecretRefOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifySecretRefInput` via:
//
//	OCIRepositorySpecVerifySecretRefArgs{...}
type OCIRepositorySpecVerifySecretRefInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifySecretRefOutput() OCIRepositorySpecVerifySecretRefOutput
	ToOCIRepositorySpecVerifySecretRefOutputWithContext(context.Context) OCIRepositorySpecVerifySecretRefOutput
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type OCIRepositorySpecVerifySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecVerifySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (i OCIRepositorySpecVerifySecretRefArgs) ToOCIRepositorySpecVerifySecretRefOutput() OCIRepositorySpecVerifySecretRefOutput {
	return i.ToOCIRepositorySpecVerifySecretRefOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifySecretRefArgs) ToOCIRepositorySpecVerifySecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifySecretRefOutput)
}

func (i OCIRepositorySpecVerifySecretRefArgs) ToOCIRepositorySpecVerifySecretRefPtrOutput() OCIRepositorySpecVerifySecretRefPtrOutput {
	return i.ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifySecretRefArgs) ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifySecretRefOutput).ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(ctx)
}

// OCIRepositorySpecVerifySecretRefPtrInput is an input type that accepts OCIRepositorySpecVerifySecretRefArgs, OCIRepositorySpecVerifySecretRefPtr and OCIRepositorySpecVerifySecretRefPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifySecretRefPtrInput` via:
//
//	        OCIRepositorySpecVerifySecretRefArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecVerifySecretRefPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifySecretRefPtrOutput() OCIRepositorySpecVerifySecretRefPtrOutput
	ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(context.Context) OCIRepositorySpecVerifySecretRefPtrOutput
}

type ocirepositorySpecVerifySecretRefPtrType OCIRepositorySpecVerifySecretRefArgs

func OCIRepositorySpecVerifySecretRefPtr(v *OCIRepositorySpecVerifySecretRefArgs) OCIRepositorySpecVerifySecretRefPtrInput {
	return (*ocirepositorySpecVerifySecretRefPtrType)(v)
}

func (*ocirepositorySpecVerifySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (i *ocirepositorySpecVerifySecretRefPtrType) ToOCIRepositorySpecVerifySecretRefPtrOutput() OCIRepositorySpecVerifySecretRefPtrOutput {
	return i.ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecVerifySecretRefPtrType) ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifySecretRefPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type OCIRepositorySpecVerifySecretRefOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecVerifySecretRefOutput) ToOCIRepositorySpecVerifySecretRefOutput() OCIRepositorySpecVerifySecretRefOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefOutput) ToOCIRepositorySpecVerifySecretRefOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefOutput) ToOCIRepositorySpecVerifySecretRefPtrOutput() OCIRepositorySpecVerifySecretRefPtrOutput {
	return o.ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecVerifySecretRefOutput) ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecVerifySecretRef) *OCIRepositorySpecVerifySecretRef {
		return &v
	}).(OCIRepositorySpecVerifySecretRefPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecVerifySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecVerifySecretRefPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (o OCIRepositorySpecVerifySecretRefPtrOutput) ToOCIRepositorySpecVerifySecretRefPtrOutput() OCIRepositorySpecVerifySecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefPtrOutput) ToOCIRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefPtrOutput) Elem() OCIRepositorySpecVerifySecretRefOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifySecretRef) OCIRepositorySpecVerifySecretRef {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecVerifySecretRef
		return ret
	}).(OCIRepositorySpecVerifySecretRefOutput)
}

// Name of the referent.
func (o OCIRepositorySpecVerifySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type OCIRepositorySpecVerifySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// OCIRepositorySpecVerifySecretRefPatchInput is an input type that accepts OCIRepositorySpecVerifySecretRefPatchArgs and OCIRepositorySpecVerifySecretRefPatchOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifySecretRefPatchInput` via:
//
//	OCIRepositorySpecVerifySecretRefPatchArgs{...}
type OCIRepositorySpecVerifySecretRefPatchInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifySecretRefPatchOutput() OCIRepositorySpecVerifySecretRefPatchOutput
	ToOCIRepositorySpecVerifySecretRefPatchOutputWithContext(context.Context) OCIRepositorySpecVerifySecretRefPatchOutput
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type OCIRepositorySpecVerifySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (OCIRepositorySpecVerifySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (i OCIRepositorySpecVerifySecretRefPatchArgs) ToOCIRepositorySpecVerifySecretRefPatchOutput() OCIRepositorySpecVerifySecretRefPatchOutput {
	return i.ToOCIRepositorySpecVerifySecretRefPatchOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifySecretRefPatchArgs) ToOCIRepositorySpecVerifySecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifySecretRefPatchOutput)
}

func (i OCIRepositorySpecVerifySecretRefPatchArgs) ToOCIRepositorySpecVerifySecretRefPatchPtrOutput() OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositorySpecVerifySecretRefPatchArgs) ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifySecretRefPatchOutput).ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx)
}

// OCIRepositorySpecVerifySecretRefPatchPtrInput is an input type that accepts OCIRepositorySpecVerifySecretRefPatchArgs, OCIRepositorySpecVerifySecretRefPatchPtr and OCIRepositorySpecVerifySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositorySpecVerifySecretRefPatchPtrInput` via:
//
//	        OCIRepositorySpecVerifySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositorySpecVerifySecretRefPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositorySpecVerifySecretRefPatchPtrOutput() OCIRepositorySpecVerifySecretRefPatchPtrOutput
	ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Context) OCIRepositorySpecVerifySecretRefPatchPtrOutput
}

type ocirepositorySpecVerifySecretRefPatchPtrType OCIRepositorySpecVerifySecretRefPatchArgs

func OCIRepositorySpecVerifySecretRefPatchPtr(v *OCIRepositorySpecVerifySecretRefPatchArgs) OCIRepositorySpecVerifySecretRefPatchPtrInput {
	return (*ocirepositorySpecVerifySecretRefPatchPtrType)(v)
}

func (*ocirepositorySpecVerifySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (i *ocirepositorySpecVerifySecretRefPatchPtrType) ToOCIRepositorySpecVerifySecretRefPatchPtrOutput() OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return i.ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositorySpecVerifySecretRefPatchPtrType) ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositorySpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type OCIRepositorySpecVerifySecretRefPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecVerifySecretRefPatchOutput) ToOCIRepositorySpecVerifySecretRefPatchOutput() OCIRepositorySpecVerifySecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefPatchOutput) ToOCIRepositorySpecVerifySecretRefPatchOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPatchOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefPatchOutput) ToOCIRepositorySpecVerifySecretRefPatchPtrOutput() OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositorySpecVerifySecretRefPatchOutput) ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositorySpecVerifySecretRefPatch) *OCIRepositorySpecVerifySecretRefPatch {
		return &v
	}).(OCIRepositorySpecVerifySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o OCIRepositorySpecVerifySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositorySpecVerifySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type OCIRepositorySpecVerifySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositorySpecVerifySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (o OCIRepositorySpecVerifySecretRefPatchPtrOutput) ToOCIRepositorySpecVerifySecretRefPatchPtrOutput() OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefPatchPtrOutput) ToOCIRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) OCIRepositorySpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o OCIRepositorySpecVerifySecretRefPatchPtrOutput) Elem() OCIRepositorySpecVerifySecretRefPatchOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifySecretRefPatch) OCIRepositorySpecVerifySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositorySpecVerifySecretRefPatch
		return ret
	}).(OCIRepositorySpecVerifySecretRefPatchOutput)
}

// Name of the referent.
func (o OCIRepositorySpecVerifySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositorySpecVerifySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// OCIRepositoryStatus defines the observed state of OCIRepository
type OCIRepositoryStatus struct {
	Artifact *OCIRepositoryStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the OCIRepository.
	Conditions []OCIRepositoryStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore        *string                                   `pulumi:"observedIgnore"`
	ObservedLayerSelector *OCIRepositoryStatusObservedLayerSelector `pulumi:"observedLayerSelector"`
	// URL is the download link for the artifact output of the last OCI Repository sync.
	Url *string `pulumi:"url"`
}

// OCIRepositoryStatusInput is an input type that accepts OCIRepositoryStatusArgs and OCIRepositoryStatusOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusInput` via:
//
//	OCIRepositoryStatusArgs{...}
type OCIRepositoryStatusInput interface {
	pulumi.Input

	ToOCIRepositoryStatusOutput() OCIRepositoryStatusOutput
	ToOCIRepositoryStatusOutputWithContext(context.Context) OCIRepositoryStatusOutput
}

// OCIRepositoryStatus defines the observed state of OCIRepository
type OCIRepositoryStatusArgs struct {
	Artifact OCIRepositoryStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the OCIRepository.
	Conditions OCIRepositoryStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore        pulumi.StringPtrInput                            `pulumi:"observedIgnore"`
	ObservedLayerSelector OCIRepositoryStatusObservedLayerSelectorPtrInput `pulumi:"observedLayerSelector"`
	// URL is the download link for the artifact output of the last OCI Repository sync.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (OCIRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatus)(nil)).Elem()
}

func (i OCIRepositoryStatusArgs) ToOCIRepositoryStatusOutput() OCIRepositoryStatusOutput {
	return i.ToOCIRepositoryStatusOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusArgs) ToOCIRepositoryStatusOutputWithContext(ctx context.Context) OCIRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusOutput)
}

func (i OCIRepositoryStatusArgs) ToOCIRepositoryStatusPtrOutput() OCIRepositoryStatusPtrOutput {
	return i.ToOCIRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusArgs) ToOCIRepositoryStatusPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusOutput).ToOCIRepositoryStatusPtrOutputWithContext(ctx)
}

// OCIRepositoryStatusPtrInput is an input type that accepts OCIRepositoryStatusArgs, OCIRepositoryStatusPtr and OCIRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusPtrInput` via:
//
//	        OCIRepositoryStatusArgs{...}
//
//	or:
//
//	        nil
type OCIRepositoryStatusPtrInput interface {
	pulumi.Input

	ToOCIRepositoryStatusPtrOutput() OCIRepositoryStatusPtrOutput
	ToOCIRepositoryStatusPtrOutputWithContext(context.Context) OCIRepositoryStatusPtrOutput
}

type ocirepositoryStatusPtrType OCIRepositoryStatusArgs

func OCIRepositoryStatusPtr(v *OCIRepositoryStatusArgs) OCIRepositoryStatusPtrInput {
	return (*ocirepositoryStatusPtrType)(v)
}

func (*ocirepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatus)(nil)).Elem()
}

func (i *ocirepositoryStatusPtrType) ToOCIRepositoryStatusPtrOutput() OCIRepositoryStatusPtrOutput {
	return i.ToOCIRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *ocirepositoryStatusPtrType) ToOCIRepositoryStatusPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusPtrOutput)
}

// OCIRepositoryStatus defines the observed state of OCIRepository
type OCIRepositoryStatusOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatus)(nil)).Elem()
}

func (o OCIRepositoryStatusOutput) ToOCIRepositoryStatusOutput() OCIRepositoryStatusOutput {
	return o
}

func (o OCIRepositoryStatusOutput) ToOCIRepositoryStatusOutputWithContext(ctx context.Context) OCIRepositoryStatusOutput {
	return o
}

func (o OCIRepositoryStatusOutput) ToOCIRepositoryStatusPtrOutput() OCIRepositoryStatusPtrOutput {
	return o.ToOCIRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o OCIRepositoryStatusOutput) ToOCIRepositoryStatusPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositoryStatus) *OCIRepositoryStatus {
		return &v
	}).(OCIRepositoryStatusPtrOutput)
}

func (o OCIRepositoryStatusOutput) Artifact() OCIRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) *OCIRepositoryStatusArtifact { return v.Artifact }).(OCIRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the OCIRepository.
func (o OCIRepositoryStatusOutput) Conditions() OCIRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) []OCIRepositoryStatusConditions { return v.Conditions }).(OCIRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o OCIRepositoryStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o OCIRepositoryStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o OCIRepositoryStatusOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) *string { return v.ObservedIgnore }).(pulumi.StringPtrOutput)
}

func (o OCIRepositoryStatusOutput) ObservedLayerSelector() OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) *OCIRepositoryStatusObservedLayerSelector { return v.ObservedLayerSelector }).(OCIRepositoryStatusObservedLayerSelectorPtrOutput)
}

// URL is the download link for the artifact output of the last OCI Repository sync.
func (o OCIRepositoryStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatus)(nil)).Elem()
}

func (o OCIRepositoryStatusPtrOutput) ToOCIRepositoryStatusPtrOutput() OCIRepositoryStatusPtrOutput {
	return o
}

func (o OCIRepositoryStatusPtrOutput) ToOCIRepositoryStatusPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPtrOutput {
	return o
}

func (o OCIRepositoryStatusPtrOutput) Elem() OCIRepositoryStatusOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) OCIRepositoryStatus {
		if v != nil {
			return *v
		}
		var ret OCIRepositoryStatus
		return ret
	}).(OCIRepositoryStatusOutput)
}

func (o OCIRepositoryStatusPtrOutput) Artifact() OCIRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) *OCIRepositoryStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(OCIRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the OCIRepository.
func (o OCIRepositoryStatusPtrOutput) Conditions() OCIRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) []OCIRepositoryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(OCIRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o OCIRepositoryStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o OCIRepositoryStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o OCIRepositoryStatusPtrOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedIgnore
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositoryStatusPtrOutput) ObservedLayerSelector() OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) *OCIRepositoryStatusObservedLayerSelector {
		if v == nil {
			return nil
		}
		return v.ObservedLayerSelector
	}).(OCIRepositoryStatusObservedLayerSelectorPtrOutput)
}

// URL is the download link for the artifact output of the last OCI Repository sync.
func (o OCIRepositoryStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful OCI Repository sync.
type OCIRepositoryStatusArtifact struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// OCIRepositoryStatusArtifactInput is an input type that accepts OCIRepositoryStatusArtifactArgs and OCIRepositoryStatusArtifactOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusArtifactInput` via:
//
//	OCIRepositoryStatusArtifactArgs{...}
type OCIRepositoryStatusArtifactInput interface {
	pulumi.Input

	ToOCIRepositoryStatusArtifactOutput() OCIRepositoryStatusArtifactOutput
	ToOCIRepositoryStatusArtifactOutputWithContext(context.Context) OCIRepositoryStatusArtifactOutput
}

// Artifact represents the output of the last successful OCI Repository sync.
type OCIRepositoryStatusArtifactArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (OCIRepositoryStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusArtifact)(nil)).Elem()
}

func (i OCIRepositoryStatusArtifactArgs) ToOCIRepositoryStatusArtifactOutput() OCIRepositoryStatusArtifactOutput {
	return i.ToOCIRepositoryStatusArtifactOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusArtifactArgs) ToOCIRepositoryStatusArtifactOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusArtifactOutput)
}

func (i OCIRepositoryStatusArtifactArgs) ToOCIRepositoryStatusArtifactPtrOutput() OCIRepositoryStatusArtifactPtrOutput {
	return i.ToOCIRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusArtifactArgs) ToOCIRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusArtifactOutput).ToOCIRepositoryStatusArtifactPtrOutputWithContext(ctx)
}

// OCIRepositoryStatusArtifactPtrInput is an input type that accepts OCIRepositoryStatusArtifactArgs, OCIRepositoryStatusArtifactPtr and OCIRepositoryStatusArtifactPtrOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusArtifactPtrInput` via:
//
//	        OCIRepositoryStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type OCIRepositoryStatusArtifactPtrInput interface {
	pulumi.Input

	ToOCIRepositoryStatusArtifactPtrOutput() OCIRepositoryStatusArtifactPtrOutput
	ToOCIRepositoryStatusArtifactPtrOutputWithContext(context.Context) OCIRepositoryStatusArtifactPtrOutput
}

type ocirepositoryStatusArtifactPtrType OCIRepositoryStatusArtifactArgs

func OCIRepositoryStatusArtifactPtr(v *OCIRepositoryStatusArtifactArgs) OCIRepositoryStatusArtifactPtrInput {
	return (*ocirepositoryStatusArtifactPtrType)(v)
}

func (*ocirepositoryStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusArtifact)(nil)).Elem()
}

func (i *ocirepositoryStatusArtifactPtrType) ToOCIRepositoryStatusArtifactPtrOutput() OCIRepositoryStatusArtifactPtrOutput {
	return i.ToOCIRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *ocirepositoryStatusArtifactPtrType) ToOCIRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusArtifactPtrOutput)
}

// Artifact represents the output of the last successful OCI Repository sync.
type OCIRepositoryStatusArtifactOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusArtifact)(nil)).Elem()
}

func (o OCIRepositoryStatusArtifactOutput) ToOCIRepositoryStatusArtifactOutput() OCIRepositoryStatusArtifactOutput {
	return o
}

func (o OCIRepositoryStatusArtifactOutput) ToOCIRepositoryStatusArtifactOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactOutput {
	return o
}

func (o OCIRepositoryStatusArtifactOutput) ToOCIRepositoryStatusArtifactPtrOutput() OCIRepositoryStatusArtifactPtrOutput {
	return o.ToOCIRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (o OCIRepositoryStatusArtifactOutput) ToOCIRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositoryStatusArtifact) *OCIRepositoryStatusArtifact {
		return &v
	}).(OCIRepositoryStatusArtifactPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o OCIRepositoryStatusArtifactOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o OCIRepositoryStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o OCIRepositoryStatusArtifactOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o OCIRepositoryStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o OCIRepositoryStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o OCIRepositoryStatusArtifactOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o OCIRepositoryStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusArtifact)(nil)).Elem()
}

func (o OCIRepositoryStatusArtifactPtrOutput) ToOCIRepositoryStatusArtifactPtrOutput() OCIRepositoryStatusArtifactPtrOutput {
	return o
}

func (o OCIRepositoryStatusArtifactPtrOutput) ToOCIRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPtrOutput {
	return o
}

func (o OCIRepositoryStatusArtifactPtrOutput) Elem() OCIRepositoryStatusArtifactOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) OCIRepositoryStatusArtifact {
		if v != nil {
			return *v
		}
		var ret OCIRepositoryStatusArtifact
		return ret
	}).(OCIRepositoryStatusArtifactOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o OCIRepositoryStatusArtifactPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o OCIRepositoryStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o OCIRepositoryStatusArtifactPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o OCIRepositoryStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o OCIRepositoryStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o OCIRepositoryStatusArtifactPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o OCIRepositoryStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful OCI Repository sync.
type OCIRepositoryStatusArtifactPatch struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest *string `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata map[string]string `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path *string `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision *string `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size *int `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url *string `pulumi:"url"`
}

// OCIRepositoryStatusArtifactPatchInput is an input type that accepts OCIRepositoryStatusArtifactPatchArgs and OCIRepositoryStatusArtifactPatchOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusArtifactPatchInput` via:
//
//	OCIRepositoryStatusArtifactPatchArgs{...}
type OCIRepositoryStatusArtifactPatchInput interface {
	pulumi.Input

	ToOCIRepositoryStatusArtifactPatchOutput() OCIRepositoryStatusArtifactPatchOutput
	ToOCIRepositoryStatusArtifactPatchOutputWithContext(context.Context) OCIRepositoryStatusArtifactPatchOutput
}

// Artifact represents the output of the last successful OCI Repository sync.
type OCIRepositoryStatusArtifactPatchArgs struct {
	// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// LastUpdateTime is the timestamp corresponding to the last update of the
	// Artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Metadata holds upstream information such as OCI annotations.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Path is the relative file path of the Artifact. It can be used to locate
	// the file in the root of the Artifact storage on the local file system of
	// the controller managing the Source.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human-readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Size is the number of bytes in the file.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// URL is the HTTP address of the Artifact as exposed by the controller
	// managing the Source. It can be used to retrieve the Artifact for
	// consumption, e.g. by another controller applying the Artifact contents.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (OCIRepositoryStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i OCIRepositoryStatusArtifactPatchArgs) ToOCIRepositoryStatusArtifactPatchOutput() OCIRepositoryStatusArtifactPatchOutput {
	return i.ToOCIRepositoryStatusArtifactPatchOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusArtifactPatchArgs) ToOCIRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusArtifactPatchOutput)
}

func (i OCIRepositoryStatusArtifactPatchArgs) ToOCIRepositoryStatusArtifactPatchPtrOutput() OCIRepositoryStatusArtifactPatchPtrOutput {
	return i.ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusArtifactPatchArgs) ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusArtifactPatchOutput).ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(ctx)
}

// OCIRepositoryStatusArtifactPatchPtrInput is an input type that accepts OCIRepositoryStatusArtifactPatchArgs, OCIRepositoryStatusArtifactPatchPtr and OCIRepositoryStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusArtifactPatchPtrInput` via:
//
//	        OCIRepositoryStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositoryStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositoryStatusArtifactPatchPtrOutput() OCIRepositoryStatusArtifactPatchPtrOutput
	ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(context.Context) OCIRepositoryStatusArtifactPatchPtrOutput
}

type ocirepositoryStatusArtifactPatchPtrType OCIRepositoryStatusArtifactPatchArgs

func OCIRepositoryStatusArtifactPatchPtr(v *OCIRepositoryStatusArtifactPatchArgs) OCIRepositoryStatusArtifactPatchPtrInput {
	return (*ocirepositoryStatusArtifactPatchPtrType)(v)
}

func (*ocirepositoryStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i *ocirepositoryStatusArtifactPatchPtrType) ToOCIRepositoryStatusArtifactPatchPtrOutput() OCIRepositoryStatusArtifactPatchPtrOutput {
	return i.ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositoryStatusArtifactPatchPtrType) ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusArtifactPatchPtrOutput)
}

// Artifact represents the output of the last successful OCI Repository sync.
type OCIRepositoryStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusArtifactPatchOutput) ToOCIRepositoryStatusArtifactPatchOutput() OCIRepositoryStatusArtifactPatchOutput {
	return o
}

func (o OCIRepositoryStatusArtifactPatchOutput) ToOCIRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPatchOutput {
	return o
}

func (o OCIRepositoryStatusArtifactPatchOutput) ToOCIRepositoryStatusArtifactPatchPtrOutput() OCIRepositoryStatusArtifactPatchPtrOutput {
	return o.ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositoryStatusArtifactPatchOutput) ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositoryStatusArtifactPatch) *OCIRepositoryStatusArtifactPatch {
		return &v
	}).(OCIRepositoryStatusArtifactPatchPtrOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o OCIRepositoryStatusArtifactPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o OCIRepositoryStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o OCIRepositoryStatusArtifactPatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o OCIRepositoryStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o OCIRepositoryStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o OCIRepositoryStatusArtifactPatchOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o OCIRepositoryStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusArtifactPatchPtrOutput) ToOCIRepositoryStatusArtifactPatchPtrOutput() OCIRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o OCIRepositoryStatusArtifactPatchPtrOutput) ToOCIRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o OCIRepositoryStatusArtifactPatchPtrOutput) Elem() OCIRepositoryStatusArtifactPatchOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) OCIRepositoryStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositoryStatusArtifactPatch
		return ret
	}).(OCIRepositoryStatusArtifactPatchOutput)
}

// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of the
// Artifact.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Metadata holds upstream information such as OCI annotations.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Path is the relative file path of the Artifact. It can be used to locate
// the file in the root of the Artifact storage on the local file system of
// the controller managing the Source.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human-readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm chart version, etc.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Size is the number of bytes in the file.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

// URL is the HTTP address of the Artifact as exposed by the controller
// managing the Source. It can be used to retrieve the Artifact for
// consumption, e.g. by another controller applying the Artifact contents.
func (o OCIRepositoryStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type OCIRepositoryStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// OCIRepositoryStatusConditionsInput is an input type that accepts OCIRepositoryStatusConditionsArgs and OCIRepositoryStatusConditionsOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusConditionsInput` via:
//
//	OCIRepositoryStatusConditionsArgs{...}
type OCIRepositoryStatusConditionsInput interface {
	pulumi.Input

	ToOCIRepositoryStatusConditionsOutput() OCIRepositoryStatusConditionsOutput
	ToOCIRepositoryStatusConditionsOutputWithContext(context.Context) OCIRepositoryStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type OCIRepositoryStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OCIRepositoryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusConditions)(nil)).Elem()
}

func (i OCIRepositoryStatusConditionsArgs) ToOCIRepositoryStatusConditionsOutput() OCIRepositoryStatusConditionsOutput {
	return i.ToOCIRepositoryStatusConditionsOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusConditionsArgs) ToOCIRepositoryStatusConditionsOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusConditionsOutput)
}

// OCIRepositoryStatusConditionsArrayInput is an input type that accepts OCIRepositoryStatusConditionsArray and OCIRepositoryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusConditionsArrayInput` via:
//
//	OCIRepositoryStatusConditionsArray{ OCIRepositoryStatusConditionsArgs{...} }
type OCIRepositoryStatusConditionsArrayInput interface {
	pulumi.Input

	ToOCIRepositoryStatusConditionsArrayOutput() OCIRepositoryStatusConditionsArrayOutput
	ToOCIRepositoryStatusConditionsArrayOutputWithContext(context.Context) OCIRepositoryStatusConditionsArrayOutput
}

type OCIRepositoryStatusConditionsArray []OCIRepositoryStatusConditionsInput

func (OCIRepositoryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositoryStatusConditions)(nil)).Elem()
}

func (i OCIRepositoryStatusConditionsArray) ToOCIRepositoryStatusConditionsArrayOutput() OCIRepositoryStatusConditionsArrayOutput {
	return i.ToOCIRepositoryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusConditionsArray) ToOCIRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type OCIRepositoryStatusConditionsOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusConditions)(nil)).Elem()
}

func (o OCIRepositoryStatusConditionsOutput) ToOCIRepositoryStatusConditionsOutput() OCIRepositoryStatusConditionsOutput {
	return o
}

func (o OCIRepositoryStatusConditionsOutput) ToOCIRepositoryStatusConditionsOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o OCIRepositoryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o OCIRepositoryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o OCIRepositoryStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o OCIRepositoryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o OCIRepositoryStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o OCIRepositoryStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositoryStatusConditions)(nil)).Elem()
}

func (o OCIRepositoryStatusConditionsArrayOutput) ToOCIRepositoryStatusConditionsArrayOutput() OCIRepositoryStatusConditionsArrayOutput {
	return o
}

func (o OCIRepositoryStatusConditionsArrayOutput) ToOCIRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsArrayOutput {
	return o
}

func (o OCIRepositoryStatusConditionsArrayOutput) Index(i pulumi.IntInput) OCIRepositoryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OCIRepositoryStatusConditions {
		return vs[0].([]OCIRepositoryStatusConditions)[vs[1].(int)]
	}).(OCIRepositoryStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type OCIRepositoryStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// OCIRepositoryStatusConditionsPatchInput is an input type that accepts OCIRepositoryStatusConditionsPatchArgs and OCIRepositoryStatusConditionsPatchOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusConditionsPatchInput` via:
//
//	OCIRepositoryStatusConditionsPatchArgs{...}
type OCIRepositoryStatusConditionsPatchInput interface {
	pulumi.Input

	ToOCIRepositoryStatusConditionsPatchOutput() OCIRepositoryStatusConditionsPatchOutput
	ToOCIRepositoryStatusConditionsPatchOutputWithContext(context.Context) OCIRepositoryStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type OCIRepositoryStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (OCIRepositoryStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i OCIRepositoryStatusConditionsPatchArgs) ToOCIRepositoryStatusConditionsPatchOutput() OCIRepositoryStatusConditionsPatchOutput {
	return i.ToOCIRepositoryStatusConditionsPatchOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusConditionsPatchArgs) ToOCIRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusConditionsPatchOutput)
}

// OCIRepositoryStatusConditionsPatchArrayInput is an input type that accepts OCIRepositoryStatusConditionsPatchArray and OCIRepositoryStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusConditionsPatchArrayInput` via:
//
//	OCIRepositoryStatusConditionsPatchArray{ OCIRepositoryStatusConditionsPatchArgs{...} }
type OCIRepositoryStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToOCIRepositoryStatusConditionsPatchArrayOutput() OCIRepositoryStatusConditionsPatchArrayOutput
	ToOCIRepositoryStatusConditionsPatchArrayOutputWithContext(context.Context) OCIRepositoryStatusConditionsPatchArrayOutput
}

type OCIRepositoryStatusConditionsPatchArray []OCIRepositoryStatusConditionsPatchInput

func (OCIRepositoryStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i OCIRepositoryStatusConditionsPatchArray) ToOCIRepositoryStatusConditionsPatchArrayOutput() OCIRepositoryStatusConditionsPatchArrayOutput {
	return i.ToOCIRepositoryStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusConditionsPatchArray) ToOCIRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type OCIRepositoryStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusConditionsPatchOutput) ToOCIRepositoryStatusConditionsPatchOutput() OCIRepositoryStatusConditionsPatchOutput {
	return o
}

func (o OCIRepositoryStatusConditionsPatchOutput) ToOCIRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o OCIRepositoryStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o OCIRepositoryStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o OCIRepositoryStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o OCIRepositoryStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o OCIRepositoryStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o OCIRepositoryStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OCIRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusConditionsPatchArrayOutput) ToOCIRepositoryStatusConditionsPatchArrayOutput() OCIRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o OCIRepositoryStatusConditionsPatchArrayOutput) ToOCIRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) OCIRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o OCIRepositoryStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) OCIRepositoryStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OCIRepositoryStatusConditionsPatch {
		return vs[0].([]OCIRepositoryStatusConditionsPatch)[vs[1].(int)]
	}).(OCIRepositoryStatusConditionsPatchOutput)
}

// ObservedLayerSelector is the observed layer selector used for constructing
// the source artifact.
type OCIRepositoryStatusObservedLayerSelector struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType *string `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation *string `pulumi:"operation"`
}

// OCIRepositoryStatusObservedLayerSelectorInput is an input type that accepts OCIRepositoryStatusObservedLayerSelectorArgs and OCIRepositoryStatusObservedLayerSelectorOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusObservedLayerSelectorInput` via:
//
//	OCIRepositoryStatusObservedLayerSelectorArgs{...}
type OCIRepositoryStatusObservedLayerSelectorInput interface {
	pulumi.Input

	ToOCIRepositoryStatusObservedLayerSelectorOutput() OCIRepositoryStatusObservedLayerSelectorOutput
	ToOCIRepositoryStatusObservedLayerSelectorOutputWithContext(context.Context) OCIRepositoryStatusObservedLayerSelectorOutput
}

// ObservedLayerSelector is the observed layer selector used for constructing
// the source artifact.
type OCIRepositoryStatusObservedLayerSelectorArgs struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
}

func (OCIRepositoryStatusObservedLayerSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelector)(nil)).Elem()
}

func (i OCIRepositoryStatusObservedLayerSelectorArgs) ToOCIRepositoryStatusObservedLayerSelectorOutput() OCIRepositoryStatusObservedLayerSelectorOutput {
	return i.ToOCIRepositoryStatusObservedLayerSelectorOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusObservedLayerSelectorArgs) ToOCIRepositoryStatusObservedLayerSelectorOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusObservedLayerSelectorOutput)
}

func (i OCIRepositoryStatusObservedLayerSelectorArgs) ToOCIRepositoryStatusObservedLayerSelectorPtrOutput() OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return i.ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusObservedLayerSelectorArgs) ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusObservedLayerSelectorOutput).ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(ctx)
}

// OCIRepositoryStatusObservedLayerSelectorPtrInput is an input type that accepts OCIRepositoryStatusObservedLayerSelectorArgs, OCIRepositoryStatusObservedLayerSelectorPtr and OCIRepositoryStatusObservedLayerSelectorPtrOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusObservedLayerSelectorPtrInput` via:
//
//	        OCIRepositoryStatusObservedLayerSelectorArgs{...}
//
//	or:
//
//	        nil
type OCIRepositoryStatusObservedLayerSelectorPtrInput interface {
	pulumi.Input

	ToOCIRepositoryStatusObservedLayerSelectorPtrOutput() OCIRepositoryStatusObservedLayerSelectorPtrOutput
	ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(context.Context) OCIRepositoryStatusObservedLayerSelectorPtrOutput
}

type ocirepositoryStatusObservedLayerSelectorPtrType OCIRepositoryStatusObservedLayerSelectorArgs

func OCIRepositoryStatusObservedLayerSelectorPtr(v *OCIRepositoryStatusObservedLayerSelectorArgs) OCIRepositoryStatusObservedLayerSelectorPtrInput {
	return (*ocirepositoryStatusObservedLayerSelectorPtrType)(v)
}

func (*ocirepositoryStatusObservedLayerSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusObservedLayerSelector)(nil)).Elem()
}

func (i *ocirepositoryStatusObservedLayerSelectorPtrType) ToOCIRepositoryStatusObservedLayerSelectorPtrOutput() OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return i.ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(context.Background())
}

func (i *ocirepositoryStatusObservedLayerSelectorPtrType) ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusObservedLayerSelectorPtrOutput)
}

// ObservedLayerSelector is the observed layer selector used for constructing
// the source artifact.
type OCIRepositoryStatusObservedLayerSelectorOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusObservedLayerSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelector)(nil)).Elem()
}

func (o OCIRepositoryStatusObservedLayerSelectorOutput) ToOCIRepositoryStatusObservedLayerSelectorOutput() OCIRepositoryStatusObservedLayerSelectorOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorOutput) ToOCIRepositoryStatusObservedLayerSelectorOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorOutput) ToOCIRepositoryStatusObservedLayerSelectorPtrOutput() OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return o.ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(context.Background())
}

func (o OCIRepositoryStatusObservedLayerSelectorOutput) ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositoryStatusObservedLayerSelector) *OCIRepositoryStatusObservedLayerSelector {
		return &v
	}).(OCIRepositoryStatusObservedLayerSelectorPtrOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositoryStatusObservedLayerSelectorOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusObservedLayerSelector) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositoryStatusObservedLayerSelectorOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusObservedLayerSelector) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusObservedLayerSelectorPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusObservedLayerSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusObservedLayerSelector)(nil)).Elem()
}

func (o OCIRepositoryStatusObservedLayerSelectorPtrOutput) ToOCIRepositoryStatusObservedLayerSelectorPtrOutput() OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorPtrOutput) ToOCIRepositoryStatusObservedLayerSelectorPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPtrOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorPtrOutput) Elem() OCIRepositoryStatusObservedLayerSelectorOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusObservedLayerSelector) OCIRepositoryStatusObservedLayerSelector {
		if v != nil {
			return *v
		}
		var ret OCIRepositoryStatusObservedLayerSelector
		return ret
	}).(OCIRepositoryStatusObservedLayerSelectorOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositoryStatusObservedLayerSelectorPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusObservedLayerSelector) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositoryStatusObservedLayerSelectorPtrOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusObservedLayerSelector) *string {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(pulumi.StringPtrOutput)
}

// ObservedLayerSelector is the observed layer selector used for constructing
// the source artifact.
type OCIRepositoryStatusObservedLayerSelectorPatch struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType *string `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation *string `pulumi:"operation"`
}

// OCIRepositoryStatusObservedLayerSelectorPatchInput is an input type that accepts OCIRepositoryStatusObservedLayerSelectorPatchArgs and OCIRepositoryStatusObservedLayerSelectorPatchOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusObservedLayerSelectorPatchInput` via:
//
//	OCIRepositoryStatusObservedLayerSelectorPatchArgs{...}
type OCIRepositoryStatusObservedLayerSelectorPatchInput interface {
	pulumi.Input

	ToOCIRepositoryStatusObservedLayerSelectorPatchOutput() OCIRepositoryStatusObservedLayerSelectorPatchOutput
	ToOCIRepositoryStatusObservedLayerSelectorPatchOutputWithContext(context.Context) OCIRepositoryStatusObservedLayerSelectorPatchOutput
}

// ObservedLayerSelector is the observed layer selector used for constructing
// the source artifact.
type OCIRepositoryStatusObservedLayerSelectorPatchArgs struct {
	// MediaType specifies the OCI media type of the layer
	// which should be extracted from the OCI Artifact. The
	// first layer matching this type is selected.
	MediaType pulumi.StringPtrInput `pulumi:"mediaType"`
	// Operation specifies how the selected layer should be processed.
	// By default, the layer compressed content is extracted to storage.
	// When the operation is set to 'copy', the layer compressed content
	// is persisted to storage as it is.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
}

func (OCIRepositoryStatusObservedLayerSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelectorPatch)(nil)).Elem()
}

func (i OCIRepositoryStatusObservedLayerSelectorPatchArgs) ToOCIRepositoryStatusObservedLayerSelectorPatchOutput() OCIRepositoryStatusObservedLayerSelectorPatchOutput {
	return i.ToOCIRepositoryStatusObservedLayerSelectorPatchOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusObservedLayerSelectorPatchArgs) ToOCIRepositoryStatusObservedLayerSelectorPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusObservedLayerSelectorPatchOutput)
}

func (i OCIRepositoryStatusObservedLayerSelectorPatchArgs) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutput() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return i.ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusObservedLayerSelectorPatchArgs) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusObservedLayerSelectorPatchOutput).ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(ctx)
}

// OCIRepositoryStatusObservedLayerSelectorPatchPtrInput is an input type that accepts OCIRepositoryStatusObservedLayerSelectorPatchArgs, OCIRepositoryStatusObservedLayerSelectorPatchPtr and OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusObservedLayerSelectorPatchPtrInput` via:
//
//	        OCIRepositoryStatusObservedLayerSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositoryStatusObservedLayerSelectorPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutput() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput
	ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(context.Context) OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput
}

type ocirepositoryStatusObservedLayerSelectorPatchPtrType OCIRepositoryStatusObservedLayerSelectorPatchArgs

func OCIRepositoryStatusObservedLayerSelectorPatchPtr(v *OCIRepositoryStatusObservedLayerSelectorPatchArgs) OCIRepositoryStatusObservedLayerSelectorPatchPtrInput {
	return (*ocirepositoryStatusObservedLayerSelectorPatchPtrType)(v)
}

func (*ocirepositoryStatusObservedLayerSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusObservedLayerSelectorPatch)(nil)).Elem()
}

func (i *ocirepositoryStatusObservedLayerSelectorPatchPtrType) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutput() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return i.ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositoryStatusObservedLayerSelectorPatchPtrType) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput)
}

// ObservedLayerSelector is the observed layer selector used for constructing
// the source artifact.
type OCIRepositoryStatusObservedLayerSelectorPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusObservedLayerSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelectorPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchOutput) ToOCIRepositoryStatusObservedLayerSelectorPatchOutput() OCIRepositoryStatusObservedLayerSelectorPatchOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchOutput) ToOCIRepositoryStatusObservedLayerSelectorPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPatchOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchOutput) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutput() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return o.ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchOutput) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositoryStatusObservedLayerSelectorPatch) *OCIRepositoryStatusObservedLayerSelectorPatch {
		return &v
	}).(OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositoryStatusObservedLayerSelectorPatchOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusObservedLayerSelectorPatch) *string { return v.MediaType }).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositoryStatusObservedLayerSelectorPatchOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusObservedLayerSelectorPatch) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusObservedLayerSelectorPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutput() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput) ToOCIRepositoryStatusObservedLayerSelectorPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return o
}

func (o OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput) Elem() OCIRepositoryStatusObservedLayerSelectorPatchOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusObservedLayerSelectorPatch) OCIRepositoryStatusObservedLayerSelectorPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositoryStatusObservedLayerSelectorPatch
		return ret
	}).(OCIRepositoryStatusObservedLayerSelectorPatchOutput)
}

// MediaType specifies the OCI media type of the layer
// which should be extracted from the OCI Artifact. The
// first layer matching this type is selected.
func (o OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusObservedLayerSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Operation specifies how the selected layer should be processed.
// By default, the layer compressed content is extracted to storage.
// When the operation is set to 'copy', the layer compressed content
// is persisted to storage as it is.
func (o OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusObservedLayerSelectorPatch) *string {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(pulumi.StringPtrOutput)
}

// OCIRepositoryStatus defines the observed state of OCIRepository
type OCIRepositoryStatusPatch struct {
	Artifact *OCIRepositoryStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the OCIRepository.
	Conditions []OCIRepositoryStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore        *string                                        `pulumi:"observedIgnore"`
	ObservedLayerSelector *OCIRepositoryStatusObservedLayerSelectorPatch `pulumi:"observedLayerSelector"`
	// URL is the download link for the artifact output of the last OCI Repository sync.
	Url *string `pulumi:"url"`
}

// OCIRepositoryStatusPatchInput is an input type that accepts OCIRepositoryStatusPatchArgs and OCIRepositoryStatusPatchOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusPatchInput` via:
//
//	OCIRepositoryStatusPatchArgs{...}
type OCIRepositoryStatusPatchInput interface {
	pulumi.Input

	ToOCIRepositoryStatusPatchOutput() OCIRepositoryStatusPatchOutput
	ToOCIRepositoryStatusPatchOutputWithContext(context.Context) OCIRepositoryStatusPatchOutput
}

// OCIRepositoryStatus defines the observed state of OCIRepository
type OCIRepositoryStatusPatchArgs struct {
	Artifact OCIRepositoryStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the OCIRepository.
	Conditions OCIRepositoryStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedIgnore is the observed exclusion patterns used for constructing
	// the source artifact.
	ObservedIgnore        pulumi.StringPtrInput                                 `pulumi:"observedIgnore"`
	ObservedLayerSelector OCIRepositoryStatusObservedLayerSelectorPatchPtrInput `pulumi:"observedLayerSelector"`
	// URL is the download link for the artifact output of the last OCI Repository sync.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (OCIRepositoryStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusPatch)(nil)).Elem()
}

func (i OCIRepositoryStatusPatchArgs) ToOCIRepositoryStatusPatchOutput() OCIRepositoryStatusPatchOutput {
	return i.ToOCIRepositoryStatusPatchOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusPatchArgs) ToOCIRepositoryStatusPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusPatchOutput)
}

func (i OCIRepositoryStatusPatchArgs) ToOCIRepositoryStatusPatchPtrOutput() OCIRepositoryStatusPatchPtrOutput {
	return i.ToOCIRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i OCIRepositoryStatusPatchArgs) ToOCIRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusPatchOutput).ToOCIRepositoryStatusPatchPtrOutputWithContext(ctx)
}

// OCIRepositoryStatusPatchPtrInput is an input type that accepts OCIRepositoryStatusPatchArgs, OCIRepositoryStatusPatchPtr and OCIRepositoryStatusPatchPtrOutput values.
// You can construct a concrete instance of `OCIRepositoryStatusPatchPtrInput` via:
//
//	        OCIRepositoryStatusPatchArgs{...}
//
//	or:
//
//	        nil
type OCIRepositoryStatusPatchPtrInput interface {
	pulumi.Input

	ToOCIRepositoryStatusPatchPtrOutput() OCIRepositoryStatusPatchPtrOutput
	ToOCIRepositoryStatusPatchPtrOutputWithContext(context.Context) OCIRepositoryStatusPatchPtrOutput
}

type ocirepositoryStatusPatchPtrType OCIRepositoryStatusPatchArgs

func OCIRepositoryStatusPatchPtr(v *OCIRepositoryStatusPatchArgs) OCIRepositoryStatusPatchPtrInput {
	return (*ocirepositoryStatusPatchPtrType)(v)
}

func (*ocirepositoryStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusPatch)(nil)).Elem()
}

func (i *ocirepositoryStatusPatchPtrType) ToOCIRepositoryStatusPatchPtrOutput() OCIRepositoryStatusPatchPtrOutput {
	return i.ToOCIRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i *ocirepositoryStatusPatchPtrType) ToOCIRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryStatusPatchPtrOutput)
}

// OCIRepositoryStatus defines the observed state of OCIRepository
type OCIRepositoryStatusPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OCIRepositoryStatusPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusPatchOutput) ToOCIRepositoryStatusPatchOutput() OCIRepositoryStatusPatchOutput {
	return o
}

func (o OCIRepositoryStatusPatchOutput) ToOCIRepositoryStatusPatchOutputWithContext(ctx context.Context) OCIRepositoryStatusPatchOutput {
	return o
}

func (o OCIRepositoryStatusPatchOutput) ToOCIRepositoryStatusPatchPtrOutput() OCIRepositoryStatusPatchPtrOutput {
	return o.ToOCIRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (o OCIRepositoryStatusPatchOutput) ToOCIRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OCIRepositoryStatusPatch) *OCIRepositoryStatusPatch {
		return &v
	}).(OCIRepositoryStatusPatchPtrOutput)
}

func (o OCIRepositoryStatusPatchOutput) Artifact() OCIRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) *OCIRepositoryStatusArtifactPatch { return v.Artifact }).(OCIRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the OCIRepository.
func (o OCIRepositoryStatusPatchOutput) Conditions() OCIRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) []OCIRepositoryStatusConditionsPatch { return v.Conditions }).(OCIRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o OCIRepositoryStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o OCIRepositoryStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o OCIRepositoryStatusPatchOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) *string { return v.ObservedIgnore }).(pulumi.StringPtrOutput)
}

func (o OCIRepositoryStatusPatchOutput) ObservedLayerSelector() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) *OCIRepositoryStatusObservedLayerSelectorPatch {
		return v.ObservedLayerSelector
	}).(OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput)
}

// URL is the download link for the artifact output of the last OCI Repository sync.
func (o OCIRepositoryStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OCIRepositoryStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type OCIRepositoryStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (OCIRepositoryStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryStatusPatch)(nil)).Elem()
}

func (o OCIRepositoryStatusPatchPtrOutput) ToOCIRepositoryStatusPatchPtrOutput() OCIRepositoryStatusPatchPtrOutput {
	return o
}

func (o OCIRepositoryStatusPatchPtrOutput) ToOCIRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) OCIRepositoryStatusPatchPtrOutput {
	return o
}

func (o OCIRepositoryStatusPatchPtrOutput) Elem() OCIRepositoryStatusPatchOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) OCIRepositoryStatusPatch {
		if v != nil {
			return *v
		}
		var ret OCIRepositoryStatusPatch
		return ret
	}).(OCIRepositoryStatusPatchOutput)
}

func (o OCIRepositoryStatusPatchPtrOutput) Artifact() OCIRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) *OCIRepositoryStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(OCIRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the OCIRepository.
func (o OCIRepositoryStatusPatchPtrOutput) Conditions() OCIRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) []OCIRepositoryStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(OCIRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o OCIRepositoryStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o OCIRepositoryStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedIgnore is the observed exclusion patterns used for constructing
// the source artifact.
func (o OCIRepositoryStatusPatchPtrOutput) ObservedIgnore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedIgnore
	}).(pulumi.StringPtrOutput)
}

func (o OCIRepositoryStatusPatchPtrOutput) ObservedLayerSelector() OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) *OCIRepositoryStatusObservedLayerSelectorPatch {
		if v == nil {
			return nil
		}
		return v.ObservedLayerSelector
	}).(OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput)
}

// URL is the download link for the artifact output of the last OCI Repository sync.
func (o OCIRepositoryStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTypeInput)(nil)).Elem(), BucketTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTypeArrayInput)(nil)).Elem(), BucketTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketListTypeInput)(nil)).Elem(), BucketListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPatchTypeInput)(nil)).Elem(), BucketPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecInput)(nil)).Elem(), BucketSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecPtrInput)(nil)).Elem(), BucketSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecCertSecretRefInput)(nil)).Elem(), BucketSpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecCertSecretRefPtrInput)(nil)).Elem(), BucketSpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecCertSecretRefPatchInput)(nil)).Elem(), BucketSpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecCertSecretRefPatchPtrInput)(nil)).Elem(), BucketSpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecPatchInput)(nil)).Elem(), BucketSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecPatchPtrInput)(nil)).Elem(), BucketSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecProxySecretRefInput)(nil)).Elem(), BucketSpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecProxySecretRefPtrInput)(nil)).Elem(), BucketSpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecProxySecretRefPatchInput)(nil)).Elem(), BucketSpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecProxySecretRefPatchPtrInput)(nil)).Elem(), BucketSpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefInput)(nil)).Elem(), BucketSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefPtrInput)(nil)).Elem(), BucketSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefPatchInput)(nil)).Elem(), BucketSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefPatchPtrInput)(nil)).Elem(), BucketSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsInput)(nil)).Elem(), BucketSpecStsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsPtrInput)(nil)).Elem(), BucketSpecStsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsCertSecretRefInput)(nil)).Elem(), BucketSpecStsCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsCertSecretRefPtrInput)(nil)).Elem(), BucketSpecStsCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsCertSecretRefPatchInput)(nil)).Elem(), BucketSpecStsCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsCertSecretRefPatchPtrInput)(nil)).Elem(), BucketSpecStsCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsPatchInput)(nil)).Elem(), BucketSpecStsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsPatchPtrInput)(nil)).Elem(), BucketSpecStsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsSecretRefInput)(nil)).Elem(), BucketSpecStsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsSecretRefPtrInput)(nil)).Elem(), BucketSpecStsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsSecretRefPatchInput)(nil)).Elem(), BucketSpecStsSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecStsSecretRefPatchPtrInput)(nil)).Elem(), BucketSpecStsSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusInput)(nil)).Elem(), BucketStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusPtrInput)(nil)).Elem(), BucketStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactInput)(nil)).Elem(), BucketStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactPtrInput)(nil)).Elem(), BucketStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactPatchInput)(nil)).Elem(), BucketStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactPatchPtrInput)(nil)).Elem(), BucketStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsInput)(nil)).Elem(), BucketStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsArrayInput)(nil)).Elem(), BucketStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsPatchInput)(nil)).Elem(), BucketStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsPatchArrayInput)(nil)).Elem(), BucketStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusPatchInput)(nil)).Elem(), BucketStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusPatchPtrInput)(nil)).Elem(), BucketStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryTypeInput)(nil)).Elem(), GitRepositoryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryTypeArrayInput)(nil)).Elem(), GitRepositoryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryListTypeInput)(nil)).Elem(), GitRepositoryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryPatchTypeInput)(nil)).Elem(), GitRepositoryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecInput)(nil)).Elem(), GitRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecPtrInput)(nil)).Elem(), GitRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeInput)(nil)).Elem(), GitRepositorySpecIncludeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeArrayInput)(nil)).Elem(), GitRepositorySpecIncludeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludePatchInput)(nil)).Elem(), GitRepositorySpecIncludePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludePatchArrayInput)(nil)).Elem(), GitRepositorySpecIncludePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPtrInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatchInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatchPtrInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecPatchInput)(nil)).Elem(), GitRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecPatchPtrInput)(nil)).Elem(), GitRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecProxySecretRefInput)(nil)).Elem(), GitRepositorySpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecProxySecretRefPtrInput)(nil)).Elem(), GitRepositorySpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecProxySecretRefPatchInput)(nil)).Elem(), GitRepositorySpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecProxySecretRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefInput)(nil)).Elem(), GitRepositorySpecRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefPtrInput)(nil)).Elem(), GitRepositorySpecRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefPatchInput)(nil)).Elem(), GitRepositorySpecRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefInput)(nil)).Elem(), GitRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefPtrInput)(nil)).Elem(), GitRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefPatchInput)(nil)).Elem(), GitRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyInput)(nil)).Elem(), GitRepositorySpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyPtrInput)(nil)).Elem(), GitRepositorySpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyPatchInput)(nil)).Elem(), GitRepositorySpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyPatchPtrInput)(nil)).Elem(), GitRepositorySpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefPtrInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatchInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusInput)(nil)).Elem(), GitRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusPtrInput)(nil)).Elem(), GitRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactInput)(nil)).Elem(), GitRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactPtrInput)(nil)).Elem(), GitRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactPatchInput)(nil)).Elem(), GitRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactPatchPtrInput)(nil)).Elem(), GitRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsInput)(nil)).Elem(), GitRepositoryStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsArrayInput)(nil)).Elem(), GitRepositoryStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsPatchInput)(nil)).Elem(), GitRepositoryStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsPatchArrayInput)(nil)).Elem(), GitRepositoryStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsArrayInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatchInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatchArrayInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludeInput)(nil)).Elem(), GitRepositoryStatusObservedIncludeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludeArrayInput)(nil)).Elem(), GitRepositoryStatusObservedIncludeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludePatchInput)(nil)).Elem(), GitRepositoryStatusObservedIncludePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludePatchArrayInput)(nil)).Elem(), GitRepositoryStatusObservedIncludePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepositoryInput)(nil)).Elem(), GitRepositoryStatusObservedIncludeRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepositoryPtrInput)(nil)).Elem(), GitRepositoryStatusObservedIncludeRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepositoryPatchInput)(nil)).Elem(), GitRepositoryStatusObservedIncludeRepositoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusObservedIncludeRepositoryPatchPtrInput)(nil)).Elem(), GitRepositoryStatusObservedIncludeRepositoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusPatchInput)(nil)).Elem(), GitRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusPatchPtrInput)(nil)).Elem(), GitRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartTypeInput)(nil)).Elem(), HelmChartTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartTypeArrayInput)(nil)).Elem(), HelmChartTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartListTypeInput)(nil)).Elem(), HelmChartListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartPatchTypeInput)(nil)).Elem(), HelmChartPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecInput)(nil)).Elem(), HelmChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecPtrInput)(nil)).Elem(), HelmChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecPatchInput)(nil)).Elem(), HelmChartSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecPatchPtrInput)(nil)).Elem(), HelmChartSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefInput)(nil)).Elem(), HelmChartSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefPtrInput)(nil)).Elem(), HelmChartSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefPatchInput)(nil)).Elem(), HelmChartSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefPatchPtrInput)(nil)).Elem(), HelmChartSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyInput)(nil)).Elem(), HelmChartSpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyPtrInput)(nil)).Elem(), HelmChartSpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentityInput)(nil)).Elem(), HelmChartSpecVerifyMatchOIDCIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentityArrayInput)(nil)).Elem(), HelmChartSpecVerifyMatchOIDCIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentityPatchInput)(nil)).Elem(), HelmChartSpecVerifyMatchOIDCIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyMatchOIDCIdentityPatchArrayInput)(nil)).Elem(), HelmChartSpecVerifyMatchOIDCIdentityPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyPatchInput)(nil)).Elem(), HelmChartSpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifyPatchPtrInput)(nil)).Elem(), HelmChartSpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifySecretRefInput)(nil)).Elem(), HelmChartSpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifySecretRefPtrInput)(nil)).Elem(), HelmChartSpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifySecretRefPatchInput)(nil)).Elem(), HelmChartSpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecVerifySecretRefPatchPtrInput)(nil)).Elem(), HelmChartSpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusInput)(nil)).Elem(), HelmChartStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusPtrInput)(nil)).Elem(), HelmChartStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactInput)(nil)).Elem(), HelmChartStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactPtrInput)(nil)).Elem(), HelmChartStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactPatchInput)(nil)).Elem(), HelmChartStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactPatchPtrInput)(nil)).Elem(), HelmChartStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsInput)(nil)).Elem(), HelmChartStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsArrayInput)(nil)).Elem(), HelmChartStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsPatchInput)(nil)).Elem(), HelmChartStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsPatchArrayInput)(nil)).Elem(), HelmChartStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusPatchInput)(nil)).Elem(), HelmChartStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusPatchPtrInput)(nil)).Elem(), HelmChartStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryTypeInput)(nil)).Elem(), HelmRepositoryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryTypeArrayInput)(nil)).Elem(), HelmRepositoryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryListTypeInput)(nil)).Elem(), HelmRepositoryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryPatchTypeInput)(nil)).Elem(), HelmRepositoryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecInput)(nil)).Elem(), HelmRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecPtrInput)(nil)).Elem(), HelmRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromInput)(nil)).Elem(), HelmRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromPtrInput)(nil)).Elem(), HelmRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromPatchInput)(nil)).Elem(), HelmRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromPatchPtrInput)(nil)).Elem(), HelmRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecCertSecretRefInput)(nil)).Elem(), HelmRepositorySpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecCertSecretRefPtrInput)(nil)).Elem(), HelmRepositorySpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecCertSecretRefPatchInput)(nil)).Elem(), HelmRepositorySpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecCertSecretRefPatchPtrInput)(nil)).Elem(), HelmRepositorySpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecPatchInput)(nil)).Elem(), HelmRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecPatchPtrInput)(nil)).Elem(), HelmRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefInput)(nil)).Elem(), HelmRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefPtrInput)(nil)).Elem(), HelmRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefPatchInput)(nil)).Elem(), HelmRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefPatchPtrInput)(nil)).Elem(), HelmRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusInput)(nil)).Elem(), HelmRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusPtrInput)(nil)).Elem(), HelmRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactInput)(nil)).Elem(), HelmRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactPtrInput)(nil)).Elem(), HelmRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactPatchInput)(nil)).Elem(), HelmRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactPatchPtrInput)(nil)).Elem(), HelmRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsInput)(nil)).Elem(), HelmRepositoryStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsArrayInput)(nil)).Elem(), HelmRepositoryStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsPatchInput)(nil)).Elem(), HelmRepositoryStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsPatchArrayInput)(nil)).Elem(), HelmRepositoryStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusPatchInput)(nil)).Elem(), HelmRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusPatchPtrInput)(nil)).Elem(), HelmRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryTypeInput)(nil)).Elem(), OCIRepositoryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryTypeArrayInput)(nil)).Elem(), OCIRepositoryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryListTypeInput)(nil)).Elem(), OCIRepositoryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryPatchTypeInput)(nil)).Elem(), OCIRepositoryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecInput)(nil)).Elem(), OCIRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecPtrInput)(nil)).Elem(), OCIRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecCertSecretRefInput)(nil)).Elem(), OCIRepositorySpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecCertSecretRefPtrInput)(nil)).Elem(), OCIRepositorySpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecCertSecretRefPatchInput)(nil)).Elem(), OCIRepositorySpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecCertSecretRefPatchPtrInput)(nil)).Elem(), OCIRepositorySpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecLayerSelectorInput)(nil)).Elem(), OCIRepositorySpecLayerSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecLayerSelectorPtrInput)(nil)).Elem(), OCIRepositorySpecLayerSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecLayerSelectorPatchInput)(nil)).Elem(), OCIRepositorySpecLayerSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecLayerSelectorPatchPtrInput)(nil)).Elem(), OCIRepositorySpecLayerSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecPatchInput)(nil)).Elem(), OCIRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecPatchPtrInput)(nil)).Elem(), OCIRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecProxySecretRefInput)(nil)).Elem(), OCIRepositorySpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecProxySecretRefPtrInput)(nil)).Elem(), OCIRepositorySpecProxySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecProxySecretRefPatchInput)(nil)).Elem(), OCIRepositorySpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecProxySecretRefPatchPtrInput)(nil)).Elem(), OCIRepositorySpecProxySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecRefInput)(nil)).Elem(), OCIRepositorySpecRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecRefPtrInput)(nil)).Elem(), OCIRepositorySpecRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecRefPatchInput)(nil)).Elem(), OCIRepositorySpecRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecRefPatchPtrInput)(nil)).Elem(), OCIRepositorySpecRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecSecretRefInput)(nil)).Elem(), OCIRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecSecretRefPtrInput)(nil)).Elem(), OCIRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecSecretRefPatchInput)(nil)).Elem(), OCIRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecSecretRefPatchPtrInput)(nil)).Elem(), OCIRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyInput)(nil)).Elem(), OCIRepositorySpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyPtrInput)(nil)).Elem(), OCIRepositorySpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentityInput)(nil)).Elem(), OCIRepositorySpecVerifyMatchOIDCIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentityArrayInput)(nil)).Elem(), OCIRepositorySpecVerifyMatchOIDCIdentityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentityPatchInput)(nil)).Elem(), OCIRepositorySpecVerifyMatchOIDCIdentityPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayInput)(nil)).Elem(), OCIRepositorySpecVerifyMatchOIDCIdentityPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyPatchInput)(nil)).Elem(), OCIRepositorySpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifyPatchPtrInput)(nil)).Elem(), OCIRepositorySpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifySecretRefInput)(nil)).Elem(), OCIRepositorySpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifySecretRefPtrInput)(nil)).Elem(), OCIRepositorySpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifySecretRefPatchInput)(nil)).Elem(), OCIRepositorySpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositorySpecVerifySecretRefPatchPtrInput)(nil)).Elem(), OCIRepositorySpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusInput)(nil)).Elem(), OCIRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusPtrInput)(nil)).Elem(), OCIRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusArtifactInput)(nil)).Elem(), OCIRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusArtifactPtrInput)(nil)).Elem(), OCIRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusArtifactPatchInput)(nil)).Elem(), OCIRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusArtifactPatchPtrInput)(nil)).Elem(), OCIRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusConditionsInput)(nil)).Elem(), OCIRepositoryStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusConditionsArrayInput)(nil)).Elem(), OCIRepositoryStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusConditionsPatchInput)(nil)).Elem(), OCIRepositoryStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusConditionsPatchArrayInput)(nil)).Elem(), OCIRepositoryStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelectorInput)(nil)).Elem(), OCIRepositoryStatusObservedLayerSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelectorPtrInput)(nil)).Elem(), OCIRepositoryStatusObservedLayerSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelectorPatchInput)(nil)).Elem(), OCIRepositoryStatusObservedLayerSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusObservedLayerSelectorPatchPtrInput)(nil)).Elem(), OCIRepositoryStatusObservedLayerSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusPatchInput)(nil)).Elem(), OCIRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryStatusPatchPtrInput)(nil)).Elem(), OCIRepositoryStatusPatchArgs{})
	pulumi.RegisterOutputType(BucketTypeOutput{})
	pulumi.RegisterOutputType(BucketTypeArrayOutput{})
	pulumi.RegisterOutputType(BucketListTypeOutput{})
	pulumi.RegisterOutputType(BucketPatchTypeOutput{})
	pulumi.RegisterOutputType(BucketSpecOutput{})
	pulumi.RegisterOutputType(BucketSpecPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecCertSecretRefOutput{})
	pulumi.RegisterOutputType(BucketSpecCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecProxySecretRefOutput{})
	pulumi.RegisterOutputType(BucketSpecProxySecretRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecProxySecretRefPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecProxySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecStsOutput{})
	pulumi.RegisterOutputType(BucketSpecStsPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecStsCertSecretRefOutput{})
	pulumi.RegisterOutputType(BucketSpecStsCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecStsCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecStsCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecStsPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecStsPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecStsSecretRefOutput{})
	pulumi.RegisterOutputType(BucketSpecStsSecretRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecStsSecretRefPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecStsSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusOutput{})
	pulumi.RegisterOutputType(BucketStatusPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(BucketStatusPatchOutput{})
	pulumi.RegisterOutputType(BucketStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryTypeOutput{})
	pulumi.RegisterOutputType(GitRepositoryTypeArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryListTypeOutput{})
	pulumi.RegisterOutputType(GitRepositoryPatchTypeOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeArrayOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludePatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludePatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecProxySecretRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecProxySecretRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecProxySecretRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecProxySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsPatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludeOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludeArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludePatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludePatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludeRepositoryOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludeRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludeRepositoryPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusObservedIncludeRepositoryPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartTypeOutput{})
	pulumi.RegisterOutputType(HelmChartTypeArrayOutput{})
	pulumi.RegisterOutputType(HelmChartListTypeOutput{})
	pulumi.RegisterOutputType(HelmChartPatchTypeOutput{})
	pulumi.RegisterOutputType(HelmChartSpecOutput{})
	pulumi.RegisterOutputType(HelmChartSpecPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyMatchOIDCIdentityOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyMatchOIDCIdentityArrayOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyMatchOIDCIdentityPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyMatchOIDCIdentityPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifyPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifySecretRefOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifySecretRefPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifySecretRefPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecVerifySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusOutput{})
	pulumi.RegisterOutputType(HelmChartStatusPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmChartStatusPatchOutput{})
	pulumi.RegisterOutputType(HelmChartStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryTypeOutput{})
	pulumi.RegisterOutputType(HelmRepositoryTypeArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryListTypeOutput{})
	pulumi.RegisterOutputType(HelmRepositoryPatchTypeOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecCertSecretRefOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryTypeOutput{})
	pulumi.RegisterOutputType(OCIRepositoryTypeArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositoryListTypeOutput{})
	pulumi.RegisterOutputType(OCIRepositoryPatchTypeOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecCertSecretRefOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecLayerSelectorOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecLayerSelectorPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecLayerSelectorPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecLayerSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecProxySecretRefOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecProxySecretRefPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecProxySecretRefPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecProxySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecRefOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecRefPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecRefPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecRefPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecSecretRefOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyMatchOIDCIdentityOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyMatchOIDCIdentityArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyMatchOIDCIdentityPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyMatchOIDCIdentityPatchArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifyPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifySecretRefOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifySecretRefPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifySecretRefPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositorySpecVerifySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusArtifactOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusConditionsOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusObservedLayerSelectorOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusObservedLayerSelectorPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusObservedLayerSelectorPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusObservedLayerSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositoryStatusPatchPtrOutput{})
}
