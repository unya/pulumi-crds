// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmChartList is a list of HelmChart
type HelmChartList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmChartTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewHelmChartList registers a new resource with the given unique name, arguments, and options.
func NewHelmChartList(ctx *pulumi.Context,
	name string, args *HelmChartListArgs, opts ...pulumi.ResourceOption) (*HelmChartList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1")
	args.Kind = pulumi.StringPtr("HelmChartList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmChartList
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1:HelmChartList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmChartList gets an existing HelmChartList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmChartList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmChartListState, opts ...pulumi.ResourceOption) (*HelmChartList, error) {
	var resource HelmChartList
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1:HelmChartList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmChartList resources.
type helmChartListState struct {
}

type HelmChartListState struct {
}

func (HelmChartListState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmChartListState)(nil)).Elem()
}

type helmChartListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmChartType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a HelmChartList resource.
type HelmChartListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmChartTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (HelmChartListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmChartListArgs)(nil)).Elem()
}

type HelmChartListInput interface {
	pulumi.Input

	ToHelmChartListOutput() HelmChartListOutput
	ToHelmChartListOutputWithContext(ctx context.Context) HelmChartListOutput
}

func (*HelmChartList) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartList)(nil)).Elem()
}

func (i *HelmChartList) ToHelmChartListOutput() HelmChartListOutput {
	return i.ToHelmChartListOutputWithContext(context.Background())
}

func (i *HelmChartList) ToHelmChartListOutputWithContext(ctx context.Context) HelmChartListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartListOutput)
}

// HelmChartListArrayInput is an input type that accepts HelmChartListArray and HelmChartListArrayOutput values.
// You can construct a concrete instance of `HelmChartListArrayInput` via:
//
//	HelmChartListArray{ HelmChartListArgs{...} }
type HelmChartListArrayInput interface {
	pulumi.Input

	ToHelmChartListArrayOutput() HelmChartListArrayOutput
	ToHelmChartListArrayOutputWithContext(context.Context) HelmChartListArrayOutput
}

type HelmChartListArray []HelmChartListInput

func (HelmChartListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmChartList)(nil)).Elem()
}

func (i HelmChartListArray) ToHelmChartListArrayOutput() HelmChartListArrayOutput {
	return i.ToHelmChartListArrayOutputWithContext(context.Background())
}

func (i HelmChartListArray) ToHelmChartListArrayOutputWithContext(ctx context.Context) HelmChartListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartListArrayOutput)
}

// HelmChartListMapInput is an input type that accepts HelmChartListMap and HelmChartListMapOutput values.
// You can construct a concrete instance of `HelmChartListMapInput` via:
//
//	HelmChartListMap{ "key": HelmChartListArgs{...} }
type HelmChartListMapInput interface {
	pulumi.Input

	ToHelmChartListMapOutput() HelmChartListMapOutput
	ToHelmChartListMapOutputWithContext(context.Context) HelmChartListMapOutput
}

type HelmChartListMap map[string]HelmChartListInput

func (HelmChartListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmChartList)(nil)).Elem()
}

func (i HelmChartListMap) ToHelmChartListMapOutput() HelmChartListMapOutput {
	return i.ToHelmChartListMapOutputWithContext(context.Background())
}

func (i HelmChartListMap) ToHelmChartListMapOutputWithContext(ctx context.Context) HelmChartListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartListMapOutput)
}

type HelmChartListOutput struct{ *pulumi.OutputState }

func (HelmChartListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartList)(nil)).Elem()
}

func (o HelmChartListOutput) ToHelmChartListOutput() HelmChartListOutput {
	return o
}

func (o HelmChartListOutput) ToHelmChartListOutputWithContext(ctx context.Context) HelmChartListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmChartList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmChartListOutput) Items() HelmChartTypeArrayOutput {
	return o.ApplyT(func(v *HelmChartList) HelmChartTypeArrayOutput { return v.Items }).(HelmChartTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmChartList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *HelmChartList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type HelmChartListArrayOutput struct{ *pulumi.OutputState }

func (HelmChartListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmChartList)(nil)).Elem()
}

func (o HelmChartListArrayOutput) ToHelmChartListArrayOutput() HelmChartListArrayOutput {
	return o
}

func (o HelmChartListArrayOutput) ToHelmChartListArrayOutputWithContext(ctx context.Context) HelmChartListArrayOutput {
	return o
}

func (o HelmChartListArrayOutput) Index(i pulumi.IntInput) HelmChartListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmChartList {
		return vs[0].([]*HelmChartList)[vs[1].(int)]
	}).(HelmChartListOutput)
}

type HelmChartListMapOutput struct{ *pulumi.OutputState }

func (HelmChartListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmChartList)(nil)).Elem()
}

func (o HelmChartListMapOutput) ToHelmChartListMapOutput() HelmChartListMapOutput {
	return o
}

func (o HelmChartListMapOutput) ToHelmChartListMapOutputWithContext(ctx context.Context) HelmChartListMapOutput {
	return o
}

func (o HelmChartListMapOutput) MapIndex(k pulumi.StringInput) HelmChartListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmChartList {
		return vs[0].(map[string]*HelmChartList)[vs[1].(string)]
	}).(HelmChartListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartListInput)(nil)).Elem(), &HelmChartList{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartListArrayInput)(nil)).Elem(), HelmChartListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartListMapInput)(nil)).Elem(), HelmChartListMap{})
	pulumi.RegisterOutputType(HelmChartListOutput{})
	pulumi.RegisterOutputType(HelmChartListArrayOutput{})
	pulumi.RegisterOutputType(HelmChartListMapOutput{})
}
