// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmRepositoryTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewHelmRepositoryList registers a new resource with the given unique name, arguments, and options.
func NewHelmRepositoryList(ctx *pulumi.Context,
	name string, args *HelmRepositoryListArgs, opts ...pulumi.ResourceOption) (*HelmRepositoryList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1")
	args.Kind = pulumi.StringPtr("HelmRepositoryList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmRepositoryList
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1:HelmRepositoryList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmRepositoryList gets an existing HelmRepositoryList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmRepositoryList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmRepositoryListState, opts ...pulumi.ResourceOption) (*HelmRepositoryList, error) {
	var resource HelmRepositoryList
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1:HelmRepositoryList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmRepositoryList resources.
type helmRepositoryListState struct {
}

type HelmRepositoryListState struct {
}

func (HelmRepositoryListState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmRepositoryListState)(nil)).Elem()
}

type helmRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a HelmRepositoryList resource.
type HelmRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmRepositoryTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (HelmRepositoryListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmRepositoryListArgs)(nil)).Elem()
}

type HelmRepositoryListInput interface {
	pulumi.Input

	ToHelmRepositoryListOutput() HelmRepositoryListOutput
	ToHelmRepositoryListOutputWithContext(ctx context.Context) HelmRepositoryListOutput
}

func (*HelmRepositoryList) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryList)(nil)).Elem()
}

func (i *HelmRepositoryList) ToHelmRepositoryListOutput() HelmRepositoryListOutput {
	return i.ToHelmRepositoryListOutputWithContext(context.Background())
}

func (i *HelmRepositoryList) ToHelmRepositoryListOutputWithContext(ctx context.Context) HelmRepositoryListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryListOutput)
}

// HelmRepositoryListArrayInput is an input type that accepts HelmRepositoryListArray and HelmRepositoryListArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryListArrayInput` via:
//
//	HelmRepositoryListArray{ HelmRepositoryListArgs{...} }
type HelmRepositoryListArrayInput interface {
	pulumi.Input

	ToHelmRepositoryListArrayOutput() HelmRepositoryListArrayOutput
	ToHelmRepositoryListArrayOutputWithContext(context.Context) HelmRepositoryListArrayOutput
}

type HelmRepositoryListArray []HelmRepositoryListInput

func (HelmRepositoryListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRepositoryList)(nil)).Elem()
}

func (i HelmRepositoryListArray) ToHelmRepositoryListArrayOutput() HelmRepositoryListArrayOutput {
	return i.ToHelmRepositoryListArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryListArray) ToHelmRepositoryListArrayOutputWithContext(ctx context.Context) HelmRepositoryListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryListArrayOutput)
}

// HelmRepositoryListMapInput is an input type that accepts HelmRepositoryListMap and HelmRepositoryListMapOutput values.
// You can construct a concrete instance of `HelmRepositoryListMapInput` via:
//
//	HelmRepositoryListMap{ "key": HelmRepositoryListArgs{...} }
type HelmRepositoryListMapInput interface {
	pulumi.Input

	ToHelmRepositoryListMapOutput() HelmRepositoryListMapOutput
	ToHelmRepositoryListMapOutputWithContext(context.Context) HelmRepositoryListMapOutput
}

type HelmRepositoryListMap map[string]HelmRepositoryListInput

func (HelmRepositoryListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRepositoryList)(nil)).Elem()
}

func (i HelmRepositoryListMap) ToHelmRepositoryListMapOutput() HelmRepositoryListMapOutput {
	return i.ToHelmRepositoryListMapOutputWithContext(context.Background())
}

func (i HelmRepositoryListMap) ToHelmRepositoryListMapOutputWithContext(ctx context.Context) HelmRepositoryListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryListMapOutput)
}

type HelmRepositoryListOutput struct{ *pulumi.OutputState }

func (HelmRepositoryListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryList)(nil)).Elem()
}

func (o HelmRepositoryListOutput) ToHelmRepositoryListOutput() HelmRepositoryListOutput {
	return o
}

func (o HelmRepositoryListOutput) ToHelmRepositoryListOutputWithContext(ctx context.Context) HelmRepositoryListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmRepositoryList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmRepositoryListOutput) Items() HelmRepositoryTypeArrayOutput {
	return o.ApplyT(func(v *HelmRepositoryList) HelmRepositoryTypeArrayOutput { return v.Items }).(HelmRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmRepositoryList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *HelmRepositoryList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type HelmRepositoryListArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRepositoryList)(nil)).Elem()
}

func (o HelmRepositoryListArrayOutput) ToHelmRepositoryListArrayOutput() HelmRepositoryListArrayOutput {
	return o
}

func (o HelmRepositoryListArrayOutput) ToHelmRepositoryListArrayOutputWithContext(ctx context.Context) HelmRepositoryListArrayOutput {
	return o
}

func (o HelmRepositoryListArrayOutput) Index(i pulumi.IntInput) HelmRepositoryListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmRepositoryList {
		return vs[0].([]*HelmRepositoryList)[vs[1].(int)]
	}).(HelmRepositoryListOutput)
}

type HelmRepositoryListMapOutput struct{ *pulumi.OutputState }

func (HelmRepositoryListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRepositoryList)(nil)).Elem()
}

func (o HelmRepositoryListMapOutput) ToHelmRepositoryListMapOutput() HelmRepositoryListMapOutput {
	return o
}

func (o HelmRepositoryListMapOutput) ToHelmRepositoryListMapOutputWithContext(ctx context.Context) HelmRepositoryListMapOutput {
	return o
}

func (o HelmRepositoryListMapOutput) MapIndex(k pulumi.StringInput) HelmRepositoryListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmRepositoryList {
		return vs[0].(map[string]*HelmRepositoryList)[vs[1].(string)]
	}).(HelmRepositoryListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryListInput)(nil)).Elem(), &HelmRepositoryList{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryListArrayInput)(nil)).Elem(), HelmRepositoryListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryListMapInput)(nil)).Elem(), HelmRepositoryListMap{})
	pulumi.RegisterOutputType(HelmRepositoryListOutput{})
	pulumi.RegisterOutputType(HelmRepositoryListArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryListMapOutput{})
}
