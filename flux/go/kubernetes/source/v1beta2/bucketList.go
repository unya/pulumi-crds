// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BucketList is a list of Bucket
type BucketList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BucketTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewBucketList registers a new resource with the given unique name, arguments, and options.
func NewBucketList(ctx *pulumi.Context,
	name string, args *BucketListArgs, opts ...pulumi.ResourceOption) (*BucketList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta2")
	args.Kind = pulumi.StringPtr("BucketList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BucketList
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:BucketList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketList gets an existing BucketList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketListState, opts ...pulumi.ResourceOption) (*BucketList, error) {
	var resource BucketList
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:BucketList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketList resources.
type bucketListState struct {
}

type BucketListState struct {
}

func (BucketListState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketListState)(nil)).Elem()
}

type bucketListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []BucketType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a BucketList resource.
type BucketListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BucketTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (BucketListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketListArgs)(nil)).Elem()
}

type BucketListInput interface {
	pulumi.Input

	ToBucketListOutput() BucketListOutput
	ToBucketListOutputWithContext(ctx context.Context) BucketListOutput
}

func (*BucketList) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketList)(nil)).Elem()
}

func (i *BucketList) ToBucketListOutput() BucketListOutput {
	return i.ToBucketListOutputWithContext(context.Background())
}

func (i *BucketList) ToBucketListOutputWithContext(ctx context.Context) BucketListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketListOutput)
}

// BucketListArrayInput is an input type that accepts BucketListArray and BucketListArrayOutput values.
// You can construct a concrete instance of `BucketListArrayInput` via:
//
//	BucketListArray{ BucketListArgs{...} }
type BucketListArrayInput interface {
	pulumi.Input

	ToBucketListArrayOutput() BucketListArrayOutput
	ToBucketListArrayOutputWithContext(context.Context) BucketListArrayOutput
}

type BucketListArray []BucketListInput

func (BucketListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketList)(nil)).Elem()
}

func (i BucketListArray) ToBucketListArrayOutput() BucketListArrayOutput {
	return i.ToBucketListArrayOutputWithContext(context.Background())
}

func (i BucketListArray) ToBucketListArrayOutputWithContext(ctx context.Context) BucketListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketListArrayOutput)
}

// BucketListMapInput is an input type that accepts BucketListMap and BucketListMapOutput values.
// You can construct a concrete instance of `BucketListMapInput` via:
//
//	BucketListMap{ "key": BucketListArgs{...} }
type BucketListMapInput interface {
	pulumi.Input

	ToBucketListMapOutput() BucketListMapOutput
	ToBucketListMapOutputWithContext(context.Context) BucketListMapOutput
}

type BucketListMap map[string]BucketListInput

func (BucketListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketList)(nil)).Elem()
}

func (i BucketListMap) ToBucketListMapOutput() BucketListMapOutput {
	return i.ToBucketListMapOutputWithContext(context.Background())
}

func (i BucketListMap) ToBucketListMapOutputWithContext(ctx context.Context) BucketListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketListMapOutput)
}

type BucketListOutput struct{ *pulumi.OutputState }

func (BucketListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketList)(nil)).Elem()
}

func (o BucketListOutput) ToBucketListOutput() BucketListOutput {
	return o
}

func (o BucketListOutput) ToBucketListOutputWithContext(ctx context.Context) BucketListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o BucketListOutput) Items() BucketTypeArrayOutput {
	return o.ApplyT(func(v *BucketList) BucketTypeArrayOutput { return v.Items }).(BucketTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *BucketList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type BucketListArrayOutput struct{ *pulumi.OutputState }

func (BucketListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketList)(nil)).Elem()
}

func (o BucketListArrayOutput) ToBucketListArrayOutput() BucketListArrayOutput {
	return o
}

func (o BucketListArrayOutput) ToBucketListArrayOutputWithContext(ctx context.Context) BucketListArrayOutput {
	return o
}

func (o BucketListArrayOutput) Index(i pulumi.IntInput) BucketListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketList {
		return vs[0].([]*BucketList)[vs[1].(int)]
	}).(BucketListOutput)
}

type BucketListMapOutput struct{ *pulumi.OutputState }

func (BucketListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketList)(nil)).Elem()
}

func (o BucketListMapOutput) ToBucketListMapOutput() BucketListMapOutput {
	return o
}

func (o BucketListMapOutput) ToBucketListMapOutputWithContext(ctx context.Context) BucketListMapOutput {
	return o
}

func (o BucketListMapOutput) MapIndex(k pulumi.StringInput) BucketListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketList {
		return vs[0].(map[string]*BucketList)[vs[1].(string)]
	}).(BucketListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketListInput)(nil)).Elem(), &BucketList{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketListArrayInput)(nil)).Elem(), BucketListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketListMapInput)(nil)).Elem(), BucketListMap{})
	pulumi.RegisterOutputType(BucketListOutput{})
	pulumi.RegisterOutputType(BucketListArrayOutput{})
	pulumi.RegisterOutputType(BucketListMapOutput{})
}
