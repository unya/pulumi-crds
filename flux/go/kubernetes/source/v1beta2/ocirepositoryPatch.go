// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// OCIRepository is the Schema for the ocirepositories API
type OCIRepositoryPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput   `pulumi:"metadata"`
	Spec     OCIRepositorySpecPatchPtrOutput   `pulumi:"spec"`
	Status   OCIRepositoryStatusPatchPtrOutput `pulumi:"status"`
}

// NewOCIRepositoryPatch registers a new resource with the given unique name, arguments, and options.
func NewOCIRepositoryPatch(ctx *pulumi.Context,
	name string, args *OCIRepositoryPatchArgs, opts ...pulumi.ResourceOption) (*OCIRepositoryPatch, error) {
	if args == nil {
		args = &OCIRepositoryPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta2")
	args.Kind = pulumi.StringPtr("OCIRepository")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1:OCIRepositoryPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OCIRepositoryPatch
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:OCIRepositoryPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOCIRepositoryPatch gets an existing OCIRepositoryPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOCIRepositoryPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OCIRepositoryPatchState, opts ...pulumi.ResourceOption) (*OCIRepositoryPatch, error) {
	var resource OCIRepositoryPatch
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:OCIRepositoryPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OCIRepositoryPatch resources.
type ocirepositoryPatchState struct {
}

type OCIRepositoryPatchState struct {
}

func (OCIRepositoryPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*ocirepositoryPatchState)(nil)).Elem()
}

type ocirepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *OCIRepositorySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a OCIRepositoryPatch resource.
type OCIRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     OCIRepositorySpecPatchPtrInput
}

func (OCIRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ocirepositoryPatchArgs)(nil)).Elem()
}

type OCIRepositoryPatchInput interface {
	pulumi.Input

	ToOCIRepositoryPatchOutput() OCIRepositoryPatchOutput
	ToOCIRepositoryPatchOutputWithContext(ctx context.Context) OCIRepositoryPatchOutput
}

func (*OCIRepositoryPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryPatch)(nil)).Elem()
}

func (i *OCIRepositoryPatch) ToOCIRepositoryPatchOutput() OCIRepositoryPatchOutput {
	return i.ToOCIRepositoryPatchOutputWithContext(context.Background())
}

func (i *OCIRepositoryPatch) ToOCIRepositoryPatchOutputWithContext(ctx context.Context) OCIRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryPatchOutput)
}

// OCIRepositoryPatchArrayInput is an input type that accepts OCIRepositoryPatchArray and OCIRepositoryPatchArrayOutput values.
// You can construct a concrete instance of `OCIRepositoryPatchArrayInput` via:
//
//	OCIRepositoryPatchArray{ OCIRepositoryPatchArgs{...} }
type OCIRepositoryPatchArrayInput interface {
	pulumi.Input

	ToOCIRepositoryPatchArrayOutput() OCIRepositoryPatchArrayOutput
	ToOCIRepositoryPatchArrayOutputWithContext(context.Context) OCIRepositoryPatchArrayOutput
}

type OCIRepositoryPatchArray []OCIRepositoryPatchInput

func (OCIRepositoryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OCIRepositoryPatch)(nil)).Elem()
}

func (i OCIRepositoryPatchArray) ToOCIRepositoryPatchArrayOutput() OCIRepositoryPatchArrayOutput {
	return i.ToOCIRepositoryPatchArrayOutputWithContext(context.Background())
}

func (i OCIRepositoryPatchArray) ToOCIRepositoryPatchArrayOutputWithContext(ctx context.Context) OCIRepositoryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryPatchArrayOutput)
}

// OCIRepositoryPatchMapInput is an input type that accepts OCIRepositoryPatchMap and OCIRepositoryPatchMapOutput values.
// You can construct a concrete instance of `OCIRepositoryPatchMapInput` via:
//
//	OCIRepositoryPatchMap{ "key": OCIRepositoryPatchArgs{...} }
type OCIRepositoryPatchMapInput interface {
	pulumi.Input

	ToOCIRepositoryPatchMapOutput() OCIRepositoryPatchMapOutput
	ToOCIRepositoryPatchMapOutputWithContext(context.Context) OCIRepositoryPatchMapOutput
}

type OCIRepositoryPatchMap map[string]OCIRepositoryPatchInput

func (OCIRepositoryPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OCIRepositoryPatch)(nil)).Elem()
}

func (i OCIRepositoryPatchMap) ToOCIRepositoryPatchMapOutput() OCIRepositoryPatchMapOutput {
	return i.ToOCIRepositoryPatchMapOutputWithContext(context.Background())
}

func (i OCIRepositoryPatchMap) ToOCIRepositoryPatchMapOutputWithContext(ctx context.Context) OCIRepositoryPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryPatchMapOutput)
}

type OCIRepositoryPatchOutput struct{ *pulumi.OutputState }

func (OCIRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryPatch)(nil)).Elem()
}

func (o OCIRepositoryPatchOutput) ToOCIRepositoryPatchOutput() OCIRepositoryPatchOutput {
	return o
}

func (o OCIRepositoryPatchOutput) ToOCIRepositoryPatchOutputWithContext(ctx context.Context) OCIRepositoryPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OCIRepositoryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o OCIRepositoryPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o OCIRepositoryPatchOutput) Spec() OCIRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryPatch) OCIRepositorySpecPatchPtrOutput { return v.Spec }).(OCIRepositorySpecPatchPtrOutput)
}

func (o OCIRepositoryPatchOutput) Status() OCIRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v *OCIRepositoryPatch) OCIRepositoryStatusPatchPtrOutput { return v.Status }).(OCIRepositoryStatusPatchPtrOutput)
}

type OCIRepositoryPatchArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositoryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OCIRepositoryPatch)(nil)).Elem()
}

func (o OCIRepositoryPatchArrayOutput) ToOCIRepositoryPatchArrayOutput() OCIRepositoryPatchArrayOutput {
	return o
}

func (o OCIRepositoryPatchArrayOutput) ToOCIRepositoryPatchArrayOutputWithContext(ctx context.Context) OCIRepositoryPatchArrayOutput {
	return o
}

func (o OCIRepositoryPatchArrayOutput) Index(i pulumi.IntInput) OCIRepositoryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OCIRepositoryPatch {
		return vs[0].([]*OCIRepositoryPatch)[vs[1].(int)]
	}).(OCIRepositoryPatchOutput)
}

type OCIRepositoryPatchMapOutput struct{ *pulumi.OutputState }

func (OCIRepositoryPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OCIRepositoryPatch)(nil)).Elem()
}

func (o OCIRepositoryPatchMapOutput) ToOCIRepositoryPatchMapOutput() OCIRepositoryPatchMapOutput {
	return o
}

func (o OCIRepositoryPatchMapOutput) ToOCIRepositoryPatchMapOutputWithContext(ctx context.Context) OCIRepositoryPatchMapOutput {
	return o
}

func (o OCIRepositoryPatchMapOutput) MapIndex(k pulumi.StringInput) OCIRepositoryPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OCIRepositoryPatch {
		return vs[0].(map[string]*OCIRepositoryPatch)[vs[1].(string)]
	}).(OCIRepositoryPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryPatchInput)(nil)).Elem(), &OCIRepositoryPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryPatchArrayInput)(nil)).Elem(), OCIRepositoryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryPatchMapInput)(nil)).Elem(), OCIRepositoryPatchMap{})
	pulumi.RegisterOutputType(OCIRepositoryPatchOutput{})
	pulumi.RegisterOutputType(OCIRepositoryPatchArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositoryPatchMapOutput{})
}
