// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmChart is the Schema for the helmcharts API.
type HelmChart struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     HelmChartSpecOutput      `pulumi:"spec"`
	Status   HelmChartStatusPtrOutput `pulumi:"status"`
}

// NewHelmChart registers a new resource with the given unique name, arguments, and options.
func NewHelmChart(ctx *pulumi.Context,
	name string, args *HelmChartArgs, opts ...pulumi.ResourceOption) (*HelmChart, error) {
	if args == nil {
		args = &HelmChartArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta2")
	args.Kind = pulumi.StringPtr("HelmChart")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1:HelmChart"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmChart"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmChart
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:HelmChart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmChart gets an existing HelmChart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmChart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmChartState, opts ...pulumi.ResourceOption) (*HelmChart, error) {
	var resource HelmChart
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:HelmChart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmChart resources.
type helmChartState struct {
}

type HelmChartState struct {
}

func (HelmChartState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmChartState)(nil)).Elem()
}

type helmChartArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *HelmChartSpec     `pulumi:"spec"`
}

// The set of arguments for constructing a HelmChart resource.
type HelmChartArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     HelmChartSpecPtrInput
}

func (HelmChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmChartArgs)(nil)).Elem()
}

type HelmChartInput interface {
	pulumi.Input

	ToHelmChartOutput() HelmChartOutput
	ToHelmChartOutputWithContext(ctx context.Context) HelmChartOutput
}

func (*HelmChart) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChart)(nil)).Elem()
}

func (i *HelmChart) ToHelmChartOutput() HelmChartOutput {
	return i.ToHelmChartOutputWithContext(context.Background())
}

func (i *HelmChart) ToHelmChartOutputWithContext(ctx context.Context) HelmChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartOutput)
}

// HelmChartArrayInput is an input type that accepts HelmChartArray and HelmChartArrayOutput values.
// You can construct a concrete instance of `HelmChartArrayInput` via:
//
//	HelmChartArray{ HelmChartArgs{...} }
type HelmChartArrayInput interface {
	pulumi.Input

	ToHelmChartArrayOutput() HelmChartArrayOutput
	ToHelmChartArrayOutputWithContext(context.Context) HelmChartArrayOutput
}

type HelmChartArray []HelmChartInput

func (HelmChartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmChart)(nil)).Elem()
}

func (i HelmChartArray) ToHelmChartArrayOutput() HelmChartArrayOutput {
	return i.ToHelmChartArrayOutputWithContext(context.Background())
}

func (i HelmChartArray) ToHelmChartArrayOutputWithContext(ctx context.Context) HelmChartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartArrayOutput)
}

// HelmChartMapInput is an input type that accepts HelmChartMap and HelmChartMapOutput values.
// You can construct a concrete instance of `HelmChartMapInput` via:
//
//	HelmChartMap{ "key": HelmChartArgs{...} }
type HelmChartMapInput interface {
	pulumi.Input

	ToHelmChartMapOutput() HelmChartMapOutput
	ToHelmChartMapOutputWithContext(context.Context) HelmChartMapOutput
}

type HelmChartMap map[string]HelmChartInput

func (HelmChartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmChart)(nil)).Elem()
}

func (i HelmChartMap) ToHelmChartMapOutput() HelmChartMapOutput {
	return i.ToHelmChartMapOutputWithContext(context.Background())
}

func (i HelmChartMap) ToHelmChartMapOutputWithContext(ctx context.Context) HelmChartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartMapOutput)
}

type HelmChartOutput struct{ *pulumi.OutputState }

func (HelmChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChart)(nil)).Elem()
}

func (o HelmChartOutput) ToHelmChartOutput() HelmChartOutput {
	return o
}

func (o HelmChartOutput) ToHelmChartOutputWithContext(ctx context.Context) HelmChartOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmChart) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmChart) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmChartOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *HelmChart) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o HelmChartOutput) Spec() HelmChartSpecOutput {
	return o.ApplyT(func(v *HelmChart) HelmChartSpecOutput { return v.Spec }).(HelmChartSpecOutput)
}

func (o HelmChartOutput) Status() HelmChartStatusPtrOutput {
	return o.ApplyT(func(v *HelmChart) HelmChartStatusPtrOutput { return v.Status }).(HelmChartStatusPtrOutput)
}

type HelmChartArrayOutput struct{ *pulumi.OutputState }

func (HelmChartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmChart)(nil)).Elem()
}

func (o HelmChartArrayOutput) ToHelmChartArrayOutput() HelmChartArrayOutput {
	return o
}

func (o HelmChartArrayOutput) ToHelmChartArrayOutputWithContext(ctx context.Context) HelmChartArrayOutput {
	return o
}

func (o HelmChartArrayOutput) Index(i pulumi.IntInput) HelmChartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmChart {
		return vs[0].([]*HelmChart)[vs[1].(int)]
	}).(HelmChartOutput)
}

type HelmChartMapOutput struct{ *pulumi.OutputState }

func (HelmChartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmChart)(nil)).Elem()
}

func (o HelmChartMapOutput) ToHelmChartMapOutput() HelmChartMapOutput {
	return o
}

func (o HelmChartMapOutput) ToHelmChartMapOutputWithContext(ctx context.Context) HelmChartMapOutput {
	return o
}

func (o HelmChartMapOutput) MapIndex(k pulumi.StringInput) HelmChartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmChart {
		return vs[0].(map[string]*HelmChart)[vs[1].(string)]
	}).(HelmChartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartInput)(nil)).Elem(), &HelmChart{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartArrayInput)(nil)).Elem(), HelmChartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartMapInput)(nil)).Elem(), HelmChartMap{})
	pulumi.RegisterOutputType(HelmChartOutput{})
	pulumi.RegisterOutputType(HelmChartArrayOutput{})
	pulumi.RegisterOutputType(HelmChartMapOutput{})
}
