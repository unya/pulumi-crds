// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// OCIRepositoryList is a list of OCIRepository
type OCIRepositoryList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OCIRepositoryTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewOCIRepositoryList registers a new resource with the given unique name, arguments, and options.
func NewOCIRepositoryList(ctx *pulumi.Context,
	name string, args *OCIRepositoryListArgs, opts ...pulumi.ResourceOption) (*OCIRepositoryList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta2")
	args.Kind = pulumi.StringPtr("OCIRepositoryList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OCIRepositoryList
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:OCIRepositoryList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOCIRepositoryList gets an existing OCIRepositoryList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOCIRepositoryList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OCIRepositoryListState, opts ...pulumi.ResourceOption) (*OCIRepositoryList, error) {
	var resource OCIRepositoryList
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta2:OCIRepositoryList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OCIRepositoryList resources.
type ocirepositoryListState struct {
}

type OCIRepositoryListState struct {
}

func (OCIRepositoryListState) ElementType() reflect.Type {
	return reflect.TypeOf((*ocirepositoryListState)(nil)).Elem()
}

type ocirepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []OCIRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a OCIRepositoryList resource.
type OCIRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items OCIRepositoryTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (OCIRepositoryListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ocirepositoryListArgs)(nil)).Elem()
}

type OCIRepositoryListInput interface {
	pulumi.Input

	ToOCIRepositoryListOutput() OCIRepositoryListOutput
	ToOCIRepositoryListOutputWithContext(ctx context.Context) OCIRepositoryListOutput
}

func (*OCIRepositoryList) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryList)(nil)).Elem()
}

func (i *OCIRepositoryList) ToOCIRepositoryListOutput() OCIRepositoryListOutput {
	return i.ToOCIRepositoryListOutputWithContext(context.Background())
}

func (i *OCIRepositoryList) ToOCIRepositoryListOutputWithContext(ctx context.Context) OCIRepositoryListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryListOutput)
}

// OCIRepositoryListArrayInput is an input type that accepts OCIRepositoryListArray and OCIRepositoryListArrayOutput values.
// You can construct a concrete instance of `OCIRepositoryListArrayInput` via:
//
//	OCIRepositoryListArray{ OCIRepositoryListArgs{...} }
type OCIRepositoryListArrayInput interface {
	pulumi.Input

	ToOCIRepositoryListArrayOutput() OCIRepositoryListArrayOutput
	ToOCIRepositoryListArrayOutputWithContext(context.Context) OCIRepositoryListArrayOutput
}

type OCIRepositoryListArray []OCIRepositoryListInput

func (OCIRepositoryListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OCIRepositoryList)(nil)).Elem()
}

func (i OCIRepositoryListArray) ToOCIRepositoryListArrayOutput() OCIRepositoryListArrayOutput {
	return i.ToOCIRepositoryListArrayOutputWithContext(context.Background())
}

func (i OCIRepositoryListArray) ToOCIRepositoryListArrayOutputWithContext(ctx context.Context) OCIRepositoryListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryListArrayOutput)
}

// OCIRepositoryListMapInput is an input type that accepts OCIRepositoryListMap and OCIRepositoryListMapOutput values.
// You can construct a concrete instance of `OCIRepositoryListMapInput` via:
//
//	OCIRepositoryListMap{ "key": OCIRepositoryListArgs{...} }
type OCIRepositoryListMapInput interface {
	pulumi.Input

	ToOCIRepositoryListMapOutput() OCIRepositoryListMapOutput
	ToOCIRepositoryListMapOutputWithContext(context.Context) OCIRepositoryListMapOutput
}

type OCIRepositoryListMap map[string]OCIRepositoryListInput

func (OCIRepositoryListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OCIRepositoryList)(nil)).Elem()
}

func (i OCIRepositoryListMap) ToOCIRepositoryListMapOutput() OCIRepositoryListMapOutput {
	return i.ToOCIRepositoryListMapOutputWithContext(context.Background())
}

func (i OCIRepositoryListMap) ToOCIRepositoryListMapOutputWithContext(ctx context.Context) OCIRepositoryListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OCIRepositoryListMapOutput)
}

type OCIRepositoryListOutput struct{ *pulumi.OutputState }

func (OCIRepositoryListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OCIRepositoryList)(nil)).Elem()
}

func (o OCIRepositoryListOutput) ToOCIRepositoryListOutput() OCIRepositoryListOutput {
	return o
}

func (o OCIRepositoryListOutput) ToOCIRepositoryListOutputWithContext(ctx context.Context) OCIRepositoryListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o OCIRepositoryListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OCIRepositoryList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of ocirepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o OCIRepositoryListOutput) Items() OCIRepositoryTypeArrayOutput {
	return o.ApplyT(func(v *OCIRepositoryList) OCIRepositoryTypeArrayOutput { return v.Items }).(OCIRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *OCIRepositoryList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OCIRepositoryListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *OCIRepositoryList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type OCIRepositoryListArrayOutput struct{ *pulumi.OutputState }

func (OCIRepositoryListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OCIRepositoryList)(nil)).Elem()
}

func (o OCIRepositoryListArrayOutput) ToOCIRepositoryListArrayOutput() OCIRepositoryListArrayOutput {
	return o
}

func (o OCIRepositoryListArrayOutput) ToOCIRepositoryListArrayOutputWithContext(ctx context.Context) OCIRepositoryListArrayOutput {
	return o
}

func (o OCIRepositoryListArrayOutput) Index(i pulumi.IntInput) OCIRepositoryListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OCIRepositoryList {
		return vs[0].([]*OCIRepositoryList)[vs[1].(int)]
	}).(OCIRepositoryListOutput)
}

type OCIRepositoryListMapOutput struct{ *pulumi.OutputState }

func (OCIRepositoryListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OCIRepositoryList)(nil)).Elem()
}

func (o OCIRepositoryListMapOutput) ToOCIRepositoryListMapOutput() OCIRepositoryListMapOutput {
	return o
}

func (o OCIRepositoryListMapOutput) ToOCIRepositoryListMapOutputWithContext(ctx context.Context) OCIRepositoryListMapOutput {
	return o
}

func (o OCIRepositoryListMapOutput) MapIndex(k pulumi.StringInput) OCIRepositoryListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OCIRepositoryList {
		return vs[0].(map[string]*OCIRepositoryList)[vs[1].(string)]
	}).(OCIRepositoryListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryListInput)(nil)).Elem(), &OCIRepositoryList{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryListArrayInput)(nil)).Elem(), OCIRepositoryListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OCIRepositoryListMapInput)(nil)).Elem(), OCIRepositoryListMap{})
	pulumi.RegisterOutputType(OCIRepositoryListOutput{})
	pulumi.RegisterOutputType(OCIRepositoryListArrayOutput{})
	pulumi.RegisterOutputType(OCIRepositoryListMapOutput{})
}
