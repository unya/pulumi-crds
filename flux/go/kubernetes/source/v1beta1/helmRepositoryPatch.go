// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput    `pulumi:"metadata"`
	Spec     HelmRepositorySpecPatchPtrOutput   `pulumi:"spec"`
	Status   HelmRepositoryStatusPatchPtrOutput `pulumi:"status"`
}

// NewHelmRepositoryPatch registers a new resource with the given unique name, arguments, and options.
func NewHelmRepositoryPatch(ctx *pulumi.Context,
	name string, args *HelmRepositoryPatchArgs, opts ...pulumi.ResourceOption) (*HelmRepositoryPatch, error) {
	if args == nil {
		args = &HelmRepositoryPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("HelmRepository")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1:HelmRepositoryPatch"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta2:HelmRepositoryPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmRepositoryPatch
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmRepositoryPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmRepositoryPatch gets an existing HelmRepositoryPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmRepositoryPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmRepositoryPatchState, opts ...pulumi.ResourceOption) (*HelmRepositoryPatch, error) {
	var resource HelmRepositoryPatch
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmRepositoryPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmRepositoryPatch resources.
type helmRepositoryPatchState struct {
}

type HelmRepositoryPatchState struct {
}

func (HelmRepositoryPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmRepositoryPatchState)(nil)).Elem()
}

type helmRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *HelmRepositorySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a HelmRepositoryPatch resource.
type HelmRepositoryPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     HelmRepositorySpecPatchPtrInput
}

func (HelmRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmRepositoryPatchArgs)(nil)).Elem()
}

type HelmRepositoryPatchInput interface {
	pulumi.Input

	ToHelmRepositoryPatchOutput() HelmRepositoryPatchOutput
	ToHelmRepositoryPatchOutputWithContext(ctx context.Context) HelmRepositoryPatchOutput
}

func (*HelmRepositoryPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryPatch)(nil)).Elem()
}

func (i *HelmRepositoryPatch) ToHelmRepositoryPatchOutput() HelmRepositoryPatchOutput {
	return i.ToHelmRepositoryPatchOutputWithContext(context.Background())
}

func (i *HelmRepositoryPatch) ToHelmRepositoryPatchOutputWithContext(ctx context.Context) HelmRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryPatchOutput)
}

// HelmRepositoryPatchArrayInput is an input type that accepts HelmRepositoryPatchArray and HelmRepositoryPatchArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryPatchArrayInput` via:
//
//	HelmRepositoryPatchArray{ HelmRepositoryPatchArgs{...} }
type HelmRepositoryPatchArrayInput interface {
	pulumi.Input

	ToHelmRepositoryPatchArrayOutput() HelmRepositoryPatchArrayOutput
	ToHelmRepositoryPatchArrayOutputWithContext(context.Context) HelmRepositoryPatchArrayOutput
}

type HelmRepositoryPatchArray []HelmRepositoryPatchInput

func (HelmRepositoryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRepositoryPatch)(nil)).Elem()
}

func (i HelmRepositoryPatchArray) ToHelmRepositoryPatchArrayOutput() HelmRepositoryPatchArrayOutput {
	return i.ToHelmRepositoryPatchArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryPatchArray) ToHelmRepositoryPatchArrayOutputWithContext(ctx context.Context) HelmRepositoryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryPatchArrayOutput)
}

// HelmRepositoryPatchMapInput is an input type that accepts HelmRepositoryPatchMap and HelmRepositoryPatchMapOutput values.
// You can construct a concrete instance of `HelmRepositoryPatchMapInput` via:
//
//	HelmRepositoryPatchMap{ "key": HelmRepositoryPatchArgs{...} }
type HelmRepositoryPatchMapInput interface {
	pulumi.Input

	ToHelmRepositoryPatchMapOutput() HelmRepositoryPatchMapOutput
	ToHelmRepositoryPatchMapOutputWithContext(context.Context) HelmRepositoryPatchMapOutput
}

type HelmRepositoryPatchMap map[string]HelmRepositoryPatchInput

func (HelmRepositoryPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRepositoryPatch)(nil)).Elem()
}

func (i HelmRepositoryPatchMap) ToHelmRepositoryPatchMapOutput() HelmRepositoryPatchMapOutput {
	return i.ToHelmRepositoryPatchMapOutputWithContext(context.Background())
}

func (i HelmRepositoryPatchMap) ToHelmRepositoryPatchMapOutputWithContext(ctx context.Context) HelmRepositoryPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryPatchMapOutput)
}

type HelmRepositoryPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryPatch)(nil)).Elem()
}

func (o HelmRepositoryPatchOutput) ToHelmRepositoryPatchOutput() HelmRepositoryPatchOutput {
	return o
}

func (o HelmRepositoryPatchOutput) ToHelmRepositoryPatchOutputWithContext(ctx context.Context) HelmRepositoryPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmRepositoryPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmRepositoryPatchOutput) Spec() HelmRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryPatch) HelmRepositorySpecPatchPtrOutput { return v.Spec }).(HelmRepositorySpecPatchPtrOutput)
}

func (o HelmRepositoryPatchOutput) Status() HelmRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryPatch) HelmRepositoryStatusPatchPtrOutput { return v.Status }).(HelmRepositoryStatusPatchPtrOutput)
}

type HelmRepositoryPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRepositoryPatch)(nil)).Elem()
}

func (o HelmRepositoryPatchArrayOutput) ToHelmRepositoryPatchArrayOutput() HelmRepositoryPatchArrayOutput {
	return o
}

func (o HelmRepositoryPatchArrayOutput) ToHelmRepositoryPatchArrayOutputWithContext(ctx context.Context) HelmRepositoryPatchArrayOutput {
	return o
}

func (o HelmRepositoryPatchArrayOutput) Index(i pulumi.IntInput) HelmRepositoryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmRepositoryPatch {
		return vs[0].([]*HelmRepositoryPatch)[vs[1].(int)]
	}).(HelmRepositoryPatchOutput)
}

type HelmRepositoryPatchMapOutput struct{ *pulumi.OutputState }

func (HelmRepositoryPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRepositoryPatch)(nil)).Elem()
}

func (o HelmRepositoryPatchMapOutput) ToHelmRepositoryPatchMapOutput() HelmRepositoryPatchMapOutput {
	return o
}

func (o HelmRepositoryPatchMapOutput) ToHelmRepositoryPatchMapOutputWithContext(ctx context.Context) HelmRepositoryPatchMapOutput {
	return o
}

func (o HelmRepositoryPatchMapOutput) MapIndex(k pulumi.StringInput) HelmRepositoryPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmRepositoryPatch {
		return vs[0].(map[string]*HelmRepositoryPatch)[vs[1].(string)]
	}).(HelmRepositoryPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryPatchInput)(nil)).Elem(), &HelmRepositoryPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryPatchArrayInput)(nil)).Elem(), HelmRepositoryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryPatchMapInput)(nil)).Elem(), HelmRepositoryPatchMap{})
	pulumi.RegisterOutputType(HelmRepositoryPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryPatchMapOutput{})
}
