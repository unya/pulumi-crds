// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmRepository is the Schema for the helmrepositories API
type HelmRepository struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     HelmRepositorySpecOutput      `pulumi:"spec"`
	Status   HelmRepositoryStatusPtrOutput `pulumi:"status"`
}

// NewHelmRepository registers a new resource with the given unique name, arguments, and options.
func NewHelmRepository(ctx *pulumi.Context,
	name string, args *HelmRepositoryArgs, opts ...pulumi.ResourceOption) (*HelmRepository, error) {
	if args == nil {
		args = &HelmRepositoryArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("HelmRepository")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1:HelmRepository"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta2:HelmRepository"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmRepository
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmRepository gets an existing HelmRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmRepositoryState, opts ...pulumi.ResourceOption) (*HelmRepository, error) {
	var resource HelmRepository
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmRepository resources.
type helmRepositoryState struct {
}

type HelmRepositoryState struct {
}

func (HelmRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmRepositoryState)(nil)).Elem()
}

type helmRepositoryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *HelmRepositorySpec `pulumi:"spec"`
}

// The set of arguments for constructing a HelmRepository resource.
type HelmRepositoryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     HelmRepositorySpecPtrInput
}

func (HelmRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmRepositoryArgs)(nil)).Elem()
}

type HelmRepositoryInput interface {
	pulumi.Input

	ToHelmRepositoryOutput() HelmRepositoryOutput
	ToHelmRepositoryOutputWithContext(ctx context.Context) HelmRepositoryOutput
}

func (*HelmRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepository)(nil)).Elem()
}

func (i *HelmRepository) ToHelmRepositoryOutput() HelmRepositoryOutput {
	return i.ToHelmRepositoryOutputWithContext(context.Background())
}

func (i *HelmRepository) ToHelmRepositoryOutputWithContext(ctx context.Context) HelmRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryOutput)
}

// HelmRepositoryArrayInput is an input type that accepts HelmRepositoryArray and HelmRepositoryArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryArrayInput` via:
//
//	HelmRepositoryArray{ HelmRepositoryArgs{...} }
type HelmRepositoryArrayInput interface {
	pulumi.Input

	ToHelmRepositoryArrayOutput() HelmRepositoryArrayOutput
	ToHelmRepositoryArrayOutputWithContext(context.Context) HelmRepositoryArrayOutput
}

type HelmRepositoryArray []HelmRepositoryInput

func (HelmRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRepository)(nil)).Elem()
}

func (i HelmRepositoryArray) ToHelmRepositoryArrayOutput() HelmRepositoryArrayOutput {
	return i.ToHelmRepositoryArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryArray) ToHelmRepositoryArrayOutputWithContext(ctx context.Context) HelmRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryArrayOutput)
}

// HelmRepositoryMapInput is an input type that accepts HelmRepositoryMap and HelmRepositoryMapOutput values.
// You can construct a concrete instance of `HelmRepositoryMapInput` via:
//
//	HelmRepositoryMap{ "key": HelmRepositoryArgs{...} }
type HelmRepositoryMapInput interface {
	pulumi.Input

	ToHelmRepositoryMapOutput() HelmRepositoryMapOutput
	ToHelmRepositoryMapOutputWithContext(context.Context) HelmRepositoryMapOutput
}

type HelmRepositoryMap map[string]HelmRepositoryInput

func (HelmRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRepository)(nil)).Elem()
}

func (i HelmRepositoryMap) ToHelmRepositoryMapOutput() HelmRepositoryMapOutput {
	return i.ToHelmRepositoryMapOutputWithContext(context.Background())
}

func (i HelmRepositoryMap) ToHelmRepositoryMapOutputWithContext(ctx context.Context) HelmRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryMapOutput)
}

type HelmRepositoryOutput struct{ *pulumi.OutputState }

func (HelmRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepository)(nil)).Elem()
}

func (o HelmRepositoryOutput) ToHelmRepositoryOutput() HelmRepositoryOutput {
	return o
}

func (o HelmRepositoryOutput) ToHelmRepositoryOutputWithContext(ctx context.Context) HelmRepositoryOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmRepository) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmRepository) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmRepositoryOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *HelmRepository) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o HelmRepositoryOutput) Spec() HelmRepositorySpecOutput {
	return o.ApplyT(func(v *HelmRepository) HelmRepositorySpecOutput { return v.Spec }).(HelmRepositorySpecOutput)
}

func (o HelmRepositoryOutput) Status() HelmRepositoryStatusPtrOutput {
	return o.ApplyT(func(v *HelmRepository) HelmRepositoryStatusPtrOutput { return v.Status }).(HelmRepositoryStatusPtrOutput)
}

type HelmRepositoryArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRepository)(nil)).Elem()
}

func (o HelmRepositoryArrayOutput) ToHelmRepositoryArrayOutput() HelmRepositoryArrayOutput {
	return o
}

func (o HelmRepositoryArrayOutput) ToHelmRepositoryArrayOutputWithContext(ctx context.Context) HelmRepositoryArrayOutput {
	return o
}

func (o HelmRepositoryArrayOutput) Index(i pulumi.IntInput) HelmRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmRepository {
		return vs[0].([]*HelmRepository)[vs[1].(int)]
	}).(HelmRepositoryOutput)
}

type HelmRepositoryMapOutput struct{ *pulumi.OutputState }

func (HelmRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRepository)(nil)).Elem()
}

func (o HelmRepositoryMapOutput) ToHelmRepositoryMapOutput() HelmRepositoryMapOutput {
	return o
}

func (o HelmRepositoryMapOutput) ToHelmRepositoryMapOutputWithContext(ctx context.Context) HelmRepositoryMapOutput {
	return o
}

func (o HelmRepositoryMapOutput) MapIndex(k pulumi.StringInput) HelmRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmRepository {
		return vs[0].(map[string]*HelmRepository)[vs[1].(string)]
	}).(HelmRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryInput)(nil)).Elem(), &HelmRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryArrayInput)(nil)).Elem(), HelmRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryMapInput)(nil)).Elem(), HelmRepositoryMap{})
	pulumi.RegisterOutputType(HelmRepositoryOutput{})
	pulumi.RegisterOutputType(HelmRepositoryArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryMapOutput{})
}
