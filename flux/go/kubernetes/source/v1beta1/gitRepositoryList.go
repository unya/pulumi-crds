// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GitRepositoryList is a list of GitRepository
type GitRepositoryList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GitRepositoryTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewGitRepositoryList registers a new resource with the given unique name, arguments, and options.
func NewGitRepositoryList(ctx *pulumi.Context,
	name string, args *GitRepositoryListArgs, opts ...pulumi.ResourceOption) (*GitRepositoryList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("GitRepositoryList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GitRepositoryList
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:GitRepositoryList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitRepositoryList gets an existing GitRepositoryList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitRepositoryList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitRepositoryListState, opts ...pulumi.ResourceOption) (*GitRepositoryList, error) {
	var resource GitRepositoryList
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:GitRepositoryList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitRepositoryList resources.
type gitRepositoryListState struct {
}

type GitRepositoryListState struct {
}

func (GitRepositoryListState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryListState)(nil)).Elem()
}

type gitRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GitRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a GitRepositoryList resource.
type GitRepositoryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GitRepositoryTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (GitRepositoryListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitRepositoryListArgs)(nil)).Elem()
}

type GitRepositoryListInput interface {
	pulumi.Input

	ToGitRepositoryListOutput() GitRepositoryListOutput
	ToGitRepositoryListOutputWithContext(ctx context.Context) GitRepositoryListOutput
}

func (*GitRepositoryList) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryList)(nil)).Elem()
}

func (i *GitRepositoryList) ToGitRepositoryListOutput() GitRepositoryListOutput {
	return i.ToGitRepositoryListOutputWithContext(context.Background())
}

func (i *GitRepositoryList) ToGitRepositoryListOutputWithContext(ctx context.Context) GitRepositoryListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryListOutput)
}

// GitRepositoryListArrayInput is an input type that accepts GitRepositoryListArray and GitRepositoryListArrayOutput values.
// You can construct a concrete instance of `GitRepositoryListArrayInput` via:
//
//	GitRepositoryListArray{ GitRepositoryListArgs{...} }
type GitRepositoryListArrayInput interface {
	pulumi.Input

	ToGitRepositoryListArrayOutput() GitRepositoryListArrayOutput
	ToGitRepositoryListArrayOutputWithContext(context.Context) GitRepositoryListArrayOutput
}

type GitRepositoryListArray []GitRepositoryListInput

func (GitRepositoryListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepositoryList)(nil)).Elem()
}

func (i GitRepositoryListArray) ToGitRepositoryListArrayOutput() GitRepositoryListArrayOutput {
	return i.ToGitRepositoryListArrayOutputWithContext(context.Background())
}

func (i GitRepositoryListArray) ToGitRepositoryListArrayOutputWithContext(ctx context.Context) GitRepositoryListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryListArrayOutput)
}

// GitRepositoryListMapInput is an input type that accepts GitRepositoryListMap and GitRepositoryListMapOutput values.
// You can construct a concrete instance of `GitRepositoryListMapInput` via:
//
//	GitRepositoryListMap{ "key": GitRepositoryListArgs{...} }
type GitRepositoryListMapInput interface {
	pulumi.Input

	ToGitRepositoryListMapOutput() GitRepositoryListMapOutput
	ToGitRepositoryListMapOutputWithContext(context.Context) GitRepositoryListMapOutput
}

type GitRepositoryListMap map[string]GitRepositoryListInput

func (GitRepositoryListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepositoryList)(nil)).Elem()
}

func (i GitRepositoryListMap) ToGitRepositoryListMapOutput() GitRepositoryListMapOutput {
	return i.ToGitRepositoryListMapOutputWithContext(context.Background())
}

func (i GitRepositoryListMap) ToGitRepositoryListMapOutputWithContext(ctx context.Context) GitRepositoryListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryListMapOutput)
}

type GitRepositoryListOutput struct{ *pulumi.OutputState }

func (GitRepositoryListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryList)(nil)).Elem()
}

func (o GitRepositoryListOutput) ToGitRepositoryListOutput() GitRepositoryListOutput {
	return o
}

func (o GitRepositoryListOutput) ToGitRepositoryListOutputWithContext(ctx context.Context) GitRepositoryListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GitRepositoryListOutput) Items() GitRepositoryTypeArrayOutput {
	return o.ApplyT(func(v *GitRepositoryList) GitRepositoryTypeArrayOutput { return v.Items }).(GitRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GitRepositoryList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *GitRepositoryList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type GitRepositoryListArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GitRepositoryList)(nil)).Elem()
}

func (o GitRepositoryListArrayOutput) ToGitRepositoryListArrayOutput() GitRepositoryListArrayOutput {
	return o
}

func (o GitRepositoryListArrayOutput) ToGitRepositoryListArrayOutputWithContext(ctx context.Context) GitRepositoryListArrayOutput {
	return o
}

func (o GitRepositoryListArrayOutput) Index(i pulumi.IntInput) GitRepositoryListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GitRepositoryList {
		return vs[0].([]*GitRepositoryList)[vs[1].(int)]
	}).(GitRepositoryListOutput)
}

type GitRepositoryListMapOutput struct{ *pulumi.OutputState }

func (GitRepositoryListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GitRepositoryList)(nil)).Elem()
}

func (o GitRepositoryListMapOutput) ToGitRepositoryListMapOutput() GitRepositoryListMapOutput {
	return o
}

func (o GitRepositoryListMapOutput) ToGitRepositoryListMapOutputWithContext(ctx context.Context) GitRepositoryListMapOutput {
	return o
}

func (o GitRepositoryListMapOutput) MapIndex(k pulumi.StringInput) GitRepositoryListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GitRepositoryList {
		return vs[0].(map[string]*GitRepositoryList)[vs[1].(string)]
	}).(GitRepositoryListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryListInput)(nil)).Elem(), &GitRepositoryList{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryListArrayInput)(nil)).Elem(), GitRepositoryListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryListMapInput)(nil)).Elem(), GitRepositoryListMap{})
	pulumi.RegisterOutputType(GitRepositoryListOutput{})
	pulumi.RegisterOutputType(GitRepositoryListArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryListMapOutput{})
}
