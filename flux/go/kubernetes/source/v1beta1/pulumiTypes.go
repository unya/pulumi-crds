// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Bucket is the Schema for the buckets API
type BucketType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *BucketSpec        `pulumi:"spec"`
	Status   *BucketStatus      `pulumi:"status"`
}

// BucketTypeInput is an input type that accepts BucketTypeArgs and BucketTypeOutput values.
// You can construct a concrete instance of `BucketTypeInput` via:
//
//	BucketTypeArgs{...}
type BucketTypeInput interface {
	pulumi.Input

	ToBucketTypeOutput() BucketTypeOutput
	ToBucketTypeOutputWithContext(context.Context) BucketTypeOutput
}

// Bucket is the Schema for the buckets API
type BucketTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     BucketSpecPtrInput        `pulumi:"spec"`
	Status   BucketStatusPtrInput      `pulumi:"status"`
}

func (BucketTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketType)(nil)).Elem()
}

func (i BucketTypeArgs) ToBucketTypeOutput() BucketTypeOutput {
	return i.ToBucketTypeOutputWithContext(context.Background())
}

func (i BucketTypeArgs) ToBucketTypeOutputWithContext(ctx context.Context) BucketTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTypeOutput)
}

// BucketTypeArrayInput is an input type that accepts BucketTypeArray and BucketTypeArrayOutput values.
// You can construct a concrete instance of `BucketTypeArrayInput` via:
//
//	BucketTypeArray{ BucketTypeArgs{...} }
type BucketTypeArrayInput interface {
	pulumi.Input

	ToBucketTypeArrayOutput() BucketTypeArrayOutput
	ToBucketTypeArrayOutputWithContext(context.Context) BucketTypeArrayOutput
}

type BucketTypeArray []BucketTypeInput

func (BucketTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketType)(nil)).Elem()
}

func (i BucketTypeArray) ToBucketTypeArrayOutput() BucketTypeArrayOutput {
	return i.ToBucketTypeArrayOutputWithContext(context.Background())
}

func (i BucketTypeArray) ToBucketTypeArrayOutputWithContext(ctx context.Context) BucketTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketTypeArrayOutput)
}

// Bucket is the Schema for the buckets API
type BucketTypeOutput struct{ *pulumi.OutputState }

func (BucketTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketType)(nil)).Elem()
}

func (o BucketTypeOutput) ToBucketTypeOutput() BucketTypeOutput {
	return o
}

func (o BucketTypeOutput) ToBucketTypeOutputWithContext(ctx context.Context) BucketTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BucketTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v BucketType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o BucketTypeOutput) Spec() BucketSpecPtrOutput {
	return o.ApplyT(func(v BucketType) *BucketSpec { return v.Spec }).(BucketSpecPtrOutput)
}

func (o BucketTypeOutput) Status() BucketStatusPtrOutput {
	return o.ApplyT(func(v BucketType) *BucketStatus { return v.Status }).(BucketStatusPtrOutput)
}

type BucketTypeArrayOutput struct{ *pulumi.OutputState }

func (BucketTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketType)(nil)).Elem()
}

func (o BucketTypeArrayOutput) ToBucketTypeArrayOutput() BucketTypeArrayOutput {
	return o
}

func (o BucketTypeArrayOutput) ToBucketTypeArrayOutputWithContext(ctx context.Context) BucketTypeArrayOutput {
	return o
}

func (o BucketTypeArrayOutput) Index(i pulumi.IntInput) BucketTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketType {
		return vs[0].([]BucketType)[vs[1].(int)]
	}).(BucketTypeOutput)
}

// BucketList is a list of Bucket
type BucketListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []BucketType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// BucketListTypeInput is an input type that accepts BucketListTypeArgs and BucketListTypeOutput values.
// You can construct a concrete instance of `BucketListTypeInput` via:
//
//	BucketListTypeArgs{...}
type BucketListTypeInput interface {
	pulumi.Input

	ToBucketListTypeOutput() BucketListTypeOutput
	ToBucketListTypeOutputWithContext(context.Context) BucketListTypeOutput
}

// BucketList is a list of Bucket
type BucketListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BucketTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (BucketListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketListType)(nil)).Elem()
}

func (i BucketListTypeArgs) ToBucketListTypeOutput() BucketListTypeOutput {
	return i.ToBucketListTypeOutputWithContext(context.Background())
}

func (i BucketListTypeArgs) ToBucketListTypeOutputWithContext(ctx context.Context) BucketListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketListTypeOutput)
}

// BucketList is a list of Bucket
type BucketListTypeOutput struct{ *pulumi.OutputState }

func (BucketListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketListType)(nil)).Elem()
}

func (o BucketListTypeOutput) ToBucketListTypeOutput() BucketListTypeOutput {
	return o
}

func (o BucketListTypeOutput) ToBucketListTypeOutputWithContext(ctx context.Context) BucketListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of buckets. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o BucketListTypeOutput) Items() BucketTypeArrayOutput {
	return o.ApplyT(func(v BucketListType) []BucketType { return v.Items }).(BucketTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v BucketListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Bucket is the Schema for the buckets API
type BucketPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *BucketSpecPatch        `pulumi:"spec"`
	Status   *BucketStatusPatch      `pulumi:"status"`
}

// BucketPatchTypeInput is an input type that accepts BucketPatchTypeArgs and BucketPatchTypeOutput values.
// You can construct a concrete instance of `BucketPatchTypeInput` via:
//
//	BucketPatchTypeArgs{...}
type BucketPatchTypeInput interface {
	pulumi.Input

	ToBucketPatchTypeOutput() BucketPatchTypeOutput
	ToBucketPatchTypeOutputWithContext(context.Context) BucketPatchTypeOutput
}

// Bucket is the Schema for the buckets API
type BucketPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     BucketSpecPatchPtrInput        `pulumi:"spec"`
	Status   BucketStatusPatchPtrInput      `pulumi:"status"`
}

func (BucketPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketPatchType)(nil)).Elem()
}

func (i BucketPatchTypeArgs) ToBucketPatchTypeOutput() BucketPatchTypeOutput {
	return i.ToBucketPatchTypeOutputWithContext(context.Background())
}

func (i BucketPatchTypeArgs) ToBucketPatchTypeOutputWithContext(ctx context.Context) BucketPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPatchTypeOutput)
}

// Bucket is the Schema for the buckets API
type BucketPatchTypeOutput struct{ *pulumi.OutputState }

func (BucketPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketPatchType)(nil)).Elem()
}

func (o BucketPatchTypeOutput) ToBucketPatchTypeOutput() BucketPatchTypeOutput {
	return o
}

func (o BucketPatchTypeOutput) ToBucketPatchTypeOutputWithContext(ctx context.Context) BucketPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BucketPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o BucketPatchTypeOutput) Spec() BucketSpecPatchPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *BucketSpecPatch { return v.Spec }).(BucketSpecPatchPtrOutput)
}

func (o BucketPatchTypeOutput) Status() BucketStatusPatchPtrOutput {
	return o.ApplyT(func(v BucketPatchType) *BucketStatusPatch { return v.Status }).(BucketStatusPatchPtrOutput)
}

// BucketSpec defines the desired state of an S3 compatible bucket
type BucketSpec struct {
	AccessFrom *BucketSpecAccessFrom `pulumi:"accessFrom"`
	// The bucket name.
	BucketName *string `pulumi:"bucketName"`
	// The bucket endpoint address.
	Endpoint *string `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
	Insecure *bool `pulumi:"insecure"`
	// The interval at which to check for bucket updates.
	Interval *string `pulumi:"interval"`
	// The S3 compatible storage provider name, default ('generic').
	Provider *string `pulumi:"provider"`
	// The bucket region.
	Region    *string              `pulumi:"region"`
	SecretRef *BucketSpecSecretRef `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout for download operations, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
}

// BucketSpecInput is an input type that accepts BucketSpecArgs and BucketSpecOutput values.
// You can construct a concrete instance of `BucketSpecInput` via:
//
//	BucketSpecArgs{...}
type BucketSpecInput interface {
	pulumi.Input

	ToBucketSpecOutput() BucketSpecOutput
	ToBucketSpecOutputWithContext(context.Context) BucketSpecOutput
}

// BucketSpec defines the desired state of an S3 compatible bucket
type BucketSpecArgs struct {
	AccessFrom BucketSpecAccessFromPtrInput `pulumi:"accessFrom"`
	// The bucket name.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// The bucket endpoint address.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// The interval at which to check for bucket updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The S3 compatible storage provider name, default ('generic').
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// The bucket region.
	Region    pulumi.StringPtrInput       `pulumi:"region"`
	SecretRef BucketSpecSecretRefPtrInput `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout for download operations, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BucketSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpec)(nil)).Elem()
}

func (i BucketSpecArgs) ToBucketSpecOutput() BucketSpecOutput {
	return i.ToBucketSpecOutputWithContext(context.Background())
}

func (i BucketSpecArgs) ToBucketSpecOutputWithContext(ctx context.Context) BucketSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecOutput)
}

func (i BucketSpecArgs) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return i.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (i BucketSpecArgs) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecOutput).ToBucketSpecPtrOutputWithContext(ctx)
}

// BucketSpecPtrInput is an input type that accepts BucketSpecArgs, BucketSpecPtr and BucketSpecPtrOutput values.
// You can construct a concrete instance of `BucketSpecPtrInput` via:
//
//	        BucketSpecArgs{...}
//
//	or:
//
//	        nil
type BucketSpecPtrInput interface {
	pulumi.Input

	ToBucketSpecPtrOutput() BucketSpecPtrOutput
	ToBucketSpecPtrOutputWithContext(context.Context) BucketSpecPtrOutput
}

type bucketSpecPtrType BucketSpecArgs

func BucketSpecPtr(v *BucketSpecArgs) BucketSpecPtrInput {
	return (*bucketSpecPtrType)(v)
}

func (*bucketSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpec)(nil)).Elem()
}

func (i *bucketSpecPtrType) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return i.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (i *bucketSpecPtrType) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPtrOutput)
}

// BucketSpec defines the desired state of an S3 compatible bucket
type BucketSpecOutput struct{ *pulumi.OutputState }

func (BucketSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpec)(nil)).Elem()
}

func (o BucketSpecOutput) ToBucketSpecOutput() BucketSpecOutput {
	return o
}

func (o BucketSpecOutput) ToBucketSpecOutputWithContext(ctx context.Context) BucketSpecOutput {
	return o
}

func (o BucketSpecOutput) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return o.ToBucketSpecPtrOutputWithContext(context.Background())
}

func (o BucketSpecOutput) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpec) *BucketSpec {
		return &v
	}).(BucketSpecPtrOutput)
}

func (o BucketSpecOutput) AccessFrom() BucketSpecAccessFromPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecAccessFrom { return v.AccessFrom }).(BucketSpecAccessFromPtrOutput)
}

// The bucket name.
func (o BucketSpecOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// The bucket endpoint address.
func (o BucketSpecOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
func (o BucketSpecOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpec) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The interval at which to check for bucket updates.
func (o BucketSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The S3 compatible storage provider name, default ('generic').
func (o BucketSpecOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// The bucket region.
func (o BucketSpecOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o BucketSpecOutput) SecretRef() BucketSpecSecretRefPtrOutput {
	return o.ApplyT(func(v BucketSpec) *BucketSpecSecretRef { return v.SecretRef }).(BucketSpecSecretRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o BucketSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout for download operations, defaults to 60s.
func (o BucketSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BucketSpecPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpec)(nil)).Elem()
}

func (o BucketSpecPtrOutput) ToBucketSpecPtrOutput() BucketSpecPtrOutput {
	return o
}

func (o BucketSpecPtrOutput) ToBucketSpecPtrOutputWithContext(ctx context.Context) BucketSpecPtrOutput {
	return o
}

func (o BucketSpecPtrOutput) Elem() BucketSpecOutput {
	return o.ApplyT(func(v *BucketSpec) BucketSpec {
		if v != nil {
			return *v
		}
		var ret BucketSpec
		return ret
	}).(BucketSpecOutput)
}

func (o BucketSpecPtrOutput) AccessFrom() BucketSpecAccessFromPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecAccessFrom {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(BucketSpecAccessFromPtrOutput)
}

// The bucket name.
func (o BucketSpecPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The bucket endpoint address.
func (o BucketSpecPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
func (o BucketSpecPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// The interval at which to check for bucket updates.
func (o BucketSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// The S3 compatible storage provider name, default ('generic').
func (o BucketSpecPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// The bucket region.
func (o BucketSpecPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPtrOutput) SecretRef() BucketSpecSecretRefPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *BucketSpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(BucketSpecSecretRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o BucketSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout for download operations, defaults to 60s.
func (o BucketSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type BucketSpecAccessFrom struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []BucketSpecAccessFromNamespaceSelectors `pulumi:"namespaceSelectors"`
}

// BucketSpecAccessFromInput is an input type that accepts BucketSpecAccessFromArgs and BucketSpecAccessFromOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromInput` via:
//
//	BucketSpecAccessFromArgs{...}
type BucketSpecAccessFromInput interface {
	pulumi.Input

	ToBucketSpecAccessFromOutput() BucketSpecAccessFromOutput
	ToBucketSpecAccessFromOutputWithContext(context.Context) BucketSpecAccessFromOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type BucketSpecAccessFromArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors BucketSpecAccessFromNamespaceSelectorsArrayInput `pulumi:"namespaceSelectors"`
}

func (BucketSpecAccessFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFrom)(nil)).Elem()
}

func (i BucketSpecAccessFromArgs) ToBucketSpecAccessFromOutput() BucketSpecAccessFromOutput {
	return i.ToBucketSpecAccessFromOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromArgs) ToBucketSpecAccessFromOutputWithContext(ctx context.Context) BucketSpecAccessFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromOutput)
}

func (i BucketSpecAccessFromArgs) ToBucketSpecAccessFromPtrOutput() BucketSpecAccessFromPtrOutput {
	return i.ToBucketSpecAccessFromPtrOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromArgs) ToBucketSpecAccessFromPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromOutput).ToBucketSpecAccessFromPtrOutputWithContext(ctx)
}

// BucketSpecAccessFromPtrInput is an input type that accepts BucketSpecAccessFromArgs, BucketSpecAccessFromPtr and BucketSpecAccessFromPtrOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromPtrInput` via:
//
//	        BucketSpecAccessFromArgs{...}
//
//	or:
//
//	        nil
type BucketSpecAccessFromPtrInput interface {
	pulumi.Input

	ToBucketSpecAccessFromPtrOutput() BucketSpecAccessFromPtrOutput
	ToBucketSpecAccessFromPtrOutputWithContext(context.Context) BucketSpecAccessFromPtrOutput
}

type bucketSpecAccessFromPtrType BucketSpecAccessFromArgs

func BucketSpecAccessFromPtr(v *BucketSpecAccessFromArgs) BucketSpecAccessFromPtrInput {
	return (*bucketSpecAccessFromPtrType)(v)
}

func (*bucketSpecAccessFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecAccessFrom)(nil)).Elem()
}

func (i *bucketSpecAccessFromPtrType) ToBucketSpecAccessFromPtrOutput() BucketSpecAccessFromPtrOutput {
	return i.ToBucketSpecAccessFromPtrOutputWithContext(context.Background())
}

func (i *bucketSpecAccessFromPtrType) ToBucketSpecAccessFromPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type BucketSpecAccessFromOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFrom)(nil)).Elem()
}

func (o BucketSpecAccessFromOutput) ToBucketSpecAccessFromOutput() BucketSpecAccessFromOutput {
	return o
}

func (o BucketSpecAccessFromOutput) ToBucketSpecAccessFromOutputWithContext(ctx context.Context) BucketSpecAccessFromOutput {
	return o
}

func (o BucketSpecAccessFromOutput) ToBucketSpecAccessFromPtrOutput() BucketSpecAccessFromPtrOutput {
	return o.ToBucketSpecAccessFromPtrOutputWithContext(context.Background())
}

func (o BucketSpecAccessFromOutput) ToBucketSpecAccessFromPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecAccessFrom) *BucketSpecAccessFrom {
		return &v
	}).(BucketSpecAccessFromPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o BucketSpecAccessFromOutput) NamespaceSelectors() BucketSpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v BucketSpecAccessFrom) []BucketSpecAccessFromNamespaceSelectors { return v.NamespaceSelectors }).(BucketSpecAccessFromNamespaceSelectorsArrayOutput)
}

type BucketSpecAccessFromPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecAccessFrom)(nil)).Elem()
}

func (o BucketSpecAccessFromPtrOutput) ToBucketSpecAccessFromPtrOutput() BucketSpecAccessFromPtrOutput {
	return o
}

func (o BucketSpecAccessFromPtrOutput) ToBucketSpecAccessFromPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPtrOutput {
	return o
}

func (o BucketSpecAccessFromPtrOutput) Elem() BucketSpecAccessFromOutput {
	return o.ApplyT(func(v *BucketSpecAccessFrom) BucketSpecAccessFrom {
		if v != nil {
			return *v
		}
		var ret BucketSpecAccessFrom
		return ret
	}).(BucketSpecAccessFromOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o BucketSpecAccessFromPtrOutput) NamespaceSelectors() BucketSpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v *BucketSpecAccessFrom) []BucketSpecAccessFromNamespaceSelectors {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(BucketSpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type BucketSpecAccessFromNamespaceSelectors struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// BucketSpecAccessFromNamespaceSelectorsInput is an input type that accepts BucketSpecAccessFromNamespaceSelectorsArgs and BucketSpecAccessFromNamespaceSelectorsOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromNamespaceSelectorsInput` via:
//
//	BucketSpecAccessFromNamespaceSelectorsArgs{...}
type BucketSpecAccessFromNamespaceSelectorsInput interface {
	pulumi.Input

	ToBucketSpecAccessFromNamespaceSelectorsOutput() BucketSpecAccessFromNamespaceSelectorsOutput
	ToBucketSpecAccessFromNamespaceSelectorsOutputWithContext(context.Context) BucketSpecAccessFromNamespaceSelectorsOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type BucketSpecAccessFromNamespaceSelectorsArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (BucketSpecAccessFromNamespaceSelectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i BucketSpecAccessFromNamespaceSelectorsArgs) ToBucketSpecAccessFromNamespaceSelectorsOutput() BucketSpecAccessFromNamespaceSelectorsOutput {
	return i.ToBucketSpecAccessFromNamespaceSelectorsOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromNamespaceSelectorsArgs) ToBucketSpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromNamespaceSelectorsOutput)
}

// BucketSpecAccessFromNamespaceSelectorsArrayInput is an input type that accepts BucketSpecAccessFromNamespaceSelectorsArray and BucketSpecAccessFromNamespaceSelectorsArrayOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromNamespaceSelectorsArrayInput` via:
//
//	BucketSpecAccessFromNamespaceSelectorsArray{ BucketSpecAccessFromNamespaceSelectorsArgs{...} }
type BucketSpecAccessFromNamespaceSelectorsArrayInput interface {
	pulumi.Input

	ToBucketSpecAccessFromNamespaceSelectorsArrayOutput() BucketSpecAccessFromNamespaceSelectorsArrayOutput
	ToBucketSpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Context) BucketSpecAccessFromNamespaceSelectorsArrayOutput
}

type BucketSpecAccessFromNamespaceSelectorsArray []BucketSpecAccessFromNamespaceSelectorsInput

func (BucketSpecAccessFromNamespaceSelectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i BucketSpecAccessFromNamespaceSelectorsArray) ToBucketSpecAccessFromNamespaceSelectorsArrayOutput() BucketSpecAccessFromNamespaceSelectorsArrayOutput {
	return i.ToBucketSpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromNamespaceSelectorsArray) ToBucketSpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type BucketSpecAccessFromNamespaceSelectorsOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromNamespaceSelectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o BucketSpecAccessFromNamespaceSelectorsOutput) ToBucketSpecAccessFromNamespaceSelectorsOutput() BucketSpecAccessFromNamespaceSelectorsOutput {
	return o
}

func (o BucketSpecAccessFromNamespaceSelectorsOutput) ToBucketSpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BucketSpecAccessFromNamespaceSelectorsOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BucketSpecAccessFromNamespaceSelectors) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type BucketSpecAccessFromNamespaceSelectorsArrayOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromNamespaceSelectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o BucketSpecAccessFromNamespaceSelectorsArrayOutput) ToBucketSpecAccessFromNamespaceSelectorsArrayOutput() BucketSpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o BucketSpecAccessFromNamespaceSelectorsArrayOutput) ToBucketSpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o BucketSpecAccessFromNamespaceSelectorsArrayOutput) Index(i pulumi.IntInput) BucketSpecAccessFromNamespaceSelectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketSpecAccessFromNamespaceSelectors {
		return vs[0].([]BucketSpecAccessFromNamespaceSelectors)[vs[1].(int)]
	}).(BucketSpecAccessFromNamespaceSelectorsOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type BucketSpecAccessFromNamespaceSelectorsPatch struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// BucketSpecAccessFromNamespaceSelectorsPatchInput is an input type that accepts BucketSpecAccessFromNamespaceSelectorsPatchArgs and BucketSpecAccessFromNamespaceSelectorsPatchOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromNamespaceSelectorsPatchInput` via:
//
//	BucketSpecAccessFromNamespaceSelectorsPatchArgs{...}
type BucketSpecAccessFromNamespaceSelectorsPatchInput interface {
	pulumi.Input

	ToBucketSpecAccessFromNamespaceSelectorsPatchOutput() BucketSpecAccessFromNamespaceSelectorsPatchOutput
	ToBucketSpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Context) BucketSpecAccessFromNamespaceSelectorsPatchOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type BucketSpecAccessFromNamespaceSelectorsPatchArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (BucketSpecAccessFromNamespaceSelectorsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i BucketSpecAccessFromNamespaceSelectorsPatchArgs) ToBucketSpecAccessFromNamespaceSelectorsPatchOutput() BucketSpecAccessFromNamespaceSelectorsPatchOutput {
	return i.ToBucketSpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromNamespaceSelectorsPatchArgs) ToBucketSpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromNamespaceSelectorsPatchOutput)
}

// BucketSpecAccessFromNamespaceSelectorsPatchArrayInput is an input type that accepts BucketSpecAccessFromNamespaceSelectorsPatchArray and BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromNamespaceSelectorsPatchArrayInput` via:
//
//	BucketSpecAccessFromNamespaceSelectorsPatchArray{ BucketSpecAccessFromNamespaceSelectorsPatchArgs{...} }
type BucketSpecAccessFromNamespaceSelectorsPatchArrayInput interface {
	pulumi.Input

	ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutput() BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput
	ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Context) BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput
}

type BucketSpecAccessFromNamespaceSelectorsPatchArray []BucketSpecAccessFromNamespaceSelectorsPatchInput

func (BucketSpecAccessFromNamespaceSelectorsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i BucketSpecAccessFromNamespaceSelectorsPatchArray) ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutput() BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return i.ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromNamespaceSelectorsPatchArray) ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type BucketSpecAccessFromNamespaceSelectorsPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromNamespaceSelectorsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o BucketSpecAccessFromNamespaceSelectorsPatchOutput) ToBucketSpecAccessFromNamespaceSelectorsPatchOutput() BucketSpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

func (o BucketSpecAccessFromNamespaceSelectorsPatchOutput) ToBucketSpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o BucketSpecAccessFromNamespaceSelectorsPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v BucketSpecAccessFromNamespaceSelectorsPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput) ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutput() BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput) ToBucketSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput) Index(i pulumi.IntInput) BucketSpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketSpecAccessFromNamespaceSelectorsPatch {
		return vs[0].([]BucketSpecAccessFromNamespaceSelectorsPatch)[vs[1].(int)]
	}).(BucketSpecAccessFromNamespaceSelectorsPatchOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type BucketSpecAccessFromPatch struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []BucketSpecAccessFromNamespaceSelectorsPatch `pulumi:"namespaceSelectors"`
}

// BucketSpecAccessFromPatchInput is an input type that accepts BucketSpecAccessFromPatchArgs and BucketSpecAccessFromPatchOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromPatchInput` via:
//
//	BucketSpecAccessFromPatchArgs{...}
type BucketSpecAccessFromPatchInput interface {
	pulumi.Input

	ToBucketSpecAccessFromPatchOutput() BucketSpecAccessFromPatchOutput
	ToBucketSpecAccessFromPatchOutputWithContext(context.Context) BucketSpecAccessFromPatchOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type BucketSpecAccessFromPatchArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors BucketSpecAccessFromNamespaceSelectorsPatchArrayInput `pulumi:"namespaceSelectors"`
}

func (BucketSpecAccessFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFromPatch)(nil)).Elem()
}

func (i BucketSpecAccessFromPatchArgs) ToBucketSpecAccessFromPatchOutput() BucketSpecAccessFromPatchOutput {
	return i.ToBucketSpecAccessFromPatchOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromPatchArgs) ToBucketSpecAccessFromPatchOutputWithContext(ctx context.Context) BucketSpecAccessFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromPatchOutput)
}

func (i BucketSpecAccessFromPatchArgs) ToBucketSpecAccessFromPatchPtrOutput() BucketSpecAccessFromPatchPtrOutput {
	return i.ToBucketSpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecAccessFromPatchArgs) ToBucketSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromPatchOutput).ToBucketSpecAccessFromPatchPtrOutputWithContext(ctx)
}

// BucketSpecAccessFromPatchPtrInput is an input type that accepts BucketSpecAccessFromPatchArgs, BucketSpecAccessFromPatchPtr and BucketSpecAccessFromPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecAccessFromPatchPtrInput` via:
//
//	        BucketSpecAccessFromPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecAccessFromPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecAccessFromPatchPtrOutput() BucketSpecAccessFromPatchPtrOutput
	ToBucketSpecAccessFromPatchPtrOutputWithContext(context.Context) BucketSpecAccessFromPatchPtrOutput
}

type bucketSpecAccessFromPatchPtrType BucketSpecAccessFromPatchArgs

func BucketSpecAccessFromPatchPtr(v *BucketSpecAccessFromPatchArgs) BucketSpecAccessFromPatchPtrInput {
	return (*bucketSpecAccessFromPatchPtrType)(v)
}

func (*bucketSpecAccessFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecAccessFromPatch)(nil)).Elem()
}

func (i *bucketSpecAccessFromPatchPtrType) ToBucketSpecAccessFromPatchPtrOutput() BucketSpecAccessFromPatchPtrOutput {
	return i.ToBucketSpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecAccessFromPatchPtrType) ToBucketSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecAccessFromPatchPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type BucketSpecAccessFromPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecAccessFromPatch)(nil)).Elem()
}

func (o BucketSpecAccessFromPatchOutput) ToBucketSpecAccessFromPatchOutput() BucketSpecAccessFromPatchOutput {
	return o
}

func (o BucketSpecAccessFromPatchOutput) ToBucketSpecAccessFromPatchOutputWithContext(ctx context.Context) BucketSpecAccessFromPatchOutput {
	return o
}

func (o BucketSpecAccessFromPatchOutput) ToBucketSpecAccessFromPatchPtrOutput() BucketSpecAccessFromPatchPtrOutput {
	return o.ToBucketSpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecAccessFromPatchOutput) ToBucketSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecAccessFromPatch) *BucketSpecAccessFromPatch {
		return &v
	}).(BucketSpecAccessFromPatchPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o BucketSpecAccessFromPatchOutput) NamespaceSelectors() BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v BucketSpecAccessFromPatch) []BucketSpecAccessFromNamespaceSelectorsPatch {
		return v.NamespaceSelectors
	}).(BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

type BucketSpecAccessFromPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecAccessFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecAccessFromPatch)(nil)).Elem()
}

func (o BucketSpecAccessFromPatchPtrOutput) ToBucketSpecAccessFromPatchPtrOutput() BucketSpecAccessFromPatchPtrOutput {
	return o
}

func (o BucketSpecAccessFromPatchPtrOutput) ToBucketSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) BucketSpecAccessFromPatchPtrOutput {
	return o
}

func (o BucketSpecAccessFromPatchPtrOutput) Elem() BucketSpecAccessFromPatchOutput {
	return o.ApplyT(func(v *BucketSpecAccessFromPatch) BucketSpecAccessFromPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecAccessFromPatch
		return ret
	}).(BucketSpecAccessFromPatchOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o BucketSpecAccessFromPatchPtrOutput) NamespaceSelectors() BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v *BucketSpecAccessFromPatch) []BucketSpecAccessFromNamespaceSelectorsPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// BucketSpec defines the desired state of an S3 compatible bucket
type BucketSpecPatch struct {
	AccessFrom *BucketSpecAccessFromPatch `pulumi:"accessFrom"`
	// The bucket name.
	BucketName *string `pulumi:"bucketName"`
	// The bucket endpoint address.
	Endpoint *string `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
	Insecure *bool `pulumi:"insecure"`
	// The interval at which to check for bucket updates.
	Interval *string `pulumi:"interval"`
	// The S3 compatible storage provider name, default ('generic').
	Provider *string `pulumi:"provider"`
	// The bucket region.
	Region    *string                   `pulumi:"region"`
	SecretRef *BucketSpecSecretRefPatch `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout for download operations, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
}

// BucketSpecPatchInput is an input type that accepts BucketSpecPatchArgs and BucketSpecPatchOutput values.
// You can construct a concrete instance of `BucketSpecPatchInput` via:
//
//	BucketSpecPatchArgs{...}
type BucketSpecPatchInput interface {
	pulumi.Input

	ToBucketSpecPatchOutput() BucketSpecPatchOutput
	ToBucketSpecPatchOutputWithContext(context.Context) BucketSpecPatchOutput
}

// BucketSpec defines the desired state of an S3 compatible bucket
type BucketSpecPatchArgs struct {
	AccessFrom BucketSpecAccessFromPatchPtrInput `pulumi:"accessFrom"`
	// The bucket name.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// The bucket endpoint address.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// The interval at which to check for bucket updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The S3 compatible storage provider name, default ('generic').
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// The bucket region.
	Region    pulumi.StringPtrInput            `pulumi:"region"`
	SecretRef BucketSpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout for download operations, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BucketSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecPatch)(nil)).Elem()
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchOutput() BucketSpecPatchOutput {
	return i.ToBucketSpecPatchOutputWithContext(context.Background())
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchOutputWithContext(ctx context.Context) BucketSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPatchOutput)
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return i.ToBucketSpecPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecPatchArgs) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPatchOutput).ToBucketSpecPatchPtrOutputWithContext(ctx)
}

// BucketSpecPatchPtrInput is an input type that accepts BucketSpecPatchArgs, BucketSpecPatchPtr and BucketSpecPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecPatchPtrInput` via:
//
//	        BucketSpecPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput
	ToBucketSpecPatchPtrOutputWithContext(context.Context) BucketSpecPatchPtrOutput
}

type bucketSpecPatchPtrType BucketSpecPatchArgs

func BucketSpecPatchPtr(v *BucketSpecPatchArgs) BucketSpecPatchPtrInput {
	return (*bucketSpecPatchPtrType)(v)
}

func (*bucketSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecPatch)(nil)).Elem()
}

func (i *bucketSpecPatchPtrType) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return i.ToBucketSpecPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecPatchPtrType) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecPatchPtrOutput)
}

// BucketSpec defines the desired state of an S3 compatible bucket
type BucketSpecPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecPatch)(nil)).Elem()
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchOutput() BucketSpecPatchOutput {
	return o
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchOutputWithContext(ctx context.Context) BucketSpecPatchOutput {
	return o
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return o.ToBucketSpecPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecPatchOutput) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecPatch) *BucketSpecPatch {
		return &v
	}).(BucketSpecPatchPtrOutput)
}

func (o BucketSpecPatchOutput) AccessFrom() BucketSpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *BucketSpecAccessFromPatch { return v.AccessFrom }).(BucketSpecAccessFromPatchPtrOutput)
}

// The bucket name.
func (o BucketSpecPatchOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// The bucket endpoint address.
func (o BucketSpecPatchOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecPatchOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
func (o BucketSpecPatchOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The interval at which to check for bucket updates.
func (o BucketSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The S3 compatible storage provider name, default ('generic').
func (o BucketSpecPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// The bucket region.
func (o BucketSpecPatchOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchOutput) SecretRef() BucketSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *BucketSpecSecretRefPatch { return v.SecretRef }).(BucketSpecSecretRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o BucketSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout for download operations, defaults to 60s.
func (o BucketSpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BucketSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecPatch)(nil)).Elem()
}

func (o BucketSpecPatchPtrOutput) ToBucketSpecPatchPtrOutput() BucketSpecPatchPtrOutput {
	return o
}

func (o BucketSpecPatchPtrOutput) ToBucketSpecPatchPtrOutputWithContext(ctx context.Context) BucketSpecPatchPtrOutput {
	return o
}

func (o BucketSpecPatchPtrOutput) Elem() BucketSpecPatchOutput {
	return o.ApplyT(func(v *BucketSpecPatch) BucketSpecPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecPatch
		return ret
	}).(BucketSpecPatchOutput)
}

func (o BucketSpecPatchPtrOutput) AccessFrom() BucketSpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *BucketSpecAccessFromPatch {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(BucketSpecAccessFromPatchPtrOutput)
}

// The bucket name.
func (o BucketSpecPatchPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The bucket endpoint address.
func (o BucketSpecPatchPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o BucketSpecPatchPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Insecure allows connecting to a non-TLS S3 HTTP endpoint.
func (o BucketSpecPatchPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// The interval at which to check for bucket updates.
func (o BucketSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// The S3 compatible storage provider name, default ('generic').
func (o BucketSpecPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

// The bucket region.
func (o BucketSpecPatchPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

func (o BucketSpecPatchPtrOutput) SecretRef() BucketSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *BucketSpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(BucketSpecSecretRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o BucketSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout for download operations, defaults to 60s.
func (o BucketSpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The name of the secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecSecretRefInput is an input type that accepts BucketSpecSecretRefArgs and BucketSpecSecretRefOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefInput` via:
//
//	BucketSpecSecretRefArgs{...}
type BucketSpecSecretRefInput interface {
	pulumi.Input

	ToBucketSpecSecretRefOutput() BucketSpecSecretRefOutput
	ToBucketSpecSecretRefOutputWithContext(context.Context) BucketSpecSecretRefOutput
}

// The name of the secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRef)(nil)).Elem()
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefOutput() BucketSpecSecretRefOutput {
	return i.ToBucketSpecSecretRefOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefOutputWithContext(ctx context.Context) BucketSpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefOutput)
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return i.ToBucketSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefArgs) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefOutput).ToBucketSpecSecretRefPtrOutputWithContext(ctx)
}

// BucketSpecSecretRefPtrInput is an input type that accepts BucketSpecSecretRefArgs, BucketSpecSecretRefPtr and BucketSpecSecretRefPtrOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefPtrInput` via:
//
//	        BucketSpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type BucketSpecSecretRefPtrInput interface {
	pulumi.Input

	ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput
	ToBucketSpecSecretRefPtrOutputWithContext(context.Context) BucketSpecSecretRefPtrOutput
}

type bucketSpecSecretRefPtrType BucketSpecSecretRefArgs

func BucketSpecSecretRefPtr(v *BucketSpecSecretRefArgs) BucketSpecSecretRefPtrInput {
	return (*bucketSpecSecretRefPtrType)(v)
}

func (*bucketSpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRef)(nil)).Elem()
}

func (i *bucketSpecSecretRefPtrType) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return i.ToBucketSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *bucketSpecSecretRefPtrType) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPtrOutput)
}

// The name of the secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRef)(nil)).Elem()
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefOutput() BucketSpecSecretRefOutput {
	return o
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefOutputWithContext(ctx context.Context) BucketSpecSecretRefOutput {
	return o
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return o.ToBucketSpecSecretRefPtrOutputWithContext(context.Background())
}

func (o BucketSpecSecretRefOutput) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecSecretRef) *BucketSpecSecretRef {
		return &v
	}).(BucketSpecSecretRefPtrOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRef)(nil)).Elem()
}

func (o BucketSpecSecretRefPtrOutput) ToBucketSpecSecretRefPtrOutput() BucketSpecSecretRefPtrOutput {
	return o
}

func (o BucketSpecSecretRefPtrOutput) ToBucketSpecSecretRefPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPtrOutput {
	return o
}

func (o BucketSpecSecretRefPtrOutput) Elem() BucketSpecSecretRefOutput {
	return o.ApplyT(func(v *BucketSpecSecretRef) BucketSpecSecretRef {
		if v != nil {
			return *v
		}
		var ret BucketSpecSecretRef
		return ret
	}).(BucketSpecSecretRefOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The name of the secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// BucketSpecSecretRefPatchInput is an input type that accepts BucketSpecSecretRefPatchArgs and BucketSpecSecretRefPatchOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefPatchInput` via:
//
//	BucketSpecSecretRefPatchArgs{...}
type BucketSpecSecretRefPatchInput interface {
	pulumi.Input

	ToBucketSpecSecretRefPatchOutput() BucketSpecSecretRefPatchOutput
	ToBucketSpecSecretRefPatchOutputWithContext(context.Context) BucketSpecSecretRefPatchOutput
}

// The name of the secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (BucketSpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRefPatch)(nil)).Elem()
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchOutput() BucketSpecSecretRefPatchOutput {
	return i.ToBucketSpecSecretRefPatchOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPatchOutput)
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return i.ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i BucketSpecSecretRefPatchArgs) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPatchOutput).ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx)
}

// BucketSpecSecretRefPatchPtrInput is an input type that accepts BucketSpecSecretRefPatchArgs, BucketSpecSecretRefPatchPtr and BucketSpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `BucketSpecSecretRefPatchPtrInput` via:
//
//	        BucketSpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type BucketSpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput
	ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Context) BucketSpecSecretRefPatchPtrOutput
}

type bucketSpecSecretRefPatchPtrType BucketSpecSecretRefPatchArgs

func BucketSpecSecretRefPatchPtr(v *BucketSpecSecretRefPatchArgs) BucketSpecSecretRefPatchPtrInput {
	return (*bucketSpecSecretRefPatchPtrType)(v)
}

func (*bucketSpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRefPatch)(nil)).Elem()
}

func (i *bucketSpecSecretRefPatchPtrType) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return i.ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *bucketSpecSecretRefPatchPtrType) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketSpecSecretRefPatchPtrOutput)
}

// The name of the secret containing authentication credentials
// for the Bucket.
type BucketSpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketSpecSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchOutput() BucketSpecSecretRefPatchOutput {
	return o
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchOutput {
	return o
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return o.ToBucketSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o BucketSpecSecretRefPatchOutput) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketSpecSecretRefPatch) *BucketSpecSecretRefPatch {
		return &v
	}).(BucketSpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketSpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type BucketSpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketSpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketSpecSecretRefPatch)(nil)).Elem()
}

func (o BucketSpecSecretRefPatchPtrOutput) ToBucketSpecSecretRefPatchPtrOutput() BucketSpecSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecSecretRefPatchPtrOutput) ToBucketSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) BucketSpecSecretRefPatchPtrOutput {
	return o
}

func (o BucketSpecSecretRefPatchPtrOutput) Elem() BucketSpecSecretRefPatchOutput {
	return o.ApplyT(func(v *BucketSpecSecretRefPatch) BucketSpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret BucketSpecSecretRefPatch
		return ret
	}).(BucketSpecSecretRefPatchOutput)
}

// Name of the referent.
func (o BucketSpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketSpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// BucketStatus defines the observed state of a bucket
type BucketStatus struct {
	Artifact *BucketStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions []BucketStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last Bucket sync.
	Url *string `pulumi:"url"`
}

// BucketStatusInput is an input type that accepts BucketStatusArgs and BucketStatusOutput values.
// You can construct a concrete instance of `BucketStatusInput` via:
//
//	BucketStatusArgs{...}
type BucketStatusInput interface {
	pulumi.Input

	ToBucketStatusOutput() BucketStatusOutput
	ToBucketStatusOutputWithContext(context.Context) BucketStatusOutput
}

// BucketStatus defines the observed state of a bucket
type BucketStatusArgs struct {
	Artifact BucketStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions BucketStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last Bucket sync.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatus)(nil)).Elem()
}

func (i BucketStatusArgs) ToBucketStatusOutput() BucketStatusOutput {
	return i.ToBucketStatusOutputWithContext(context.Background())
}

func (i BucketStatusArgs) ToBucketStatusOutputWithContext(ctx context.Context) BucketStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusOutput)
}

func (i BucketStatusArgs) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return i.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (i BucketStatusArgs) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusOutput).ToBucketStatusPtrOutputWithContext(ctx)
}

// BucketStatusPtrInput is an input type that accepts BucketStatusArgs, BucketStatusPtr and BucketStatusPtrOutput values.
// You can construct a concrete instance of `BucketStatusPtrInput` via:
//
//	        BucketStatusArgs{...}
//
//	or:
//
//	        nil
type BucketStatusPtrInput interface {
	pulumi.Input

	ToBucketStatusPtrOutput() BucketStatusPtrOutput
	ToBucketStatusPtrOutputWithContext(context.Context) BucketStatusPtrOutput
}

type bucketStatusPtrType BucketStatusArgs

func BucketStatusPtr(v *BucketStatusArgs) BucketStatusPtrInput {
	return (*bucketStatusPtrType)(v)
}

func (*bucketStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatus)(nil)).Elem()
}

func (i *bucketStatusPtrType) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return i.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (i *bucketStatusPtrType) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPtrOutput)
}

// BucketStatus defines the observed state of a bucket
type BucketStatusOutput struct{ *pulumi.OutputState }

func (BucketStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatus)(nil)).Elem()
}

func (o BucketStatusOutput) ToBucketStatusOutput() BucketStatusOutput {
	return o
}

func (o BucketStatusOutput) ToBucketStatusOutputWithContext(ctx context.Context) BucketStatusOutput {
	return o
}

func (o BucketStatusOutput) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return o.ToBucketStatusPtrOutputWithContext(context.Background())
}

func (o BucketStatusOutput) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatus) *BucketStatus {
		return &v
	}).(BucketStatusPtrOutput)
}

func (o BucketStatusOutput) Artifact() BucketStatusArtifactPtrOutput {
	return o.ApplyT(func(v BucketStatus) *BucketStatusArtifact { return v.Artifact }).(BucketStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusOutput) Conditions() BucketStatusConditionsArrayOutput {
	return o.ApplyT(func(v BucketStatus) []BucketStatusConditions { return v.Conditions }).(BucketStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o BucketStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last Bucket sync.
func (o BucketStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatus)(nil)).Elem()
}

func (o BucketStatusPtrOutput) ToBucketStatusPtrOutput() BucketStatusPtrOutput {
	return o
}

func (o BucketStatusPtrOutput) ToBucketStatusPtrOutputWithContext(ctx context.Context) BucketStatusPtrOutput {
	return o
}

func (o BucketStatusPtrOutput) Elem() BucketStatusOutput {
	return o.ApplyT(func(v *BucketStatus) BucketStatus {
		if v != nil {
			return *v
		}
		var ret BucketStatus
		return ret
	}).(BucketStatusOutput)
}

func (o BucketStatusPtrOutput) Artifact() BucketStatusArtifactPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *BucketStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(BucketStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusPtrOutput) Conditions() BucketStatusConditionsArrayOutput {
	return o.ApplyT(func(v *BucketStatus) []BucketStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(BucketStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o BucketStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last Bucket sync.
func (o BucketStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful Bucket sync.
type BucketStatusArtifact struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// BucketStatusArtifactInput is an input type that accepts BucketStatusArtifactArgs and BucketStatusArtifactOutput values.
// You can construct a concrete instance of `BucketStatusArtifactInput` via:
//
//	BucketStatusArtifactArgs{...}
type BucketStatusArtifactInput interface {
	pulumi.Input

	ToBucketStatusArtifactOutput() BucketStatusArtifactOutput
	ToBucketStatusArtifactOutputWithContext(context.Context) BucketStatusArtifactOutput
}

// Artifact represents the output of the last successful Bucket sync.
type BucketStatusArtifactArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifact)(nil)).Elem()
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactOutput() BucketStatusArtifactOutput {
	return i.ToBucketStatusArtifactOutputWithContext(context.Background())
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactOutputWithContext(ctx context.Context) BucketStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactOutput)
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return i.ToBucketStatusArtifactPtrOutputWithContext(context.Background())
}

func (i BucketStatusArtifactArgs) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactOutput).ToBucketStatusArtifactPtrOutputWithContext(ctx)
}

// BucketStatusArtifactPtrInput is an input type that accepts BucketStatusArtifactArgs, BucketStatusArtifactPtr and BucketStatusArtifactPtrOutput values.
// You can construct a concrete instance of `BucketStatusArtifactPtrInput` via:
//
//	        BucketStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type BucketStatusArtifactPtrInput interface {
	pulumi.Input

	ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput
	ToBucketStatusArtifactPtrOutputWithContext(context.Context) BucketStatusArtifactPtrOutput
}

type bucketStatusArtifactPtrType BucketStatusArtifactArgs

func BucketStatusArtifactPtr(v *BucketStatusArtifactArgs) BucketStatusArtifactPtrInput {
	return (*bucketStatusArtifactPtrType)(v)
}

func (*bucketStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifact)(nil)).Elem()
}

func (i *bucketStatusArtifactPtrType) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return i.ToBucketStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *bucketStatusArtifactPtrType) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPtrOutput)
}

// Artifact represents the output of the last successful Bucket sync.
type BucketStatusArtifactOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifact)(nil)).Elem()
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactOutput() BucketStatusArtifactOutput {
	return o
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactOutputWithContext(ctx context.Context) BucketStatusArtifactOutput {
	return o
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return o.ToBucketStatusArtifactPtrOutputWithContext(context.Background())
}

func (o BucketStatusArtifactOutput) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatusArtifact) *BucketStatusArtifact {
		return &v
	}).(BucketStatusArtifactPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o BucketStatusArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o BucketStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o BucketStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o BucketStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o BucketStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifact)(nil)).Elem()
}

func (o BucketStatusArtifactPtrOutput) ToBucketStatusArtifactPtrOutput() BucketStatusArtifactPtrOutput {
	return o
}

func (o BucketStatusArtifactPtrOutput) ToBucketStatusArtifactPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPtrOutput {
	return o
}

func (o BucketStatusArtifactPtrOutput) Elem() BucketStatusArtifactOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) BucketStatusArtifact {
		if v != nil {
			return *v
		}
		var ret BucketStatusArtifact
		return ret
	}).(BucketStatusArtifactOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o BucketStatusArtifactPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o BucketStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o BucketStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o BucketStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o BucketStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful Bucket sync.
type BucketStatusArtifactPatch struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// BucketStatusArtifactPatchInput is an input type that accepts BucketStatusArtifactPatchArgs and BucketStatusArtifactPatchOutput values.
// You can construct a concrete instance of `BucketStatusArtifactPatchInput` via:
//
//	BucketStatusArtifactPatchArgs{...}
type BucketStatusArtifactPatchInput interface {
	pulumi.Input

	ToBucketStatusArtifactPatchOutput() BucketStatusArtifactPatchOutput
	ToBucketStatusArtifactPatchOutputWithContext(context.Context) BucketStatusArtifactPatchOutput
}

// Artifact represents the output of the last successful Bucket sync.
type BucketStatusArtifactPatchArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifactPatch)(nil)).Elem()
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchOutput() BucketStatusArtifactPatchOutput {
	return i.ToBucketStatusArtifactPatchOutputWithContext(context.Background())
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchOutputWithContext(ctx context.Context) BucketStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPatchOutput)
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return i.ToBucketStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i BucketStatusArtifactPatchArgs) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPatchOutput).ToBucketStatusArtifactPatchPtrOutputWithContext(ctx)
}

// BucketStatusArtifactPatchPtrInput is an input type that accepts BucketStatusArtifactPatchArgs, BucketStatusArtifactPatchPtr and BucketStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `BucketStatusArtifactPatchPtrInput` via:
//
//	        BucketStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type BucketStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput
	ToBucketStatusArtifactPatchPtrOutputWithContext(context.Context) BucketStatusArtifactPatchPtrOutput
}

type bucketStatusArtifactPatchPtrType BucketStatusArtifactPatchArgs

func BucketStatusArtifactPatchPtr(v *BucketStatusArtifactPatchArgs) BucketStatusArtifactPatchPtrInput {
	return (*bucketStatusArtifactPatchPtrType)(v)
}

func (*bucketStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifactPatch)(nil)).Elem()
}

func (i *bucketStatusArtifactPatchPtrType) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return i.ToBucketStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *bucketStatusArtifactPatchPtrType) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusArtifactPatchPtrOutput)
}

// Artifact represents the output of the last successful Bucket sync.
type BucketStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusArtifactPatch)(nil)).Elem()
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchOutput() BucketStatusArtifactPatchOutput {
	return o
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchOutputWithContext(ctx context.Context) BucketStatusArtifactPatchOutput {
	return o
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return o.ToBucketStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o BucketStatusArtifactPatchOutput) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatusArtifactPatch) *BucketStatusArtifactPatch {
		return &v
	}).(BucketStatusArtifactPatchPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o BucketStatusArtifactPatchOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o BucketStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o BucketStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o BucketStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o BucketStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusArtifactPatch)(nil)).Elem()
}

func (o BucketStatusArtifactPatchPtrOutput) ToBucketStatusArtifactPatchPtrOutput() BucketStatusArtifactPatchPtrOutput {
	return o
}

func (o BucketStatusArtifactPatchPtrOutput) ToBucketStatusArtifactPatchPtrOutputWithContext(ctx context.Context) BucketStatusArtifactPatchPtrOutput {
	return o
}

func (o BucketStatusArtifactPatchPtrOutput) Elem() BucketStatusArtifactPatchOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) BucketStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret BucketStatusArtifactPatch
		return ret
	}).(BucketStatusArtifactPatchOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o BucketStatusArtifactPatchPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o BucketStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o BucketStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o BucketStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o BucketStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// BucketStatusConditionsInput is an input type that accepts BucketStatusConditionsArgs and BucketStatusConditionsOutput values.
// You can construct a concrete instance of `BucketStatusConditionsInput` via:
//
//	BucketStatusConditionsArgs{...}
type BucketStatusConditionsInput interface {
	pulumi.Input

	ToBucketStatusConditionsOutput() BucketStatusConditionsOutput
	ToBucketStatusConditionsOutputWithContext(context.Context) BucketStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BucketStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditions)(nil)).Elem()
}

func (i BucketStatusConditionsArgs) ToBucketStatusConditionsOutput() BucketStatusConditionsOutput {
	return i.ToBucketStatusConditionsOutputWithContext(context.Background())
}

func (i BucketStatusConditionsArgs) ToBucketStatusConditionsOutputWithContext(ctx context.Context) BucketStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsOutput)
}

// BucketStatusConditionsArrayInput is an input type that accepts BucketStatusConditionsArray and BucketStatusConditionsArrayOutput values.
// You can construct a concrete instance of `BucketStatusConditionsArrayInput` via:
//
//	BucketStatusConditionsArray{ BucketStatusConditionsArgs{...} }
type BucketStatusConditionsArrayInput interface {
	pulumi.Input

	ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput
	ToBucketStatusConditionsArrayOutputWithContext(context.Context) BucketStatusConditionsArrayOutput
}

type BucketStatusConditionsArray []BucketStatusConditionsInput

func (BucketStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditions)(nil)).Elem()
}

func (i BucketStatusConditionsArray) ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput {
	return i.ToBucketStatusConditionsArrayOutputWithContext(context.Background())
}

func (i BucketStatusConditionsArray) ToBucketStatusConditionsArrayOutputWithContext(ctx context.Context) BucketStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditions)(nil)).Elem()
}

func (o BucketStatusConditionsOutput) ToBucketStatusConditionsOutput() BucketStatusConditionsOutput {
	return o
}

func (o BucketStatusConditionsOutput) ToBucketStatusConditionsOutputWithContext(ctx context.Context) BucketStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o BucketStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o BucketStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o BucketStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o BucketStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o BucketStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o BucketStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BucketStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditions)(nil)).Elem()
}

func (o BucketStatusConditionsArrayOutput) ToBucketStatusConditionsArrayOutput() BucketStatusConditionsArrayOutput {
	return o
}

func (o BucketStatusConditionsArrayOutput) ToBucketStatusConditionsArrayOutputWithContext(ctx context.Context) BucketStatusConditionsArrayOutput {
	return o
}

func (o BucketStatusConditionsArrayOutput) Index(i pulumi.IntInput) BucketStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketStatusConditions {
		return vs[0].([]BucketStatusConditions)[vs[1].(int)]
	}).(BucketStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// BucketStatusConditionsPatchInput is an input type that accepts BucketStatusConditionsPatchArgs and BucketStatusConditionsPatchOutput values.
// You can construct a concrete instance of `BucketStatusConditionsPatchInput` via:
//
//	BucketStatusConditionsPatchArgs{...}
type BucketStatusConditionsPatchInput interface {
	pulumi.Input

	ToBucketStatusConditionsPatchOutput() BucketStatusConditionsPatchOutput
	ToBucketStatusConditionsPatchOutputWithContext(context.Context) BucketStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BucketStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditionsPatch)(nil)).Elem()
}

func (i BucketStatusConditionsPatchArgs) ToBucketStatusConditionsPatchOutput() BucketStatusConditionsPatchOutput {
	return i.ToBucketStatusConditionsPatchOutputWithContext(context.Background())
}

func (i BucketStatusConditionsPatchArgs) ToBucketStatusConditionsPatchOutputWithContext(ctx context.Context) BucketStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsPatchOutput)
}

// BucketStatusConditionsPatchArrayInput is an input type that accepts BucketStatusConditionsPatchArray and BucketStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `BucketStatusConditionsPatchArrayInput` via:
//
//	BucketStatusConditionsPatchArray{ BucketStatusConditionsPatchArgs{...} }
type BucketStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToBucketStatusConditionsPatchArrayOutput() BucketStatusConditionsPatchArrayOutput
	ToBucketStatusConditionsPatchArrayOutputWithContext(context.Context) BucketStatusConditionsPatchArrayOutput
}

type BucketStatusConditionsPatchArray []BucketStatusConditionsPatchInput

func (BucketStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditionsPatch)(nil)).Elem()
}

func (i BucketStatusConditionsPatchArray) ToBucketStatusConditionsPatchArrayOutput() BucketStatusConditionsPatchArrayOutput {
	return i.ToBucketStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i BucketStatusConditionsPatchArray) ToBucketStatusConditionsPatchArrayOutputWithContext(ctx context.Context) BucketStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type BucketStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusConditionsPatch)(nil)).Elem()
}

func (o BucketStatusConditionsPatchOutput) ToBucketStatusConditionsPatchOutput() BucketStatusConditionsPatchOutput {
	return o
}

func (o BucketStatusConditionsPatchOutput) ToBucketStatusConditionsPatchOutputWithContext(ctx context.Context) BucketStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o BucketStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o BucketStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o BucketStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o BucketStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o BucketStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o BucketStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BucketStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (BucketStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BucketStatusConditionsPatch)(nil)).Elem()
}

func (o BucketStatusConditionsPatchArrayOutput) ToBucketStatusConditionsPatchArrayOutput() BucketStatusConditionsPatchArrayOutput {
	return o
}

func (o BucketStatusConditionsPatchArrayOutput) ToBucketStatusConditionsPatchArrayOutputWithContext(ctx context.Context) BucketStatusConditionsPatchArrayOutput {
	return o
}

func (o BucketStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) BucketStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BucketStatusConditionsPatch {
		return vs[0].([]BucketStatusConditionsPatch)[vs[1].(int)]
	}).(BucketStatusConditionsPatchOutput)
}

// BucketStatus defines the observed state of a bucket
type BucketStatusPatch struct {
	Artifact *BucketStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions []BucketStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last Bucket sync.
	Url *string `pulumi:"url"`
}

// BucketStatusPatchInput is an input type that accepts BucketStatusPatchArgs and BucketStatusPatchOutput values.
// You can construct a concrete instance of `BucketStatusPatchInput` via:
//
//	BucketStatusPatchArgs{...}
type BucketStatusPatchInput interface {
	pulumi.Input

	ToBucketStatusPatchOutput() BucketStatusPatchOutput
	ToBucketStatusPatchOutputWithContext(context.Context) BucketStatusPatchOutput
}

// BucketStatus defines the observed state of a bucket
type BucketStatusPatchArgs struct {
	Artifact BucketStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the Bucket.
	Conditions BucketStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last Bucket sync.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (BucketStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusPatch)(nil)).Elem()
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchOutput() BucketStatusPatchOutput {
	return i.ToBucketStatusPatchOutputWithContext(context.Background())
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchOutputWithContext(ctx context.Context) BucketStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPatchOutput)
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return i.ToBucketStatusPatchPtrOutputWithContext(context.Background())
}

func (i BucketStatusPatchArgs) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPatchOutput).ToBucketStatusPatchPtrOutputWithContext(ctx)
}

// BucketStatusPatchPtrInput is an input type that accepts BucketStatusPatchArgs, BucketStatusPatchPtr and BucketStatusPatchPtrOutput values.
// You can construct a concrete instance of `BucketStatusPatchPtrInput` via:
//
//	        BucketStatusPatchArgs{...}
//
//	or:
//
//	        nil
type BucketStatusPatchPtrInput interface {
	pulumi.Input

	ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput
	ToBucketStatusPatchPtrOutputWithContext(context.Context) BucketStatusPatchPtrOutput
}

type bucketStatusPatchPtrType BucketStatusPatchArgs

func BucketStatusPatchPtr(v *BucketStatusPatchArgs) BucketStatusPatchPtrInput {
	return (*bucketStatusPatchPtrType)(v)
}

func (*bucketStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusPatch)(nil)).Elem()
}

func (i *bucketStatusPatchPtrType) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return i.ToBucketStatusPatchPtrOutputWithContext(context.Background())
}

func (i *bucketStatusPatchPtrType) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketStatusPatchPtrOutput)
}

// BucketStatus defines the observed state of a bucket
type BucketStatusPatchOutput struct{ *pulumi.OutputState }

func (BucketStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketStatusPatch)(nil)).Elem()
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchOutput() BucketStatusPatchOutput {
	return o
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchOutputWithContext(ctx context.Context) BucketStatusPatchOutput {
	return o
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return o.ToBucketStatusPatchPtrOutputWithContext(context.Background())
}

func (o BucketStatusPatchOutput) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketStatusPatch) *BucketStatusPatch {
		return &v
	}).(BucketStatusPatchPtrOutput)
}

func (o BucketStatusPatchOutput) Artifact() BucketStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *BucketStatusArtifactPatch { return v.Artifact }).(BucketStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusPatchOutput) Conditions() BucketStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v BucketStatusPatch) []BucketStatusConditionsPatch { return v.Conditions }).(BucketStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o BucketStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last Bucket sync.
func (o BucketStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (BucketStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketStatusPatch)(nil)).Elem()
}

func (o BucketStatusPatchPtrOutput) ToBucketStatusPatchPtrOutput() BucketStatusPatchPtrOutput {
	return o
}

func (o BucketStatusPatchPtrOutput) ToBucketStatusPatchPtrOutputWithContext(ctx context.Context) BucketStatusPatchPtrOutput {
	return o
}

func (o BucketStatusPatchPtrOutput) Elem() BucketStatusPatchOutput {
	return o.ApplyT(func(v *BucketStatusPatch) BucketStatusPatch {
		if v != nil {
			return *v
		}
		var ret BucketStatusPatch
		return ret
	}).(BucketStatusPatchOutput)
}

func (o BucketStatusPatchPtrOutput) Artifact() BucketStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *BucketStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(BucketStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the Bucket.
func (o BucketStatusPatchPtrOutput) Conditions() BucketStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *BucketStatusPatch) []BucketStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(BucketStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o BucketStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o BucketStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last Bucket sync.
func (o BucketStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// GitRepository is the Schema for the gitrepositories API
type GitRepositoryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *GitRepositorySpec   `pulumi:"spec"`
	Status   *GitRepositoryStatus `pulumi:"status"`
}

// GitRepositoryTypeInput is an input type that accepts GitRepositoryTypeArgs and GitRepositoryTypeOutput values.
// You can construct a concrete instance of `GitRepositoryTypeInput` via:
//
//	GitRepositoryTypeArgs{...}
type GitRepositoryTypeInput interface {
	pulumi.Input

	ToGitRepositoryTypeOutput() GitRepositoryTypeOutput
	ToGitRepositoryTypeOutputWithContext(context.Context) GitRepositoryTypeOutput
}

// GitRepository is the Schema for the gitrepositories API
type GitRepositoryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput   `pulumi:"metadata"`
	Spec     GitRepositorySpecPtrInput   `pulumi:"spec"`
	Status   GitRepositoryStatusPtrInput `pulumi:"status"`
}

func (GitRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryType)(nil)).Elem()
}

func (i GitRepositoryTypeArgs) ToGitRepositoryTypeOutput() GitRepositoryTypeOutput {
	return i.ToGitRepositoryTypeOutputWithContext(context.Background())
}

func (i GitRepositoryTypeArgs) ToGitRepositoryTypeOutputWithContext(ctx context.Context) GitRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryTypeOutput)
}

// GitRepositoryTypeArrayInput is an input type that accepts GitRepositoryTypeArray and GitRepositoryTypeArrayOutput values.
// You can construct a concrete instance of `GitRepositoryTypeArrayInput` via:
//
//	GitRepositoryTypeArray{ GitRepositoryTypeArgs{...} }
type GitRepositoryTypeArrayInput interface {
	pulumi.Input

	ToGitRepositoryTypeArrayOutput() GitRepositoryTypeArrayOutput
	ToGitRepositoryTypeArrayOutputWithContext(context.Context) GitRepositoryTypeArrayOutput
}

type GitRepositoryTypeArray []GitRepositoryTypeInput

func (GitRepositoryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryType)(nil)).Elem()
}

func (i GitRepositoryTypeArray) ToGitRepositoryTypeArrayOutput() GitRepositoryTypeArrayOutput {
	return i.ToGitRepositoryTypeArrayOutputWithContext(context.Background())
}

func (i GitRepositoryTypeArray) ToGitRepositoryTypeArrayOutputWithContext(ctx context.Context) GitRepositoryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryTypeArrayOutput)
}

// GitRepository is the Schema for the gitrepositories API
type GitRepositoryTypeOutput struct{ *pulumi.OutputState }

func (GitRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryType)(nil)).Elem()
}

func (o GitRepositoryTypeOutput) ToGitRepositoryTypeOutput() GitRepositoryTypeOutput {
	return o
}

func (o GitRepositoryTypeOutput) ToGitRepositoryTypeOutputWithContext(ctx context.Context) GitRepositoryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GitRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GitRepositoryTypeOutput) Spec() GitRepositorySpecPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *GitRepositorySpec { return v.Spec }).(GitRepositorySpecPtrOutput)
}

func (o GitRepositoryTypeOutput) Status() GitRepositoryStatusPtrOutput {
	return o.ApplyT(func(v GitRepositoryType) *GitRepositoryStatus { return v.Status }).(GitRepositoryStatusPtrOutput)
}

type GitRepositoryTypeArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryType)(nil)).Elem()
}

func (o GitRepositoryTypeArrayOutput) ToGitRepositoryTypeArrayOutput() GitRepositoryTypeArrayOutput {
	return o
}

func (o GitRepositoryTypeArrayOutput) ToGitRepositoryTypeArrayOutputWithContext(ctx context.Context) GitRepositoryTypeArrayOutput {
	return o
}

func (o GitRepositoryTypeArrayOutput) Index(i pulumi.IntInput) GitRepositoryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryType {
		return vs[0].([]GitRepositoryType)[vs[1].(int)]
	}).(GitRepositoryTypeOutput)
}

// GitRepositoryList is a list of GitRepository
type GitRepositoryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GitRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// GitRepositoryListTypeInput is an input type that accepts GitRepositoryListTypeArgs and GitRepositoryListTypeOutput values.
// You can construct a concrete instance of `GitRepositoryListTypeInput` via:
//
//	GitRepositoryListTypeArgs{...}
type GitRepositoryListTypeInput interface {
	pulumi.Input

	ToGitRepositoryListTypeOutput() GitRepositoryListTypeOutput
	ToGitRepositoryListTypeOutputWithContext(context.Context) GitRepositoryListTypeOutput
}

// GitRepositoryList is a list of GitRepository
type GitRepositoryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GitRepositoryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (GitRepositoryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryListType)(nil)).Elem()
}

func (i GitRepositoryListTypeArgs) ToGitRepositoryListTypeOutput() GitRepositoryListTypeOutput {
	return i.ToGitRepositoryListTypeOutputWithContext(context.Background())
}

func (i GitRepositoryListTypeArgs) ToGitRepositoryListTypeOutputWithContext(ctx context.Context) GitRepositoryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryListTypeOutput)
}

// GitRepositoryList is a list of GitRepository
type GitRepositoryListTypeOutput struct{ *pulumi.OutputState }

func (GitRepositoryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryListType)(nil)).Elem()
}

func (o GitRepositoryListTypeOutput) ToGitRepositoryListTypeOutput() GitRepositoryListTypeOutput {
	return o
}

func (o GitRepositoryListTypeOutput) ToGitRepositoryListTypeOutputWithContext(ctx context.Context) GitRepositoryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of gitrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GitRepositoryListTypeOutput) Items() GitRepositoryTypeArrayOutput {
	return o.ApplyT(func(v GitRepositoryListType) []GitRepositoryType { return v.Items }).(GitRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v GitRepositoryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// GitRepository is the Schema for the gitrepositories API
type GitRepositoryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *GitRepositorySpecPatch   `pulumi:"spec"`
	Status   *GitRepositoryStatusPatch `pulumi:"status"`
}

// GitRepositoryPatchTypeInput is an input type that accepts GitRepositoryPatchTypeArgs and GitRepositoryPatchTypeOutput values.
// You can construct a concrete instance of `GitRepositoryPatchTypeInput` via:
//
//	GitRepositoryPatchTypeArgs{...}
type GitRepositoryPatchTypeInput interface {
	pulumi.Input

	ToGitRepositoryPatchTypeOutput() GitRepositoryPatchTypeOutput
	ToGitRepositoryPatchTypeOutputWithContext(context.Context) GitRepositoryPatchTypeOutput
}

// GitRepository is the Schema for the gitrepositories API
type GitRepositoryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput   `pulumi:"metadata"`
	Spec     GitRepositorySpecPatchPtrInput   `pulumi:"spec"`
	Status   GitRepositoryStatusPatchPtrInput `pulumi:"status"`
}

func (GitRepositoryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryPatchType)(nil)).Elem()
}

func (i GitRepositoryPatchTypeArgs) ToGitRepositoryPatchTypeOutput() GitRepositoryPatchTypeOutput {
	return i.ToGitRepositoryPatchTypeOutputWithContext(context.Background())
}

func (i GitRepositoryPatchTypeArgs) ToGitRepositoryPatchTypeOutputWithContext(ctx context.Context) GitRepositoryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryPatchTypeOutput)
}

// GitRepository is the Schema for the gitrepositories API
type GitRepositoryPatchTypeOutput struct{ *pulumi.OutputState }

func (GitRepositoryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryPatchType)(nil)).Elem()
}

func (o GitRepositoryPatchTypeOutput) ToGitRepositoryPatchTypeOutput() GitRepositoryPatchTypeOutput {
	return o
}

func (o GitRepositoryPatchTypeOutput) ToGitRepositoryPatchTypeOutputWithContext(ctx context.Context) GitRepositoryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GitRepositoryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GitRepositoryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GitRepositoryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GitRepositoryPatchTypeOutput) Spec() GitRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *GitRepositorySpecPatch { return v.Spec }).(GitRepositorySpecPatchPtrOutput)
}

func (o GitRepositoryPatchTypeOutput) Status() GitRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryPatchType) *GitRepositoryStatusPatch { return v.Status }).(GitRepositoryStatusPatchPtrOutput)
}

// GitRepositorySpec defines the desired state of a Git repository.
type GitRepositorySpec struct {
	AccessFrom *GitRepositorySpecAccessFrom `pulumi:"accessFrom"`
	// Determines which git client library to use.
	// Defaults to go-git, valid values are ('go-git', 'libgit2').
	GitImplementation *string `pulumi:"gitImplementation"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Extra git repositories to map into the repository
	Include []GitRepositorySpecInclude `pulumi:"include"`
	// The interval at which to check for repository updates.
	Interval *string `pulumi:"interval"`
	// When enabled, after the clone is created, initializes all submodules within,
	// using their default settings.
	// This option is available only when using the 'go-git' GitImplementation.
	RecurseSubmodules *bool                       `pulumi:"recurseSubmodules"`
	Ref               *GitRepositorySpecRef       `pulumi:"ref"`
	SecretRef         *GitRepositorySpecSecretRef `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout for remote Git operations like cloning, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// The repository URL, can be a HTTP/S or SSH address.
	Url    *string                  `pulumi:"url"`
	Verify *GitRepositorySpecVerify `pulumi:"verify"`
}

// GitRepositorySpecInput is an input type that accepts GitRepositorySpecArgs and GitRepositorySpecOutput values.
// You can construct a concrete instance of `GitRepositorySpecInput` via:
//
//	GitRepositorySpecArgs{...}
type GitRepositorySpecInput interface {
	pulumi.Input

	ToGitRepositorySpecOutput() GitRepositorySpecOutput
	ToGitRepositorySpecOutputWithContext(context.Context) GitRepositorySpecOutput
}

// GitRepositorySpec defines the desired state of a Git repository.
type GitRepositorySpecArgs struct {
	AccessFrom GitRepositorySpecAccessFromPtrInput `pulumi:"accessFrom"`
	// Determines which git client library to use.
	// Defaults to go-git, valid values are ('go-git', 'libgit2').
	GitImplementation pulumi.StringPtrInput `pulumi:"gitImplementation"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Extra git repositories to map into the repository
	Include GitRepositorySpecIncludeArrayInput `pulumi:"include"`
	// The interval at which to check for repository updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// When enabled, after the clone is created, initializes all submodules within,
	// using their default settings.
	// This option is available only when using the 'go-git' GitImplementation.
	RecurseSubmodules pulumi.BoolPtrInput                `pulumi:"recurseSubmodules"`
	Ref               GitRepositorySpecRefPtrInput       `pulumi:"ref"`
	SecretRef         GitRepositorySpecSecretRefPtrInput `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout for remote Git operations like cloning, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// The repository URL, can be a HTTP/S or SSH address.
	Url    pulumi.StringPtrInput           `pulumi:"url"`
	Verify GitRepositorySpecVerifyPtrInput `pulumi:"verify"`
}

func (GitRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpec)(nil)).Elem()
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecOutput() GitRepositorySpecOutput {
	return i.ToGitRepositorySpecOutputWithContext(context.Background())
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecOutputWithContext(ctx context.Context) GitRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecOutput)
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return i.ToGitRepositorySpecPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecArgs) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecOutput).ToGitRepositorySpecPtrOutputWithContext(ctx)
}

// GitRepositorySpecPtrInput is an input type that accepts GitRepositorySpecArgs, GitRepositorySpecPtr and GitRepositorySpecPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecPtrInput` via:
//
//	        GitRepositorySpecArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput
	ToGitRepositorySpecPtrOutputWithContext(context.Context) GitRepositorySpecPtrOutput
}

type gitRepositorySpecPtrType GitRepositorySpecArgs

func GitRepositorySpecPtr(v *GitRepositorySpecArgs) GitRepositorySpecPtrInput {
	return (*gitRepositorySpecPtrType)(v)
}

func (*gitRepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpec)(nil)).Elem()
}

func (i *gitRepositorySpecPtrType) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return i.ToGitRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecPtrType) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPtrOutput)
}

// GitRepositorySpec defines the desired state of a Git repository.
type GitRepositorySpecOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpec)(nil)).Elem()
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecOutput() GitRepositorySpecOutput {
	return o
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecOutputWithContext(ctx context.Context) GitRepositorySpecOutput {
	return o
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return o.ToGitRepositorySpecPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecOutput) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpec) *GitRepositorySpec {
		return &v
	}).(GitRepositorySpecPtrOutput)
}

func (o GitRepositorySpecOutput) AccessFrom() GitRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecAccessFrom { return v.AccessFrom }).(GitRepositorySpecAccessFromPtrOutput)
}

// Determines which git client library to use.
// Defaults to go-git, valid values are ('go-git', 'libgit2').
func (o GitRepositorySpecOutput) GitImplementation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.GitImplementation }).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Extra git repositories to map into the repository
func (o GitRepositorySpecOutput) Include() GitRepositorySpecIncludeArrayOutput {
	return o.ApplyT(func(v GitRepositorySpec) []GitRepositorySpecInclude { return v.Include }).(GitRepositorySpecIncludeArrayOutput)
}

// The interval at which to check for repository updates.
func (o GitRepositorySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// When enabled, after the clone is created, initializes all submodules within,
// using their default settings.
// This option is available only when using the 'go-git' GitImplementation.
func (o GitRepositorySpecOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *bool { return v.RecurseSubmodules }).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecOutput) Ref() GitRepositorySpecRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecRef { return v.Ref }).(GitRepositorySpecRefPtrOutput)
}

func (o GitRepositorySpecOutput) SecretRef() GitRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecSecretRef { return v.SecretRef }).(GitRepositorySpecSecretRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o GitRepositorySpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout for remote Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// The repository URL, can be a HTTP/S or SSH address.
func (o GitRepositorySpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecOutput) Verify() GitRepositorySpecVerifyPtrOutput {
	return o.ApplyT(func(v GitRepositorySpec) *GitRepositorySpecVerify { return v.Verify }).(GitRepositorySpecVerifyPtrOutput)
}

type GitRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpec)(nil)).Elem()
}

func (o GitRepositorySpecPtrOutput) ToGitRepositorySpecPtrOutput() GitRepositorySpecPtrOutput {
	return o
}

func (o GitRepositorySpecPtrOutput) ToGitRepositorySpecPtrOutputWithContext(ctx context.Context) GitRepositorySpecPtrOutput {
	return o
}

func (o GitRepositorySpecPtrOutput) Elem() GitRepositorySpecOutput {
	return o.ApplyT(func(v *GitRepositorySpec) GitRepositorySpec {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpec
		return ret
	}).(GitRepositorySpecOutput)
}

func (o GitRepositorySpecPtrOutput) AccessFrom() GitRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecAccessFrom {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(GitRepositorySpecAccessFromPtrOutput)
}

// Determines which git client library to use.
// Defaults to go-git, valid values are ('go-git', 'libgit2').
func (o GitRepositorySpecPtrOutput) GitImplementation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.GitImplementation
	}).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Extra git repositories to map into the repository
func (o GitRepositorySpecPtrOutput) Include() GitRepositorySpecIncludeArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpec) []GitRepositorySpecInclude {
		if v == nil {
			return nil
		}
		return v.Include
	}).(GitRepositorySpecIncludeArrayOutput)
}

// The interval at which to check for repository updates.
func (o GitRepositorySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// When enabled, after the clone is created, initializes all submodules within,
// using their default settings.
// This option is available only when using the 'go-git' GitImplementation.
func (o GitRepositorySpecPtrOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.RecurseSubmodules
	}).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecPtrOutput) Ref() GitRepositorySpecRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecRef {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(GitRepositorySpecRefPtrOutput)
}

func (o GitRepositorySpecPtrOutput) SecretRef() GitRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecSecretRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o GitRepositorySpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout for remote Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The repository URL, can be a HTTP/S or SSH address.
func (o GitRepositorySpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPtrOutput) Verify() GitRepositorySpecVerifyPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpec) *GitRepositorySpecVerify {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(GitRepositorySpecVerifyPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type GitRepositorySpecAccessFrom struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []GitRepositorySpecAccessFromNamespaceSelectors `pulumi:"namespaceSelectors"`
}

// GitRepositorySpecAccessFromInput is an input type that accepts GitRepositorySpecAccessFromArgs and GitRepositorySpecAccessFromOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromInput` via:
//
//	GitRepositorySpecAccessFromArgs{...}
type GitRepositorySpecAccessFromInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromOutput() GitRepositorySpecAccessFromOutput
	ToGitRepositorySpecAccessFromOutputWithContext(context.Context) GitRepositorySpecAccessFromOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type GitRepositorySpecAccessFromArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors GitRepositorySpecAccessFromNamespaceSelectorsArrayInput `pulumi:"namespaceSelectors"`
}

func (GitRepositorySpecAccessFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFrom)(nil)).Elem()
}

func (i GitRepositorySpecAccessFromArgs) ToGitRepositorySpecAccessFromOutput() GitRepositorySpecAccessFromOutput {
	return i.ToGitRepositorySpecAccessFromOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromArgs) ToGitRepositorySpecAccessFromOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromOutput)
}

func (i GitRepositorySpecAccessFromArgs) ToGitRepositorySpecAccessFromPtrOutput() GitRepositorySpecAccessFromPtrOutput {
	return i.ToGitRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromArgs) ToGitRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromOutput).ToGitRepositorySpecAccessFromPtrOutputWithContext(ctx)
}

// GitRepositorySpecAccessFromPtrInput is an input type that accepts GitRepositorySpecAccessFromArgs, GitRepositorySpecAccessFromPtr and GitRepositorySpecAccessFromPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromPtrInput` via:
//
//	        GitRepositorySpecAccessFromArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecAccessFromPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromPtrOutput() GitRepositorySpecAccessFromPtrOutput
	ToGitRepositorySpecAccessFromPtrOutputWithContext(context.Context) GitRepositorySpecAccessFromPtrOutput
}

type gitRepositorySpecAccessFromPtrType GitRepositorySpecAccessFromArgs

func GitRepositorySpecAccessFromPtr(v *GitRepositorySpecAccessFromArgs) GitRepositorySpecAccessFromPtrInput {
	return (*gitRepositorySpecAccessFromPtrType)(v)
}

func (*gitRepositorySpecAccessFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecAccessFrom)(nil)).Elem()
}

func (i *gitRepositorySpecAccessFromPtrType) ToGitRepositorySpecAccessFromPtrOutput() GitRepositorySpecAccessFromPtrOutput {
	return i.ToGitRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecAccessFromPtrType) ToGitRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type GitRepositorySpecAccessFromOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFrom)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromOutput) ToGitRepositorySpecAccessFromOutput() GitRepositorySpecAccessFromOutput {
	return o
}

func (o GitRepositorySpecAccessFromOutput) ToGitRepositorySpecAccessFromOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromOutput {
	return o
}

func (o GitRepositorySpecAccessFromOutput) ToGitRepositorySpecAccessFromPtrOutput() GitRepositorySpecAccessFromPtrOutput {
	return o.ToGitRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecAccessFromOutput) ToGitRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecAccessFrom) *GitRepositorySpecAccessFrom {
		return &v
	}).(GitRepositorySpecAccessFromPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o GitRepositorySpecAccessFromOutput) NamespaceSelectors() GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v GitRepositorySpecAccessFrom) []GitRepositorySpecAccessFromNamespaceSelectors {
		return v.NamespaceSelectors
	}).(GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

type GitRepositorySpecAccessFromPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecAccessFrom)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromPtrOutput) ToGitRepositorySpecAccessFromPtrOutput() GitRepositorySpecAccessFromPtrOutput {
	return o
}

func (o GitRepositorySpecAccessFromPtrOutput) ToGitRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPtrOutput {
	return o
}

func (o GitRepositorySpecAccessFromPtrOutput) Elem() GitRepositorySpecAccessFromOutput {
	return o.ApplyT(func(v *GitRepositorySpecAccessFrom) GitRepositorySpecAccessFrom {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecAccessFrom
		return ret
	}).(GitRepositorySpecAccessFromOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o GitRepositorySpecAccessFromPtrOutput) NamespaceSelectors() GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpecAccessFrom) []GitRepositorySpecAccessFromNamespaceSelectors {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type GitRepositorySpecAccessFromNamespaceSelectors struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// GitRepositorySpecAccessFromNamespaceSelectorsInput is an input type that accepts GitRepositorySpecAccessFromNamespaceSelectorsArgs and GitRepositorySpecAccessFromNamespaceSelectorsOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromNamespaceSelectorsInput` via:
//
//	GitRepositorySpecAccessFromNamespaceSelectorsArgs{...}
type GitRepositorySpecAccessFromNamespaceSelectorsInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromNamespaceSelectorsOutput() GitRepositorySpecAccessFromNamespaceSelectorsOutput
	ToGitRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Context) GitRepositorySpecAccessFromNamespaceSelectorsOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type GitRepositorySpecAccessFromNamespaceSelectorsArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (GitRepositorySpecAccessFromNamespaceSelectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsArgs) ToGitRepositorySpecAccessFromNamespaceSelectorsOutput() GitRepositorySpecAccessFromNamespaceSelectorsOutput {
	return i.ToGitRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsArgs) ToGitRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// GitRepositorySpecAccessFromNamespaceSelectorsArrayInput is an input type that accepts GitRepositorySpecAccessFromNamespaceSelectorsArray and GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromNamespaceSelectorsArrayInput` via:
//
//	GitRepositorySpecAccessFromNamespaceSelectorsArray{ GitRepositorySpecAccessFromNamespaceSelectorsArgs{...} }
type GitRepositorySpecAccessFromNamespaceSelectorsArrayInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutput() GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput
	ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Context) GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput
}

type GitRepositorySpecAccessFromNamespaceSelectorsArray []GitRepositorySpecAccessFromNamespaceSelectorsInput

func (GitRepositorySpecAccessFromNamespaceSelectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsArray) ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutput() GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return i.ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsArray) ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type GitRepositorySpecAccessFromNamespaceSelectorsOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromNamespaceSelectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsOutput() GitRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o GitRepositorySpecAccessFromNamespaceSelectorsOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GitRepositorySpecAccessFromNamespaceSelectors) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutput() GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput) Index(i pulumi.IntInput) GitRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositorySpecAccessFromNamespaceSelectors {
		return vs[0].([]GitRepositorySpecAccessFromNamespaceSelectors)[vs[1].(int)]
	}).(GitRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type GitRepositorySpecAccessFromNamespaceSelectorsPatch struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// GitRepositorySpecAccessFromNamespaceSelectorsPatchInput is an input type that accepts GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs and GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromNamespaceSelectorsPatchInput` via:
//
//	GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...}
type GitRepositorySpecAccessFromNamespaceSelectorsPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutput() GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput
	ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Context) GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutput() GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return i.ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput is an input type that accepts GitRepositorySpecAccessFromNamespaceSelectorsPatchArray and GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput` via:
//
//	GitRepositorySpecAccessFromNamespaceSelectorsPatchArray{ GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...} }
type GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
	ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Context) GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
}

type GitRepositorySpecAccessFromNamespaceSelectorsPatchArray []GitRepositorySpecAccessFromNamespaceSelectorsPatchInput

func (GitRepositorySpecAccessFromNamespaceSelectorsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return i.ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutput() GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GitRepositorySpecAccessFromNamespaceSelectorsPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToGitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) Index(i pulumi.IntInput) GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositorySpecAccessFromNamespaceSelectorsPatch {
		return vs[0].([]GitRepositorySpecAccessFromNamespaceSelectorsPatch)[vs[1].(int)]
	}).(GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type GitRepositorySpecAccessFromPatch struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []GitRepositorySpecAccessFromNamespaceSelectorsPatch `pulumi:"namespaceSelectors"`
}

// GitRepositorySpecAccessFromPatchInput is an input type that accepts GitRepositorySpecAccessFromPatchArgs and GitRepositorySpecAccessFromPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromPatchInput` via:
//
//	GitRepositorySpecAccessFromPatchArgs{...}
type GitRepositorySpecAccessFromPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromPatchOutput() GitRepositorySpecAccessFromPatchOutput
	ToGitRepositorySpecAccessFromPatchOutputWithContext(context.Context) GitRepositorySpecAccessFromPatchOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type GitRepositorySpecAccessFromPatchArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput `pulumi:"namespaceSelectors"`
}

func (GitRepositorySpecAccessFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i GitRepositorySpecAccessFromPatchArgs) ToGitRepositorySpecAccessFromPatchOutput() GitRepositorySpecAccessFromPatchOutput {
	return i.ToGitRepositorySpecAccessFromPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromPatchArgs) ToGitRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromPatchOutput)
}

func (i GitRepositorySpecAccessFromPatchArgs) ToGitRepositorySpecAccessFromPatchPtrOutput() GitRepositorySpecAccessFromPatchPtrOutput {
	return i.ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecAccessFromPatchArgs) ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromPatchOutput).ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecAccessFromPatchPtrInput is an input type that accepts GitRepositorySpecAccessFromPatchArgs, GitRepositorySpecAccessFromPatchPtr and GitRepositorySpecAccessFromPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecAccessFromPatchPtrInput` via:
//
//	        GitRepositorySpecAccessFromPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecAccessFromPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecAccessFromPatchPtrOutput() GitRepositorySpecAccessFromPatchPtrOutput
	ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(context.Context) GitRepositorySpecAccessFromPatchPtrOutput
}

type gitRepositorySpecAccessFromPatchPtrType GitRepositorySpecAccessFromPatchArgs

func GitRepositorySpecAccessFromPatchPtr(v *GitRepositorySpecAccessFromPatchArgs) GitRepositorySpecAccessFromPatchPtrInput {
	return (*gitRepositorySpecAccessFromPatchPtrType)(v)
}

func (*gitRepositorySpecAccessFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i *gitRepositorySpecAccessFromPatchPtrType) ToGitRepositorySpecAccessFromPatchPtrOutput() GitRepositorySpecAccessFromPatchPtrOutput {
	return i.ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecAccessFromPatchPtrType) ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecAccessFromPatchPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type GitRepositorySpecAccessFromPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromPatchOutput) ToGitRepositorySpecAccessFromPatchOutput() GitRepositorySpecAccessFromPatchOutput {
	return o
}

func (o GitRepositorySpecAccessFromPatchOutput) ToGitRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPatchOutput {
	return o
}

func (o GitRepositorySpecAccessFromPatchOutput) ToGitRepositorySpecAccessFromPatchPtrOutput() GitRepositorySpecAccessFromPatchPtrOutput {
	return o.ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecAccessFromPatchOutput) ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecAccessFromPatch) *GitRepositorySpecAccessFromPatch {
		return &v
	}).(GitRepositorySpecAccessFromPatchPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o GitRepositorySpecAccessFromPatchOutput) NamespaceSelectors() GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v GitRepositorySpecAccessFromPatch) []GitRepositorySpecAccessFromNamespaceSelectorsPatch {
		return v.NamespaceSelectors
	}).(GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

type GitRepositorySpecAccessFromPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecAccessFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o GitRepositorySpecAccessFromPatchPtrOutput) ToGitRepositorySpecAccessFromPatchPtrOutput() GitRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o GitRepositorySpecAccessFromPatchPtrOutput) ToGitRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o GitRepositorySpecAccessFromPatchPtrOutput) Elem() GitRepositorySpecAccessFromPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecAccessFromPatch) GitRepositorySpecAccessFromPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecAccessFromPatch
		return ret
	}).(GitRepositorySpecAccessFromPatchOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o GitRepositorySpecAccessFromPatchPtrOutput) NamespaceSelectors() GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpecAccessFromPatch) []GitRepositorySpecAccessFromNamespaceSelectorsPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// GitRepositoryInclude defines a source with a from and to path.
type GitRepositorySpecInclude struct {
	// The path to copy contents from, defaults to the root directory.
	FromPath   *string                             `pulumi:"fromPath"`
	Repository *GitRepositorySpecIncludeRepository `pulumi:"repository"`
	// The path to copy contents to, defaults to the name of the source ref.
	ToPath *string `pulumi:"toPath"`
}

// GitRepositorySpecIncludeInput is an input type that accepts GitRepositorySpecIncludeArgs and GitRepositorySpecIncludeOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeInput` via:
//
//	GitRepositorySpecIncludeArgs{...}
type GitRepositorySpecIncludeInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeOutput() GitRepositorySpecIncludeOutput
	ToGitRepositorySpecIncludeOutputWithContext(context.Context) GitRepositorySpecIncludeOutput
}

// GitRepositoryInclude defines a source with a from and to path.
type GitRepositorySpecIncludeArgs struct {
	// The path to copy contents from, defaults to the root directory.
	FromPath   pulumi.StringPtrInput                      `pulumi:"fromPath"`
	Repository GitRepositorySpecIncludeRepositoryPtrInput `pulumi:"repository"`
	// The path to copy contents to, defaults to the name of the source ref.
	ToPath pulumi.StringPtrInput `pulumi:"toPath"`
}

func (GitRepositorySpecIncludeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecInclude)(nil)).Elem()
}

func (i GitRepositorySpecIncludeArgs) ToGitRepositorySpecIncludeOutput() GitRepositorySpecIncludeOutput {
	return i.ToGitRepositorySpecIncludeOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeArgs) ToGitRepositorySpecIncludeOutputWithContext(ctx context.Context) GitRepositorySpecIncludeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeOutput)
}

// GitRepositorySpecIncludeArrayInput is an input type that accepts GitRepositorySpecIncludeArray and GitRepositorySpecIncludeArrayOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeArrayInput` via:
//
//	GitRepositorySpecIncludeArray{ GitRepositorySpecIncludeArgs{...} }
type GitRepositorySpecIncludeArrayInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeArrayOutput() GitRepositorySpecIncludeArrayOutput
	ToGitRepositorySpecIncludeArrayOutputWithContext(context.Context) GitRepositorySpecIncludeArrayOutput
}

type GitRepositorySpecIncludeArray []GitRepositorySpecIncludeInput

func (GitRepositorySpecIncludeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecInclude)(nil)).Elem()
}

func (i GitRepositorySpecIncludeArray) ToGitRepositorySpecIncludeArrayOutput() GitRepositorySpecIncludeArrayOutput {
	return i.ToGitRepositorySpecIncludeArrayOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeArray) ToGitRepositorySpecIncludeArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeArrayOutput)
}

// GitRepositoryInclude defines a source with a from and to path.
type GitRepositorySpecIncludeOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecInclude)(nil)).Elem()
}

func (o GitRepositorySpecIncludeOutput) ToGitRepositorySpecIncludeOutput() GitRepositorySpecIncludeOutput {
	return o
}

func (o GitRepositorySpecIncludeOutput) ToGitRepositorySpecIncludeOutputWithContext(ctx context.Context) GitRepositorySpecIncludeOutput {
	return o
}

// The path to copy contents from, defaults to the root directory.
func (o GitRepositorySpecIncludeOutput) FromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecInclude) *string { return v.FromPath }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecIncludeOutput) Repository() GitRepositorySpecIncludeRepositoryPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecInclude) *GitRepositorySpecIncludeRepository { return v.Repository }).(GitRepositorySpecIncludeRepositoryPtrOutput)
}

// The path to copy contents to, defaults to the name of the source ref.
func (o GitRepositorySpecIncludeOutput) ToPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecInclude) *string { return v.ToPath }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludeArrayOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecInclude)(nil)).Elem()
}

func (o GitRepositorySpecIncludeArrayOutput) ToGitRepositorySpecIncludeArrayOutput() GitRepositorySpecIncludeArrayOutput {
	return o
}

func (o GitRepositorySpecIncludeArrayOutput) ToGitRepositorySpecIncludeArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludeArrayOutput {
	return o
}

func (o GitRepositorySpecIncludeArrayOutput) Index(i pulumi.IntInput) GitRepositorySpecIncludeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositorySpecInclude {
		return vs[0].([]GitRepositorySpecInclude)[vs[1].(int)]
	}).(GitRepositorySpecIncludeOutput)
}

// GitRepositoryInclude defines a source with a from and to path.
type GitRepositorySpecIncludePatch struct {
	// The path to copy contents from, defaults to the root directory.
	FromPath   *string                                  `pulumi:"fromPath"`
	Repository *GitRepositorySpecIncludeRepositoryPatch `pulumi:"repository"`
	// The path to copy contents to, defaults to the name of the source ref.
	ToPath *string `pulumi:"toPath"`
}

// GitRepositorySpecIncludePatchInput is an input type that accepts GitRepositorySpecIncludePatchArgs and GitRepositorySpecIncludePatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludePatchInput` via:
//
//	GitRepositorySpecIncludePatchArgs{...}
type GitRepositorySpecIncludePatchInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludePatchOutput() GitRepositorySpecIncludePatchOutput
	ToGitRepositorySpecIncludePatchOutputWithContext(context.Context) GitRepositorySpecIncludePatchOutput
}

// GitRepositoryInclude defines a source with a from and to path.
type GitRepositorySpecIncludePatchArgs struct {
	// The path to copy contents from, defaults to the root directory.
	FromPath   pulumi.StringPtrInput                           `pulumi:"fromPath"`
	Repository GitRepositorySpecIncludeRepositoryPatchPtrInput `pulumi:"repository"`
	// The path to copy contents to, defaults to the name of the source ref.
	ToPath pulumi.StringPtrInput `pulumi:"toPath"`
}

func (GitRepositorySpecIncludePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (i GitRepositorySpecIncludePatchArgs) ToGitRepositorySpecIncludePatchOutput() GitRepositorySpecIncludePatchOutput {
	return i.ToGitRepositorySpecIncludePatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludePatchArgs) ToGitRepositorySpecIncludePatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludePatchOutput)
}

// GitRepositorySpecIncludePatchArrayInput is an input type that accepts GitRepositorySpecIncludePatchArray and GitRepositorySpecIncludePatchArrayOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludePatchArrayInput` via:
//
//	GitRepositorySpecIncludePatchArray{ GitRepositorySpecIncludePatchArgs{...} }
type GitRepositorySpecIncludePatchArrayInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludePatchArrayOutput() GitRepositorySpecIncludePatchArrayOutput
	ToGitRepositorySpecIncludePatchArrayOutputWithContext(context.Context) GitRepositorySpecIncludePatchArrayOutput
}

type GitRepositorySpecIncludePatchArray []GitRepositorySpecIncludePatchInput

func (GitRepositorySpecIncludePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (i GitRepositorySpecIncludePatchArray) ToGitRepositorySpecIncludePatchArrayOutput() GitRepositorySpecIncludePatchArrayOutput {
	return i.ToGitRepositorySpecIncludePatchArrayOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludePatchArray) ToGitRepositorySpecIncludePatchArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludePatchArrayOutput)
}

// GitRepositoryInclude defines a source with a from and to path.
type GitRepositorySpecIncludePatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludePatchOutput) ToGitRepositorySpecIncludePatchOutput() GitRepositorySpecIncludePatchOutput {
	return o
}

func (o GitRepositorySpecIncludePatchOutput) ToGitRepositorySpecIncludePatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchOutput {
	return o
}

// The path to copy contents from, defaults to the root directory.
func (o GitRepositorySpecIncludePatchOutput) FromPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludePatch) *string { return v.FromPath }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecIncludePatchOutput) Repository() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludePatch) *GitRepositorySpecIncludeRepositoryPatch { return v.Repository }).(GitRepositorySpecIncludeRepositoryPatchPtrOutput)
}

// The path to copy contents to, defaults to the name of the source ref.
func (o GitRepositorySpecIncludePatchOutput) ToPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludePatch) *string { return v.ToPath }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludePatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositorySpecIncludePatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludePatchArrayOutput) ToGitRepositorySpecIncludePatchArrayOutput() GitRepositorySpecIncludePatchArrayOutput {
	return o
}

func (o GitRepositorySpecIncludePatchArrayOutput) ToGitRepositorySpecIncludePatchArrayOutputWithContext(ctx context.Context) GitRepositorySpecIncludePatchArrayOutput {
	return o
}

func (o GitRepositorySpecIncludePatchArrayOutput) Index(i pulumi.IntInput) GitRepositorySpecIncludePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositorySpecIncludePatch {
		return vs[0].([]GitRepositorySpecIncludePatch)[vs[1].(int)]
	}).(GitRepositorySpecIncludePatchOutput)
}

// Reference to a GitRepository to include.
type GitRepositorySpecIncludeRepository struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecIncludeRepositoryInput is an input type that accepts GitRepositorySpecIncludeRepositoryArgs and GitRepositorySpecIncludeRepositoryOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryInput` via:
//
//	GitRepositorySpecIncludeRepositoryArgs{...}
type GitRepositorySpecIncludeRepositoryInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryOutput() GitRepositorySpecIncludeRepositoryOutput
	ToGitRepositorySpecIncludeRepositoryOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryOutput
}

// Reference to a GitRepository to include.
type GitRepositorySpecIncludeRepositoryArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecIncludeRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryOutput() GitRepositorySpecIncludeRepositoryOutput {
	return i.ToGitRepositorySpecIncludeRepositoryOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryOutput)
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryArgs) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryOutput).ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx)
}

// GitRepositorySpecIncludeRepositoryPtrInput is an input type that accepts GitRepositorySpecIncludeRepositoryArgs, GitRepositorySpecIncludeRepositoryPtr and GitRepositorySpecIncludeRepositoryPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryPtrInput` via:
//
//	        GitRepositorySpecIncludeRepositoryArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecIncludeRepositoryPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput
	ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryPtrOutput
}

type gitRepositorySpecIncludeRepositoryPtrType GitRepositorySpecIncludeRepositoryArgs

func GitRepositorySpecIncludeRepositoryPtr(v *GitRepositorySpecIncludeRepositoryArgs) GitRepositorySpecIncludeRepositoryPtrInput {
	return (*gitRepositorySpecIncludeRepositoryPtrType)(v)
}

func (*gitRepositorySpecIncludeRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (i *gitRepositorySpecIncludeRepositoryPtrType) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecIncludeRepositoryPtrType) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPtrOutput)
}

// Reference to a GitRepository to include.
type GitRepositorySpecIncludeRepositoryOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryOutput() GitRepositorySpecIncludeRepositoryOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return o.ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecIncludeRepositoryOutput) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecIncludeRepository) *GitRepositorySpecIncludeRepository {
		return &v
	}).(GitRepositorySpecIncludeRepositoryPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludeRepository) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludeRepositoryPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepository)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryPtrOutput) ToGitRepositorySpecIncludeRepositoryPtrOutput() GitRepositorySpecIncludeRepositoryPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPtrOutput) ToGitRepositorySpecIncludeRepositoryPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPtrOutput) Elem() GitRepositorySpecIncludeRepositoryOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepository) GitRepositorySpecIncludeRepository {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecIncludeRepository
		return ret
	}).(GitRepositorySpecIncludeRepositoryOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepository) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference to a GitRepository to include.
type GitRepositorySpecIncludeRepositoryPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecIncludeRepositoryPatchInput is an input type that accepts GitRepositorySpecIncludeRepositoryPatchArgs and GitRepositorySpecIncludeRepositoryPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryPatchInput` via:
//
//	GitRepositorySpecIncludeRepositoryPatchArgs{...}
type GitRepositorySpecIncludeRepositoryPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryPatchOutput() GitRepositorySpecIncludeRepositoryPatchOutput
	ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryPatchOutput
}

// Reference to a GitRepository to include.
type GitRepositorySpecIncludeRepositoryPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecIncludeRepositoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchOutput() GitRepositorySpecIncludeRepositoryPatchOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPatchOutput)
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecIncludeRepositoryPatchArgs) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPatchOutput).ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecIncludeRepositoryPatchPtrInput is an input type that accepts GitRepositorySpecIncludeRepositoryPatchArgs, GitRepositorySpecIncludeRepositoryPatchPtr and GitRepositorySpecIncludeRepositoryPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecIncludeRepositoryPatchPtrInput` via:
//
//	        GitRepositorySpecIncludeRepositoryPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecIncludeRepositoryPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput
	ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput
}

type gitRepositorySpecIncludeRepositoryPatchPtrType GitRepositorySpecIncludeRepositoryPatchArgs

func GitRepositorySpecIncludeRepositoryPatchPtr(v *GitRepositorySpecIncludeRepositoryPatchArgs) GitRepositorySpecIncludeRepositoryPatchPtrInput {
	return (*gitRepositorySpecIncludeRepositoryPatchPtrType)(v)
}

func (*gitRepositorySpecIncludeRepositoryPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (i *gitRepositorySpecIncludeRepositoryPatchPtrType) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return i.ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecIncludeRepositoryPatchPtrType) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecIncludeRepositoryPatchPtrOutput)
}

// Reference to a GitRepository to include.
type GitRepositorySpecIncludeRepositoryPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchOutput() GitRepositorySpecIncludeRepositoryPatchOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o.ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecIncludeRepositoryPatchOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecIncludeRepositoryPatch) *GitRepositorySpecIncludeRepositoryPatch {
		return &v
	}).(GitRepositorySpecIncludeRepositoryPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecIncludeRepositoryPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecIncludeRepositoryPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecIncludeRepositoryPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecIncludeRepositoryPatch)(nil)).Elem()
}

func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutput() GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) ToGitRepositorySpecIncludeRepositoryPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecIncludeRepositoryPatchPtrOutput {
	return o
}

func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) Elem() GitRepositorySpecIncludeRepositoryPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepositoryPatch) GitRepositorySpecIncludeRepositoryPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecIncludeRepositoryPatch
		return ret
	}).(GitRepositorySpecIncludeRepositoryPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecIncludeRepositoryPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecIncludeRepositoryPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositorySpec defines the desired state of a Git repository.
type GitRepositorySpecPatch struct {
	AccessFrom *GitRepositorySpecAccessFromPatch `pulumi:"accessFrom"`
	// Determines which git client library to use.
	// Defaults to go-git, valid values are ('go-git', 'libgit2').
	GitImplementation *string `pulumi:"gitImplementation"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore *string `pulumi:"ignore"`
	// Extra git repositories to map into the repository
	Include []GitRepositorySpecIncludePatch `pulumi:"include"`
	// The interval at which to check for repository updates.
	Interval *string `pulumi:"interval"`
	// When enabled, after the clone is created, initializes all submodules within,
	// using their default settings.
	// This option is available only when using the 'go-git' GitImplementation.
	RecurseSubmodules *bool                            `pulumi:"recurseSubmodules"`
	Ref               *GitRepositorySpecRefPatch       `pulumi:"ref"`
	SecretRef         *GitRepositorySpecSecretRefPatch `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout for remote Git operations like cloning, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// The repository URL, can be a HTTP/S or SSH address.
	Url    *string                       `pulumi:"url"`
	Verify *GitRepositorySpecVerifyPatch `pulumi:"verify"`
}

// GitRepositorySpecPatchInput is an input type that accepts GitRepositorySpecPatchArgs and GitRepositorySpecPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecPatchInput` via:
//
//	GitRepositorySpecPatchArgs{...}
type GitRepositorySpecPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecPatchOutput() GitRepositorySpecPatchOutput
	ToGitRepositorySpecPatchOutputWithContext(context.Context) GitRepositorySpecPatchOutput
}

// GitRepositorySpec defines the desired state of a Git repository.
type GitRepositorySpecPatchArgs struct {
	AccessFrom GitRepositorySpecAccessFromPatchPtrInput `pulumi:"accessFrom"`
	// Determines which git client library to use.
	// Defaults to go-git, valid values are ('go-git', 'libgit2').
	GitImplementation pulumi.StringPtrInput `pulumi:"gitImplementation"`
	// Ignore overrides the set of excluded patterns in the .sourceignore format
	// (which is the same as .gitignore). If not provided, a default will be used,
	// consult the documentation for your version to find out what those are.
	Ignore pulumi.StringPtrInput `pulumi:"ignore"`
	// Extra git repositories to map into the repository
	Include GitRepositorySpecIncludePatchArrayInput `pulumi:"include"`
	// The interval at which to check for repository updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// When enabled, after the clone is created, initializes all submodules within,
	// using their default settings.
	// This option is available only when using the 'go-git' GitImplementation.
	RecurseSubmodules pulumi.BoolPtrInput                     `pulumi:"recurseSubmodules"`
	Ref               GitRepositorySpecRefPatchPtrInput       `pulumi:"ref"`
	SecretRef         GitRepositorySpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout for remote Git operations like cloning, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// The repository URL, can be a HTTP/S or SSH address.
	Url    pulumi.StringPtrInput                `pulumi:"url"`
	Verify GitRepositorySpecVerifyPatchPtrInput `pulumi:"verify"`
}

func (GitRepositorySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecPatch)(nil)).Elem()
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchOutput() GitRepositorySpecPatchOutput {
	return i.ToGitRepositorySpecPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchOutputWithContext(ctx context.Context) GitRepositorySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPatchOutput)
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return i.ToGitRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecPatchArgs) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPatchOutput).ToGitRepositorySpecPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecPatchPtrInput is an input type that accepts GitRepositorySpecPatchArgs, GitRepositorySpecPatchPtr and GitRepositorySpecPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecPatchPtrInput` via:
//
//	        GitRepositorySpecPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput
	ToGitRepositorySpecPatchPtrOutputWithContext(context.Context) GitRepositorySpecPatchPtrOutput
}

type gitRepositorySpecPatchPtrType GitRepositorySpecPatchArgs

func GitRepositorySpecPatchPtr(v *GitRepositorySpecPatchArgs) GitRepositorySpecPatchPtrInput {
	return (*gitRepositorySpecPatchPtrType)(v)
}

func (*gitRepositorySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecPatch)(nil)).Elem()
}

func (i *gitRepositorySpecPatchPtrType) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return i.ToGitRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecPatchPtrType) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecPatchPtrOutput)
}

// GitRepositorySpec defines the desired state of a Git repository.
type GitRepositorySpecPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecPatch)(nil)).Elem()
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchOutput() GitRepositorySpecPatchOutput {
	return o
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchOutputWithContext(ctx context.Context) GitRepositorySpecPatchOutput {
	return o
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return o.ToGitRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecPatchOutput) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecPatch) *GitRepositorySpecPatch {
		return &v
	}).(GitRepositorySpecPatchPtrOutput)
}

func (o GitRepositorySpecPatchOutput) AccessFrom() GitRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecAccessFromPatch { return v.AccessFrom }).(GitRepositorySpecAccessFromPatchPtrOutput)
}

// Determines which git client library to use.
// Defaults to go-git, valid values are ('go-git', 'libgit2').
func (o GitRepositorySpecPatchOutput) GitImplementation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.GitImplementation }).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecPatchOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Ignore }).(pulumi.StringPtrOutput)
}

// Extra git repositories to map into the repository
func (o GitRepositorySpecPatchOutput) Include() GitRepositorySpecIncludePatchArrayOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) []GitRepositorySpecIncludePatch { return v.Include }).(GitRepositorySpecIncludePatchArrayOutput)
}

// The interval at which to check for repository updates.
func (o GitRepositorySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// When enabled, after the clone is created, initializes all submodules within,
// using their default settings.
// This option is available only when using the 'go-git' GitImplementation.
func (o GitRepositorySpecPatchOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *bool { return v.RecurseSubmodules }).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecPatchOutput) Ref() GitRepositorySpecRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecRefPatch { return v.Ref }).(GitRepositorySpecRefPatchPtrOutput)
}

func (o GitRepositorySpecPatchOutput) SecretRef() GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecSecretRefPatch { return v.SecretRef }).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o GitRepositorySpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout for remote Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// The repository URL, can be a HTTP/S or SSH address.
func (o GitRepositorySpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPatchOutput) Verify() GitRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecPatch) *GitRepositorySpecVerifyPatch { return v.Verify }).(GitRepositorySpecVerifyPatchPtrOutput)
}

type GitRepositorySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecPatch)(nil)).Elem()
}

func (o GitRepositorySpecPatchPtrOutput) ToGitRepositorySpecPatchPtrOutput() GitRepositorySpecPatchPtrOutput {
	return o
}

func (o GitRepositorySpecPatchPtrOutput) ToGitRepositorySpecPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecPatchPtrOutput {
	return o
}

func (o GitRepositorySpecPatchPtrOutput) Elem() GitRepositorySpecPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) GitRepositorySpecPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecPatch
		return ret
	}).(GitRepositorySpecPatchOutput)
}

func (o GitRepositorySpecPatchPtrOutput) AccessFrom() GitRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecAccessFromPatch {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(GitRepositorySpecAccessFromPatchPtrOutput)
}

// Determines which git client library to use.
// Defaults to go-git, valid values are ('go-git', 'libgit2').
func (o GitRepositorySpecPatchPtrOutput) GitImplementation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.GitImplementation
	}).(pulumi.StringPtrOutput)
}

// Ignore overrides the set of excluded patterns in the .sourceignore format
// (which is the same as .gitignore). If not provided, a default will be used,
// consult the documentation for your version to find out what those are.
func (o GitRepositorySpecPatchPtrOutput) Ignore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(pulumi.StringPtrOutput)
}

// Extra git repositories to map into the repository
func (o GitRepositorySpecPatchPtrOutput) Include() GitRepositorySpecIncludePatchArrayOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) []GitRepositorySpecIncludePatch {
		if v == nil {
			return nil
		}
		return v.Include
	}).(GitRepositorySpecIncludePatchArrayOutput)
}

// The interval at which to check for repository updates.
func (o GitRepositorySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// When enabled, after the clone is created, initializes all submodules within,
// using their default settings.
// This option is available only when using the 'go-git' GitImplementation.
func (o GitRepositorySpecPatchPtrOutput) RecurseSubmodules() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RecurseSubmodules
	}).(pulumi.BoolPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) Ref() GitRepositorySpecRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecRefPatch {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(GitRepositorySpecRefPatchPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) SecretRef() GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o GitRepositorySpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout for remote Git operations like cloning, defaults to 60s.
func (o GitRepositorySpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The repository URL, can be a HTTP/S or SSH address.
func (o GitRepositorySpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecPatchPtrOutput) Verify() GitRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecPatch) *GitRepositorySpecVerifyPatch {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(GitRepositorySpecVerifyPatchPtrOutput)
}

// The Git reference to checkout and monitor for changes, defaults to
// master branch.
type GitRepositorySpecRef struct {
	// The Git branch to checkout, defaults to master.
	Branch *string `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit *string `pulumi:"commit"`
	// The Git tag semver expression, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over Branch.
	Tag *string `pulumi:"tag"`
}

// GitRepositorySpecRefInput is an input type that accepts GitRepositorySpecRefArgs and GitRepositorySpecRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefInput` via:
//
//	GitRepositorySpecRefArgs{...}
type GitRepositorySpecRefInput interface {
	pulumi.Input

	ToGitRepositorySpecRefOutput() GitRepositorySpecRefOutput
	ToGitRepositorySpecRefOutputWithContext(context.Context) GitRepositorySpecRefOutput
}

// The Git reference to checkout and monitor for changes, defaults to
// master branch.
type GitRepositorySpecRefArgs struct {
	// The Git branch to checkout, defaults to master.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// The Git tag semver expression, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over Branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (GitRepositorySpecRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRef)(nil)).Elem()
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefOutput() GitRepositorySpecRefOutput {
	return i.ToGitRepositorySpecRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefOutputWithContext(ctx context.Context) GitRepositorySpecRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefOutput)
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return i.ToGitRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefArgs) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefOutput).ToGitRepositorySpecRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecRefPtrInput is an input type that accepts GitRepositorySpecRefArgs, GitRepositorySpecRefPtr and GitRepositorySpecRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefPtrInput` via:
//
//	        GitRepositorySpecRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput
	ToGitRepositorySpecRefPtrOutputWithContext(context.Context) GitRepositorySpecRefPtrOutput
}

type gitRepositorySpecRefPtrType GitRepositorySpecRefArgs

func GitRepositorySpecRefPtr(v *GitRepositorySpecRefArgs) GitRepositorySpecRefPtrInput {
	return (*gitRepositorySpecRefPtrType)(v)
}

func (*gitRepositorySpecRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRef)(nil)).Elem()
}

func (i *gitRepositorySpecRefPtrType) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return i.ToGitRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecRefPtrType) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPtrOutput)
}

// The Git reference to checkout and monitor for changes, defaults to
// master branch.
type GitRepositorySpecRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRef)(nil)).Elem()
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefOutput() GitRepositorySpecRefOutput {
	return o
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefOutputWithContext(ctx context.Context) GitRepositorySpecRefOutput {
	return o
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return o.ToGitRepositorySpecRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecRefOutput) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecRef) *GitRepositorySpecRef {
		return &v
	}).(GitRepositorySpecRefPtrOutput)
}

// The Git branch to checkout, defaults to master.
func (o GitRepositorySpecRefOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The Git commit SHA to checkout, if specified Tag filters will be ignored.
func (o GitRepositorySpecRefOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// The Git tag semver expression, takes precedence over Tag.
func (o GitRepositorySpecRefOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The Git tag to checkout, takes precedence over Branch.
func (o GitRepositorySpecRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRef)(nil)).Elem()
}

func (o GitRepositorySpecRefPtrOutput) ToGitRepositorySpecRefPtrOutput() GitRepositorySpecRefPtrOutput {
	return o
}

func (o GitRepositorySpecRefPtrOutput) ToGitRepositorySpecRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPtrOutput {
	return o
}

func (o GitRepositorySpecRefPtrOutput) Elem() GitRepositorySpecRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) GitRepositorySpecRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecRef
		return ret
	}).(GitRepositorySpecRefOutput)
}

// The Git branch to checkout, defaults to master.
func (o GitRepositorySpecRefPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The Git commit SHA to checkout, if specified Tag filters will be ignored.
func (o GitRepositorySpecRefPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// The Git tag semver expression, takes precedence over Tag.
func (o GitRepositorySpecRefPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// The Git tag to checkout, takes precedence over Branch.
func (o GitRepositorySpecRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The Git reference to checkout and monitor for changes, defaults to
// master branch.
type GitRepositorySpecRefPatch struct {
	// The Git branch to checkout, defaults to master.
	Branch *string `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit *string `pulumi:"commit"`
	// The Git tag semver expression, takes precedence over Tag.
	Semver *string `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over Branch.
	Tag *string `pulumi:"tag"`
}

// GitRepositorySpecRefPatchInput is an input type that accepts GitRepositorySpecRefPatchArgs and GitRepositorySpecRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefPatchInput` via:
//
//	GitRepositorySpecRefPatchArgs{...}
type GitRepositorySpecRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecRefPatchOutput() GitRepositorySpecRefPatchOutput
	ToGitRepositorySpecRefPatchOutputWithContext(context.Context) GitRepositorySpecRefPatchOutput
}

// The Git reference to checkout and monitor for changes, defaults to
// master branch.
type GitRepositorySpecRefPatchArgs struct {
	// The Git branch to checkout, defaults to master.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The Git commit SHA to checkout, if specified Tag filters will be ignored.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// The Git tag semver expression, takes precedence over Tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// The Git tag to checkout, takes precedence over Branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (GitRepositorySpecRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchOutput() GitRepositorySpecRefPatchOutput {
	return i.ToGitRepositorySpecRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPatchOutput)
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return i.ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecRefPatchArgs) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPatchOutput).ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecRefPatchPtrInput is an input type that accepts GitRepositorySpecRefPatchArgs, GitRepositorySpecRefPatchPtr and GitRepositorySpecRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecRefPatchPtrInput` via:
//
//	        GitRepositorySpecRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput
	ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecRefPatchPtrOutput
}

type gitRepositorySpecRefPatchPtrType GitRepositorySpecRefPatchArgs

func GitRepositorySpecRefPatchPtr(v *GitRepositorySpecRefPatchArgs) GitRepositorySpecRefPatchPtrInput {
	return (*gitRepositorySpecRefPatchPtrType)(v)
}

func (*gitRepositorySpecRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecRefPatchPtrType) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return i.ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecRefPatchPtrType) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecRefPatchPtrOutput)
}

// The Git reference to checkout and monitor for changes, defaults to
// master branch.
type GitRepositorySpecRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchOutput() GitRepositorySpecRefPatchOutput {
	return o
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchOutput {
	return o
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return o.ToGitRepositorySpecRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecRefPatchOutput) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecRefPatch) *GitRepositorySpecRefPatch {
		return &v
	}).(GitRepositorySpecRefPatchPtrOutput)
}

// The Git branch to checkout, defaults to master.
func (o GitRepositorySpecRefPatchOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The Git commit SHA to checkout, if specified Tag filters will be ignored.
func (o GitRepositorySpecRefPatchOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// The Git tag semver expression, takes precedence over Tag.
func (o GitRepositorySpecRefPatchOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The Git tag to checkout, takes precedence over Branch.
func (o GitRepositorySpecRefPatchOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecRefPatch) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecRefPatchPtrOutput) ToGitRepositorySpecRefPatchPtrOutput() GitRepositorySpecRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecRefPatchPtrOutput) ToGitRepositorySpecRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecRefPatchPtrOutput) Elem() GitRepositorySpecRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) GitRepositorySpecRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecRefPatch
		return ret
	}).(GitRepositorySpecRefPatchOutput)
}

// The Git branch to checkout, defaults to master.
func (o GitRepositorySpecRefPatchPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The Git commit SHA to checkout, if specified Tag filters will be ignored.
func (o GitRepositorySpecRefPatchPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// The Git tag semver expression, takes precedence over Tag.
func (o GitRepositorySpecRefPatchPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// The Git tag to checkout, takes precedence over Branch.
func (o GitRepositorySpecRefPatchPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The secret name containing the Git credentials.
// For HTTPS repositories the secret must contain username and password
// fields.
// For SSH repositories the secret must contain identity and known_hosts
// fields.
type GitRepositorySpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecSecretRefInput is an input type that accepts GitRepositorySpecSecretRefArgs and GitRepositorySpecSecretRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefInput` via:
//
//	GitRepositorySpecSecretRefArgs{...}
type GitRepositorySpecSecretRefInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefOutput() GitRepositorySpecSecretRefOutput
	ToGitRepositorySpecSecretRefOutputWithContext(context.Context) GitRepositorySpecSecretRefOutput
}

// The secret name containing the Git credentials.
// For HTTPS repositories the secret must contain username and password
// fields.
// For SSH repositories the secret must contain identity and known_hosts
// fields.
type GitRepositorySpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRef)(nil)).Elem()
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefOutput() GitRepositorySpecSecretRefOutput {
	return i.ToGitRepositorySpecSecretRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefOutput)
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return i.ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefArgs) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefOutput).ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecSecretRefPtrInput is an input type that accepts GitRepositorySpecSecretRefArgs, GitRepositorySpecSecretRefPtr and GitRepositorySpecSecretRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefPtrInput` via:
//
//	        GitRepositorySpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecSecretRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput
	ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Context) GitRepositorySpecSecretRefPtrOutput
}

type gitRepositorySpecSecretRefPtrType GitRepositorySpecSecretRefArgs

func GitRepositorySpecSecretRefPtr(v *GitRepositorySpecSecretRefArgs) GitRepositorySpecSecretRefPtrInput {
	return (*gitRepositorySpecSecretRefPtrType)(v)
}

func (*gitRepositorySpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRef)(nil)).Elem()
}

func (i *gitRepositorySpecSecretRefPtrType) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return i.ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecSecretRefPtrType) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPtrOutput)
}

// The secret name containing the Git credentials.
// For HTTPS repositories the secret must contain username and password
// fields.
// For SSH repositories the secret must contain identity and known_hosts
// fields.
type GitRepositorySpecSecretRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRef)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefOutput() GitRepositorySpecSecretRefOutput {
	return o
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefOutput {
	return o
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return o.ToGitRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecSecretRefOutput) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecSecretRef) *GitRepositorySpecSecretRef {
		return &v
	}).(GitRepositorySpecSecretRefPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRef)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefPtrOutput) ToGitRepositorySpecSecretRefPtrOutput() GitRepositorySpecSecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPtrOutput) ToGitRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPtrOutput) Elem() GitRepositorySpecSecretRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRef) GitRepositorySpecSecretRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecSecretRef
		return ret
	}).(GitRepositorySpecSecretRefOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The secret name containing the Git credentials.
// For HTTPS repositories the secret must contain username and password
// fields.
// For SSH repositories the secret must contain identity and known_hosts
// fields.
type GitRepositorySpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecSecretRefPatchInput is an input type that accepts GitRepositorySpecSecretRefPatchArgs and GitRepositorySpecSecretRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefPatchInput` via:
//
//	GitRepositorySpecSecretRefPatchArgs{...}
type GitRepositorySpecSecretRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefPatchOutput() GitRepositorySpecSecretRefPatchOutput
	ToGitRepositorySpecSecretRefPatchOutputWithContext(context.Context) GitRepositorySpecSecretRefPatchOutput
}

// The secret name containing the Git credentials.
// For HTTPS repositories the secret must contain username and password
// fields.
// For SSH repositories the secret must contain identity and known_hosts
// fields.
type GitRepositorySpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchOutput() GitRepositorySpecSecretRefPatchOutput {
	return i.ToGitRepositorySpecSecretRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPatchOutput)
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecSecretRefPatchArgs) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPatchOutput).ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecSecretRefPatchPtrInput is an input type that accepts GitRepositorySpecSecretRefPatchArgs, GitRepositorySpecSecretRefPatchPtr and GitRepositorySpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecSecretRefPatchPtrInput` via:
//
//	        GitRepositorySpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput
	ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecSecretRefPatchPtrOutput
}

type gitRepositorySpecSecretRefPatchPtrType GitRepositorySpecSecretRefPatchArgs

func GitRepositorySpecSecretRefPatchPtr(v *GitRepositorySpecSecretRefPatchArgs) GitRepositorySpecSecretRefPatchPtrInput {
	return (*gitRepositorySpecSecretRefPatchPtrType)(v)
}

func (*gitRepositorySpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecSecretRefPatchPtrType) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecSecretRefPatchPtrType) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// The secret name containing the Git credentials.
// For HTTPS repositories the secret must contain username and password
// fields.
// For SSH repositories the secret must contain identity and known_hosts
// fields.
type GitRepositorySpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchOutput() GitRepositorySpecSecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecSecretRefPatchOutput) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecSecretRefPatch) *GitRepositorySpecSecretRefPatch {
		return &v
	}).(GitRepositorySpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecSecretRefPatchPtrOutput) ToGitRepositorySpecSecretRefPatchPtrOutput() GitRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchPtrOutput) ToGitRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecSecretRefPatchPtrOutput) Elem() GitRepositorySpecSecretRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRefPatch) GitRepositorySpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecSecretRefPatch
		return ret
	}).(GitRepositorySpecSecretRefPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Verify OpenPGP signature for the Git commit HEAD points to.
type GitRepositorySpecVerify struct {
	// Mode describes what git object should be verified, currently ('head').
	Mode      *string                           `pulumi:"mode"`
	SecretRef *GitRepositorySpecVerifySecretRef `pulumi:"secretRef"`
}

// GitRepositorySpecVerifyInput is an input type that accepts GitRepositorySpecVerifyArgs and GitRepositorySpecVerifyOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyInput` via:
//
//	GitRepositorySpecVerifyArgs{...}
type GitRepositorySpecVerifyInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyOutput() GitRepositorySpecVerifyOutput
	ToGitRepositorySpecVerifyOutputWithContext(context.Context) GitRepositorySpecVerifyOutput
}

// Verify OpenPGP signature for the Git commit HEAD points to.
type GitRepositorySpecVerifyArgs struct {
	// Mode describes what git object should be verified, currently ('head').
	Mode      pulumi.StringPtrInput                    `pulumi:"mode"`
	SecretRef GitRepositorySpecVerifySecretRefPtrInput `pulumi:"secretRef"`
}

func (GitRepositorySpecVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerify)(nil)).Elem()
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyOutput() GitRepositorySpecVerifyOutput {
	return i.ToGitRepositorySpecVerifyOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyOutputWithContext(ctx context.Context) GitRepositorySpecVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyOutput)
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return i.ToGitRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyArgs) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyOutput).ToGitRepositorySpecVerifyPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifyPtrInput is an input type that accepts GitRepositorySpecVerifyArgs, GitRepositorySpecVerifyPtr and GitRepositorySpecVerifyPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyPtrInput` via:
//
//	        GitRepositorySpecVerifyArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifyPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput
	ToGitRepositorySpecVerifyPtrOutputWithContext(context.Context) GitRepositorySpecVerifyPtrOutput
}

type gitRepositorySpecVerifyPtrType GitRepositorySpecVerifyArgs

func GitRepositorySpecVerifyPtr(v *GitRepositorySpecVerifyArgs) GitRepositorySpecVerifyPtrInput {
	return (*gitRepositorySpecVerifyPtrType)(v)
}

func (*gitRepositorySpecVerifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerify)(nil)).Elem()
}

func (i *gitRepositorySpecVerifyPtrType) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return i.ToGitRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifyPtrType) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPtrOutput)
}

// Verify OpenPGP signature for the Git commit HEAD points to.
type GitRepositorySpecVerifyOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerify)(nil)).Elem()
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyOutput() GitRepositorySpecVerifyOutput {
	return o
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyOutputWithContext(ctx context.Context) GitRepositorySpecVerifyOutput {
	return o
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return o.ToGitRepositorySpecVerifyPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifyOutput) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerify) *GitRepositorySpecVerify {
		return &v
	}).(GitRepositorySpecVerifyPtrOutput)
}

// Mode describes what git object should be verified, currently ('head').
func (o GitRepositorySpecVerifyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerify) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyOutput) SecretRef() GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerify) *GitRepositorySpecVerifySecretRef { return v.SecretRef }).(GitRepositorySpecVerifySecretRefPtrOutput)
}

type GitRepositorySpecVerifyPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerify)(nil)).Elem()
}

func (o GitRepositorySpecVerifyPtrOutput) ToGitRepositorySpecVerifyPtrOutput() GitRepositorySpecVerifyPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPtrOutput) ToGitRepositorySpecVerifyPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPtrOutput) Elem() GitRepositorySpecVerifyOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerify) GitRepositorySpecVerify {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerify
		return ret
	}).(GitRepositorySpecVerifyOutput)
}

// Mode describes what git object should be verified, currently ('head').
func (o GitRepositorySpecVerifyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerify) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyPtrOutput) SecretRef() GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerify) *GitRepositorySpecVerifySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecVerifySecretRefPtrOutput)
}

// Verify OpenPGP signature for the Git commit HEAD points to.
type GitRepositorySpecVerifyPatch struct {
	// Mode describes what git object should be verified, currently ('head').
	Mode      *string                                `pulumi:"mode"`
	SecretRef *GitRepositorySpecVerifySecretRefPatch `pulumi:"secretRef"`
}

// GitRepositorySpecVerifyPatchInput is an input type that accepts GitRepositorySpecVerifyPatchArgs and GitRepositorySpecVerifyPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyPatchInput` via:
//
//	GitRepositorySpecVerifyPatchArgs{...}
type GitRepositorySpecVerifyPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyPatchOutput() GitRepositorySpecVerifyPatchOutput
	ToGitRepositorySpecVerifyPatchOutputWithContext(context.Context) GitRepositorySpecVerifyPatchOutput
}

// Verify OpenPGP signature for the Git commit HEAD points to.
type GitRepositorySpecVerifyPatchArgs struct {
	// Mode describes what git object should be verified, currently ('head').
	Mode      pulumi.StringPtrInput                         `pulumi:"mode"`
	SecretRef GitRepositorySpecVerifySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (GitRepositorySpecVerifyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchOutput() GitRepositorySpecVerifyPatchOutput {
	return i.ToGitRepositorySpecVerifyPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPatchOutput)
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return i.ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifyPatchArgs) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPatchOutput).ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifyPatchPtrInput is an input type that accepts GitRepositorySpecVerifyPatchArgs, GitRepositorySpecVerifyPatchPtr and GitRepositorySpecVerifyPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifyPatchPtrInput` via:
//
//	        GitRepositorySpecVerifyPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifyPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput
	ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Context) GitRepositorySpecVerifyPatchPtrOutput
}

type gitRepositorySpecVerifyPatchPtrType GitRepositorySpecVerifyPatchArgs

func GitRepositorySpecVerifyPatchPtr(v *GitRepositorySpecVerifyPatchArgs) GitRepositorySpecVerifyPatchPtrInput {
	return (*gitRepositorySpecVerifyPatchPtrType)(v)
}

func (*gitRepositorySpecVerifyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (i *gitRepositorySpecVerifyPatchPtrType) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return i.ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifyPatchPtrType) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifyPatchPtrOutput)
}

// Verify OpenPGP signature for the Git commit HEAD points to.
type GitRepositorySpecVerifyPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchOutput() GitRepositorySpecVerifyPatchOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return o.ToGitRepositorySpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifyPatchOutput) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerifyPatch) *GitRepositorySpecVerifyPatch {
		return &v
	}).(GitRepositorySpecVerifyPatchPtrOutput)
}

// Mode describes what git object should be verified, currently ('head').
func (o GitRepositorySpecVerifyPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifyPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyPatchOutput) SecretRef() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifyPatch) *GitRepositorySpecVerifySecretRefPatch { return v.SecretRef }).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

type GitRepositorySpecVerifyPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifyPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifyPatchPtrOutput) ToGitRepositorySpecVerifyPatchPtrOutput() GitRepositorySpecVerifyPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchPtrOutput) ToGitRepositorySpecVerifyPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifyPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifyPatchPtrOutput) Elem() GitRepositorySpecVerifyPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifyPatch) GitRepositorySpecVerifyPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerifyPatch
		return ret
	}).(GitRepositorySpecVerifyPatchOutput)
}

// Mode describes what git object should be verified, currently ('head').
func (o GitRepositorySpecVerifyPatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

func (o GitRepositorySpecVerifyPatchPtrOutput) SecretRef() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifyPatch) *GitRepositorySpecVerifySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

// The secret name containing the public keys of all trusted Git authors.
type GitRepositorySpecVerifySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecVerifySecretRefInput is an input type that accepts GitRepositorySpecVerifySecretRefArgs and GitRepositorySpecVerifySecretRefOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefInput` via:
//
//	GitRepositorySpecVerifySecretRefArgs{...}
type GitRepositorySpecVerifySecretRefInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefOutput() GitRepositorySpecVerifySecretRefOutput
	ToGitRepositorySpecVerifySecretRefOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefOutput
}

// The secret name containing the public keys of all trusted Git authors.
type GitRepositorySpecVerifySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecVerifySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefOutput() GitRepositorySpecVerifySecretRefOutput {
	return i.ToGitRepositorySpecVerifySecretRefOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefOutput)
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefArgs) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefOutput).ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifySecretRefPtrInput is an input type that accepts GitRepositorySpecVerifySecretRefArgs, GitRepositorySpecVerifySecretRefPtr and GitRepositorySpecVerifySecretRefPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefPtrInput` via:
//
//	        GitRepositorySpecVerifySecretRefArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifySecretRefPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput
	ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefPtrOutput
}

type gitRepositorySpecVerifySecretRefPtrType GitRepositorySpecVerifySecretRefArgs

func GitRepositorySpecVerifySecretRefPtr(v *GitRepositorySpecVerifySecretRefArgs) GitRepositorySpecVerifySecretRefPtrInput {
	return (*gitRepositorySpecVerifySecretRefPtrType)(v)
}

func (*gitRepositorySpecVerifySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (i *gitRepositorySpecVerifySecretRefPtrType) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifySecretRefPtrType) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPtrOutput)
}

// The secret name containing the public keys of all trusted Git authors.
type GitRepositorySpecVerifySecretRefOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefOutput() GitRepositorySpecVerifySecretRefOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifySecretRefOutput) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerifySecretRef) *GitRepositorySpecVerifySecretRef {
		return &v
	}).(GitRepositorySpecVerifySecretRefPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecVerifySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRef)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefPtrOutput) ToGitRepositorySpecVerifySecretRefPtrOutput() GitRepositorySpecVerifySecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPtrOutput) ToGitRepositorySpecVerifySecretRefPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPtrOutput) Elem() GitRepositorySpecVerifySecretRefOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRef) GitRepositorySpecVerifySecretRef {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerifySecretRef
		return ret
	}).(GitRepositorySpecVerifySecretRefOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The secret name containing the public keys of all trusted Git authors.
type GitRepositorySpecVerifySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// GitRepositorySpecVerifySecretRefPatchInput is an input type that accepts GitRepositorySpecVerifySecretRefPatchArgs and GitRepositorySpecVerifySecretRefPatchOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefPatchInput` via:
//
//	GitRepositorySpecVerifySecretRefPatchArgs{...}
type GitRepositorySpecVerifySecretRefPatchInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefPatchOutput() GitRepositorySpecVerifySecretRefPatchOutput
	ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefPatchOutput
}

// The secret name containing the public keys of all trusted Git authors.
type GitRepositorySpecVerifySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GitRepositorySpecVerifySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchOutput() GitRepositorySpecVerifySecretRefPatchOutput {
	return i.ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPatchOutput)
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositorySpecVerifySecretRefPatchArgs) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPatchOutput).ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx)
}

// GitRepositorySpecVerifySecretRefPatchPtrInput is an input type that accepts GitRepositorySpecVerifySecretRefPatchArgs, GitRepositorySpecVerifySecretRefPatchPtr and GitRepositorySpecVerifySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositorySpecVerifySecretRefPatchPtrInput` via:
//
//	        GitRepositorySpecVerifySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositorySpecVerifySecretRefPatchPtrInput interface {
	pulumi.Input

	ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput
	ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput
}

type gitRepositorySpecVerifySecretRefPatchPtrType GitRepositorySpecVerifySecretRefPatchArgs

func GitRepositorySpecVerifySecretRefPatchPtr(v *GitRepositorySpecVerifySecretRefPatchArgs) GitRepositorySpecVerifySecretRefPatchPtrInput {
	return (*gitRepositorySpecVerifySecretRefPatchPtrType)(v)
}

func (*gitRepositorySpecVerifySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (i *gitRepositorySpecVerifySecretRefPatchPtrType) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return i.ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositorySpecVerifySecretRefPatchPtrType) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

// The secret name containing the public keys of all trusted Git authors.
type GitRepositorySpecVerifySecretRefPatchOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchOutput() GitRepositorySpecVerifySecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositorySpecVerifySecretRefPatchOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositorySpecVerifySecretRefPatch) *GitRepositorySpecVerifySecretRefPatch {
		return &v
	}).(GitRepositorySpecVerifySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositorySpecVerifySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GitRepositorySpecVerifySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositorySpecVerifySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositorySpecVerifySecretRefPatch)(nil)).Elem()
}

func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutput() GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) ToGitRepositorySpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) GitRepositorySpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) Elem() GitRepositorySpecVerifySecretRefPatchOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRefPatch) GitRepositorySpecVerifySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositorySpecVerifySecretRefPatch
		return ret
	}).(GitRepositorySpecVerifySecretRefPatchOutput)
}

// Name of the referent.
func (o GitRepositorySpecVerifySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositorySpecVerifySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GitRepositoryStatus defines the observed state of a Git repository.
type GitRepositoryStatus struct {
	Artifact *GitRepositoryStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions []GitRepositoryStatusConditions `pulumi:"conditions"`
	// IncludedArtifacts represents the included artifacts from the last successful repository sync.
	IncludedArtifacts []GitRepositoryStatusIncludedArtifacts `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last repository
	// sync.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusInput is an input type that accepts GitRepositoryStatusArgs and GitRepositoryStatusOutput values.
// You can construct a concrete instance of `GitRepositoryStatusInput` via:
//
//	GitRepositoryStatusArgs{...}
type GitRepositoryStatusInput interface {
	pulumi.Input

	ToGitRepositoryStatusOutput() GitRepositoryStatusOutput
	ToGitRepositoryStatusOutputWithContext(context.Context) GitRepositoryStatusOutput
}

// GitRepositoryStatus defines the observed state of a Git repository.
type GitRepositoryStatusArgs struct {
	Artifact GitRepositoryStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions GitRepositoryStatusConditionsArrayInput `pulumi:"conditions"`
	// IncludedArtifacts represents the included artifacts from the last successful repository sync.
	IncludedArtifacts GitRepositoryStatusIncludedArtifactsArrayInput `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last repository
	// sync.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatus)(nil)).Elem()
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusOutput() GitRepositoryStatusOutput {
	return i.ToGitRepositoryStatusOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusOutputWithContext(ctx context.Context) GitRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusOutput)
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return i.ToGitRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArgs) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusOutput).ToGitRepositoryStatusPtrOutputWithContext(ctx)
}

// GitRepositoryStatusPtrInput is an input type that accepts GitRepositoryStatusArgs, GitRepositoryStatusPtr and GitRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusPtrInput` via:
//
//	        GitRepositoryStatusArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput
	ToGitRepositoryStatusPtrOutputWithContext(context.Context) GitRepositoryStatusPtrOutput
}

type gitRepositoryStatusPtrType GitRepositoryStatusArgs

func GitRepositoryStatusPtr(v *GitRepositoryStatusArgs) GitRepositoryStatusPtrInput {
	return (*gitRepositoryStatusPtrType)(v)
}

func (*gitRepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatus)(nil)).Elem()
}

func (i *gitRepositoryStatusPtrType) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return i.ToGitRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusPtrType) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPtrOutput)
}

// GitRepositoryStatus defines the observed state of a Git repository.
type GitRepositoryStatusOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatus)(nil)).Elem()
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusOutput() GitRepositoryStatusOutput {
	return o
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusOutputWithContext(ctx context.Context) GitRepositoryStatusOutput {
	return o
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return o.ToGitRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusOutput) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatus) *GitRepositoryStatus {
		return &v
	}).(GitRepositoryStatusPtrOutput)
}

func (o GitRepositoryStatusOutput) Artifact() GitRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *GitRepositoryStatusArtifact { return v.Artifact }).(GitRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusOutput) Conditions() GitRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatus) []GitRepositoryStatusConditions { return v.Conditions }).(GitRepositoryStatusConditionsArrayOutput)
}

// IncludedArtifacts represents the included artifacts from the last successful repository sync.
func (o GitRepositoryStatusOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatus) []GitRepositoryStatusIncludedArtifacts { return v.IncludedArtifacts }).(GitRepositoryStatusIncludedArtifactsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o GitRepositoryStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last repository
// sync.
func (o GitRepositoryStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatus)(nil)).Elem()
}

func (o GitRepositoryStatusPtrOutput) ToGitRepositoryStatusPtrOutput() GitRepositoryStatusPtrOutput {
	return o
}

func (o GitRepositoryStatusPtrOutput) ToGitRepositoryStatusPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPtrOutput {
	return o
}

func (o GitRepositoryStatusPtrOutput) Elem() GitRepositoryStatusOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) GitRepositoryStatus {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatus
		return ret
	}).(GitRepositoryStatusOutput)
}

func (o GitRepositoryStatusPtrOutput) Artifact() GitRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *GitRepositoryStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(GitRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusPtrOutput) Conditions() GitRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) []GitRepositoryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GitRepositoryStatusConditionsArrayOutput)
}

// IncludedArtifacts represents the included artifacts from the last successful repository sync.
func (o GitRepositoryStatusPtrOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) []GitRepositoryStatusIncludedArtifacts {
		if v == nil {
			return nil
		}
		return v.IncludedArtifacts
	}).(GitRepositoryStatusIncludedArtifactsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o GitRepositoryStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last repository
// sync.
func (o GitRepositoryStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type GitRepositoryStatusArtifact struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusArtifactInput is an input type that accepts GitRepositoryStatusArtifactArgs and GitRepositoryStatusArtifactOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactInput` via:
//
//	GitRepositoryStatusArtifactArgs{...}
type GitRepositoryStatusArtifactInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactOutput() GitRepositoryStatusArtifactOutput
	ToGitRepositoryStatusArtifactOutputWithContext(context.Context) GitRepositoryStatusArtifactOutput
}

// Artifact represents the output of the last successful repository sync.
type GitRepositoryStatusArtifactArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifact)(nil)).Elem()
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactOutput() GitRepositoryStatusArtifactOutput {
	return i.ToGitRepositoryStatusArtifactOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactOutput)
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return i.ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactArgs) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactOutput).ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx)
}

// GitRepositoryStatusArtifactPtrInput is an input type that accepts GitRepositoryStatusArtifactArgs, GitRepositoryStatusArtifactPtr and GitRepositoryStatusArtifactPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactPtrInput` via:
//
//	        GitRepositoryStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusArtifactPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput
	ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Context) GitRepositoryStatusArtifactPtrOutput
}

type gitRepositoryStatusArtifactPtrType GitRepositoryStatusArtifactArgs

func GitRepositoryStatusArtifactPtr(v *GitRepositoryStatusArtifactArgs) GitRepositoryStatusArtifactPtrInput {
	return (*gitRepositoryStatusArtifactPtrType)(v)
}

func (*gitRepositoryStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifact)(nil)).Elem()
}

func (i *gitRepositoryStatusArtifactPtrType) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return i.ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusArtifactPtrType) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type GitRepositoryStatusArtifactOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifact)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactOutput() GitRepositoryStatusArtifactOutput {
	return o
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactOutput {
	return o
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return o.ToGitRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusArtifactOutput) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusArtifact) *GitRepositoryStatusArtifact {
		return &v
	}).(GitRepositoryStatusArtifactPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o GitRepositoryStatusArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o GitRepositoryStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o GitRepositoryStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o GitRepositoryStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o GitRepositoryStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifact)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactPtrOutput) ToGitRepositoryStatusArtifactPtrOutput() GitRepositoryStatusArtifactPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPtrOutput) ToGitRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPtrOutput) Elem() GitRepositoryStatusArtifactOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) GitRepositoryStatusArtifact {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusArtifact
		return ret
	}).(GitRepositoryStatusArtifactOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o GitRepositoryStatusArtifactPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o GitRepositoryStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o GitRepositoryStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o GitRepositoryStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o GitRepositoryStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type GitRepositoryStatusArtifactPatch struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusArtifactPatchInput is an input type that accepts GitRepositoryStatusArtifactPatchArgs and GitRepositoryStatusArtifactPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactPatchInput` via:
//
//	GitRepositoryStatusArtifactPatchArgs{...}
type GitRepositoryStatusArtifactPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactPatchOutput() GitRepositoryStatusArtifactPatchOutput
	ToGitRepositoryStatusArtifactPatchOutputWithContext(context.Context) GitRepositoryStatusArtifactPatchOutput
}

// Artifact represents the output of the last successful repository sync.
type GitRepositoryStatusArtifactPatchArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchOutput() GitRepositoryStatusArtifactPatchOutput {
	return i.ToGitRepositoryStatusArtifactPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPatchOutput)
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return i.ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusArtifactPatchArgs) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPatchOutput).ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx)
}

// GitRepositoryStatusArtifactPatchPtrInput is an input type that accepts GitRepositoryStatusArtifactPatchArgs, GitRepositoryStatusArtifactPatchPtr and GitRepositoryStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusArtifactPatchPtrInput` via:
//
//	        GitRepositoryStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput
	ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Context) GitRepositoryStatusArtifactPatchPtrOutput
}

type gitRepositoryStatusArtifactPatchPtrType GitRepositoryStatusArtifactPatchArgs

func GitRepositoryStatusArtifactPatchPtr(v *GitRepositoryStatusArtifactPatchArgs) GitRepositoryStatusArtifactPatchPtrInput {
	return (*gitRepositoryStatusArtifactPatchPtrType)(v)
}

func (*gitRepositoryStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i *gitRepositoryStatusArtifactPatchPtrType) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return i.ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusArtifactPatchPtrType) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type GitRepositoryStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchOutput() GitRepositoryStatusArtifactPatchOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusArtifactPatchOutput) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusArtifactPatch) *GitRepositoryStatusArtifactPatch {
		return &v
	}).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o GitRepositoryStatusArtifactPatchOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o GitRepositoryStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o GitRepositoryStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o GitRepositoryStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o GitRepositoryStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o GitRepositoryStatusArtifactPatchPtrOutput) ToGitRepositoryStatusArtifactPatchPtrOutput() GitRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchPtrOutput) ToGitRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusArtifactPatchPtrOutput) Elem() GitRepositoryStatusArtifactPatchOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) GitRepositoryStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusArtifactPatch
		return ret
	}).(GitRepositoryStatusArtifactPatchOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o GitRepositoryStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o GitRepositoryStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// GitRepositoryStatusConditionsInput is an input type that accepts GitRepositoryStatusConditionsArgs and GitRepositoryStatusConditionsOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsInput` via:
//
//	GitRepositoryStatusConditionsArgs{...}
type GitRepositoryStatusConditionsInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsOutput() GitRepositoryStatusConditionsOutput
	ToGitRepositoryStatusConditionsOutputWithContext(context.Context) GitRepositoryStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GitRepositoryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditions)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsArgs) ToGitRepositoryStatusConditionsOutput() GitRepositoryStatusConditionsOutput {
	return i.ToGitRepositoryStatusConditionsOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsArgs) ToGitRepositoryStatusConditionsOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsOutput)
}

// GitRepositoryStatusConditionsArrayInput is an input type that accepts GitRepositoryStatusConditionsArray and GitRepositoryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsArrayInput` via:
//
//	GitRepositoryStatusConditionsArray{ GitRepositoryStatusConditionsArgs{...} }
type GitRepositoryStatusConditionsArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsArrayOutput() GitRepositoryStatusConditionsArrayOutput
	ToGitRepositoryStatusConditionsArrayOutputWithContext(context.Context) GitRepositoryStatusConditionsArrayOutput
}

type GitRepositoryStatusConditionsArray []GitRepositoryStatusConditionsInput

func (GitRepositoryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditions)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsArray) ToGitRepositoryStatusConditionsArrayOutput() GitRepositoryStatusConditionsArrayOutput {
	return i.ToGitRepositoryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsArray) ToGitRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditions)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsOutput) ToGitRepositoryStatusConditionsOutput() GitRepositoryStatusConditionsOutput {
	return o
}

func (o GitRepositoryStatusConditionsOutput) ToGitRepositoryStatusConditionsOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GitRepositoryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GitRepositoryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GitRepositoryStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GitRepositoryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GitRepositoryStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o GitRepositoryStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditions)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsArrayOutput) ToGitRepositoryStatusConditionsArrayOutput() GitRepositoryStatusConditionsArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsArrayOutput) ToGitRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusConditions {
		return vs[0].([]GitRepositoryStatusConditions)[vs[1].(int)]
	}).(GitRepositoryStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// GitRepositoryStatusConditionsPatchInput is an input type that accepts GitRepositoryStatusConditionsPatchArgs and GitRepositoryStatusConditionsPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsPatchInput` via:
//
//	GitRepositoryStatusConditionsPatchArgs{...}
type GitRepositoryStatusConditionsPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsPatchOutput() GitRepositoryStatusConditionsPatchOutput
	ToGitRepositoryStatusConditionsPatchOutputWithContext(context.Context) GitRepositoryStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GitRepositoryStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsPatchArgs) ToGitRepositoryStatusConditionsPatchOutput() GitRepositoryStatusConditionsPatchOutput {
	return i.ToGitRepositoryStatusConditionsPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsPatchArgs) ToGitRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsPatchOutput)
}

// GitRepositoryStatusConditionsPatchArrayInput is an input type that accepts GitRepositoryStatusConditionsPatchArray and GitRepositoryStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusConditionsPatchArrayInput` via:
//
//	GitRepositoryStatusConditionsPatchArray{ GitRepositoryStatusConditionsPatchArgs{...} }
type GitRepositoryStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusConditionsPatchArrayOutput() GitRepositoryStatusConditionsPatchArrayOutput
	ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(context.Context) GitRepositoryStatusConditionsPatchArrayOutput
}

type GitRepositoryStatusConditionsPatchArray []GitRepositoryStatusConditionsPatchInput

func (GitRepositoryStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusConditionsPatchArray) ToGitRepositoryStatusConditionsPatchArrayOutput() GitRepositoryStatusConditionsPatchArrayOutput {
	return i.ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusConditionsPatchArray) ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type GitRepositoryStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsPatchOutput) ToGitRepositoryStatusConditionsPatchOutput() GitRepositoryStatusConditionsPatchOutput {
	return o
}

func (o GitRepositoryStatusConditionsPatchOutput) ToGitRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GitRepositoryStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GitRepositoryStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GitRepositoryStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GitRepositoryStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GitRepositoryStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o GitRepositoryStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusConditionsPatchArrayOutput) ToGitRepositoryStatusConditionsPatchArrayOutput() GitRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsPatchArrayOutput) ToGitRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusConditionsPatch {
		return vs[0].([]GitRepositoryStatusConditionsPatch)[vs[1].(int)]
	}).(GitRepositoryStatusConditionsPatchOutput)
}

// Artifact represents the output of a source synchronisation.
type GitRepositoryStatusIncludedArtifacts struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusIncludedArtifactsInput is an input type that accepts GitRepositoryStatusIncludedArtifactsArgs and GitRepositoryStatusIncludedArtifactsOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsInput` via:
//
//	GitRepositoryStatusIncludedArtifactsArgs{...}
type GitRepositoryStatusIncludedArtifactsInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsOutput() GitRepositoryStatusIncludedArtifactsOutput
	ToGitRepositoryStatusIncludedArtifactsOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsOutput
}

// Artifact represents the output of a source synchronisation.
type GitRepositoryStatusIncludedArtifactsArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusIncludedArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsArgs) ToGitRepositoryStatusIncludedArtifactsOutput() GitRepositoryStatusIncludedArtifactsOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsArgs) ToGitRepositoryStatusIncludedArtifactsOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsOutput)
}

// GitRepositoryStatusIncludedArtifactsArrayInput is an input type that accepts GitRepositoryStatusIncludedArtifactsArray and GitRepositoryStatusIncludedArtifactsArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsArrayInput` via:
//
//	GitRepositoryStatusIncludedArtifactsArray{ GitRepositoryStatusIncludedArtifactsArgs{...} }
type GitRepositoryStatusIncludedArtifactsArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsArrayOutput() GitRepositoryStatusIncludedArtifactsArrayOutput
	ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsArrayOutput
}

type GitRepositoryStatusIncludedArtifactsArray []GitRepositoryStatusIncludedArtifactsInput

func (GitRepositoryStatusIncludedArtifactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsArray) ToGitRepositoryStatusIncludedArtifactsArrayOutput() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsArray) ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsArrayOutput)
}

// Artifact represents the output of a source synchronisation.
type GitRepositoryStatusIncludedArtifactsOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsOutput) ToGitRepositoryStatusIncludedArtifactsOutput() GitRepositoryStatusIncludedArtifactsOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsOutput) ToGitRepositoryStatusIncludedArtifactsOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsOutput {
	return o
}

// Checksum is the SHA256 checksum of the artifact.
func (o GitRepositoryStatusIncludedArtifactsOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o GitRepositoryStatusIncludedArtifactsOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o GitRepositoryStatusIncludedArtifactsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o GitRepositoryStatusIncludedArtifactsOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o GitRepositoryStatusIncludedArtifactsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifacts) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusIncludedArtifactsArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifacts)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsArrayOutput) ToGitRepositoryStatusIncludedArtifactsArrayOutput() GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsArrayOutput) ToGitRepositoryStatusIncludedArtifactsArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusIncludedArtifactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusIncludedArtifacts {
		return vs[0].([]GitRepositoryStatusIncludedArtifacts)[vs[1].(int)]
	}).(GitRepositoryStatusIncludedArtifactsOutput)
}

// Artifact represents the output of a source synchronisation.
type GitRepositoryStatusIncludedArtifactsPatch struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusIncludedArtifactsPatchInput is an input type that accepts GitRepositoryStatusIncludedArtifactsPatchArgs and GitRepositoryStatusIncludedArtifactsPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsPatchInput` via:
//
//	GitRepositoryStatusIncludedArtifactsPatchArgs{...}
type GitRepositoryStatusIncludedArtifactsPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsPatchOutput() GitRepositoryStatusIncludedArtifactsPatchOutput
	ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsPatchOutput
}

// Artifact represents the output of a source synchronisation.
type GitRepositoryStatusIncludedArtifactsPatchArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusIncludedArtifactsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsPatchArgs) ToGitRepositoryStatusIncludedArtifactsPatchOutput() GitRepositoryStatusIncludedArtifactsPatchOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsPatchArgs) ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsPatchOutput)
}

// GitRepositoryStatusIncludedArtifactsPatchArrayInput is an input type that accepts GitRepositoryStatusIncludedArtifactsPatchArray and GitRepositoryStatusIncludedArtifactsPatchArrayOutput values.
// You can construct a concrete instance of `GitRepositoryStatusIncludedArtifactsPatchArrayInput` via:
//
//	GitRepositoryStatusIncludedArtifactsPatchArray{ GitRepositoryStatusIncludedArtifactsPatchArgs{...} }
type GitRepositoryStatusIncludedArtifactsPatchArrayInput interface {
	pulumi.Input

	ToGitRepositoryStatusIncludedArtifactsPatchArrayOutput() GitRepositoryStatusIncludedArtifactsPatchArrayOutput
	ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(context.Context) GitRepositoryStatusIncludedArtifactsPatchArrayOutput
}

type GitRepositoryStatusIncludedArtifactsPatchArray []GitRepositoryStatusIncludedArtifactsPatchInput

func (GitRepositoryStatusIncludedArtifactsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (i GitRepositoryStatusIncludedArtifactsPatchArray) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutput() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return i.ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(context.Background())
}

func (i GitRepositoryStatusIncludedArtifactsPatchArray) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusIncludedArtifactsPatchArrayOutput)
}

// Artifact represents the output of a source synchronisation.
type GitRepositoryStatusIncludedArtifactsPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsPatchOutput) ToGitRepositoryStatusIncludedArtifactsPatchOutput() GitRepositoryStatusIncludedArtifactsPatchOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsPatchOutput) ToGitRepositoryStatusIncludedArtifactsPatchOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchOutput {
	return o
}

// Checksum is the SHA256 checksum of the artifact.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o GitRepositoryStatusIncludedArtifactsPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusIncludedArtifactsPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusIncludedArtifactsPatchArrayOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusIncludedArtifactsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitRepositoryStatusIncludedArtifactsPatch)(nil)).Elem()
}

func (o GitRepositoryStatusIncludedArtifactsPatchArrayOutput) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutput() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsPatchArrayOutput) ToGitRepositoryStatusIncludedArtifactsPatchArrayOutputWithContext(ctx context.Context) GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o
}

func (o GitRepositoryStatusIncludedArtifactsPatchArrayOutput) Index(i pulumi.IntInput) GitRepositoryStatusIncludedArtifactsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitRepositoryStatusIncludedArtifactsPatch {
		return vs[0].([]GitRepositoryStatusIncludedArtifactsPatch)[vs[1].(int)]
	}).(GitRepositoryStatusIncludedArtifactsPatchOutput)
}

// GitRepositoryStatus defines the observed state of a Git repository.
type GitRepositoryStatusPatch struct {
	Artifact *GitRepositoryStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions []GitRepositoryStatusConditionsPatch `pulumi:"conditions"`
	// IncludedArtifacts represents the included artifacts from the last successful repository sync.
	IncludedArtifacts []GitRepositoryStatusIncludedArtifactsPatch `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last repository
	// sync.
	Url *string `pulumi:"url"`
}

// GitRepositoryStatusPatchInput is an input type that accepts GitRepositoryStatusPatchArgs and GitRepositoryStatusPatchOutput values.
// You can construct a concrete instance of `GitRepositoryStatusPatchInput` via:
//
//	GitRepositoryStatusPatchArgs{...}
type GitRepositoryStatusPatchInput interface {
	pulumi.Input

	ToGitRepositoryStatusPatchOutput() GitRepositoryStatusPatchOutput
	ToGitRepositoryStatusPatchOutputWithContext(context.Context) GitRepositoryStatusPatchOutput
}

// GitRepositoryStatus defines the observed state of a Git repository.
type GitRepositoryStatusPatchArgs struct {
	Artifact GitRepositoryStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the GitRepository.
	Conditions GitRepositoryStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// IncludedArtifacts represents the included artifacts from the last successful repository sync.
	IncludedArtifacts GitRepositoryStatusIncludedArtifactsPatchArrayInput `pulumi:"includedArtifacts"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the artifact output of the last repository
	// sync.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitRepositoryStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusPatch)(nil)).Elem()
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchOutput() GitRepositoryStatusPatchOutput {
	return i.ToGitRepositoryStatusPatchOutputWithContext(context.Background())
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchOutputWithContext(ctx context.Context) GitRepositoryStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPatchOutput)
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return i.ToGitRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i GitRepositoryStatusPatchArgs) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPatchOutput).ToGitRepositoryStatusPatchPtrOutputWithContext(ctx)
}

// GitRepositoryStatusPatchPtrInput is an input type that accepts GitRepositoryStatusPatchArgs, GitRepositoryStatusPatchPtr and GitRepositoryStatusPatchPtrOutput values.
// You can construct a concrete instance of `GitRepositoryStatusPatchPtrInput` via:
//
//	        GitRepositoryStatusPatchArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryStatusPatchPtrInput interface {
	pulumi.Input

	ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput
	ToGitRepositoryStatusPatchPtrOutputWithContext(context.Context) GitRepositoryStatusPatchPtrOutput
}

type gitRepositoryStatusPatchPtrType GitRepositoryStatusPatchArgs

func GitRepositoryStatusPatchPtr(v *GitRepositoryStatusPatchArgs) GitRepositoryStatusPatchPtrInput {
	return (*gitRepositoryStatusPatchPtrType)(v)
}

func (*gitRepositoryStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusPatch)(nil)).Elem()
}

func (i *gitRepositoryStatusPatchPtrType) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return i.ToGitRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryStatusPatchPtrType) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryStatusPatchPtrOutput)
}

// GitRepositoryStatus defines the observed state of a Git repository.
type GitRepositoryStatusPatchOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryStatusPatch)(nil)).Elem()
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchOutput() GitRepositoryStatusPatchOutput {
	return o
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchOutputWithContext(ctx context.Context) GitRepositoryStatusPatchOutput {
	return o
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return o.ToGitRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (o GitRepositoryStatusPatchOutput) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryStatusPatch) *GitRepositoryStatusPatch {
		return &v
	}).(GitRepositoryStatusPatchPtrOutput)
}

func (o GitRepositoryStatusPatchOutput) Artifact() GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *GitRepositoryStatusArtifactPatch { return v.Artifact }).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusPatchOutput) Conditions() GitRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) []GitRepositoryStatusConditionsPatch { return v.Conditions }).(GitRepositoryStatusConditionsPatchArrayOutput)
}

// IncludedArtifacts represents the included artifacts from the last successful repository sync.
func (o GitRepositoryStatusPatchOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) []GitRepositoryStatusIncludedArtifactsPatch {
		return v.IncludedArtifacts
	}).(GitRepositoryStatusIncludedArtifactsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o GitRepositoryStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last repository
// sync.
func (o GitRepositoryStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryStatusPatch)(nil)).Elem()
}

func (o GitRepositoryStatusPatchPtrOutput) ToGitRepositoryStatusPatchPtrOutput() GitRepositoryStatusPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusPatchPtrOutput) ToGitRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) GitRepositoryStatusPatchPtrOutput {
	return o
}

func (o GitRepositoryStatusPatchPtrOutput) Elem() GitRepositoryStatusPatchOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) GitRepositoryStatusPatch {
		if v != nil {
			return *v
		}
		var ret GitRepositoryStatusPatch
		return ret
	}).(GitRepositoryStatusPatchOutput)
}

func (o GitRepositoryStatusPatchPtrOutput) Artifact() GitRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *GitRepositoryStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(GitRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the GitRepository.
func (o GitRepositoryStatusPatchPtrOutput) Conditions() GitRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) []GitRepositoryStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(GitRepositoryStatusConditionsPatchArrayOutput)
}

// IncludedArtifacts represents the included artifacts from the last successful repository sync.
func (o GitRepositoryStatusPatchPtrOutput) IncludedArtifacts() GitRepositoryStatusIncludedArtifactsPatchArrayOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) []GitRepositoryStatusIncludedArtifactsPatch {
		if v == nil {
			return nil
		}
		return v.IncludedArtifacts
	}).(GitRepositoryStatusIncludedArtifactsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o GitRepositoryStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o GitRepositoryStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the artifact output of the last repository
// sync.
func (o GitRepositoryStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// HelmChart is the Schema for the helmcharts API
type HelmChartType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *HelmChartSpec     `pulumi:"spec"`
	Status   *HelmChartStatus   `pulumi:"status"`
}

// HelmChartTypeInput is an input type that accepts HelmChartTypeArgs and HelmChartTypeOutput values.
// You can construct a concrete instance of `HelmChartTypeInput` via:
//
//	HelmChartTypeArgs{...}
type HelmChartTypeInput interface {
	pulumi.Input

	ToHelmChartTypeOutput() HelmChartTypeOutput
	ToHelmChartTypeOutputWithContext(context.Context) HelmChartTypeOutput
}

// HelmChart is the Schema for the helmcharts API
type HelmChartTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     HelmChartSpecPtrInput     `pulumi:"spec"`
	Status   HelmChartStatusPtrInput   `pulumi:"status"`
}

func (HelmChartTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartType)(nil)).Elem()
}

func (i HelmChartTypeArgs) ToHelmChartTypeOutput() HelmChartTypeOutput {
	return i.ToHelmChartTypeOutputWithContext(context.Background())
}

func (i HelmChartTypeArgs) ToHelmChartTypeOutputWithContext(ctx context.Context) HelmChartTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartTypeOutput)
}

// HelmChartTypeArrayInput is an input type that accepts HelmChartTypeArray and HelmChartTypeArrayOutput values.
// You can construct a concrete instance of `HelmChartTypeArrayInput` via:
//
//	HelmChartTypeArray{ HelmChartTypeArgs{...} }
type HelmChartTypeArrayInput interface {
	pulumi.Input

	ToHelmChartTypeArrayOutput() HelmChartTypeArrayOutput
	ToHelmChartTypeArrayOutputWithContext(context.Context) HelmChartTypeArrayOutput
}

type HelmChartTypeArray []HelmChartTypeInput

func (HelmChartTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartType)(nil)).Elem()
}

func (i HelmChartTypeArray) ToHelmChartTypeArrayOutput() HelmChartTypeArrayOutput {
	return i.ToHelmChartTypeArrayOutputWithContext(context.Background())
}

func (i HelmChartTypeArray) ToHelmChartTypeArrayOutputWithContext(ctx context.Context) HelmChartTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartTypeArrayOutput)
}

// HelmChart is the Schema for the helmcharts API
type HelmChartTypeOutput struct{ *pulumi.OutputState }

func (HelmChartTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartType)(nil)).Elem()
}

func (o HelmChartTypeOutput) ToHelmChartTypeOutput() HelmChartTypeOutput {
	return o
}

func (o HelmChartTypeOutput) ToHelmChartTypeOutputWithContext(ctx context.Context) HelmChartTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmChartTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HelmChartType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HelmChartTypeOutput) Spec() HelmChartSpecPtrOutput {
	return o.ApplyT(func(v HelmChartType) *HelmChartSpec { return v.Spec }).(HelmChartSpecPtrOutput)
}

func (o HelmChartTypeOutput) Status() HelmChartStatusPtrOutput {
	return o.ApplyT(func(v HelmChartType) *HelmChartStatus { return v.Status }).(HelmChartStatusPtrOutput)
}

type HelmChartTypeArrayOutput struct{ *pulumi.OutputState }

func (HelmChartTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartType)(nil)).Elem()
}

func (o HelmChartTypeArrayOutput) ToHelmChartTypeArrayOutput() HelmChartTypeArrayOutput {
	return o
}

func (o HelmChartTypeArrayOutput) ToHelmChartTypeArrayOutputWithContext(ctx context.Context) HelmChartTypeArrayOutput {
	return o
}

func (o HelmChartTypeArrayOutput) Index(i pulumi.IntInput) HelmChartTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartType {
		return vs[0].([]HelmChartType)[vs[1].(int)]
	}).(HelmChartTypeOutput)
}

// HelmChartList is a list of HelmChart
type HelmChartListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmChartType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HelmChartListTypeInput is an input type that accepts HelmChartListTypeArgs and HelmChartListTypeOutput values.
// You can construct a concrete instance of `HelmChartListTypeInput` via:
//
//	HelmChartListTypeArgs{...}
type HelmChartListTypeInput interface {
	pulumi.Input

	ToHelmChartListTypeOutput() HelmChartListTypeOutput
	ToHelmChartListTypeOutputWithContext(context.Context) HelmChartListTypeOutput
}

// HelmChartList is a list of HelmChart
type HelmChartListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmChartTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HelmChartListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartListType)(nil)).Elem()
}

func (i HelmChartListTypeArgs) ToHelmChartListTypeOutput() HelmChartListTypeOutput {
	return i.ToHelmChartListTypeOutputWithContext(context.Background())
}

func (i HelmChartListTypeArgs) ToHelmChartListTypeOutputWithContext(ctx context.Context) HelmChartListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartListTypeOutput)
}

// HelmChartList is a list of HelmChart
type HelmChartListTypeOutput struct{ *pulumi.OutputState }

func (HelmChartListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartListType)(nil)).Elem()
}

func (o HelmChartListTypeOutput) ToHelmChartListTypeOutput() HelmChartListTypeOutput {
	return o
}

func (o HelmChartListTypeOutput) ToHelmChartListTypeOutputWithContext(ctx context.Context) HelmChartListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of helmcharts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmChartListTypeOutput) Items() HelmChartTypeArrayOutput {
	return o.ApplyT(func(v HelmChartListType) []HelmChartType { return v.Items }).(HelmChartTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HelmChartListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// HelmChart is the Schema for the helmcharts API
type HelmChartPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *HelmChartSpecPatch     `pulumi:"spec"`
	Status   *HelmChartStatusPatch   `pulumi:"status"`
}

// HelmChartPatchTypeInput is an input type that accepts HelmChartPatchTypeArgs and HelmChartPatchTypeOutput values.
// You can construct a concrete instance of `HelmChartPatchTypeInput` via:
//
//	HelmChartPatchTypeArgs{...}
type HelmChartPatchTypeInput interface {
	pulumi.Input

	ToHelmChartPatchTypeOutput() HelmChartPatchTypeOutput
	ToHelmChartPatchTypeOutputWithContext(context.Context) HelmChartPatchTypeOutput
}

// HelmChart is the Schema for the helmcharts API
type HelmChartPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     HelmChartSpecPatchPtrInput     `pulumi:"spec"`
	Status   HelmChartStatusPatchPtrInput   `pulumi:"status"`
}

func (HelmChartPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartPatchType)(nil)).Elem()
}

func (i HelmChartPatchTypeArgs) ToHelmChartPatchTypeOutput() HelmChartPatchTypeOutput {
	return i.ToHelmChartPatchTypeOutputWithContext(context.Background())
}

func (i HelmChartPatchTypeArgs) ToHelmChartPatchTypeOutputWithContext(ctx context.Context) HelmChartPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartPatchTypeOutput)
}

// HelmChart is the Schema for the helmcharts API
type HelmChartPatchTypeOutput struct{ *pulumi.OutputState }

func (HelmChartPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartPatchType)(nil)).Elem()
}

func (o HelmChartPatchTypeOutput) ToHelmChartPatchTypeOutput() HelmChartPatchTypeOutput {
	return o
}

func (o HelmChartPatchTypeOutput) ToHelmChartPatchTypeOutputWithContext(ctx context.Context) HelmChartPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmChartPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmChartPatchTypeOutput) Spec() HelmChartSpecPatchPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *HelmChartSpecPatch { return v.Spec }).(HelmChartSpecPatchPtrOutput)
}

func (o HelmChartPatchTypeOutput) Status() HelmChartStatusPatchPtrOutput {
	return o.ApplyT(func(v HelmChartPatchType) *HelmChartStatusPatch { return v.Status }).(HelmChartStatusPatchPtrOutput)
}

// HelmChartSpec defines the desired state of a Helm chart.
type HelmChartSpec struct {
	AccessFrom *HelmChartSpecAccessFrom `pulumi:"accessFrom"`
	// The name or path the Helm chart is available at in the SourceRef.
	Chart *string `pulumi:"chart"`
	// The interval at which to check the Source for updates.
	Interval *string `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy *string                 `pulumi:"reconcileStrategy"`
	SourceRef         *HelmChartSpecSourceRef `pulumi:"sourceRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile *string `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles []string `pulumi:"valuesFiles"`
	// The chart version semver expression, ignored for charts from GitRepository
	// and Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// HelmChartSpecInput is an input type that accepts HelmChartSpecArgs and HelmChartSpecOutput values.
// You can construct a concrete instance of `HelmChartSpecInput` via:
//
//	HelmChartSpecArgs{...}
type HelmChartSpecInput interface {
	pulumi.Input

	ToHelmChartSpecOutput() HelmChartSpecOutput
	ToHelmChartSpecOutputWithContext(context.Context) HelmChartSpecOutput
}

// HelmChartSpec defines the desired state of a Helm chart.
type HelmChartSpecArgs struct {
	AccessFrom HelmChartSpecAccessFromPtrInput `pulumi:"accessFrom"`
	// The name or path the Helm chart is available at in the SourceRef.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// The interval at which to check the Source for updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput          `pulumi:"reconcileStrategy"`
	SourceRef         HelmChartSpecSourceRefPtrInput `pulumi:"sourceRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile pulumi.StringPtrInput `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput `pulumi:"valuesFiles"`
	// The chart version semver expression, ignored for charts from GitRepository
	// and Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmChartSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpec)(nil)).Elem()
}

func (i HelmChartSpecArgs) ToHelmChartSpecOutput() HelmChartSpecOutput {
	return i.ToHelmChartSpecOutputWithContext(context.Background())
}

func (i HelmChartSpecArgs) ToHelmChartSpecOutputWithContext(ctx context.Context) HelmChartSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecOutput)
}

func (i HelmChartSpecArgs) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return i.ToHelmChartSpecPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecArgs) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecOutput).ToHelmChartSpecPtrOutputWithContext(ctx)
}

// HelmChartSpecPtrInput is an input type that accepts HelmChartSpecArgs, HelmChartSpecPtr and HelmChartSpecPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecPtrInput` via:
//
//	        HelmChartSpecArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecPtrInput interface {
	pulumi.Input

	ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput
	ToHelmChartSpecPtrOutputWithContext(context.Context) HelmChartSpecPtrOutput
}

type helmChartSpecPtrType HelmChartSpecArgs

func HelmChartSpecPtr(v *HelmChartSpecArgs) HelmChartSpecPtrInput {
	return (*helmChartSpecPtrType)(v)
}

func (*helmChartSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpec)(nil)).Elem()
}

func (i *helmChartSpecPtrType) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return i.ToHelmChartSpecPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecPtrType) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPtrOutput)
}

// HelmChartSpec defines the desired state of a Helm chart.
type HelmChartSpecOutput struct{ *pulumi.OutputState }

func (HelmChartSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpec)(nil)).Elem()
}

func (o HelmChartSpecOutput) ToHelmChartSpecOutput() HelmChartSpecOutput {
	return o
}

func (o HelmChartSpecOutput) ToHelmChartSpecOutputWithContext(ctx context.Context) HelmChartSpecOutput {
	return o
}

func (o HelmChartSpecOutput) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return o.ToHelmChartSpecPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecOutput) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpec) *HelmChartSpec {
		return &v
	}).(HelmChartSpecPtrOutput)
}

func (o HelmChartSpecOutput) AccessFrom() HelmChartSpecAccessFromPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *HelmChartSpecAccessFrom { return v.AccessFrom }).(HelmChartSpecAccessFromPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmChartSpecOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// The interval at which to check the Source for updates.
func (o HelmChartSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecOutput) SourceRef() HelmChartSpecSourceRefPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *HelmChartSpecSourceRef { return v.SourceRef }).(HelmChartSpecSourceRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmChartSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmChartSpecOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.ValuesFile }).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmChartSpecOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmChartSpec) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

// The chart version semver expression, ignored for charts from GitRepository
// and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmChartSpecPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpec)(nil)).Elem()
}

func (o HelmChartSpecPtrOutput) ToHelmChartSpecPtrOutput() HelmChartSpecPtrOutput {
	return o
}

func (o HelmChartSpecPtrOutput) ToHelmChartSpecPtrOutputWithContext(ctx context.Context) HelmChartSpecPtrOutput {
	return o
}

func (o HelmChartSpecPtrOutput) Elem() HelmChartSpecOutput {
	return o.ApplyT(func(v *HelmChartSpec) HelmChartSpec {
		if v != nil {
			return *v
		}
		var ret HelmChartSpec
		return ret
	}).(HelmChartSpecOutput)
}

func (o HelmChartSpecPtrOutput) AccessFrom() HelmChartSpecAccessFromPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *HelmChartSpecAccessFrom {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(HelmChartSpecAccessFromPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmChartSpecPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// The interval at which to check the Source for updates.
func (o HelmChartSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecPtrOutput) SourceRef() HelmChartSpecSourceRefPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *HelmChartSpecSourceRef {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(HelmChartSpecSourceRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmChartSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmChartSpecPtrOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFile
	}).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmChartSpecPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmChartSpec) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

// The chart version semver expression, ignored for charts from GitRepository
// and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmChartSpecAccessFrom struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []HelmChartSpecAccessFromNamespaceSelectors `pulumi:"namespaceSelectors"`
}

// HelmChartSpecAccessFromInput is an input type that accepts HelmChartSpecAccessFromArgs and HelmChartSpecAccessFromOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromInput` via:
//
//	HelmChartSpecAccessFromArgs{...}
type HelmChartSpecAccessFromInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromOutput() HelmChartSpecAccessFromOutput
	ToHelmChartSpecAccessFromOutputWithContext(context.Context) HelmChartSpecAccessFromOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmChartSpecAccessFromArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors HelmChartSpecAccessFromNamespaceSelectorsArrayInput `pulumi:"namespaceSelectors"`
}

func (HelmChartSpecAccessFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFrom)(nil)).Elem()
}

func (i HelmChartSpecAccessFromArgs) ToHelmChartSpecAccessFromOutput() HelmChartSpecAccessFromOutput {
	return i.ToHelmChartSpecAccessFromOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromArgs) ToHelmChartSpecAccessFromOutputWithContext(ctx context.Context) HelmChartSpecAccessFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromOutput)
}

func (i HelmChartSpecAccessFromArgs) ToHelmChartSpecAccessFromPtrOutput() HelmChartSpecAccessFromPtrOutput {
	return i.ToHelmChartSpecAccessFromPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromArgs) ToHelmChartSpecAccessFromPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromOutput).ToHelmChartSpecAccessFromPtrOutputWithContext(ctx)
}

// HelmChartSpecAccessFromPtrInput is an input type that accepts HelmChartSpecAccessFromArgs, HelmChartSpecAccessFromPtr and HelmChartSpecAccessFromPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromPtrInput` via:
//
//	        HelmChartSpecAccessFromArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecAccessFromPtrInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromPtrOutput() HelmChartSpecAccessFromPtrOutput
	ToHelmChartSpecAccessFromPtrOutputWithContext(context.Context) HelmChartSpecAccessFromPtrOutput
}

type helmChartSpecAccessFromPtrType HelmChartSpecAccessFromArgs

func HelmChartSpecAccessFromPtr(v *HelmChartSpecAccessFromArgs) HelmChartSpecAccessFromPtrInput {
	return (*helmChartSpecAccessFromPtrType)(v)
}

func (*helmChartSpecAccessFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecAccessFrom)(nil)).Elem()
}

func (i *helmChartSpecAccessFromPtrType) ToHelmChartSpecAccessFromPtrOutput() HelmChartSpecAccessFromPtrOutput {
	return i.ToHelmChartSpecAccessFromPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecAccessFromPtrType) ToHelmChartSpecAccessFromPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmChartSpecAccessFromOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFrom)(nil)).Elem()
}

func (o HelmChartSpecAccessFromOutput) ToHelmChartSpecAccessFromOutput() HelmChartSpecAccessFromOutput {
	return o
}

func (o HelmChartSpecAccessFromOutput) ToHelmChartSpecAccessFromOutputWithContext(ctx context.Context) HelmChartSpecAccessFromOutput {
	return o
}

func (o HelmChartSpecAccessFromOutput) ToHelmChartSpecAccessFromPtrOutput() HelmChartSpecAccessFromPtrOutput {
	return o.ToHelmChartSpecAccessFromPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecAccessFromOutput) ToHelmChartSpecAccessFromPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecAccessFrom) *HelmChartSpecAccessFrom {
		return &v
	}).(HelmChartSpecAccessFromPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmChartSpecAccessFromOutput) NamespaceSelectors() HelmChartSpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v HelmChartSpecAccessFrom) []HelmChartSpecAccessFromNamespaceSelectors {
		return v.NamespaceSelectors
	}).(HelmChartSpecAccessFromNamespaceSelectorsArrayOutput)
}

type HelmChartSpecAccessFromPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecAccessFrom)(nil)).Elem()
}

func (o HelmChartSpecAccessFromPtrOutput) ToHelmChartSpecAccessFromPtrOutput() HelmChartSpecAccessFromPtrOutput {
	return o
}

func (o HelmChartSpecAccessFromPtrOutput) ToHelmChartSpecAccessFromPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPtrOutput {
	return o
}

func (o HelmChartSpecAccessFromPtrOutput) Elem() HelmChartSpecAccessFromOutput {
	return o.ApplyT(func(v *HelmChartSpecAccessFrom) HelmChartSpecAccessFrom {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecAccessFrom
		return ret
	}).(HelmChartSpecAccessFromOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmChartSpecAccessFromPtrOutput) NamespaceSelectors() HelmChartSpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v *HelmChartSpecAccessFrom) []HelmChartSpecAccessFromNamespaceSelectors {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(HelmChartSpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmChartSpecAccessFromNamespaceSelectors struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HelmChartSpecAccessFromNamespaceSelectorsInput is an input type that accepts HelmChartSpecAccessFromNamespaceSelectorsArgs and HelmChartSpecAccessFromNamespaceSelectorsOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromNamespaceSelectorsInput` via:
//
//	HelmChartSpecAccessFromNamespaceSelectorsArgs{...}
type HelmChartSpecAccessFromNamespaceSelectorsInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromNamespaceSelectorsOutput() HelmChartSpecAccessFromNamespaceSelectorsOutput
	ToHelmChartSpecAccessFromNamespaceSelectorsOutputWithContext(context.Context) HelmChartSpecAccessFromNamespaceSelectorsOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmChartSpecAccessFromNamespaceSelectorsArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HelmChartSpecAccessFromNamespaceSelectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i HelmChartSpecAccessFromNamespaceSelectorsArgs) ToHelmChartSpecAccessFromNamespaceSelectorsOutput() HelmChartSpecAccessFromNamespaceSelectorsOutput {
	return i.ToHelmChartSpecAccessFromNamespaceSelectorsOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromNamespaceSelectorsArgs) ToHelmChartSpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromNamespaceSelectorsOutput)
}

// HelmChartSpecAccessFromNamespaceSelectorsArrayInput is an input type that accepts HelmChartSpecAccessFromNamespaceSelectorsArray and HelmChartSpecAccessFromNamespaceSelectorsArrayOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromNamespaceSelectorsArrayInput` via:
//
//	HelmChartSpecAccessFromNamespaceSelectorsArray{ HelmChartSpecAccessFromNamespaceSelectorsArgs{...} }
type HelmChartSpecAccessFromNamespaceSelectorsArrayInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutput() HelmChartSpecAccessFromNamespaceSelectorsArrayOutput
	ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Context) HelmChartSpecAccessFromNamespaceSelectorsArrayOutput
}

type HelmChartSpecAccessFromNamespaceSelectorsArray []HelmChartSpecAccessFromNamespaceSelectorsInput

func (HelmChartSpecAccessFromNamespaceSelectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i HelmChartSpecAccessFromNamespaceSelectorsArray) ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutput() HelmChartSpecAccessFromNamespaceSelectorsArrayOutput {
	return i.ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromNamespaceSelectorsArray) ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmChartSpecAccessFromNamespaceSelectorsOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromNamespaceSelectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o HelmChartSpecAccessFromNamespaceSelectorsOutput) ToHelmChartSpecAccessFromNamespaceSelectorsOutput() HelmChartSpecAccessFromNamespaceSelectorsOutput {
	return o
}

func (o HelmChartSpecAccessFromNamespaceSelectorsOutput) ToHelmChartSpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HelmChartSpecAccessFromNamespaceSelectorsOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmChartSpecAccessFromNamespaceSelectors) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HelmChartSpecAccessFromNamespaceSelectorsArrayOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromNamespaceSelectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o HelmChartSpecAccessFromNamespaceSelectorsArrayOutput) ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutput() HelmChartSpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o HelmChartSpecAccessFromNamespaceSelectorsArrayOutput) ToHelmChartSpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o HelmChartSpecAccessFromNamespaceSelectorsArrayOutput) Index(i pulumi.IntInput) HelmChartSpecAccessFromNamespaceSelectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartSpecAccessFromNamespaceSelectors {
		return vs[0].([]HelmChartSpecAccessFromNamespaceSelectors)[vs[1].(int)]
	}).(HelmChartSpecAccessFromNamespaceSelectorsOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmChartSpecAccessFromNamespaceSelectorsPatch struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HelmChartSpecAccessFromNamespaceSelectorsPatchInput is an input type that accepts HelmChartSpecAccessFromNamespaceSelectorsPatchArgs and HelmChartSpecAccessFromNamespaceSelectorsPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromNamespaceSelectorsPatchInput` via:
//
//	HelmChartSpecAccessFromNamespaceSelectorsPatchArgs{...}
type HelmChartSpecAccessFromNamespaceSelectorsPatchInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutput() HelmChartSpecAccessFromNamespaceSelectorsPatchOutput
	ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Context) HelmChartSpecAccessFromNamespaceSelectorsPatchOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmChartSpecAccessFromNamespaceSelectorsPatchArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HelmChartSpecAccessFromNamespaceSelectorsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i HelmChartSpecAccessFromNamespaceSelectorsPatchArgs) ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutput() HelmChartSpecAccessFromNamespaceSelectorsPatchOutput {
	return i.ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromNamespaceSelectorsPatchArgs) ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromNamespaceSelectorsPatchOutput)
}

// HelmChartSpecAccessFromNamespaceSelectorsPatchArrayInput is an input type that accepts HelmChartSpecAccessFromNamespaceSelectorsPatchArray and HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromNamespaceSelectorsPatchArrayInput` via:
//
//	HelmChartSpecAccessFromNamespaceSelectorsPatchArray{ HelmChartSpecAccessFromNamespaceSelectorsPatchArgs{...} }
type HelmChartSpecAccessFromNamespaceSelectorsPatchArrayInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput
	ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Context) HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput
}

type HelmChartSpecAccessFromNamespaceSelectorsPatchArray []HelmChartSpecAccessFromNamespaceSelectorsPatchInput

func (HelmChartSpecAccessFromNamespaceSelectorsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i HelmChartSpecAccessFromNamespaceSelectorsPatchArray) ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return i.ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromNamespaceSelectorsPatchArray) ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmChartSpecAccessFromNamespaceSelectorsPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromNamespaceSelectorsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o HelmChartSpecAccessFromNamespaceSelectorsPatchOutput) ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutput() HelmChartSpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

func (o HelmChartSpecAccessFromNamespaceSelectorsPatchOutput) ToHelmChartSpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HelmChartSpecAccessFromNamespaceSelectorsPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmChartSpecAccessFromNamespaceSelectorsPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartSpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput) ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput) ToHelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput) Index(i pulumi.IntInput) HelmChartSpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartSpecAccessFromNamespaceSelectorsPatch {
		return vs[0].([]HelmChartSpecAccessFromNamespaceSelectorsPatch)[vs[1].(int)]
	}).(HelmChartSpecAccessFromNamespaceSelectorsPatchOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmChartSpecAccessFromPatch struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []HelmChartSpecAccessFromNamespaceSelectorsPatch `pulumi:"namespaceSelectors"`
}

// HelmChartSpecAccessFromPatchInput is an input type that accepts HelmChartSpecAccessFromPatchArgs and HelmChartSpecAccessFromPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromPatchInput` via:
//
//	HelmChartSpecAccessFromPatchArgs{...}
type HelmChartSpecAccessFromPatchInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromPatchOutput() HelmChartSpecAccessFromPatchOutput
	ToHelmChartSpecAccessFromPatchOutputWithContext(context.Context) HelmChartSpecAccessFromPatchOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmChartSpecAccessFromPatchArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors HelmChartSpecAccessFromNamespaceSelectorsPatchArrayInput `pulumi:"namespaceSelectors"`
}

func (HelmChartSpecAccessFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFromPatch)(nil)).Elem()
}

func (i HelmChartSpecAccessFromPatchArgs) ToHelmChartSpecAccessFromPatchOutput() HelmChartSpecAccessFromPatchOutput {
	return i.ToHelmChartSpecAccessFromPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromPatchArgs) ToHelmChartSpecAccessFromPatchOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromPatchOutput)
}

func (i HelmChartSpecAccessFromPatchArgs) ToHelmChartSpecAccessFromPatchPtrOutput() HelmChartSpecAccessFromPatchPtrOutput {
	return i.ToHelmChartSpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecAccessFromPatchArgs) ToHelmChartSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromPatchOutput).ToHelmChartSpecAccessFromPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecAccessFromPatchPtrInput is an input type that accepts HelmChartSpecAccessFromPatchArgs, HelmChartSpecAccessFromPatchPtr and HelmChartSpecAccessFromPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecAccessFromPatchPtrInput` via:
//
//	        HelmChartSpecAccessFromPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecAccessFromPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecAccessFromPatchPtrOutput() HelmChartSpecAccessFromPatchPtrOutput
	ToHelmChartSpecAccessFromPatchPtrOutputWithContext(context.Context) HelmChartSpecAccessFromPatchPtrOutput
}

type helmChartSpecAccessFromPatchPtrType HelmChartSpecAccessFromPatchArgs

func HelmChartSpecAccessFromPatchPtr(v *HelmChartSpecAccessFromPatchArgs) HelmChartSpecAccessFromPatchPtrInput {
	return (*helmChartSpecAccessFromPatchPtrType)(v)
}

func (*helmChartSpecAccessFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecAccessFromPatch)(nil)).Elem()
}

func (i *helmChartSpecAccessFromPatchPtrType) ToHelmChartSpecAccessFromPatchPtrOutput() HelmChartSpecAccessFromPatchPtrOutput {
	return i.ToHelmChartSpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecAccessFromPatchPtrType) ToHelmChartSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecAccessFromPatchPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmChartSpecAccessFromPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecAccessFromPatch)(nil)).Elem()
}

func (o HelmChartSpecAccessFromPatchOutput) ToHelmChartSpecAccessFromPatchOutput() HelmChartSpecAccessFromPatchOutput {
	return o
}

func (o HelmChartSpecAccessFromPatchOutput) ToHelmChartSpecAccessFromPatchOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPatchOutput {
	return o
}

func (o HelmChartSpecAccessFromPatchOutput) ToHelmChartSpecAccessFromPatchPtrOutput() HelmChartSpecAccessFromPatchPtrOutput {
	return o.ToHelmChartSpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecAccessFromPatchOutput) ToHelmChartSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecAccessFromPatch) *HelmChartSpecAccessFromPatch {
		return &v
	}).(HelmChartSpecAccessFromPatchPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmChartSpecAccessFromPatchOutput) NamespaceSelectors() HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v HelmChartSpecAccessFromPatch) []HelmChartSpecAccessFromNamespaceSelectorsPatch {
		return v.NamespaceSelectors
	}).(HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

type HelmChartSpecAccessFromPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecAccessFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecAccessFromPatch)(nil)).Elem()
}

func (o HelmChartSpecAccessFromPatchPtrOutput) ToHelmChartSpecAccessFromPatchPtrOutput() HelmChartSpecAccessFromPatchPtrOutput {
	return o
}

func (o HelmChartSpecAccessFromPatchPtrOutput) ToHelmChartSpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecAccessFromPatchPtrOutput {
	return o
}

func (o HelmChartSpecAccessFromPatchPtrOutput) Elem() HelmChartSpecAccessFromPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecAccessFromPatch) HelmChartSpecAccessFromPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecAccessFromPatch
		return ret
	}).(HelmChartSpecAccessFromPatchOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmChartSpecAccessFromPatchPtrOutput) NamespaceSelectors() HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v *HelmChartSpecAccessFromPatch) []HelmChartSpecAccessFromNamespaceSelectorsPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// HelmChartSpec defines the desired state of a Helm chart.
type HelmChartSpecPatch struct {
	AccessFrom *HelmChartSpecAccessFromPatch `pulumi:"accessFrom"`
	// The name or path the Helm chart is available at in the SourceRef.
	Chart *string `pulumi:"chart"`
	// The interval at which to check the Source for updates.
	Interval *string `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy *string                      `pulumi:"reconcileStrategy"`
	SourceRef         *HelmChartSpecSourceRefPatch `pulumi:"sourceRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile *string `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles []string `pulumi:"valuesFiles"`
	// The chart version semver expression, ignored for charts from GitRepository
	// and Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// HelmChartSpecPatchInput is an input type that accepts HelmChartSpecPatchArgs and HelmChartSpecPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecPatchInput` via:
//
//	HelmChartSpecPatchArgs{...}
type HelmChartSpecPatchInput interface {
	pulumi.Input

	ToHelmChartSpecPatchOutput() HelmChartSpecPatchOutput
	ToHelmChartSpecPatchOutputWithContext(context.Context) HelmChartSpecPatchOutput
}

// HelmChartSpec defines the desired state of a Helm chart.
type HelmChartSpecPatchArgs struct {
	AccessFrom HelmChartSpecAccessFromPatchPtrInput `pulumi:"accessFrom"`
	// The name or path the Helm chart is available at in the SourceRef.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// The interval at which to check the Source for updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput               `pulumi:"reconcileStrategy"`
	SourceRef         HelmChartSpecSourceRefPatchPtrInput `pulumi:"sourceRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile pulumi.StringPtrInput `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput `pulumi:"valuesFiles"`
	// The chart version semver expression, ignored for charts from GitRepository
	// and Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmChartSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecPatch)(nil)).Elem()
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchOutput() HelmChartSpecPatchOutput {
	return i.ToHelmChartSpecPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchOutputWithContext(ctx context.Context) HelmChartSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPatchOutput)
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return i.ToHelmChartSpecPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecPatchArgs) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPatchOutput).ToHelmChartSpecPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecPatchPtrInput is an input type that accepts HelmChartSpecPatchArgs, HelmChartSpecPatchPtr and HelmChartSpecPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecPatchPtrInput` via:
//
//	        HelmChartSpecPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput
	ToHelmChartSpecPatchPtrOutputWithContext(context.Context) HelmChartSpecPatchPtrOutput
}

type helmChartSpecPatchPtrType HelmChartSpecPatchArgs

func HelmChartSpecPatchPtr(v *HelmChartSpecPatchArgs) HelmChartSpecPatchPtrInput {
	return (*helmChartSpecPatchPtrType)(v)
}

func (*helmChartSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecPatch)(nil)).Elem()
}

func (i *helmChartSpecPatchPtrType) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return i.ToHelmChartSpecPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecPatchPtrType) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecPatchPtrOutput)
}

// HelmChartSpec defines the desired state of a Helm chart.
type HelmChartSpecPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecPatch)(nil)).Elem()
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchOutput() HelmChartSpecPatchOutput {
	return o
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchOutputWithContext(ctx context.Context) HelmChartSpecPatchOutput {
	return o
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return o.ToHelmChartSpecPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecPatchOutput) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecPatch) *HelmChartSpecPatch {
		return &v
	}).(HelmChartSpecPatchPtrOutput)
}

func (o HelmChartSpecPatchOutput) AccessFrom() HelmChartSpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *HelmChartSpecAccessFromPatch { return v.AccessFrom }).(HelmChartSpecAccessFromPatchPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmChartSpecPatchOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// The interval at which to check the Source for updates.
func (o HelmChartSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecPatchOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecPatchOutput) SourceRef() HelmChartSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *HelmChartSpecSourceRefPatch { return v.SourceRef }).(HelmChartSpecSourceRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmChartSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmChartSpecPatchOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.ValuesFile }).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmChartSpecPatchOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

// The chart version semver expression, ignored for charts from GitRepository
// and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmChartSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecPatch)(nil)).Elem()
}

func (o HelmChartSpecPatchPtrOutput) ToHelmChartSpecPatchPtrOutput() HelmChartSpecPatchPtrOutput {
	return o
}

func (o HelmChartSpecPatchPtrOutput) ToHelmChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecPatchPtrOutput {
	return o
}

func (o HelmChartSpecPatchPtrOutput) Elem() HelmChartSpecPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) HelmChartSpecPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecPatch
		return ret
	}).(HelmChartSpecPatchOutput)
}

func (o HelmChartSpecPatchPtrOutput) AccessFrom() HelmChartSpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *HelmChartSpecAccessFromPatch {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(HelmChartSpecAccessFromPatchPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmChartSpecPatchPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// The interval at which to check the Source for updates.
func (o HelmChartSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmChartSpecPatchPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

func (o HelmChartSpecPatchPtrOutput) SourceRef() HelmChartSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *HelmChartSpecSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(HelmChartSpecSourceRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmChartSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmChartSpecPatchPtrOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFile
	}).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmChartSpecPatchPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

// The chart version semver expression, ignored for charts from GitRepository
// and Bucket sources. Defaults to latest when omitted.
func (o HelmChartSpecPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The reference to the Source the chart is available at.
type HelmChartSpecSourceRef struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmChartSpecSourceRefInput is an input type that accepts HelmChartSpecSourceRefArgs and HelmChartSpecSourceRefOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefInput` via:
//
//	HelmChartSpecSourceRefArgs{...}
type HelmChartSpecSourceRefInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefOutput() HelmChartSpecSourceRefOutput
	ToHelmChartSpecSourceRefOutputWithContext(context.Context) HelmChartSpecSourceRefOutput
}

// The reference to the Source the chart is available at.
type HelmChartSpecSourceRefArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmChartSpecSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRef)(nil)).Elem()
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefOutput() HelmChartSpecSourceRefOutput {
	return i.ToHelmChartSpecSourceRefOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefOutputWithContext(ctx context.Context) HelmChartSpecSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefOutput)
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return i.ToHelmChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefArgs) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefOutput).ToHelmChartSpecSourceRefPtrOutputWithContext(ctx)
}

// HelmChartSpecSourceRefPtrInput is an input type that accepts HelmChartSpecSourceRefArgs, HelmChartSpecSourceRefPtr and HelmChartSpecSourceRefPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefPtrInput` via:
//
//	        HelmChartSpecSourceRefArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecSourceRefPtrInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput
	ToHelmChartSpecSourceRefPtrOutputWithContext(context.Context) HelmChartSpecSourceRefPtrOutput
}

type helmChartSpecSourceRefPtrType HelmChartSpecSourceRefArgs

func HelmChartSpecSourceRefPtr(v *HelmChartSpecSourceRefArgs) HelmChartSpecSourceRefPtrInput {
	return (*helmChartSpecSourceRefPtrType)(v)
}

func (*helmChartSpecSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRef)(nil)).Elem()
}

func (i *helmChartSpecSourceRefPtrType) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return i.ToHelmChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecSourceRefPtrType) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPtrOutput)
}

// The reference to the Source the chart is available at.
type HelmChartSpecSourceRefOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRef)(nil)).Elem()
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefOutput() HelmChartSpecSourceRefOutput {
	return o
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefOutputWithContext(ctx context.Context) HelmChartSpecSourceRefOutput {
	return o
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return o.ToHelmChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecSourceRefOutput) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecSourceRef) *HelmChartSpecSourceRef {
		return &v
	}).(HelmChartSpecSourceRefPtrOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmChartSpecSourceRefPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRef)(nil)).Elem()
}

func (o HelmChartSpecSourceRefPtrOutput) ToHelmChartSpecSourceRefPtrOutput() HelmChartSpecSourceRefPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPtrOutput) ToHelmChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPtrOutput) Elem() HelmChartSpecSourceRefOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) HelmChartSpecSourceRef {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecSourceRef
		return ret
	}).(HelmChartSpecSourceRefOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The reference to the Source the chart is available at.
type HelmChartSpecSourceRefPatch struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmChartSpecSourceRefPatchInput is an input type that accepts HelmChartSpecSourceRefPatchArgs and HelmChartSpecSourceRefPatchOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefPatchInput` via:
//
//	HelmChartSpecSourceRefPatchArgs{...}
type HelmChartSpecSourceRefPatchInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefPatchOutput() HelmChartSpecSourceRefPatchOutput
	ToHelmChartSpecSourceRefPatchOutputWithContext(context.Context) HelmChartSpecSourceRefPatchOutput
}

// The reference to the Source the chart is available at.
type HelmChartSpecSourceRefPatchArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
	// 'Bucket').
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmChartSpecSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchOutput() HelmChartSpecSourceRefPatchOutput {
	return i.ToHelmChartSpecSourceRefPatchOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPatchOutput)
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return i.ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartSpecSourceRefPatchArgs) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPatchOutput).ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx)
}

// HelmChartSpecSourceRefPatchPtrInput is an input type that accepts HelmChartSpecSourceRefPatchArgs, HelmChartSpecSourceRefPatchPtr and HelmChartSpecSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartSpecSourceRefPatchPtrInput` via:
//
//	        HelmChartSpecSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartSpecSourceRefPatchPtrInput interface {
	pulumi.Input

	ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput
	ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Context) HelmChartSpecSourceRefPatchPtrOutput
}

type helmChartSpecSourceRefPatchPtrType HelmChartSpecSourceRefPatchArgs

func HelmChartSpecSourceRefPatchPtr(v *HelmChartSpecSourceRefPatchArgs) HelmChartSpecSourceRefPatchPtrInput {
	return (*helmChartSpecSourceRefPatchPtrType)(v)
}

func (*helmChartSpecSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (i *helmChartSpecSourceRefPatchPtrType) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return i.ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartSpecSourceRefPatchPtrType) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartSpecSourceRefPatchPtrOutput)
}

// The reference to the Source the chart is available at.
type HelmChartSpecSourceRefPatchOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchOutput() HelmChartSpecSourceRefPatchOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return o.ToHelmChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartSpecSourceRefPatchOutput) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartSpecSourceRefPatch) *HelmChartSpecSourceRefPatch {
		return &v
	}).(HelmChartSpecSourceRefPatchPtrOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRefPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartSpecSourceRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmChartSpecSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartSpecSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartSpecSourceRefPatch)(nil)).Elem()
}

func (o HelmChartSpecSourceRefPatchPtrOutput) ToHelmChartSpecSourceRefPatchPtrOutput() HelmChartSpecSourceRefPatchPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchPtrOutput) ToHelmChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmChartSpecSourceRefPatchPtrOutput {
	return o
}

func (o HelmChartSpecSourceRefPatchPtrOutput) Elem() HelmChartSpecSourceRefPatchOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) HelmChartSpecSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartSpecSourceRefPatch
		return ret
	}).(HelmChartSpecSourceRefPatchOutput)
}

// APIVersion of the referent.
func (o HelmChartSpecSourceRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent, valid values are ('HelmRepository', 'GitRepository',
// 'Bucket').
func (o HelmChartSpecSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmChartSpecSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HelmChartStatus defines the observed state of the HelmChart.
type HelmChartStatus struct {
	Artifact *HelmChartStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions []HelmChartStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the last chart pulled.
	Url *string `pulumi:"url"`
}

// HelmChartStatusInput is an input type that accepts HelmChartStatusArgs and HelmChartStatusOutput values.
// You can construct a concrete instance of `HelmChartStatusInput` via:
//
//	HelmChartStatusArgs{...}
type HelmChartStatusInput interface {
	pulumi.Input

	ToHelmChartStatusOutput() HelmChartStatusOutput
	ToHelmChartStatusOutputWithContext(context.Context) HelmChartStatusOutput
}

// HelmChartStatus defines the observed state of the HelmChart.
type HelmChartStatusArgs struct {
	Artifact HelmChartStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions HelmChartStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the last chart pulled.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatus)(nil)).Elem()
}

func (i HelmChartStatusArgs) ToHelmChartStatusOutput() HelmChartStatusOutput {
	return i.ToHelmChartStatusOutputWithContext(context.Background())
}

func (i HelmChartStatusArgs) ToHelmChartStatusOutputWithContext(ctx context.Context) HelmChartStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusOutput)
}

func (i HelmChartStatusArgs) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return i.ToHelmChartStatusPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusArgs) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusOutput).ToHelmChartStatusPtrOutputWithContext(ctx)
}

// HelmChartStatusPtrInput is an input type that accepts HelmChartStatusArgs, HelmChartStatusPtr and HelmChartStatusPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusPtrInput` via:
//
//	        HelmChartStatusArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusPtrInput interface {
	pulumi.Input

	ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput
	ToHelmChartStatusPtrOutputWithContext(context.Context) HelmChartStatusPtrOutput
}

type helmChartStatusPtrType HelmChartStatusArgs

func HelmChartStatusPtr(v *HelmChartStatusArgs) HelmChartStatusPtrInput {
	return (*helmChartStatusPtrType)(v)
}

func (*helmChartStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatus)(nil)).Elem()
}

func (i *helmChartStatusPtrType) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return i.ToHelmChartStatusPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusPtrType) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPtrOutput)
}

// HelmChartStatus defines the observed state of the HelmChart.
type HelmChartStatusOutput struct{ *pulumi.OutputState }

func (HelmChartStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatus)(nil)).Elem()
}

func (o HelmChartStatusOutput) ToHelmChartStatusOutput() HelmChartStatusOutput {
	return o
}

func (o HelmChartStatusOutput) ToHelmChartStatusOutputWithContext(ctx context.Context) HelmChartStatusOutput {
	return o
}

func (o HelmChartStatusOutput) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return o.ToHelmChartStatusPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusOutput) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatus) *HelmChartStatus {
		return &v
	}).(HelmChartStatusPtrOutput)
}

func (o HelmChartStatusOutput) Artifact() HelmChartStatusArtifactPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *HelmChartStatusArtifact { return v.Artifact }).(HelmChartStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusOutput) Conditions() HelmChartStatusConditionsArrayOutput {
	return o.ApplyT(func(v HelmChartStatus) []HelmChartStatusConditions { return v.Conditions }).(HelmChartStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmChartStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the last chart pulled.
func (o HelmChartStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatus)(nil)).Elem()
}

func (o HelmChartStatusPtrOutput) ToHelmChartStatusPtrOutput() HelmChartStatusPtrOutput {
	return o
}

func (o HelmChartStatusPtrOutput) ToHelmChartStatusPtrOutputWithContext(ctx context.Context) HelmChartStatusPtrOutput {
	return o
}

func (o HelmChartStatusPtrOutput) Elem() HelmChartStatusOutput {
	return o.ApplyT(func(v *HelmChartStatus) HelmChartStatus {
		if v != nil {
			return *v
		}
		var ret HelmChartStatus
		return ret
	}).(HelmChartStatusOutput)
}

func (o HelmChartStatusPtrOutput) Artifact() HelmChartStatusArtifactPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *HelmChartStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmChartStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusPtrOutput) Conditions() HelmChartStatusConditionsArrayOutput {
	return o.ApplyT(func(v *HelmChartStatus) []HelmChartStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmChartStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmChartStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the last chart pulled.
func (o HelmChartStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful chart sync.
type HelmChartStatusArtifact struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// HelmChartStatusArtifactInput is an input type that accepts HelmChartStatusArtifactArgs and HelmChartStatusArtifactOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactInput` via:
//
//	HelmChartStatusArtifactArgs{...}
type HelmChartStatusArtifactInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactOutput() HelmChartStatusArtifactOutput
	ToHelmChartStatusArtifactOutputWithContext(context.Context) HelmChartStatusArtifactOutput
}

// Artifact represents the output of the last successful chart sync.
type HelmChartStatusArtifactArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifact)(nil)).Elem()
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactOutput() HelmChartStatusArtifactOutput {
	return i.ToHelmChartStatusArtifactOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactOutputWithContext(ctx context.Context) HelmChartStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactOutput)
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return i.ToHelmChartStatusArtifactPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactArgs) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactOutput).ToHelmChartStatusArtifactPtrOutputWithContext(ctx)
}

// HelmChartStatusArtifactPtrInput is an input type that accepts HelmChartStatusArtifactArgs, HelmChartStatusArtifactPtr and HelmChartStatusArtifactPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactPtrInput` via:
//
//	        HelmChartStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusArtifactPtrInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput
	ToHelmChartStatusArtifactPtrOutputWithContext(context.Context) HelmChartStatusArtifactPtrOutput
}

type helmChartStatusArtifactPtrType HelmChartStatusArtifactArgs

func HelmChartStatusArtifactPtr(v *HelmChartStatusArtifactArgs) HelmChartStatusArtifactPtrInput {
	return (*helmChartStatusArtifactPtrType)(v)
}

func (*helmChartStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifact)(nil)).Elem()
}

func (i *helmChartStatusArtifactPtrType) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return i.ToHelmChartStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusArtifactPtrType) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPtrOutput)
}

// Artifact represents the output of the last successful chart sync.
type HelmChartStatusArtifactOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifact)(nil)).Elem()
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactOutput() HelmChartStatusArtifactOutput {
	return o
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactOutputWithContext(ctx context.Context) HelmChartStatusArtifactOutput {
	return o
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return o.ToHelmChartStatusArtifactPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusArtifactOutput) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatusArtifact) *HelmChartStatusArtifact {
		return &v
	}).(HelmChartStatusArtifactPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmChartStatusArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmChartStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmChartStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmChartStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmChartStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifact)(nil)).Elem()
}

func (o HelmChartStatusArtifactPtrOutput) ToHelmChartStatusArtifactPtrOutput() HelmChartStatusArtifactPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPtrOutput) ToHelmChartStatusArtifactPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPtrOutput) Elem() HelmChartStatusArtifactOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) HelmChartStatusArtifact {
		if v != nil {
			return *v
		}
		var ret HelmChartStatusArtifact
		return ret
	}).(HelmChartStatusArtifactOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmChartStatusArtifactPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmChartStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmChartStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmChartStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmChartStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful chart sync.
type HelmChartStatusArtifactPatch struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// HelmChartStatusArtifactPatchInput is an input type that accepts HelmChartStatusArtifactPatchArgs and HelmChartStatusArtifactPatchOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactPatchInput` via:
//
//	HelmChartStatusArtifactPatchArgs{...}
type HelmChartStatusArtifactPatchInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactPatchOutput() HelmChartStatusArtifactPatchOutput
	ToHelmChartStatusArtifactPatchOutputWithContext(context.Context) HelmChartStatusArtifactPatchOutput
}

// Artifact represents the output of the last successful chart sync.
type HelmChartStatusArtifactPatchArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchOutput() HelmChartStatusArtifactPatchOutput {
	return i.ToHelmChartStatusArtifactPatchOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPatchOutput)
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return i.ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusArtifactPatchArgs) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPatchOutput).ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx)
}

// HelmChartStatusArtifactPatchPtrInput is an input type that accepts HelmChartStatusArtifactPatchArgs, HelmChartStatusArtifactPatchPtr and HelmChartStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusArtifactPatchPtrInput` via:
//
//	        HelmChartStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput
	ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Context) HelmChartStatusArtifactPatchPtrOutput
}

type helmChartStatusArtifactPatchPtrType HelmChartStatusArtifactPatchArgs

func HelmChartStatusArtifactPatchPtr(v *HelmChartStatusArtifactPatchArgs) HelmChartStatusArtifactPatchPtrInput {
	return (*helmChartStatusArtifactPatchPtrType)(v)
}

func (*helmChartStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (i *helmChartStatusArtifactPatchPtrType) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return i.ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusArtifactPatchPtrType) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusArtifactPatchPtrOutput)
}

// Artifact represents the output of the last successful chart sync.
type HelmChartStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchOutput() HelmChartStatusArtifactPatchOutput {
	return o
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchOutput {
	return o
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return o.ToHelmChartStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusArtifactPatchOutput) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatusArtifactPatch) *HelmChartStatusArtifactPatch {
		return &v
	}).(HelmChartStatusArtifactPatchPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmChartStatusArtifactPatchOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmChartStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmChartStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmChartStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmChartStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusArtifactPatch)(nil)).Elem()
}

func (o HelmChartStatusArtifactPatchPtrOutput) ToHelmChartStatusArtifactPatchPtrOutput() HelmChartStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPatchPtrOutput) ToHelmChartStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmChartStatusArtifactPatchPtrOutput) Elem() HelmChartStatusArtifactPatchOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) HelmChartStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartStatusArtifactPatch
		return ret
	}).(HelmChartStatusArtifactPatchOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmChartStatusArtifactPatchPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmChartStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmChartStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmChartStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmChartStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmChartStatusConditionsInput is an input type that accepts HelmChartStatusConditionsArgs and HelmChartStatusConditionsOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsInput` via:
//
//	HelmChartStatusConditionsArgs{...}
type HelmChartStatusConditionsInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsOutput() HelmChartStatusConditionsOutput
	ToHelmChartStatusConditionsOutputWithContext(context.Context) HelmChartStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmChartStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditions)(nil)).Elem()
}

func (i HelmChartStatusConditionsArgs) ToHelmChartStatusConditionsOutput() HelmChartStatusConditionsOutput {
	return i.ToHelmChartStatusConditionsOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsArgs) ToHelmChartStatusConditionsOutputWithContext(ctx context.Context) HelmChartStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsOutput)
}

// HelmChartStatusConditionsArrayInput is an input type that accepts HelmChartStatusConditionsArray and HelmChartStatusConditionsArrayOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsArrayInput` via:
//
//	HelmChartStatusConditionsArray{ HelmChartStatusConditionsArgs{...} }
type HelmChartStatusConditionsArrayInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsArrayOutput() HelmChartStatusConditionsArrayOutput
	ToHelmChartStatusConditionsArrayOutputWithContext(context.Context) HelmChartStatusConditionsArrayOutput
}

type HelmChartStatusConditionsArray []HelmChartStatusConditionsInput

func (HelmChartStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditions)(nil)).Elem()
}

func (i HelmChartStatusConditionsArray) ToHelmChartStatusConditionsArrayOutput() HelmChartStatusConditionsArrayOutput {
	return i.ToHelmChartStatusConditionsArrayOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsArray) ToHelmChartStatusConditionsArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditions)(nil)).Elem()
}

func (o HelmChartStatusConditionsOutput) ToHelmChartStatusConditionsOutput() HelmChartStatusConditionsOutput {
	return o
}

func (o HelmChartStatusConditionsOutput) ToHelmChartStatusConditionsOutputWithContext(ctx context.Context) HelmChartStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmChartStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmChartStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmChartStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmChartStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmChartStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmChartStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmChartStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditions)(nil)).Elem()
}

func (o HelmChartStatusConditionsArrayOutput) ToHelmChartStatusConditionsArrayOutput() HelmChartStatusConditionsArrayOutput {
	return o
}

func (o HelmChartStatusConditionsArrayOutput) ToHelmChartStatusConditionsArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsArrayOutput {
	return o
}

func (o HelmChartStatusConditionsArrayOutput) Index(i pulumi.IntInput) HelmChartStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartStatusConditions {
		return vs[0].([]HelmChartStatusConditions)[vs[1].(int)]
	}).(HelmChartStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmChartStatusConditionsPatchInput is an input type that accepts HelmChartStatusConditionsPatchArgs and HelmChartStatusConditionsPatchOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsPatchInput` via:
//
//	HelmChartStatusConditionsPatchArgs{...}
type HelmChartStatusConditionsPatchInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsPatchOutput() HelmChartStatusConditionsPatchOutput
	ToHelmChartStatusConditionsPatchOutputWithContext(context.Context) HelmChartStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmChartStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (i HelmChartStatusConditionsPatchArgs) ToHelmChartStatusConditionsPatchOutput() HelmChartStatusConditionsPatchOutput {
	return i.ToHelmChartStatusConditionsPatchOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsPatchArgs) ToHelmChartStatusConditionsPatchOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsPatchOutput)
}

// HelmChartStatusConditionsPatchArrayInput is an input type that accepts HelmChartStatusConditionsPatchArray and HelmChartStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `HelmChartStatusConditionsPatchArrayInput` via:
//
//	HelmChartStatusConditionsPatchArray{ HelmChartStatusConditionsPatchArgs{...} }
type HelmChartStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToHelmChartStatusConditionsPatchArrayOutput() HelmChartStatusConditionsPatchArrayOutput
	ToHelmChartStatusConditionsPatchArrayOutputWithContext(context.Context) HelmChartStatusConditionsPatchArrayOutput
}

type HelmChartStatusConditionsPatchArray []HelmChartStatusConditionsPatchInput

func (HelmChartStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (i HelmChartStatusConditionsPatchArray) ToHelmChartStatusConditionsPatchArrayOutput() HelmChartStatusConditionsPatchArrayOutput {
	return i.ToHelmChartStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i HelmChartStatusConditionsPatchArray) ToHelmChartStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmChartStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (o HelmChartStatusConditionsPatchOutput) ToHelmChartStatusConditionsPatchOutput() HelmChartStatusConditionsPatchOutput {
	return o
}

func (o HelmChartStatusConditionsPatchOutput) ToHelmChartStatusConditionsPatchOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmChartStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmChartStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmChartStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmChartStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmChartStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmChartStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmChartStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmChartStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmChartStatusConditionsPatch)(nil)).Elem()
}

func (o HelmChartStatusConditionsPatchArrayOutput) ToHelmChartStatusConditionsPatchArrayOutput() HelmChartStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmChartStatusConditionsPatchArrayOutput) ToHelmChartStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmChartStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmChartStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) HelmChartStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmChartStatusConditionsPatch {
		return vs[0].([]HelmChartStatusConditionsPatch)[vs[1].(int)]
	}).(HelmChartStatusConditionsPatchOutput)
}

// HelmChartStatus defines the observed state of the HelmChart.
type HelmChartStatusPatch struct {
	Artifact *HelmChartStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions []HelmChartStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the last chart pulled.
	Url *string `pulumi:"url"`
}

// HelmChartStatusPatchInput is an input type that accepts HelmChartStatusPatchArgs and HelmChartStatusPatchOutput values.
// You can construct a concrete instance of `HelmChartStatusPatchInput` via:
//
//	HelmChartStatusPatchArgs{...}
type HelmChartStatusPatchInput interface {
	pulumi.Input

	ToHelmChartStatusPatchOutput() HelmChartStatusPatchOutput
	ToHelmChartStatusPatchOutputWithContext(context.Context) HelmChartStatusPatchOutput
}

// HelmChartStatus defines the observed state of the HelmChart.
type HelmChartStatusPatchArgs struct {
	Artifact HelmChartStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmChart.
	Conditions HelmChartStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the last chart pulled.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmChartStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusPatch)(nil)).Elem()
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchOutput() HelmChartStatusPatchOutput {
	return i.ToHelmChartStatusPatchOutputWithContext(context.Background())
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchOutputWithContext(ctx context.Context) HelmChartStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPatchOutput)
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return i.ToHelmChartStatusPatchPtrOutputWithContext(context.Background())
}

func (i HelmChartStatusPatchArgs) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPatchOutput).ToHelmChartStatusPatchPtrOutputWithContext(ctx)
}

// HelmChartStatusPatchPtrInput is an input type that accepts HelmChartStatusPatchArgs, HelmChartStatusPatchPtr and HelmChartStatusPatchPtrOutput values.
// You can construct a concrete instance of `HelmChartStatusPatchPtrInput` via:
//
//	        HelmChartStatusPatchArgs{...}
//
//	or:
//
//	        nil
type HelmChartStatusPatchPtrInput interface {
	pulumi.Input

	ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput
	ToHelmChartStatusPatchPtrOutputWithContext(context.Context) HelmChartStatusPatchPtrOutput
}

type helmChartStatusPatchPtrType HelmChartStatusPatchArgs

func HelmChartStatusPatchPtr(v *HelmChartStatusPatchArgs) HelmChartStatusPatchPtrInput {
	return (*helmChartStatusPatchPtrType)(v)
}

func (*helmChartStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusPatch)(nil)).Elem()
}

func (i *helmChartStatusPatchPtrType) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return i.ToHelmChartStatusPatchPtrOutputWithContext(context.Background())
}

func (i *helmChartStatusPatchPtrType) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartStatusPatchPtrOutput)
}

// HelmChartStatus defines the observed state of the HelmChart.
type HelmChartStatusPatchOutput struct{ *pulumi.OutputState }

func (HelmChartStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmChartStatusPatch)(nil)).Elem()
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchOutput() HelmChartStatusPatchOutput {
	return o
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchOutputWithContext(ctx context.Context) HelmChartStatusPatchOutput {
	return o
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return o.ToHelmChartStatusPatchPtrOutputWithContext(context.Background())
}

func (o HelmChartStatusPatchOutput) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmChartStatusPatch) *HelmChartStatusPatch {
		return &v
	}).(HelmChartStatusPatchPtrOutput)
}

func (o HelmChartStatusPatchOutput) Artifact() HelmChartStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *HelmChartStatusArtifactPatch { return v.Artifact }).(HelmChartStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusPatchOutput) Conditions() HelmChartStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) []HelmChartStatusConditionsPatch { return v.Conditions }).(HelmChartStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmChartStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the last chart pulled.
func (o HelmChartStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmChartStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmChartStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmChartStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartStatusPatch)(nil)).Elem()
}

func (o HelmChartStatusPatchPtrOutput) ToHelmChartStatusPatchPtrOutput() HelmChartStatusPatchPtrOutput {
	return o
}

func (o HelmChartStatusPatchPtrOutput) ToHelmChartStatusPatchPtrOutputWithContext(ctx context.Context) HelmChartStatusPatchPtrOutput {
	return o
}

func (o HelmChartStatusPatchPtrOutput) Elem() HelmChartStatusPatchOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) HelmChartStatusPatch {
		if v != nil {
			return *v
		}
		var ret HelmChartStatusPatch
		return ret
	}).(HelmChartStatusPatchOutput)
}

func (o HelmChartStatusPatchPtrOutput) Artifact() HelmChartStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *HelmChartStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmChartStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmChart.
func (o HelmChartStatusPatchPtrOutput) Conditions() HelmChartStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) []HelmChartStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmChartStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmChartStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmChartStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the last chart pulled.
func (o HelmChartStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta    `pulumi:"metadata"`
	Spec     *HelmRepositorySpec   `pulumi:"spec"`
	Status   *HelmRepositoryStatus `pulumi:"status"`
}

// HelmRepositoryTypeInput is an input type that accepts HelmRepositoryTypeArgs and HelmRepositoryTypeOutput values.
// You can construct a concrete instance of `HelmRepositoryTypeInput` via:
//
//	HelmRepositoryTypeArgs{...}
type HelmRepositoryTypeInput interface {
	pulumi.Input

	ToHelmRepositoryTypeOutput() HelmRepositoryTypeOutput
	ToHelmRepositoryTypeOutputWithContext(context.Context) HelmRepositoryTypeOutput
}

// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput    `pulumi:"metadata"`
	Spec     HelmRepositorySpecPtrInput   `pulumi:"spec"`
	Status   HelmRepositoryStatusPtrInput `pulumi:"status"`
}

func (HelmRepositoryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryType)(nil)).Elem()
}

func (i HelmRepositoryTypeArgs) ToHelmRepositoryTypeOutput() HelmRepositoryTypeOutput {
	return i.ToHelmRepositoryTypeOutputWithContext(context.Background())
}

func (i HelmRepositoryTypeArgs) ToHelmRepositoryTypeOutputWithContext(ctx context.Context) HelmRepositoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryTypeOutput)
}

// HelmRepositoryTypeArrayInput is an input type that accepts HelmRepositoryTypeArray and HelmRepositoryTypeArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryTypeArrayInput` via:
//
//	HelmRepositoryTypeArray{ HelmRepositoryTypeArgs{...} }
type HelmRepositoryTypeArrayInput interface {
	pulumi.Input

	ToHelmRepositoryTypeArrayOutput() HelmRepositoryTypeArrayOutput
	ToHelmRepositoryTypeArrayOutputWithContext(context.Context) HelmRepositoryTypeArrayOutput
}

type HelmRepositoryTypeArray []HelmRepositoryTypeInput

func (HelmRepositoryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryType)(nil)).Elem()
}

func (i HelmRepositoryTypeArray) ToHelmRepositoryTypeArrayOutput() HelmRepositoryTypeArrayOutput {
	return i.ToHelmRepositoryTypeArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryTypeArray) ToHelmRepositoryTypeArrayOutputWithContext(ctx context.Context) HelmRepositoryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryTypeArrayOutput)
}

// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryTypeOutput struct{ *pulumi.OutputState }

func (HelmRepositoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryType)(nil)).Elem()
}

func (o HelmRepositoryTypeOutput) ToHelmRepositoryTypeOutput() HelmRepositoryTypeOutput {
	return o
}

func (o HelmRepositoryTypeOutput) ToHelmRepositoryTypeOutputWithContext(ctx context.Context) HelmRepositoryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmRepositoryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HelmRepositoryTypeOutput) Spec() HelmRepositorySpecPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *HelmRepositorySpec { return v.Spec }).(HelmRepositorySpecPtrOutput)
}

func (o HelmRepositoryTypeOutput) Status() HelmRepositoryStatusPtrOutput {
	return o.ApplyT(func(v HelmRepositoryType) *HelmRepositoryStatus { return v.Status }).(HelmRepositoryStatusPtrOutput)
}

type HelmRepositoryTypeArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryType)(nil)).Elem()
}

func (o HelmRepositoryTypeArrayOutput) ToHelmRepositoryTypeArrayOutput() HelmRepositoryTypeArrayOutput {
	return o
}

func (o HelmRepositoryTypeArrayOutput) ToHelmRepositoryTypeArrayOutputWithContext(ctx context.Context) HelmRepositoryTypeArrayOutput {
	return o
}

func (o HelmRepositoryTypeArrayOutput) Index(i pulumi.IntInput) HelmRepositoryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositoryType {
		return vs[0].([]HelmRepositoryType)[vs[1].(int)]
	}).(HelmRepositoryTypeOutput)
}

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmRepositoryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HelmRepositoryListTypeInput is an input type that accepts HelmRepositoryListTypeArgs and HelmRepositoryListTypeOutput values.
// You can construct a concrete instance of `HelmRepositoryListTypeInput` via:
//
//	HelmRepositoryListTypeArgs{...}
type HelmRepositoryListTypeInput interface {
	pulumi.Input

	ToHelmRepositoryListTypeOutput() HelmRepositoryListTypeOutput
	ToHelmRepositoryListTypeOutputWithContext(context.Context) HelmRepositoryListTypeOutput
}

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmRepositoryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HelmRepositoryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryListType)(nil)).Elem()
}

func (i HelmRepositoryListTypeArgs) ToHelmRepositoryListTypeOutput() HelmRepositoryListTypeOutput {
	return i.ToHelmRepositoryListTypeOutputWithContext(context.Background())
}

func (i HelmRepositoryListTypeArgs) ToHelmRepositoryListTypeOutputWithContext(ctx context.Context) HelmRepositoryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryListTypeOutput)
}

// HelmRepositoryList is a list of HelmRepository
type HelmRepositoryListTypeOutput struct{ *pulumi.OutputState }

func (HelmRepositoryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryListType)(nil)).Elem()
}

func (o HelmRepositoryListTypeOutput) ToHelmRepositoryListTypeOutput() HelmRepositoryListTypeOutput {
	return o
}

func (o HelmRepositoryListTypeOutput) ToHelmRepositoryListTypeOutputWithContext(ctx context.Context) HelmRepositoryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of helmrepositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmRepositoryListTypeOutput) Items() HelmRepositoryTypeArrayOutput {
	return o.ApplyT(func(v HelmRepositoryListType) []HelmRepositoryType { return v.Items }).(HelmRepositoryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HelmRepositoryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch    `pulumi:"metadata"`
	Spec     *HelmRepositorySpecPatch   `pulumi:"spec"`
	Status   *HelmRepositoryStatusPatch `pulumi:"status"`
}

// HelmRepositoryPatchTypeInput is an input type that accepts HelmRepositoryPatchTypeArgs and HelmRepositoryPatchTypeOutput values.
// You can construct a concrete instance of `HelmRepositoryPatchTypeInput` via:
//
//	HelmRepositoryPatchTypeArgs{...}
type HelmRepositoryPatchTypeInput interface {
	pulumi.Input

	ToHelmRepositoryPatchTypeOutput() HelmRepositoryPatchTypeOutput
	ToHelmRepositoryPatchTypeOutputWithContext(context.Context) HelmRepositoryPatchTypeOutput
}

// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput    `pulumi:"metadata"`
	Spec     HelmRepositorySpecPatchPtrInput   `pulumi:"spec"`
	Status   HelmRepositoryStatusPatchPtrInput `pulumi:"status"`
}

func (HelmRepositoryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryPatchType)(nil)).Elem()
}

func (i HelmRepositoryPatchTypeArgs) ToHelmRepositoryPatchTypeOutput() HelmRepositoryPatchTypeOutput {
	return i.ToHelmRepositoryPatchTypeOutputWithContext(context.Background())
}

func (i HelmRepositoryPatchTypeArgs) ToHelmRepositoryPatchTypeOutputWithContext(ctx context.Context) HelmRepositoryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryPatchTypeOutput)
}

// HelmRepository is the Schema for the helmrepositories API
type HelmRepositoryPatchTypeOutput struct{ *pulumi.OutputState }

func (HelmRepositoryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryPatchType)(nil)).Elem()
}

func (o HelmRepositoryPatchTypeOutput) ToHelmRepositoryPatchTypeOutput() HelmRepositoryPatchTypeOutput {
	return o
}

func (o HelmRepositoryPatchTypeOutput) ToHelmRepositoryPatchTypeOutputWithContext(ctx context.Context) HelmRepositoryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmRepositoryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmRepositoryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmRepositoryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmRepositoryPatchTypeOutput) Spec() HelmRepositorySpecPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *HelmRepositorySpecPatch { return v.Spec }).(HelmRepositorySpecPatchPtrOutput)
}

func (o HelmRepositoryPatchTypeOutput) Status() HelmRepositoryStatusPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryPatchType) *HelmRepositoryStatusPatch { return v.Status }).(HelmRepositoryStatusPatchPtrOutput)
}

// HelmRepositorySpec defines the reference to a Helm repository.
type HelmRepositorySpec struct {
	AccessFrom *HelmRepositorySpecAccessFrom `pulumi:"accessFrom"`
	// The interval at which to check the upstream for updates.
	Interval *string `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed on to
	// a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the index
	// differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result in
	// credentials getting stolen in a MITM-attack.
	PassCredentials *bool                        `pulumi:"passCredentials"`
	SecretRef       *HelmRepositorySpecSecretRef `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout of index downloading, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// The Helm repository URL, a valid URL contains at least a protocol and host.
	Url *string `pulumi:"url"`
}

// HelmRepositorySpecInput is an input type that accepts HelmRepositorySpecArgs and HelmRepositorySpecOutput values.
// You can construct a concrete instance of `HelmRepositorySpecInput` via:
//
//	HelmRepositorySpecArgs{...}
type HelmRepositorySpecInput interface {
	pulumi.Input

	ToHelmRepositorySpecOutput() HelmRepositorySpecOutput
	ToHelmRepositorySpecOutputWithContext(context.Context) HelmRepositorySpecOutput
}

// HelmRepositorySpec defines the reference to a Helm repository.
type HelmRepositorySpecArgs struct {
	AccessFrom HelmRepositorySpecAccessFromPtrInput `pulumi:"accessFrom"`
	// The interval at which to check the upstream for updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed on to
	// a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the index
	// differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result in
	// credentials getting stolen in a MITM-attack.
	PassCredentials pulumi.BoolPtrInput                 `pulumi:"passCredentials"`
	SecretRef       HelmRepositorySpecSecretRefPtrInput `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout of index downloading, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// The Helm repository URL, a valid URL contains at least a protocol and host.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositorySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpec)(nil)).Elem()
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecOutput() HelmRepositorySpecOutput {
	return i.ToHelmRepositorySpecOutputWithContext(context.Background())
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecOutputWithContext(ctx context.Context) HelmRepositorySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecOutput)
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return i.ToHelmRepositorySpecPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecArgs) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecOutput).ToHelmRepositorySpecPtrOutputWithContext(ctx)
}

// HelmRepositorySpecPtrInput is an input type that accepts HelmRepositorySpecArgs, HelmRepositorySpecPtr and HelmRepositorySpecPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecPtrInput` via:
//
//	        HelmRepositorySpecArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput
	ToHelmRepositorySpecPtrOutputWithContext(context.Context) HelmRepositorySpecPtrOutput
}

type helmRepositorySpecPtrType HelmRepositorySpecArgs

func HelmRepositorySpecPtr(v *HelmRepositorySpecArgs) HelmRepositorySpecPtrInput {
	return (*helmRepositorySpecPtrType)(v)
}

func (*helmRepositorySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpec)(nil)).Elem()
}

func (i *helmRepositorySpecPtrType) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return i.ToHelmRepositorySpecPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecPtrType) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPtrOutput)
}

// HelmRepositorySpec defines the reference to a Helm repository.
type HelmRepositorySpecOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpec)(nil)).Elem()
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecOutput() HelmRepositorySpecOutput {
	return o
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecOutputWithContext(ctx context.Context) HelmRepositorySpecOutput {
	return o
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return o.ToHelmRepositorySpecPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecOutput) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpec) *HelmRepositorySpec {
		return &v
	}).(HelmRepositorySpecPtrOutput)
}

func (o HelmRepositorySpecOutput) AccessFrom() HelmRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *HelmRepositorySpecAccessFrom { return v.AccessFrom }).(HelmRepositorySpecAccessFromPtrOutput)
}

// The interval at which to check the upstream for updates.
func (o HelmRepositorySpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed on to
// a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the index
// differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result in
// credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *bool { return v.PassCredentials }).(pulumi.BoolPtrOutput)
}

func (o HelmRepositorySpecOutput) SecretRef() HelmRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *HelmRepositorySpecSecretRef { return v.SecretRef }).(HelmRepositorySpecSecretRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmRepositorySpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout of index downloading, defaults to 60s.
func (o HelmRepositorySpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// The Helm repository URL, a valid URL contains at least a protocol and host.
func (o HelmRepositorySpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpec)(nil)).Elem()
}

func (o HelmRepositorySpecPtrOutput) ToHelmRepositorySpecPtrOutput() HelmRepositorySpecPtrOutput {
	return o
}

func (o HelmRepositorySpecPtrOutput) ToHelmRepositorySpecPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPtrOutput {
	return o
}

func (o HelmRepositorySpecPtrOutput) Elem() HelmRepositorySpecOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) HelmRepositorySpec {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpec
		return ret
	}).(HelmRepositorySpecOutput)
}

func (o HelmRepositorySpecPtrOutput) AccessFrom() HelmRepositorySpecAccessFromPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *HelmRepositorySpecAccessFrom {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(HelmRepositorySpecAccessFromPtrOutput)
}

// The interval at which to check the upstream for updates.
func (o HelmRepositorySpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed on to
// a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the index
// differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result in
// credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecPtrOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.PassCredentials
	}).(pulumi.BoolPtrOutput)
}

func (o HelmRepositorySpecPtrOutput) SecretRef() HelmRepositorySpecSecretRefPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *HelmRepositorySpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmRepositorySpecSecretRefPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmRepositorySpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout of index downloading, defaults to 60s.
func (o HelmRepositorySpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The Helm repository URL, a valid URL contains at least a protocol and host.
func (o HelmRepositorySpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmRepositorySpecAccessFrom struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []HelmRepositorySpecAccessFromNamespaceSelectors `pulumi:"namespaceSelectors"`
}

// HelmRepositorySpecAccessFromInput is an input type that accepts HelmRepositorySpecAccessFromArgs and HelmRepositorySpecAccessFromOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromInput` via:
//
//	HelmRepositorySpecAccessFromArgs{...}
type HelmRepositorySpecAccessFromInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromOutput() HelmRepositorySpecAccessFromOutput
	ToHelmRepositorySpecAccessFromOutputWithContext(context.Context) HelmRepositorySpecAccessFromOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmRepositorySpecAccessFromArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput `pulumi:"namespaceSelectors"`
}

func (HelmRepositorySpecAccessFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromOutput() HelmRepositorySpecAccessFromOutput {
	return i.ToHelmRepositorySpecAccessFromOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromOutput)
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromArgs) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromOutput).ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx)
}

// HelmRepositorySpecAccessFromPtrInput is an input type that accepts HelmRepositorySpecAccessFromArgs, HelmRepositorySpecAccessFromPtr and HelmRepositorySpecAccessFromPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromPtrInput` via:
//
//	        HelmRepositorySpecAccessFromArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecAccessFromPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput
	ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Context) HelmRepositorySpecAccessFromPtrOutput
}

type helmRepositorySpecAccessFromPtrType HelmRepositorySpecAccessFromArgs

func HelmRepositorySpecAccessFromPtr(v *HelmRepositorySpecAccessFromArgs) HelmRepositorySpecAccessFromPtrInput {
	return (*helmRepositorySpecAccessFromPtrType)(v)
}

func (*helmRepositorySpecAccessFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (i *helmRepositorySpecAccessFromPtrType) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecAccessFromPtrType) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmRepositorySpecAccessFromOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromOutput() HelmRepositorySpecAccessFromOutput {
	return o
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromOutput {
	return o
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return o.ToHelmRepositorySpecAccessFromPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecAccessFromOutput) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecAccessFrom) *HelmRepositorySpecAccessFrom {
		return &v
	}).(HelmRepositorySpecAccessFromPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFrom) []HelmRepositorySpecAccessFromNamespaceSelectors {
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

type HelmRepositorySpecAccessFromPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFrom)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromPtrOutput) ToHelmRepositorySpecAccessFromPtrOutput() HelmRepositorySpecAccessFromPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPtrOutput) ToHelmRepositorySpecAccessFromPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPtrOutput) Elem() HelmRepositorySpecAccessFromOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFrom) HelmRepositorySpecAccessFrom {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecAccessFrom
		return ret
	}).(HelmRepositorySpecAccessFromOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromPtrOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFrom) []HelmRepositorySpecAccessFromNamespaceSelectors {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectors struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HelmRepositorySpecAccessFromNamespaceSelectorsInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsArgs and HelmRepositorySpecAccessFromNamespaceSelectorsOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsArgs{...}
type HelmRepositorySpecAccessFromNamespaceSelectorsInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsOutput() HelmRepositorySpecAccessFromNamespaceSelectorsOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HelmRepositorySpecAccessFromNamespaceSelectorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutput() HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsArray and HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsArray{ HelmRepositorySpecAccessFromNamespaceSelectorsArgs{...} }
type HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput
}

type HelmRepositorySpecAccessFromNamespaceSelectorsArray []HelmRepositorySpecAccessFromNamespaceSelectorsInput

func (HelmRepositorySpecAccessFromNamespaceSelectorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutput() HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HelmRepositorySpecAccessFromNamespaceSelectorsOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFromNamespaceSelectors) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectors)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput) Index(i pulumi.IntInput) HelmRepositorySpecAccessFromNamespaceSelectorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositorySpecAccessFromNamespaceSelectors {
		return vs[0].([]HelmRepositorySpecAccessFromNamespaceSelectors)[vs[1].(int)]
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsPatch struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs and HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...}
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs struct {
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput is an input type that accepts HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray and HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput` via:
//
//	HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray{ HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs{...} }
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
	ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput
}

type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray []HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return i.ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// NamespaceSelector selects the namespaces to which this ACL applies.
// An empty map of MatchLabels matches all namespaces in a cluster.
type HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return o
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFromNamespaceSelectorsPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositorySpecAccessFromNamespaceSelectorsPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) ToHelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o
}

func (o HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput) Index(i pulumi.IntInput) HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositorySpecAccessFromNamespaceSelectorsPatch {
		return vs[0].([]HelmRepositorySpecAccessFromNamespaceSelectorsPatch)[vs[1].(int)]
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmRepositorySpecAccessFromPatch struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors []HelmRepositorySpecAccessFromNamespaceSelectorsPatch `pulumi:"namespaceSelectors"`
}

// HelmRepositorySpecAccessFromPatchInput is an input type that accepts HelmRepositorySpecAccessFromPatchArgs and HelmRepositorySpecAccessFromPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromPatchInput` via:
//
//	HelmRepositorySpecAccessFromPatchArgs{...}
type HelmRepositorySpecAccessFromPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromPatchOutput() HelmRepositorySpecAccessFromPatchOutput
	ToHelmRepositorySpecAccessFromPatchOutputWithContext(context.Context) HelmRepositorySpecAccessFromPatchOutput
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmRepositorySpecAccessFromPatchArgs struct {
	// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
	// Items in this list are evaluated using a logical OR operation.
	NamespaceSelectors HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput `pulumi:"namespaceSelectors"`
}

func (HelmRepositorySpecAccessFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchOutput() HelmRepositorySpecAccessFromPatchOutput {
	return i.ToHelmRepositorySpecAccessFromPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPatchOutput)
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecAccessFromPatchArgs) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPatchOutput).ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecAccessFromPatchPtrInput is an input type that accepts HelmRepositorySpecAccessFromPatchArgs, HelmRepositorySpecAccessFromPatchPtr and HelmRepositorySpecAccessFromPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecAccessFromPatchPtrInput` via:
//
//	        HelmRepositorySpecAccessFromPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecAccessFromPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput
	ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Context) HelmRepositorySpecAccessFromPatchPtrOutput
}

type helmRepositorySpecAccessFromPatchPtrType HelmRepositorySpecAccessFromPatchArgs

func HelmRepositorySpecAccessFromPatchPtr(v *HelmRepositorySpecAccessFromPatchArgs) HelmRepositorySpecAccessFromPatchPtrInput {
	return (*helmRepositorySpecAccessFromPatchPtrType)(v)
}

func (*helmRepositorySpecAccessFromPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (i *helmRepositorySpecAccessFromPatchPtrType) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return i.ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecAccessFromPatchPtrType) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

// AccessFrom defines an Access Control List for allowing cross-namespace references to this object.
type HelmRepositorySpecAccessFromPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchOutput() HelmRepositorySpecAccessFromPatchOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecAccessFromPatchOutput) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecAccessFromPatch) *HelmRepositorySpecAccessFromPatch {
		return &v
	}).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromPatchOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v HelmRepositorySpecAccessFromPatch) []HelmRepositorySpecAccessFromNamespaceSelectorsPatch {
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

type HelmRepositorySpecAccessFromPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecAccessFromPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecAccessFromPatch)(nil)).Elem()
}

func (o HelmRepositorySpecAccessFromPatchPtrOutput) ToHelmRepositorySpecAccessFromPatchPtrOutput() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchPtrOutput) ToHelmRepositorySpecAccessFromPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecAccessFromPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecAccessFromPatchPtrOutput) Elem() HelmRepositorySpecAccessFromPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFromPatch) HelmRepositorySpecAccessFromPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecAccessFromPatch
		return ret
	}).(HelmRepositorySpecAccessFromPatchOutput)
}

// NamespaceSelectors is the list of namespace selectors to which this ACL applies.
// Items in this list are evaluated using a logical OR operation.
func (o HelmRepositorySpecAccessFromPatchPtrOutput) NamespaceSelectors() HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput {
	return o.ApplyT(func(v *HelmRepositorySpecAccessFromPatch) []HelmRepositorySpecAccessFromNamespaceSelectorsPatch {
		if v == nil {
			return nil
		}
		return v.NamespaceSelectors
	}).(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput)
}

// HelmRepositorySpec defines the reference to a Helm repository.
type HelmRepositorySpecPatch struct {
	AccessFrom *HelmRepositorySpecAccessFromPatch `pulumi:"accessFrom"`
	// The interval at which to check the upstream for updates.
	Interval *string `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed on to
	// a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the index
	// differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result in
	// credentials getting stolen in a MITM-attack.
	PassCredentials *bool                             `pulumi:"passCredentials"`
	SecretRef       *HelmRepositorySpecSecretRefPatch `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend *bool `pulumi:"suspend"`
	// The timeout of index downloading, defaults to 60s.
	Timeout *string `pulumi:"timeout"`
	// The Helm repository URL, a valid URL contains at least a protocol and host.
	Url *string `pulumi:"url"`
}

// HelmRepositorySpecPatchInput is an input type that accepts HelmRepositorySpecPatchArgs and HelmRepositorySpecPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecPatchInput` via:
//
//	HelmRepositorySpecPatchArgs{...}
type HelmRepositorySpecPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecPatchOutput() HelmRepositorySpecPatchOutput
	ToHelmRepositorySpecPatchOutputWithContext(context.Context) HelmRepositorySpecPatchOutput
}

// HelmRepositorySpec defines the reference to a Helm repository.
type HelmRepositorySpecPatchArgs struct {
	AccessFrom HelmRepositorySpecAccessFromPatchPtrInput `pulumi:"accessFrom"`
	// The interval at which to check the upstream for updates.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// PassCredentials allows the credentials from the SecretRef to be passed on to
	// a host that does not match the host as defined in URL.
	// This may be required if the host of the advertised chart URLs in the index
	// differ from the defined URL.
	// Enabling this should be done with caution, as it can potentially result in
	// credentials getting stolen in a MITM-attack.
	PassCredentials pulumi.BoolPtrInput                      `pulumi:"passCredentials"`
	SecretRef       HelmRepositorySpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	// This flag tells the controller to suspend the reconciliation of this source.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// The timeout of index downloading, defaults to 60s.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// The Helm repository URL, a valid URL contains at least a protocol and host.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositorySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecPatch)(nil)).Elem()
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchOutput() HelmRepositorySpecPatchOutput {
	return i.ToHelmRepositorySpecPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchOutputWithContext(ctx context.Context) HelmRepositorySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPatchOutput)
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return i.ToHelmRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecPatchArgs) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPatchOutput).ToHelmRepositorySpecPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecPatchPtrInput is an input type that accepts HelmRepositorySpecPatchArgs, HelmRepositorySpecPatchPtr and HelmRepositorySpecPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecPatchPtrInput` via:
//
//	        HelmRepositorySpecPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput
	ToHelmRepositorySpecPatchPtrOutputWithContext(context.Context) HelmRepositorySpecPatchPtrOutput
}

type helmRepositorySpecPatchPtrType HelmRepositorySpecPatchArgs

func HelmRepositorySpecPatchPtr(v *HelmRepositorySpecPatchArgs) HelmRepositorySpecPatchPtrInput {
	return (*helmRepositorySpecPatchPtrType)(v)
}

func (*helmRepositorySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecPatch)(nil)).Elem()
}

func (i *helmRepositorySpecPatchPtrType) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return i.ToHelmRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecPatchPtrType) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecPatchPtrOutput)
}

// HelmRepositorySpec defines the reference to a Helm repository.
type HelmRepositorySpecPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecPatch)(nil)).Elem()
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchOutput() HelmRepositorySpecPatchOutput {
	return o
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchOutputWithContext(ctx context.Context) HelmRepositorySpecPatchOutput {
	return o
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return o.ToHelmRepositorySpecPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecPatchOutput) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecPatch) *HelmRepositorySpecPatch {
		return &v
	}).(HelmRepositorySpecPatchPtrOutput)
}

func (o HelmRepositorySpecPatchOutput) AccessFrom() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *HelmRepositorySpecAccessFromPatch { return v.AccessFrom }).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

// The interval at which to check the upstream for updates.
func (o HelmRepositorySpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed on to
// a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the index
// differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result in
// credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecPatchOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *bool { return v.PassCredentials }).(pulumi.BoolPtrOutput)
}

func (o HelmRepositorySpecPatchOutput) SecretRef() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *HelmRepositorySpecSecretRefPatch { return v.SecretRef }).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmRepositorySpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// The timeout of index downloading, defaults to 60s.
func (o HelmRepositorySpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// The Helm repository URL, a valid URL contains at least a protocol and host.
func (o HelmRepositorySpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecPatch)(nil)).Elem()
}

func (o HelmRepositorySpecPatchPtrOutput) ToHelmRepositorySpecPatchPtrOutput() HelmRepositorySpecPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecPatchPtrOutput) ToHelmRepositorySpecPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecPatchPtrOutput) Elem() HelmRepositorySpecPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) HelmRepositorySpecPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecPatch
		return ret
	}).(HelmRepositorySpecPatchOutput)
}

func (o HelmRepositorySpecPatchPtrOutput) AccessFrom() HelmRepositorySpecAccessFromPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *HelmRepositorySpecAccessFromPatch {
		if v == nil {
			return nil
		}
		return v.AccessFrom
	}).(HelmRepositorySpecAccessFromPatchPtrOutput)
}

// The interval at which to check the upstream for updates.
func (o HelmRepositorySpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// PassCredentials allows the credentials from the SecretRef to be passed on to
// a host that does not match the host as defined in URL.
// This may be required if the host of the advertised chart URLs in the index
// differ from the defined URL.
// Enabling this should be done with caution, as it can potentially result in
// credentials getting stolen in a MITM-attack.
func (o HelmRepositorySpecPatchPtrOutput) PassCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PassCredentials
	}).(pulumi.BoolPtrOutput)
}

func (o HelmRepositorySpecPatchPtrOutput) SecretRef() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *HelmRepositorySpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// This flag tells the controller to suspend the reconciliation of this source.
func (o HelmRepositorySpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The timeout of index downloading, defaults to 60s.
func (o HelmRepositorySpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The Helm repository URL, a valid URL contains at least a protocol and host.
func (o HelmRepositorySpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The name of the secret containing authentication credentials for the Helm
// repository.
// For HTTP/S basic auth the secret must contain username and
// password fields.
// For TLS the secret must contain a certFile and keyFile, and/or
// caFile fields.
type HelmRepositorySpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmRepositorySpecSecretRefInput is an input type that accepts HelmRepositorySpecSecretRefArgs and HelmRepositorySpecSecretRefOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefInput` via:
//
//	HelmRepositorySpecSecretRefArgs{...}
type HelmRepositorySpecSecretRefInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefOutput() HelmRepositorySpecSecretRefOutput
	ToHelmRepositorySpecSecretRefOutputWithContext(context.Context) HelmRepositorySpecSecretRefOutput
}

// The name of the secret containing authentication credentials for the Helm
// repository.
// For HTTP/S basic auth the secret must contain username and
// password fields.
// For TLS the secret must contain a certFile and keyFile, and/or
// caFile fields.
type HelmRepositorySpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmRepositorySpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefOutput() HelmRepositorySpecSecretRefOutput {
	return i.ToHelmRepositorySpecSecretRefOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefOutput)
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefArgs) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefOutput).ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx)
}

// HelmRepositorySpecSecretRefPtrInput is an input type that accepts HelmRepositorySpecSecretRefArgs, HelmRepositorySpecSecretRefPtr and HelmRepositorySpecSecretRefPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefPtrInput` via:
//
//	        HelmRepositorySpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecSecretRefPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput
	ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Context) HelmRepositorySpecSecretRefPtrOutput
}

type helmRepositorySpecSecretRefPtrType HelmRepositorySpecSecretRefArgs

func HelmRepositorySpecSecretRefPtr(v *HelmRepositorySpecSecretRefArgs) HelmRepositorySpecSecretRefPtrInput {
	return (*helmRepositorySpecSecretRefPtrType)(v)
}

func (*helmRepositorySpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (i *helmRepositorySpecSecretRefPtrType) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecSecretRefPtrType) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPtrOutput)
}

// The name of the secret containing authentication credentials for the Helm
// repository.
// For HTTP/S basic auth the secret must contain username and
// password fields.
// For TLS the secret must contain a certFile and keyFile, and/or
// caFile fields.
type HelmRepositorySpecSecretRefOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefOutput() HelmRepositorySpecSecretRefOutput {
	return o
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefOutput {
	return o
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return o.ToHelmRepositorySpecSecretRefPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecSecretRefOutput) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecSecretRef) *HelmRepositorySpecSecretRef {
		return &v
	}).(HelmRepositorySpecSecretRefPtrOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRef)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefPtrOutput) ToHelmRepositorySpecSecretRefPtrOutput() HelmRepositorySpecSecretRefPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPtrOutput) ToHelmRepositorySpecSecretRefPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPtrOutput) Elem() HelmRepositorySpecSecretRefOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRef) HelmRepositorySpecSecretRef {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecSecretRef
		return ret
	}).(HelmRepositorySpecSecretRefOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The name of the secret containing authentication credentials for the Helm
// repository.
// For HTTP/S basic auth the secret must contain username and
// password fields.
// For TLS the secret must contain a certFile and keyFile, and/or
// caFile fields.
type HelmRepositorySpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmRepositorySpecSecretRefPatchInput is an input type that accepts HelmRepositorySpecSecretRefPatchArgs and HelmRepositorySpecSecretRefPatchOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefPatchInput` via:
//
//	HelmRepositorySpecSecretRefPatchArgs{...}
type HelmRepositorySpecSecretRefPatchInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefPatchOutput() HelmRepositorySpecSecretRefPatchOutput
	ToHelmRepositorySpecSecretRefPatchOutputWithContext(context.Context) HelmRepositorySpecSecretRefPatchOutput
}

// The name of the secret containing authentication credentials for the Helm
// repository.
// For HTTP/S basic auth the secret must contain username and
// password fields.
// For TLS the secret must contain a certFile and keyFile, and/or
// caFile fields.
type HelmRepositorySpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmRepositorySpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchOutput() HelmRepositorySpecSecretRefPatchOutput {
	return i.ToHelmRepositorySpecSecretRefPatchOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPatchOutput)
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositorySpecSecretRefPatchArgs) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPatchOutput).ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx)
}

// HelmRepositorySpecSecretRefPatchPtrInput is an input type that accepts HelmRepositorySpecSecretRefPatchArgs, HelmRepositorySpecSecretRefPatchPtr and HelmRepositorySpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositorySpecSecretRefPatchPtrInput` via:
//
//	        HelmRepositorySpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositorySpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput
	ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Context) HelmRepositorySpecSecretRefPatchPtrOutput
}

type helmRepositorySpecSecretRefPatchPtrType HelmRepositorySpecSecretRefPatchArgs

func HelmRepositorySpecSecretRefPatchPtr(v *HelmRepositorySpecSecretRefPatchArgs) HelmRepositorySpecSecretRefPatchPtrInput {
	return (*helmRepositorySpecSecretRefPatchPtrType)(v)
}

func (*helmRepositorySpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (i *helmRepositorySpecSecretRefPatchPtrType) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return i.ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositorySpecSecretRefPatchPtrType) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// The name of the secret containing authentication credentials for the Helm
// repository.
// For HTTP/S basic auth the secret must contain username and
// password fields.
// For TLS the secret must contain a certFile and keyFile, and/or
// caFile fields.
type HelmRepositorySpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchOutput() HelmRepositorySpecSecretRefPatchOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositorySpecSecretRefPatchOutput) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositorySpecSecretRefPatch) *HelmRepositorySpecSecretRefPatch {
		return &v
	}).(HelmRepositorySpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositorySpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmRepositorySpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositorySpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositorySpecSecretRefPatch)(nil)).Elem()
}

func (o HelmRepositorySpecSecretRefPatchPtrOutput) ToHelmRepositorySpecSecretRefPatchPtrOutput() HelmRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchPtrOutput) ToHelmRepositorySpecSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmRepositorySpecSecretRefPatchPtrOutput {
	return o
}

func (o HelmRepositorySpecSecretRefPatchPtrOutput) Elem() HelmRepositorySpecSecretRefPatchOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRefPatch) HelmRepositorySpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositorySpecSecretRefPatch
		return ret
	}).(HelmRepositorySpecSecretRefPatchOutput)
}

// Name of the referent.
func (o HelmRepositorySpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositorySpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
type HelmRepositoryStatus struct {
	Artifact *HelmRepositoryStatusArtifact `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions []HelmRepositoryStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the last index fetched.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusInput is an input type that accepts HelmRepositoryStatusArgs and HelmRepositoryStatusOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusInput` via:
//
//	HelmRepositoryStatusArgs{...}
type HelmRepositoryStatusInput interface {
	pulumi.Input

	ToHelmRepositoryStatusOutput() HelmRepositoryStatusOutput
	ToHelmRepositoryStatusOutputWithContext(context.Context) HelmRepositoryStatusOutput
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
type HelmRepositoryStatusArgs struct {
	Artifact HelmRepositoryStatusArtifactPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions HelmRepositoryStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the last index fetched.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatus)(nil)).Elem()
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusOutput() HelmRepositoryStatusOutput {
	return i.ToHelmRepositoryStatusOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusOutputWithContext(ctx context.Context) HelmRepositoryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusOutput)
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return i.ToHelmRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArgs) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusOutput).ToHelmRepositoryStatusPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusPtrInput is an input type that accepts HelmRepositoryStatusArgs, HelmRepositoryStatusPtr and HelmRepositoryStatusPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusPtrInput` via:
//
//	        HelmRepositoryStatusArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput
	ToHelmRepositoryStatusPtrOutputWithContext(context.Context) HelmRepositoryStatusPtrOutput
}

type helmRepositoryStatusPtrType HelmRepositoryStatusArgs

func HelmRepositoryStatusPtr(v *HelmRepositoryStatusArgs) HelmRepositoryStatusPtrInput {
	return (*helmRepositoryStatusPtrType)(v)
}

func (*helmRepositoryStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatus)(nil)).Elem()
}

func (i *helmRepositoryStatusPtrType) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return i.ToHelmRepositoryStatusPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusPtrType) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPtrOutput)
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
type HelmRepositoryStatusOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatus)(nil)).Elem()
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusOutput() HelmRepositoryStatusOutput {
	return o
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusOutputWithContext(ctx context.Context) HelmRepositoryStatusOutput {
	return o
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return o.ToHelmRepositoryStatusPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusOutput) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatus) *HelmRepositoryStatus {
		return &v
	}).(HelmRepositoryStatusPtrOutput)
}

func (o HelmRepositoryStatusOutput) Artifact() HelmRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *HelmRepositoryStatusArtifact { return v.Artifact }).(HelmRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusOutput) Conditions() HelmRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) []HelmRepositoryStatusConditions { return v.Conditions }).(HelmRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmRepositoryStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the last index fetched.
func (o HelmRepositoryStatusOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatus) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatus)(nil)).Elem()
}

func (o HelmRepositoryStatusPtrOutput) ToHelmRepositoryStatusPtrOutput() HelmRepositoryStatusPtrOutput {
	return o
}

func (o HelmRepositoryStatusPtrOutput) ToHelmRepositoryStatusPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPtrOutput {
	return o
}

func (o HelmRepositoryStatusPtrOutput) Elem() HelmRepositoryStatusOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) HelmRepositoryStatus {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatus
		return ret
	}).(HelmRepositoryStatusOutput)
}

func (o HelmRepositoryStatusPtrOutput) Artifact() HelmRepositoryStatusArtifactPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *HelmRepositoryStatusArtifact {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmRepositoryStatusArtifactPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusPtrOutput) Conditions() HelmRepositoryStatusConditionsArrayOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) []HelmRepositoryStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmRepositoryStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmRepositoryStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the last index fetched.
func (o HelmRepositoryStatusPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatus) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type HelmRepositoryStatusArtifact struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusArtifactInput is an input type that accepts HelmRepositoryStatusArtifactArgs and HelmRepositoryStatusArtifactOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactInput` via:
//
//	HelmRepositoryStatusArtifactArgs{...}
type HelmRepositoryStatusArtifactInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactOutput() HelmRepositoryStatusArtifactOutput
	ToHelmRepositoryStatusArtifactOutputWithContext(context.Context) HelmRepositoryStatusArtifactOutput
}

// Artifact represents the output of the last successful repository sync.
type HelmRepositoryStatusArtifactArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactOutput() HelmRepositoryStatusArtifactOutput {
	return i.ToHelmRepositoryStatusArtifactOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactOutput)
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactArgs) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactOutput).ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusArtifactPtrInput is an input type that accepts HelmRepositoryStatusArtifactArgs, HelmRepositoryStatusArtifactPtr and HelmRepositoryStatusArtifactPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactPtrInput` via:
//
//	        HelmRepositoryStatusArtifactArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusArtifactPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput
	ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Context) HelmRepositoryStatusArtifactPtrOutput
}

type helmRepositoryStatusArtifactPtrType HelmRepositoryStatusArtifactArgs

func HelmRepositoryStatusArtifactPtr(v *HelmRepositoryStatusArtifactArgs) HelmRepositoryStatusArtifactPtrInput {
	return (*helmRepositoryStatusArtifactPtrType)(v)
}

func (*helmRepositoryStatusArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (i *helmRepositoryStatusArtifactPtrType) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusArtifactPtrType) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type HelmRepositoryStatusArtifactOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactOutput() HelmRepositoryStatusArtifactOutput {
	return o
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactOutput {
	return o
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return o.ToHelmRepositoryStatusArtifactPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusArtifactOutput) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatusArtifact) *HelmRepositoryStatusArtifact {
		return &v
	}).(HelmRepositoryStatusArtifactPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmRepositoryStatusArtifactOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmRepositoryStatusArtifactOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmRepositoryStatusArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmRepositoryStatusArtifactOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmRepositoryStatusArtifactOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifact) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusArtifactPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifact)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactPtrOutput) ToHelmRepositoryStatusArtifactPtrOutput() HelmRepositoryStatusArtifactPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPtrOutput) ToHelmRepositoryStatusArtifactPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPtrOutput) Elem() HelmRepositoryStatusArtifactOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) HelmRepositoryStatusArtifact {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatusArtifact
		return ret
	}).(HelmRepositoryStatusArtifactOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmRepositoryStatusArtifactPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmRepositoryStatusArtifactPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmRepositoryStatusArtifactPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmRepositoryStatusArtifactPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmRepositoryStatusArtifactPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifact) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type HelmRepositoryStatusArtifactPatch struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum *string `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path *string `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision *string `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusArtifactPatchInput is an input type that accepts HelmRepositoryStatusArtifactPatchArgs and HelmRepositoryStatusArtifactPatchOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactPatchInput` via:
//
//	HelmRepositoryStatusArtifactPatchArgs{...}
type HelmRepositoryStatusArtifactPatchInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactPatchOutput() HelmRepositoryStatusArtifactPatchOutput
	ToHelmRepositoryStatusArtifactPatchOutputWithContext(context.Context) HelmRepositoryStatusArtifactPatchOutput
}

// Artifact represents the output of the last successful repository sync.
type HelmRepositoryStatusArtifactPatchArgs struct {
	// Checksum is the SHA256 checksum of the artifact.
	Checksum pulumi.StringPtrInput `pulumi:"checksum"`
	// LastUpdateTime is the timestamp corresponding to the last update of this
	// artifact.
	LastUpdateTime pulumi.StringPtrInput `pulumi:"lastUpdateTime"`
	// Path is the relative file path of this artifact.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Revision is a human readable identifier traceable in the origin source
	// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
	// chart version, etc.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// URL is the HTTP address of this artifact.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusArtifactPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchOutput() HelmRepositoryStatusArtifactPatchOutput {
	return i.ToHelmRepositoryStatusArtifactPatchOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPatchOutput)
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusArtifactPatchArgs) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPatchOutput).ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusArtifactPatchPtrInput is an input type that accepts HelmRepositoryStatusArtifactPatchArgs, HelmRepositoryStatusArtifactPatchPtr and HelmRepositoryStatusArtifactPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusArtifactPatchPtrInput` via:
//
//	        HelmRepositoryStatusArtifactPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusArtifactPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput
	ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Context) HelmRepositoryStatusArtifactPatchPtrOutput
}

type helmRepositoryStatusArtifactPatchPtrType HelmRepositoryStatusArtifactPatchArgs

func HelmRepositoryStatusArtifactPatchPtr(v *HelmRepositoryStatusArtifactPatchArgs) HelmRepositoryStatusArtifactPatchPtrInput {
	return (*helmRepositoryStatusArtifactPatchPtrType)(v)
}

func (*helmRepositoryStatusArtifactPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (i *helmRepositoryStatusArtifactPatchPtrType) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return i.ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusArtifactPatchPtrType) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Artifact represents the output of the last successful repository sync.
type HelmRepositoryStatusArtifactPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchOutput() HelmRepositoryStatusArtifactPatchOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusArtifactPatchOutput) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatusArtifactPatch) *HelmRepositoryStatusArtifactPatch {
		return &v
	}).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmRepositoryStatusArtifactPatchOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Checksum }).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmRepositoryStatusArtifactPatchOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.LastUpdateTime }).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmRepositoryStatusArtifactPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmRepositoryStatusArtifactPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmRepositoryStatusArtifactPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusArtifactPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusArtifactPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusArtifactPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusArtifactPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusArtifactPatchPtrOutput) ToHelmRepositoryStatusArtifactPatchPtrOutput() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchPtrOutput) ToHelmRepositoryStatusArtifactPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusArtifactPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusArtifactPatchPtrOutput) Elem() HelmRepositoryStatusArtifactPatchOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) HelmRepositoryStatusArtifactPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatusArtifactPatch
		return ret
	}).(HelmRepositoryStatusArtifactPatchOutput)
}

// Checksum is the SHA256 checksum of the artifact.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Checksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Checksum
	}).(pulumi.StringPtrOutput)
}

// LastUpdateTime is the timestamp corresponding to the last update of this
// artifact.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) LastUpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdateTime
	}).(pulumi.StringPtrOutput)
}

// Path is the relative file path of this artifact.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Revision is a human readable identifier traceable in the origin source
// system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm
// chart version, etc.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// URL is the HTTP address of this artifact.
func (o HelmRepositoryStatusArtifactPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusArtifactPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmRepositoryStatusConditionsInput is an input type that accepts HelmRepositoryStatusConditionsArgs and HelmRepositoryStatusConditionsOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsInput` via:
//
//	HelmRepositoryStatusConditionsArgs{...}
type HelmRepositoryStatusConditionsInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsOutput() HelmRepositoryStatusConditionsOutput
	ToHelmRepositoryStatusConditionsOutputWithContext(context.Context) HelmRepositoryStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmRepositoryStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditions)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsArgs) ToHelmRepositoryStatusConditionsOutput() HelmRepositoryStatusConditionsOutput {
	return i.ToHelmRepositoryStatusConditionsOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsArgs) ToHelmRepositoryStatusConditionsOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsOutput)
}

// HelmRepositoryStatusConditionsArrayInput is an input type that accepts HelmRepositoryStatusConditionsArray and HelmRepositoryStatusConditionsArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsArrayInput` via:
//
//	HelmRepositoryStatusConditionsArray{ HelmRepositoryStatusConditionsArgs{...} }
type HelmRepositoryStatusConditionsArrayInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsArrayOutput() HelmRepositoryStatusConditionsArrayOutput
	ToHelmRepositoryStatusConditionsArrayOutputWithContext(context.Context) HelmRepositoryStatusConditionsArrayOutput
}

type HelmRepositoryStatusConditionsArray []HelmRepositoryStatusConditionsInput

func (HelmRepositoryStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditions)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsArray) ToHelmRepositoryStatusConditionsArrayOutput() HelmRepositoryStatusConditionsArrayOutput {
	return i.ToHelmRepositoryStatusConditionsArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsArray) ToHelmRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditions)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsOutput) ToHelmRepositoryStatusConditionsOutput() HelmRepositoryStatusConditionsOutput {
	return o
}

func (o HelmRepositoryStatusConditionsOutput) ToHelmRepositoryStatusConditionsOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmRepositoryStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmRepositoryStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmRepositoryStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmRepositoryStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmRepositoryStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmRepositoryStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditions)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsArrayOutput) ToHelmRepositoryStatusConditionsArrayOutput() HelmRepositoryStatusConditionsArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsArrayOutput) ToHelmRepositoryStatusConditionsArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsArrayOutput) Index(i pulumi.IntInput) HelmRepositoryStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositoryStatusConditions {
		return vs[0].([]HelmRepositoryStatusConditions)[vs[1].(int)]
	}).(HelmRepositoryStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmRepositoryStatusConditionsPatchInput is an input type that accepts HelmRepositoryStatusConditionsPatchArgs and HelmRepositoryStatusConditionsPatchOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsPatchInput` via:
//
//	HelmRepositoryStatusConditionsPatchArgs{...}
type HelmRepositoryStatusConditionsPatchInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsPatchOutput() HelmRepositoryStatusConditionsPatchOutput
	ToHelmRepositoryStatusConditionsPatchOutputWithContext(context.Context) HelmRepositoryStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmRepositoryStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsPatchArgs) ToHelmRepositoryStatusConditionsPatchOutput() HelmRepositoryStatusConditionsPatchOutput {
	return i.ToHelmRepositoryStatusConditionsPatchOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsPatchArgs) ToHelmRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsPatchOutput)
}

// HelmRepositoryStatusConditionsPatchArrayInput is an input type that accepts HelmRepositoryStatusConditionsPatchArray and HelmRepositoryStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusConditionsPatchArrayInput` via:
//
//	HelmRepositoryStatusConditionsPatchArray{ HelmRepositoryStatusConditionsPatchArgs{...} }
type HelmRepositoryStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToHelmRepositoryStatusConditionsPatchArrayOutput() HelmRepositoryStatusConditionsPatchArrayOutput
	ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(context.Context) HelmRepositoryStatusConditionsPatchArrayOutput
}

type HelmRepositoryStatusConditionsPatchArray []HelmRepositoryStatusConditionsPatchInput

func (HelmRepositoryStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusConditionsPatchArray) ToHelmRepositoryStatusConditionsPatchArrayOutput() HelmRepositoryStatusConditionsPatchArrayOutput {
	return i.ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusConditionsPatchArray) ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmRepositoryStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsPatchOutput) ToHelmRepositoryStatusConditionsPatchOutput() HelmRepositoryStatusConditionsPatchOutput {
	return o
}

func (o HelmRepositoryStatusConditionsPatchOutput) ToHelmRepositoryStatusConditionsPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmRepositoryStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmRepositoryStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmRepositoryStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmRepositoryStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmRepositoryStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmRepositoryStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmRepositoryStatusConditionsPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusConditionsPatchArrayOutput) ToHelmRepositoryStatusConditionsPatchArrayOutput() HelmRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsPatchArrayOutput) ToHelmRepositoryStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmRepositoryStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmRepositoryStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) HelmRepositoryStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmRepositoryStatusConditionsPatch {
		return vs[0].([]HelmRepositoryStatusConditionsPatch)[vs[1].(int)]
	}).(HelmRepositoryStatusConditionsPatchOutput)
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
type HelmRepositoryStatusPatch struct {
	Artifact *HelmRepositoryStatusArtifactPatch `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions []HelmRepositoryStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// URL is the download link for the last index fetched.
	Url *string `pulumi:"url"`
}

// HelmRepositoryStatusPatchInput is an input type that accepts HelmRepositoryStatusPatchArgs and HelmRepositoryStatusPatchOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusPatchInput` via:
//
//	HelmRepositoryStatusPatchArgs{...}
type HelmRepositoryStatusPatchInput interface {
	pulumi.Input

	ToHelmRepositoryStatusPatchOutput() HelmRepositoryStatusPatchOutput
	ToHelmRepositoryStatusPatchOutputWithContext(context.Context) HelmRepositoryStatusPatchOutput
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
type HelmRepositoryStatusPatchArgs struct {
	Artifact HelmRepositoryStatusArtifactPatchPtrInput `pulumi:"artifact"`
	// Conditions holds the conditions for the HelmRepository.
	Conditions HelmRepositoryStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// URL is the download link for the last index fetched.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HelmRepositoryStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusPatch)(nil)).Elem()
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchOutput() HelmRepositoryStatusPatchOutput {
	return i.ToHelmRepositoryStatusPatchOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPatchOutput)
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return i.ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i HelmRepositoryStatusPatchArgs) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPatchOutput).ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx)
}

// HelmRepositoryStatusPatchPtrInput is an input type that accepts HelmRepositoryStatusPatchArgs, HelmRepositoryStatusPatchPtr and HelmRepositoryStatusPatchPtrOutput values.
// You can construct a concrete instance of `HelmRepositoryStatusPatchPtrInput` via:
//
//	        HelmRepositoryStatusPatchArgs{...}
//
//	or:
//
//	        nil
type HelmRepositoryStatusPatchPtrInput interface {
	pulumi.Input

	ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput
	ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Context) HelmRepositoryStatusPatchPtrOutput
}

type helmRepositoryStatusPatchPtrType HelmRepositoryStatusPatchArgs

func HelmRepositoryStatusPatchPtr(v *HelmRepositoryStatusPatchArgs) HelmRepositoryStatusPatchPtrInput {
	return (*helmRepositoryStatusPatchPtrType)(v)
}

func (*helmRepositoryStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusPatch)(nil)).Elem()
}

func (i *helmRepositoryStatusPatchPtrType) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return i.ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (i *helmRepositoryStatusPatchPtrType) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmRepositoryStatusPatchPtrOutput)
}

// HelmRepositoryStatus defines the observed state of the HelmRepository.
type HelmRepositoryStatusPatchOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmRepositoryStatusPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchOutput() HelmRepositoryStatusPatchOutput {
	return o
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchOutput {
	return o
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return o.ToHelmRepositoryStatusPatchPtrOutputWithContext(context.Background())
}

func (o HelmRepositoryStatusPatchOutput) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmRepositoryStatusPatch) *HelmRepositoryStatusPatch {
		return &v
	}).(HelmRepositoryStatusPatchPtrOutput)
}

func (o HelmRepositoryStatusPatchOutput) Artifact() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *HelmRepositoryStatusArtifactPatch { return v.Artifact }).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusPatchOutput) Conditions() HelmRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) []HelmRepositoryStatusConditionsPatch { return v.Conditions }).(HelmRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmRepositoryStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// URL is the download link for the last index fetched.
func (o HelmRepositoryStatusPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmRepositoryStatusPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HelmRepositoryStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmRepositoryStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRepositoryStatusPatch)(nil)).Elem()
}

func (o HelmRepositoryStatusPatchPtrOutput) ToHelmRepositoryStatusPatchPtrOutput() HelmRepositoryStatusPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusPatchPtrOutput) ToHelmRepositoryStatusPatchPtrOutputWithContext(ctx context.Context) HelmRepositoryStatusPatchPtrOutput {
	return o
}

func (o HelmRepositoryStatusPatchPtrOutput) Elem() HelmRepositoryStatusPatchOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) HelmRepositoryStatusPatch {
		if v != nil {
			return *v
		}
		var ret HelmRepositoryStatusPatch
		return ret
	}).(HelmRepositoryStatusPatchOutput)
}

func (o HelmRepositoryStatusPatchPtrOutput) Artifact() HelmRepositoryStatusArtifactPatchPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *HelmRepositoryStatusArtifactPatch {
		if v == nil {
			return nil
		}
		return v.Artifact
	}).(HelmRepositoryStatusArtifactPatchPtrOutput)
}

// Conditions holds the conditions for the HelmRepository.
func (o HelmRepositoryStatusPatchPtrOutput) Conditions() HelmRepositoryStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) []HelmRepositoryStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmRepositoryStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmRepositoryStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmRepositoryStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// URL is the download link for the last index fetched.
func (o HelmRepositoryStatusPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmRepositoryStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTypeInput)(nil)).Elem(), BucketTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketTypeArrayInput)(nil)).Elem(), BucketTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketListTypeInput)(nil)).Elem(), BucketListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPatchTypeInput)(nil)).Elem(), BucketPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecInput)(nil)).Elem(), BucketSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecPtrInput)(nil)).Elem(), BucketSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromInput)(nil)).Elem(), BucketSpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromPtrInput)(nil)).Elem(), BucketSpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectorsInput)(nil)).Elem(), BucketSpecAccessFromNamespaceSelectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectorsArrayInput)(nil)).Elem(), BucketSpecAccessFromNamespaceSelectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectorsPatchInput)(nil)).Elem(), BucketSpecAccessFromNamespaceSelectorsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromNamespaceSelectorsPatchArrayInput)(nil)).Elem(), BucketSpecAccessFromNamespaceSelectorsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromPatchInput)(nil)).Elem(), BucketSpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecAccessFromPatchPtrInput)(nil)).Elem(), BucketSpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecPatchInput)(nil)).Elem(), BucketSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecPatchPtrInput)(nil)).Elem(), BucketSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefInput)(nil)).Elem(), BucketSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefPtrInput)(nil)).Elem(), BucketSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefPatchInput)(nil)).Elem(), BucketSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketSpecSecretRefPatchPtrInput)(nil)).Elem(), BucketSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusInput)(nil)).Elem(), BucketStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusPtrInput)(nil)).Elem(), BucketStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactInput)(nil)).Elem(), BucketStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactPtrInput)(nil)).Elem(), BucketStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactPatchInput)(nil)).Elem(), BucketStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusArtifactPatchPtrInput)(nil)).Elem(), BucketStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsInput)(nil)).Elem(), BucketStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsArrayInput)(nil)).Elem(), BucketStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsPatchInput)(nil)).Elem(), BucketStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusConditionsPatchArrayInput)(nil)).Elem(), BucketStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusPatchInput)(nil)).Elem(), BucketStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketStatusPatchPtrInput)(nil)).Elem(), BucketStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryTypeInput)(nil)).Elem(), GitRepositoryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryTypeArrayInput)(nil)).Elem(), GitRepositoryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryListTypeInput)(nil)).Elem(), GitRepositoryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryPatchTypeInput)(nil)).Elem(), GitRepositoryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecInput)(nil)).Elem(), GitRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecPtrInput)(nil)).Elem(), GitRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromInput)(nil)).Elem(), GitRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromPtrInput)(nil)).Elem(), GitRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectorsInput)(nil)).Elem(), GitRepositorySpecAccessFromNamespaceSelectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectorsArrayInput)(nil)).Elem(), GitRepositorySpecAccessFromNamespaceSelectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectorsPatchInput)(nil)).Elem(), GitRepositorySpecAccessFromNamespaceSelectorsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput)(nil)).Elem(), GitRepositorySpecAccessFromNamespaceSelectorsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromPatchInput)(nil)).Elem(), GitRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecAccessFromPatchPtrInput)(nil)).Elem(), GitRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeInput)(nil)).Elem(), GitRepositorySpecIncludeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeArrayInput)(nil)).Elem(), GitRepositorySpecIncludeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludePatchInput)(nil)).Elem(), GitRepositorySpecIncludePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludePatchArrayInput)(nil)).Elem(), GitRepositorySpecIncludePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPtrInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatchInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecIncludeRepositoryPatchPtrInput)(nil)).Elem(), GitRepositorySpecIncludeRepositoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecPatchInput)(nil)).Elem(), GitRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecPatchPtrInput)(nil)).Elem(), GitRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefInput)(nil)).Elem(), GitRepositorySpecRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefPtrInput)(nil)).Elem(), GitRepositorySpecRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefPatchInput)(nil)).Elem(), GitRepositorySpecRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefInput)(nil)).Elem(), GitRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefPtrInput)(nil)).Elem(), GitRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefPatchInput)(nil)).Elem(), GitRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecSecretRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyInput)(nil)).Elem(), GitRepositorySpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyPtrInput)(nil)).Elem(), GitRepositorySpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyPatchInput)(nil)).Elem(), GitRepositorySpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifyPatchPtrInput)(nil)).Elem(), GitRepositorySpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefPtrInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatchInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositorySpecVerifySecretRefPatchPtrInput)(nil)).Elem(), GitRepositorySpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusInput)(nil)).Elem(), GitRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusPtrInput)(nil)).Elem(), GitRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactInput)(nil)).Elem(), GitRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactPtrInput)(nil)).Elem(), GitRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactPatchInput)(nil)).Elem(), GitRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusArtifactPatchPtrInput)(nil)).Elem(), GitRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsInput)(nil)).Elem(), GitRepositoryStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsArrayInput)(nil)).Elem(), GitRepositoryStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsPatchInput)(nil)).Elem(), GitRepositoryStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusConditionsPatchArrayInput)(nil)).Elem(), GitRepositoryStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsArrayInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatchInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusIncludedArtifactsPatchArrayInput)(nil)).Elem(), GitRepositoryStatusIncludedArtifactsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusPatchInput)(nil)).Elem(), GitRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepositoryStatusPatchPtrInput)(nil)).Elem(), GitRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartTypeInput)(nil)).Elem(), HelmChartTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartTypeArrayInput)(nil)).Elem(), HelmChartTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartListTypeInput)(nil)).Elem(), HelmChartListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartPatchTypeInput)(nil)).Elem(), HelmChartPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecInput)(nil)).Elem(), HelmChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecPtrInput)(nil)).Elem(), HelmChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromInput)(nil)).Elem(), HelmChartSpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromPtrInput)(nil)).Elem(), HelmChartSpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectorsInput)(nil)).Elem(), HelmChartSpecAccessFromNamespaceSelectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectorsArrayInput)(nil)).Elem(), HelmChartSpecAccessFromNamespaceSelectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectorsPatchInput)(nil)).Elem(), HelmChartSpecAccessFromNamespaceSelectorsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromNamespaceSelectorsPatchArrayInput)(nil)).Elem(), HelmChartSpecAccessFromNamespaceSelectorsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromPatchInput)(nil)).Elem(), HelmChartSpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecAccessFromPatchPtrInput)(nil)).Elem(), HelmChartSpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecPatchInput)(nil)).Elem(), HelmChartSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecPatchPtrInput)(nil)).Elem(), HelmChartSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefInput)(nil)).Elem(), HelmChartSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefPtrInput)(nil)).Elem(), HelmChartSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefPatchInput)(nil)).Elem(), HelmChartSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartSpecSourceRefPatchPtrInput)(nil)).Elem(), HelmChartSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusInput)(nil)).Elem(), HelmChartStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusPtrInput)(nil)).Elem(), HelmChartStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactInput)(nil)).Elem(), HelmChartStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactPtrInput)(nil)).Elem(), HelmChartStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactPatchInput)(nil)).Elem(), HelmChartStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusArtifactPatchPtrInput)(nil)).Elem(), HelmChartStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsInput)(nil)).Elem(), HelmChartStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsArrayInput)(nil)).Elem(), HelmChartStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsPatchInput)(nil)).Elem(), HelmChartStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusConditionsPatchArrayInput)(nil)).Elem(), HelmChartStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusPatchInput)(nil)).Elem(), HelmChartStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartStatusPatchPtrInput)(nil)).Elem(), HelmChartStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryTypeInput)(nil)).Elem(), HelmRepositoryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryTypeArrayInput)(nil)).Elem(), HelmRepositoryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryListTypeInput)(nil)).Elem(), HelmRepositoryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryPatchTypeInput)(nil)).Elem(), HelmRepositoryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecInput)(nil)).Elem(), HelmRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecPtrInput)(nil)).Elem(), HelmRepositorySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromInput)(nil)).Elem(), HelmRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromPtrInput)(nil)).Elem(), HelmRepositorySpecAccessFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsArrayInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatchInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayInput)(nil)).Elem(), HelmRepositorySpecAccessFromNamespaceSelectorsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromPatchInput)(nil)).Elem(), HelmRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecAccessFromPatchPtrInput)(nil)).Elem(), HelmRepositorySpecAccessFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecPatchInput)(nil)).Elem(), HelmRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecPatchPtrInput)(nil)).Elem(), HelmRepositorySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefInput)(nil)).Elem(), HelmRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefPtrInput)(nil)).Elem(), HelmRepositorySpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefPatchInput)(nil)).Elem(), HelmRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositorySpecSecretRefPatchPtrInput)(nil)).Elem(), HelmRepositorySpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusInput)(nil)).Elem(), HelmRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusPtrInput)(nil)).Elem(), HelmRepositoryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactInput)(nil)).Elem(), HelmRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactPtrInput)(nil)).Elem(), HelmRepositoryStatusArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactPatchInput)(nil)).Elem(), HelmRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusArtifactPatchPtrInput)(nil)).Elem(), HelmRepositoryStatusArtifactPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsInput)(nil)).Elem(), HelmRepositoryStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsArrayInput)(nil)).Elem(), HelmRepositoryStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsPatchInput)(nil)).Elem(), HelmRepositoryStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusConditionsPatchArrayInput)(nil)).Elem(), HelmRepositoryStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusPatchInput)(nil)).Elem(), HelmRepositoryStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmRepositoryStatusPatchPtrInput)(nil)).Elem(), HelmRepositoryStatusPatchArgs{})
	pulumi.RegisterOutputType(BucketTypeOutput{})
	pulumi.RegisterOutputType(BucketTypeArrayOutput{})
	pulumi.RegisterOutputType(BucketListTypeOutput{})
	pulumi.RegisterOutputType(BucketPatchTypeOutput{})
	pulumi.RegisterOutputType(BucketSpecOutput{})
	pulumi.RegisterOutputType(BucketSpecPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromNamespaceSelectorsOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromNamespaceSelectorsArrayOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromNamespaceSelectorsPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromNamespaceSelectorsPatchArrayOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecAccessFromPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(BucketSpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusOutput{})
	pulumi.RegisterOutputType(BucketStatusPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(BucketStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(BucketStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(BucketStatusPatchOutput{})
	pulumi.RegisterOutputType(BucketStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryTypeOutput{})
	pulumi.RegisterOutputType(GitRepositoryTypeArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryListTypeOutput{})
	pulumi.RegisterOutputType(GitRepositoryPatchTypeOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromNamespaceSelectorsOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromNamespaceSelectorsArrayOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromNamespaceSelectorsPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecAccessFromPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeArrayOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludePatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludePatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecIncludeRepositoryPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifyPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefPtrOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefPatchOutput{})
	pulumi.RegisterOutputType(GitRepositorySpecVerifySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusIncludedArtifactsPatchArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusPatchOutput{})
	pulumi.RegisterOutputType(GitRepositoryStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartTypeOutput{})
	pulumi.RegisterOutputType(HelmChartTypeArrayOutput{})
	pulumi.RegisterOutputType(HelmChartListTypeOutput{})
	pulumi.RegisterOutputType(HelmChartPatchTypeOutput{})
	pulumi.RegisterOutputType(HelmChartSpecOutput{})
	pulumi.RegisterOutputType(HelmChartSpecPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromNamespaceSelectorsOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromNamespaceSelectorsArrayOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromNamespaceSelectorsPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromNamespaceSelectorsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecAccessFromPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefPtrOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefPatchOutput{})
	pulumi.RegisterOutputType(HelmChartSpecSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusOutput{})
	pulumi.RegisterOutputType(HelmChartStatusPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(HelmChartStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(HelmChartStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmChartStatusPatchOutput{})
	pulumi.RegisterOutputType(HelmChartStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryTypeOutput{})
	pulumi.RegisterOutputType(HelmRepositoryTypeArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryListTypeOutput{})
	pulumi.RegisterOutputType(HelmRepositoryPatchTypeOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromNamespaceSelectorsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecAccessFromPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositorySpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusArtifactPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusPatchOutput{})
	pulumi.RegisterOutputType(HelmRepositoryStatusPatchPtrOutput{})
}
