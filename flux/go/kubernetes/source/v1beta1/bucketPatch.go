// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Bucket is the Schema for the buckets API
type BucketPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     BucketSpecPatchPtrOutput        `pulumi:"spec"`
	Status   BucketStatusPatchPtrOutput      `pulumi:"status"`
}

// NewBucketPatch registers a new resource with the given unique name, arguments, and options.
func NewBucketPatch(ctx *pulumi.Context,
	name string, args *BucketPatchArgs, opts ...pulumi.ResourceOption) (*BucketPatch, error) {
	if args == nil {
		args = &BucketPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("Bucket")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1:BucketPatch"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta2:BucketPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BucketPatch
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:BucketPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketPatch gets an existing BucketPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketPatchState, opts ...pulumi.ResourceOption) (*BucketPatch, error) {
	var resource BucketPatch
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:BucketPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketPatch resources.
type bucketPatchState struct {
}

type BucketPatchState struct {
}

func (BucketPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketPatchState)(nil)).Elem()
}

type bucketPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *BucketSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a BucketPatch resource.
type BucketPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     BucketSpecPatchPtrInput
}

func (BucketPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketPatchArgs)(nil)).Elem()
}

type BucketPatchInput interface {
	pulumi.Input

	ToBucketPatchOutput() BucketPatchOutput
	ToBucketPatchOutputWithContext(ctx context.Context) BucketPatchOutput
}

func (*BucketPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketPatch)(nil)).Elem()
}

func (i *BucketPatch) ToBucketPatchOutput() BucketPatchOutput {
	return i.ToBucketPatchOutputWithContext(context.Background())
}

func (i *BucketPatch) ToBucketPatchOutputWithContext(ctx context.Context) BucketPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPatchOutput)
}

// BucketPatchArrayInput is an input type that accepts BucketPatchArray and BucketPatchArrayOutput values.
// You can construct a concrete instance of `BucketPatchArrayInput` via:
//
//	BucketPatchArray{ BucketPatchArgs{...} }
type BucketPatchArrayInput interface {
	pulumi.Input

	ToBucketPatchArrayOutput() BucketPatchArrayOutput
	ToBucketPatchArrayOutputWithContext(context.Context) BucketPatchArrayOutput
}

type BucketPatchArray []BucketPatchInput

func (BucketPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketPatch)(nil)).Elem()
}

func (i BucketPatchArray) ToBucketPatchArrayOutput() BucketPatchArrayOutput {
	return i.ToBucketPatchArrayOutputWithContext(context.Background())
}

func (i BucketPatchArray) ToBucketPatchArrayOutputWithContext(ctx context.Context) BucketPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPatchArrayOutput)
}

// BucketPatchMapInput is an input type that accepts BucketPatchMap and BucketPatchMapOutput values.
// You can construct a concrete instance of `BucketPatchMapInput` via:
//
//	BucketPatchMap{ "key": BucketPatchArgs{...} }
type BucketPatchMapInput interface {
	pulumi.Input

	ToBucketPatchMapOutput() BucketPatchMapOutput
	ToBucketPatchMapOutputWithContext(context.Context) BucketPatchMapOutput
}

type BucketPatchMap map[string]BucketPatchInput

func (BucketPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketPatch)(nil)).Elem()
}

func (i BucketPatchMap) ToBucketPatchMapOutput() BucketPatchMapOutput {
	return i.ToBucketPatchMapOutputWithContext(context.Background())
}

func (i BucketPatchMap) ToBucketPatchMapOutputWithContext(ctx context.Context) BucketPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketPatchMapOutput)
}

type BucketPatchOutput struct{ *pulumi.OutputState }

func (BucketPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketPatch)(nil)).Elem()
}

func (o BucketPatchOutput) ToBucketPatchOutput() BucketPatchOutput {
	return o
}

func (o BucketPatchOutput) ToBucketPatchOutputWithContext(ctx context.Context) BucketPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BucketPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BucketPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BucketPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *BucketPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o BucketPatchOutput) Spec() BucketSpecPatchPtrOutput {
	return o.ApplyT(func(v *BucketPatch) BucketSpecPatchPtrOutput { return v.Spec }).(BucketSpecPatchPtrOutput)
}

func (o BucketPatchOutput) Status() BucketStatusPatchPtrOutput {
	return o.ApplyT(func(v *BucketPatch) BucketStatusPatchPtrOutput { return v.Status }).(BucketStatusPatchPtrOutput)
}

type BucketPatchArrayOutput struct{ *pulumi.OutputState }

func (BucketPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketPatch)(nil)).Elem()
}

func (o BucketPatchArrayOutput) ToBucketPatchArrayOutput() BucketPatchArrayOutput {
	return o
}

func (o BucketPatchArrayOutput) ToBucketPatchArrayOutputWithContext(ctx context.Context) BucketPatchArrayOutput {
	return o
}

func (o BucketPatchArrayOutput) Index(i pulumi.IntInput) BucketPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketPatch {
		return vs[0].([]*BucketPatch)[vs[1].(int)]
	}).(BucketPatchOutput)
}

type BucketPatchMapOutput struct{ *pulumi.OutputState }

func (BucketPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketPatch)(nil)).Elem()
}

func (o BucketPatchMapOutput) ToBucketPatchMapOutput() BucketPatchMapOutput {
	return o
}

func (o BucketPatchMapOutput) ToBucketPatchMapOutputWithContext(ctx context.Context) BucketPatchMapOutput {
	return o
}

func (o BucketPatchMapOutput) MapIndex(k pulumi.StringInput) BucketPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketPatch {
		return vs[0].(map[string]*BucketPatch)[vs[1].(string)]
	}).(BucketPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPatchInput)(nil)).Elem(), &BucketPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPatchArrayInput)(nil)).Elem(), BucketPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketPatchMapInput)(nil)).Elem(), BucketPatchMap{})
	pulumi.RegisterOutputType(BucketPatchOutput{})
	pulumi.RegisterOutputType(BucketPatchArrayOutput{})
	pulumi.RegisterOutputType(BucketPatchMapOutput{})
}
