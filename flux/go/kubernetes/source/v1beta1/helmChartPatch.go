// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// HelmChart is the Schema for the helmcharts API
type HelmChartPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     HelmChartSpecPatchPtrOutput     `pulumi:"spec"`
	Status   HelmChartStatusPatchPtrOutput   `pulumi:"status"`
}

// NewHelmChartPatch registers a new resource with the given unique name, arguments, and options.
func NewHelmChartPatch(ctx *pulumi.Context,
	name string, args *HelmChartPatchArgs, opts ...pulumi.ResourceOption) (*HelmChartPatch, error) {
	if args == nil {
		args = &HelmChartPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("source.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("HelmChart")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1:HelmChartPatch"),
		},
		{
			Type: pulumi.String("kubernetes:source.toolkit.fluxcd.io/v1beta2:HelmChartPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmChartPatch
	err := ctx.RegisterResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmChartPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmChartPatch gets an existing HelmChartPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmChartPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmChartPatchState, opts ...pulumi.ResourceOption) (*HelmChartPatch, error) {
	var resource HelmChartPatch
	err := ctx.ReadResource("kubernetes:source.toolkit.fluxcd.io/v1beta1:HelmChartPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmChartPatch resources.
type helmChartPatchState struct {
}

type HelmChartPatchState struct {
}

func (HelmChartPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmChartPatchState)(nil)).Elem()
}

type helmChartPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *HelmChartSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a HelmChartPatch resource.
type HelmChartPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     HelmChartSpecPatchPtrInput
}

func (HelmChartPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmChartPatchArgs)(nil)).Elem()
}

type HelmChartPatchInput interface {
	pulumi.Input

	ToHelmChartPatchOutput() HelmChartPatchOutput
	ToHelmChartPatchOutputWithContext(ctx context.Context) HelmChartPatchOutput
}

func (*HelmChartPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartPatch)(nil)).Elem()
}

func (i *HelmChartPatch) ToHelmChartPatchOutput() HelmChartPatchOutput {
	return i.ToHelmChartPatchOutputWithContext(context.Background())
}

func (i *HelmChartPatch) ToHelmChartPatchOutputWithContext(ctx context.Context) HelmChartPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartPatchOutput)
}

// HelmChartPatchArrayInput is an input type that accepts HelmChartPatchArray and HelmChartPatchArrayOutput values.
// You can construct a concrete instance of `HelmChartPatchArrayInput` via:
//
//	HelmChartPatchArray{ HelmChartPatchArgs{...} }
type HelmChartPatchArrayInput interface {
	pulumi.Input

	ToHelmChartPatchArrayOutput() HelmChartPatchArrayOutput
	ToHelmChartPatchArrayOutputWithContext(context.Context) HelmChartPatchArrayOutput
}

type HelmChartPatchArray []HelmChartPatchInput

func (HelmChartPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmChartPatch)(nil)).Elem()
}

func (i HelmChartPatchArray) ToHelmChartPatchArrayOutput() HelmChartPatchArrayOutput {
	return i.ToHelmChartPatchArrayOutputWithContext(context.Background())
}

func (i HelmChartPatchArray) ToHelmChartPatchArrayOutputWithContext(ctx context.Context) HelmChartPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartPatchArrayOutput)
}

// HelmChartPatchMapInput is an input type that accepts HelmChartPatchMap and HelmChartPatchMapOutput values.
// You can construct a concrete instance of `HelmChartPatchMapInput` via:
//
//	HelmChartPatchMap{ "key": HelmChartPatchArgs{...} }
type HelmChartPatchMapInput interface {
	pulumi.Input

	ToHelmChartPatchMapOutput() HelmChartPatchMapOutput
	ToHelmChartPatchMapOutputWithContext(context.Context) HelmChartPatchMapOutput
}

type HelmChartPatchMap map[string]HelmChartPatchInput

func (HelmChartPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmChartPatch)(nil)).Elem()
}

func (i HelmChartPatchMap) ToHelmChartPatchMapOutput() HelmChartPatchMapOutput {
	return i.ToHelmChartPatchMapOutputWithContext(context.Background())
}

func (i HelmChartPatchMap) ToHelmChartPatchMapOutputWithContext(ctx context.Context) HelmChartPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmChartPatchMapOutput)
}

type HelmChartPatchOutput struct{ *pulumi.OutputState }

func (HelmChartPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmChartPatch)(nil)).Elem()
}

func (o HelmChartPatchOutput) ToHelmChartPatchOutput() HelmChartPatchOutput {
	return o
}

func (o HelmChartPatchOutput) ToHelmChartPatchOutputWithContext(ctx context.Context) HelmChartPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmChartPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmChartPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmChartPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmChartPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmChartPatchOutput) Spec() HelmChartSpecPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartPatch) HelmChartSpecPatchPtrOutput { return v.Spec }).(HelmChartSpecPatchPtrOutput)
}

func (o HelmChartPatchOutput) Status() HelmChartStatusPatchPtrOutput {
	return o.ApplyT(func(v *HelmChartPatch) HelmChartStatusPatchPtrOutput { return v.Status }).(HelmChartStatusPatchPtrOutput)
}

type HelmChartPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmChartPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmChartPatch)(nil)).Elem()
}

func (o HelmChartPatchArrayOutput) ToHelmChartPatchArrayOutput() HelmChartPatchArrayOutput {
	return o
}

func (o HelmChartPatchArrayOutput) ToHelmChartPatchArrayOutputWithContext(ctx context.Context) HelmChartPatchArrayOutput {
	return o
}

func (o HelmChartPatchArrayOutput) Index(i pulumi.IntInput) HelmChartPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmChartPatch {
		return vs[0].([]*HelmChartPatch)[vs[1].(int)]
	}).(HelmChartPatchOutput)
}

type HelmChartPatchMapOutput struct{ *pulumi.OutputState }

func (HelmChartPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmChartPatch)(nil)).Elem()
}

func (o HelmChartPatchMapOutput) ToHelmChartPatchMapOutput() HelmChartPatchMapOutput {
	return o
}

func (o HelmChartPatchMapOutput) ToHelmChartPatchMapOutputWithContext(ctx context.Context) HelmChartPatchMapOutput {
	return o
}

func (o HelmChartPatchMapOutput) MapIndex(k pulumi.StringInput) HelmChartPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmChartPatch {
		return vs[0].(map[string]*HelmChartPatch)[vs[1].(string)]
	}).(HelmChartPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartPatchInput)(nil)).Elem(), &HelmChartPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartPatchArrayInput)(nil)).Elem(), HelmChartPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmChartPatchMapInput)(nil)).Elem(), HelmChartPatchMap{})
	pulumi.RegisterOutputType(HelmChartPatchOutput{})
	pulumi.RegisterOutputType(HelmChartPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmChartPatchMapOutput{})
}
