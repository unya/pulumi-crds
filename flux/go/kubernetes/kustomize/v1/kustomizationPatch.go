// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Kustomization is the Schema for the kustomizations API.
type KustomizationPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput   `pulumi:"metadata"`
	Spec     KustomizationSpecPatchPtrOutput   `pulumi:"spec"`
	Status   KustomizationStatusPatchPtrOutput `pulumi:"status"`
}

// NewKustomizationPatch registers a new resource with the given unique name, arguments, and options.
func NewKustomizationPatch(ctx *pulumi.Context,
	name string, args *KustomizationPatchArgs, opts ...pulumi.ResourceOption) (*KustomizationPatch, error) {
	if args == nil {
		args = &KustomizationPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kustomize.toolkit.fluxcd.io/v1")
	args.Kind = pulumi.StringPtr("Kustomization")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:kustomize.toolkit.fluxcd.io/v1beta1:KustomizationPatch"),
		},
		{
			Type: pulumi.String("kubernetes:kustomize.toolkit.fluxcd.io/v1beta2:KustomizationPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KustomizationPatch
	err := ctx.RegisterResource("kubernetes:kustomize.toolkit.fluxcd.io/v1:KustomizationPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKustomizationPatch gets an existing KustomizationPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKustomizationPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KustomizationPatchState, opts ...pulumi.ResourceOption) (*KustomizationPatch, error) {
	var resource KustomizationPatch
	err := ctx.ReadResource("kubernetes:kustomize.toolkit.fluxcd.io/v1:KustomizationPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KustomizationPatch resources.
type kustomizationPatchState struct {
}

type KustomizationPatchState struct {
}

func (KustomizationPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kustomizationPatchState)(nil)).Elem()
}

type kustomizationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KustomizationSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a KustomizationPatch resource.
type KustomizationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KustomizationSpecPatchPtrInput
}

func (KustomizationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kustomizationPatchArgs)(nil)).Elem()
}

type KustomizationPatchInput interface {
	pulumi.Input

	ToKustomizationPatchOutput() KustomizationPatchOutput
	ToKustomizationPatchOutputWithContext(ctx context.Context) KustomizationPatchOutput
}

func (*KustomizationPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KustomizationPatch)(nil)).Elem()
}

func (i *KustomizationPatch) ToKustomizationPatchOutput() KustomizationPatchOutput {
	return i.ToKustomizationPatchOutputWithContext(context.Background())
}

func (i *KustomizationPatch) ToKustomizationPatchOutputWithContext(ctx context.Context) KustomizationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationPatchOutput)
}

// KustomizationPatchArrayInput is an input type that accepts KustomizationPatchArray and KustomizationPatchArrayOutput values.
// You can construct a concrete instance of `KustomizationPatchArrayInput` via:
//
//	KustomizationPatchArray{ KustomizationPatchArgs{...} }
type KustomizationPatchArrayInput interface {
	pulumi.Input

	ToKustomizationPatchArrayOutput() KustomizationPatchArrayOutput
	ToKustomizationPatchArrayOutputWithContext(context.Context) KustomizationPatchArrayOutput
}

type KustomizationPatchArray []KustomizationPatchInput

func (KustomizationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KustomizationPatch)(nil)).Elem()
}

func (i KustomizationPatchArray) ToKustomizationPatchArrayOutput() KustomizationPatchArrayOutput {
	return i.ToKustomizationPatchArrayOutputWithContext(context.Background())
}

func (i KustomizationPatchArray) ToKustomizationPatchArrayOutputWithContext(ctx context.Context) KustomizationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationPatchArrayOutput)
}

// KustomizationPatchMapInput is an input type that accepts KustomizationPatchMap and KustomizationPatchMapOutput values.
// You can construct a concrete instance of `KustomizationPatchMapInput` via:
//
//	KustomizationPatchMap{ "key": KustomizationPatchArgs{...} }
type KustomizationPatchMapInput interface {
	pulumi.Input

	ToKustomizationPatchMapOutput() KustomizationPatchMapOutput
	ToKustomizationPatchMapOutputWithContext(context.Context) KustomizationPatchMapOutput
}

type KustomizationPatchMap map[string]KustomizationPatchInput

func (KustomizationPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KustomizationPatch)(nil)).Elem()
}

func (i KustomizationPatchMap) ToKustomizationPatchMapOutput() KustomizationPatchMapOutput {
	return i.ToKustomizationPatchMapOutputWithContext(context.Background())
}

func (i KustomizationPatchMap) ToKustomizationPatchMapOutputWithContext(ctx context.Context) KustomizationPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationPatchMapOutput)
}

type KustomizationPatchOutput struct{ *pulumi.OutputState }

func (KustomizationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KustomizationPatch)(nil)).Elem()
}

func (o KustomizationPatchOutput) ToKustomizationPatchOutput() KustomizationPatchOutput {
	return o
}

func (o KustomizationPatchOutput) ToKustomizationPatchOutputWithContext(ctx context.Context) KustomizationPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KustomizationPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KustomizationPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KustomizationPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KustomizationPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KustomizationPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KustomizationPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KustomizationPatchOutput) Spec() KustomizationSpecPatchPtrOutput {
	return o.ApplyT(func(v *KustomizationPatch) KustomizationSpecPatchPtrOutput { return v.Spec }).(KustomizationSpecPatchPtrOutput)
}

func (o KustomizationPatchOutput) Status() KustomizationStatusPatchPtrOutput {
	return o.ApplyT(func(v *KustomizationPatch) KustomizationStatusPatchPtrOutput { return v.Status }).(KustomizationStatusPatchPtrOutput)
}

type KustomizationPatchArrayOutput struct{ *pulumi.OutputState }

func (KustomizationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KustomizationPatch)(nil)).Elem()
}

func (o KustomizationPatchArrayOutput) ToKustomizationPatchArrayOutput() KustomizationPatchArrayOutput {
	return o
}

func (o KustomizationPatchArrayOutput) ToKustomizationPatchArrayOutputWithContext(ctx context.Context) KustomizationPatchArrayOutput {
	return o
}

func (o KustomizationPatchArrayOutput) Index(i pulumi.IntInput) KustomizationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KustomizationPatch {
		return vs[0].([]*KustomizationPatch)[vs[1].(int)]
	}).(KustomizationPatchOutput)
}

type KustomizationPatchMapOutput struct{ *pulumi.OutputState }

func (KustomizationPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KustomizationPatch)(nil)).Elem()
}

func (o KustomizationPatchMapOutput) ToKustomizationPatchMapOutput() KustomizationPatchMapOutput {
	return o
}

func (o KustomizationPatchMapOutput) ToKustomizationPatchMapOutputWithContext(ctx context.Context) KustomizationPatchMapOutput {
	return o
}

func (o KustomizationPatchMapOutput) MapIndex(k pulumi.StringInput) KustomizationPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KustomizationPatch {
		return vs[0].(map[string]*KustomizationPatch)[vs[1].(string)]
	}).(KustomizationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KustomizationPatchInput)(nil)).Elem(), &KustomizationPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KustomizationPatchArrayInput)(nil)).Elem(), KustomizationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KustomizationPatchMapInput)(nil)).Elem(), KustomizationPatchMap{})
	pulumi.RegisterOutputType(KustomizationPatchOutput{})
	pulumi.RegisterOutputType(KustomizationPatchArrayOutput{})
	pulumi.RegisterOutputType(KustomizationPatchMapOutput{})
}
