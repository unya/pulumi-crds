// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Receiver is the Schema for the receivers API.
type ReceiverType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ReceiverSpec      `pulumi:"spec"`
	Status   *ReceiverStatus    `pulumi:"status"`
}

// ReceiverTypeInput is an input type that accepts ReceiverTypeArgs and ReceiverTypeOutput values.
// You can construct a concrete instance of `ReceiverTypeInput` via:
//
//	ReceiverTypeArgs{...}
type ReceiverTypeInput interface {
	pulumi.Input

	ToReceiverTypeOutput() ReceiverTypeOutput
	ToReceiverTypeOutputWithContext(context.Context) ReceiverTypeOutput
}

// Receiver is the Schema for the receivers API.
type ReceiverTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     ReceiverSpecPtrInput      `pulumi:"spec"`
	Status   ReceiverStatusPtrInput    `pulumi:"status"`
}

func (ReceiverTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverType)(nil)).Elem()
}

func (i ReceiverTypeArgs) ToReceiverTypeOutput() ReceiverTypeOutput {
	return i.ToReceiverTypeOutputWithContext(context.Background())
}

func (i ReceiverTypeArgs) ToReceiverTypeOutputWithContext(ctx context.Context) ReceiverTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverTypeOutput)
}

// ReceiverTypeArrayInput is an input type that accepts ReceiverTypeArray and ReceiverTypeArrayOutput values.
// You can construct a concrete instance of `ReceiverTypeArrayInput` via:
//
//	ReceiverTypeArray{ ReceiverTypeArgs{...} }
type ReceiverTypeArrayInput interface {
	pulumi.Input

	ToReceiverTypeArrayOutput() ReceiverTypeArrayOutput
	ToReceiverTypeArrayOutputWithContext(context.Context) ReceiverTypeArrayOutput
}

type ReceiverTypeArray []ReceiverTypeInput

func (ReceiverTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverType)(nil)).Elem()
}

func (i ReceiverTypeArray) ToReceiverTypeArrayOutput() ReceiverTypeArrayOutput {
	return i.ToReceiverTypeArrayOutputWithContext(context.Background())
}

func (i ReceiverTypeArray) ToReceiverTypeArrayOutputWithContext(ctx context.Context) ReceiverTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverTypeArrayOutput)
}

// Receiver is the Schema for the receivers API.
type ReceiverTypeOutput struct{ *pulumi.OutputState }

func (ReceiverTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverType)(nil)).Elem()
}

func (o ReceiverTypeOutput) ToReceiverTypeOutput() ReceiverTypeOutput {
	return o
}

func (o ReceiverTypeOutput) ToReceiverTypeOutputWithContext(ctx context.Context) ReceiverTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReceiverTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReceiverTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ReceiverType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ReceiverTypeOutput) Spec() ReceiverSpecPtrOutput {
	return o.ApplyT(func(v ReceiverType) *ReceiverSpec { return v.Spec }).(ReceiverSpecPtrOutput)
}

func (o ReceiverTypeOutput) Status() ReceiverStatusPtrOutput {
	return o.ApplyT(func(v ReceiverType) *ReceiverStatus { return v.Status }).(ReceiverStatusPtrOutput)
}

type ReceiverTypeArrayOutput struct{ *pulumi.OutputState }

func (ReceiverTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverType)(nil)).Elem()
}

func (o ReceiverTypeArrayOutput) ToReceiverTypeArrayOutput() ReceiverTypeArrayOutput {
	return o
}

func (o ReceiverTypeArrayOutput) ToReceiverTypeArrayOutputWithContext(ctx context.Context) ReceiverTypeArrayOutput {
	return o
}

func (o ReceiverTypeArrayOutput) Index(i pulumi.IntInput) ReceiverTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverType {
		return vs[0].([]ReceiverType)[vs[1].(int)]
	}).(ReceiverTypeOutput)
}

// ReceiverList is a list of Receiver
type ReceiverListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ReceiverType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ReceiverListTypeInput is an input type that accepts ReceiverListTypeArgs and ReceiverListTypeOutput values.
// You can construct a concrete instance of `ReceiverListTypeInput` via:
//
//	ReceiverListTypeArgs{...}
type ReceiverListTypeInput interface {
	pulumi.Input

	ToReceiverListTypeOutput() ReceiverListTypeOutput
	ToReceiverListTypeOutputWithContext(context.Context) ReceiverListTypeOutput
}

// ReceiverList is a list of Receiver
type ReceiverListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ReceiverTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ReceiverListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverListType)(nil)).Elem()
}

func (i ReceiverListTypeArgs) ToReceiverListTypeOutput() ReceiverListTypeOutput {
	return i.ToReceiverListTypeOutputWithContext(context.Background())
}

func (i ReceiverListTypeArgs) ToReceiverListTypeOutputWithContext(ctx context.Context) ReceiverListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverListTypeOutput)
}

// ReceiverList is a list of Receiver
type ReceiverListTypeOutput struct{ *pulumi.OutputState }

func (ReceiverListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverListType)(nil)).Elem()
}

func (o ReceiverListTypeOutput) ToReceiverListTypeOutput() ReceiverListTypeOutput {
	return o
}

func (o ReceiverListTypeOutput) ToReceiverListTypeOutputWithContext(ctx context.Context) ReceiverListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReceiverListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ReceiverListTypeOutput) Items() ReceiverTypeArrayOutput {
	return o.ApplyT(func(v ReceiverListType) []ReceiverType { return v.Items }).(ReceiverTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ReceiverListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Receiver is the Schema for the receivers API.
type ReceiverPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ReceiverSpecPatch      `pulumi:"spec"`
	Status   *ReceiverStatusPatch    `pulumi:"status"`
}

// ReceiverPatchTypeInput is an input type that accepts ReceiverPatchTypeArgs and ReceiverPatchTypeOutput values.
// You can construct a concrete instance of `ReceiverPatchTypeInput` via:
//
//	ReceiverPatchTypeArgs{...}
type ReceiverPatchTypeInput interface {
	pulumi.Input

	ToReceiverPatchTypeOutput() ReceiverPatchTypeOutput
	ToReceiverPatchTypeOutputWithContext(context.Context) ReceiverPatchTypeOutput
}

// Receiver is the Schema for the receivers API.
type ReceiverPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     ReceiverSpecPatchPtrInput      `pulumi:"spec"`
	Status   ReceiverStatusPatchPtrInput    `pulumi:"status"`
}

func (ReceiverPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverPatchType)(nil)).Elem()
}

func (i ReceiverPatchTypeArgs) ToReceiverPatchTypeOutput() ReceiverPatchTypeOutput {
	return i.ToReceiverPatchTypeOutputWithContext(context.Background())
}

func (i ReceiverPatchTypeArgs) ToReceiverPatchTypeOutputWithContext(ctx context.Context) ReceiverPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverPatchTypeOutput)
}

// Receiver is the Schema for the receivers API.
type ReceiverPatchTypeOutput struct{ *pulumi.OutputState }

func (ReceiverPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverPatchType)(nil)).Elem()
}

func (o ReceiverPatchTypeOutput) ToReceiverPatchTypeOutput() ReceiverPatchTypeOutput {
	return o
}

func (o ReceiverPatchTypeOutput) ToReceiverPatchTypeOutputWithContext(ctx context.Context) ReceiverPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReceiverPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReceiverPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ReceiverPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ReceiverPatchTypeOutput) Spec() ReceiverSpecPatchPtrOutput {
	return o.ApplyT(func(v ReceiverPatchType) *ReceiverSpecPatch { return v.Spec }).(ReceiverSpecPatchPtrOutput)
}

func (o ReceiverPatchTypeOutput) Status() ReceiverStatusPatchPtrOutput {
	return o.ApplyT(func(v ReceiverPatchType) *ReceiverStatusPatch { return v.Status }).(ReceiverStatusPatchPtrOutput)
}

// ReceiverSpec defines the desired state of the Receiver.
type ReceiverSpec struct {
	// Events specifies the list of event types to handle,
	// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
	Events []string `pulumi:"events"`
	// Interval at which to reconcile the Receiver with its Secret references.
	Interval *string `pulumi:"interval"`
	// ResourceFilter is a CEL expression expected to return a boolean that is
	// evaluated for each resource referenced in the Resources field when a
	// webhook is received. If the expression returns false then the controller
	// will not request a reconciliation for the resource.
	// When the expression is specified the controller will parse it and mark
	// the object as terminally failed if the expression is invalid or does not
	// return a boolean.
	ResourceFilter *string `pulumi:"resourceFilter"`
	// A list of resources to be notified about changes.
	Resources []ReceiverSpecResources `pulumi:"resources"`
	SecretRef *ReceiverSpecSecretRef  `pulumi:"secretRef"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this receiver.
	Suspend *bool `pulumi:"suspend"`
	// Type of webhook sender, used to determine
	// the validation procedure and payload deserialization.
	Type *string `pulumi:"type"`
}

// ReceiverSpecInput is an input type that accepts ReceiverSpecArgs and ReceiverSpecOutput values.
// You can construct a concrete instance of `ReceiverSpecInput` via:
//
//	ReceiverSpecArgs{...}
type ReceiverSpecInput interface {
	pulumi.Input

	ToReceiverSpecOutput() ReceiverSpecOutput
	ToReceiverSpecOutputWithContext(context.Context) ReceiverSpecOutput
}

// ReceiverSpec defines the desired state of the Receiver.
type ReceiverSpecArgs struct {
	// Events specifies the list of event types to handle,
	// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Interval at which to reconcile the Receiver with its Secret references.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// ResourceFilter is a CEL expression expected to return a boolean that is
	// evaluated for each resource referenced in the Resources field when a
	// webhook is received. If the expression returns false then the controller
	// will not request a reconciliation for the resource.
	// When the expression is specified the controller will parse it and mark
	// the object as terminally failed if the expression is invalid or does not
	// return a boolean.
	ResourceFilter pulumi.StringPtrInput `pulumi:"resourceFilter"`
	// A list of resources to be notified about changes.
	Resources ReceiverSpecResourcesArrayInput `pulumi:"resources"`
	SecretRef ReceiverSpecSecretRefPtrInput   `pulumi:"secretRef"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this receiver.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Type of webhook sender, used to determine
	// the validation procedure and payload deserialization.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReceiverSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpec)(nil)).Elem()
}

func (i ReceiverSpecArgs) ToReceiverSpecOutput() ReceiverSpecOutput {
	return i.ToReceiverSpecOutputWithContext(context.Background())
}

func (i ReceiverSpecArgs) ToReceiverSpecOutputWithContext(ctx context.Context) ReceiverSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecOutput)
}

func (i ReceiverSpecArgs) ToReceiverSpecPtrOutput() ReceiverSpecPtrOutput {
	return i.ToReceiverSpecPtrOutputWithContext(context.Background())
}

func (i ReceiverSpecArgs) ToReceiverSpecPtrOutputWithContext(ctx context.Context) ReceiverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecOutput).ToReceiverSpecPtrOutputWithContext(ctx)
}

// ReceiverSpecPtrInput is an input type that accepts ReceiverSpecArgs, ReceiverSpecPtr and ReceiverSpecPtrOutput values.
// You can construct a concrete instance of `ReceiverSpecPtrInput` via:
//
//	        ReceiverSpecArgs{...}
//
//	or:
//
//	        nil
type ReceiverSpecPtrInput interface {
	pulumi.Input

	ToReceiverSpecPtrOutput() ReceiverSpecPtrOutput
	ToReceiverSpecPtrOutputWithContext(context.Context) ReceiverSpecPtrOutput
}

type receiverSpecPtrType ReceiverSpecArgs

func ReceiverSpecPtr(v *ReceiverSpecArgs) ReceiverSpecPtrInput {
	return (*receiverSpecPtrType)(v)
}

func (*receiverSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpec)(nil)).Elem()
}

func (i *receiverSpecPtrType) ToReceiverSpecPtrOutput() ReceiverSpecPtrOutput {
	return i.ToReceiverSpecPtrOutputWithContext(context.Background())
}

func (i *receiverSpecPtrType) ToReceiverSpecPtrOutputWithContext(ctx context.Context) ReceiverSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecPtrOutput)
}

// ReceiverSpec defines the desired state of the Receiver.
type ReceiverSpecOutput struct{ *pulumi.OutputState }

func (ReceiverSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpec)(nil)).Elem()
}

func (o ReceiverSpecOutput) ToReceiverSpecOutput() ReceiverSpecOutput {
	return o
}

func (o ReceiverSpecOutput) ToReceiverSpecOutputWithContext(ctx context.Context) ReceiverSpecOutput {
	return o
}

func (o ReceiverSpecOutput) ToReceiverSpecPtrOutput() ReceiverSpecPtrOutput {
	return o.ToReceiverSpecPtrOutputWithContext(context.Background())
}

func (o ReceiverSpecOutput) ToReceiverSpecPtrOutputWithContext(ctx context.Context) ReceiverSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReceiverSpec) *ReceiverSpec {
		return &v
	}).(ReceiverSpecPtrOutput)
}

// Events specifies the list of event types to handle,
// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
func (o ReceiverSpecOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReceiverSpec) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Interval at which to reconcile the Receiver with its Secret references.
func (o ReceiverSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// ResourceFilter is a CEL expression expected to return a boolean that is
// evaluated for each resource referenced in the Resources field when a
// webhook is received. If the expression returns false then the controller
// will not request a reconciliation for the resource.
// When the expression is specified the controller will parse it and mark
// the object as terminally failed if the expression is invalid or does not
// return a boolean.
func (o ReceiverSpecOutput) ResourceFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpec) *string { return v.ResourceFilter }).(pulumi.StringPtrOutput)
}

// A list of resources to be notified about changes.
func (o ReceiverSpecOutput) Resources() ReceiverSpecResourcesArrayOutput {
	return o.ApplyT(func(v ReceiverSpec) []ReceiverSpecResources { return v.Resources }).(ReceiverSpecResourcesArrayOutput)
}

func (o ReceiverSpecOutput) SecretRef() ReceiverSpecSecretRefPtrOutput {
	return o.ApplyT(func(v ReceiverSpec) *ReceiverSpecSecretRef { return v.SecretRef }).(ReceiverSpecSecretRefPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this receiver.
func (o ReceiverSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReceiverSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Type of webhook sender, used to determine
// the validation procedure and payload deserialization.
func (o ReceiverSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReceiverSpecPtrOutput struct{ *pulumi.OutputState }

func (ReceiverSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpec)(nil)).Elem()
}

func (o ReceiverSpecPtrOutput) ToReceiverSpecPtrOutput() ReceiverSpecPtrOutput {
	return o
}

func (o ReceiverSpecPtrOutput) ToReceiverSpecPtrOutputWithContext(ctx context.Context) ReceiverSpecPtrOutput {
	return o
}

func (o ReceiverSpecPtrOutput) Elem() ReceiverSpecOutput {
	return o.ApplyT(func(v *ReceiverSpec) ReceiverSpec {
		if v != nil {
			return *v
		}
		var ret ReceiverSpec
		return ret
	}).(ReceiverSpecOutput)
}

// Events specifies the list of event types to handle,
// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
func (o ReceiverSpecPtrOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReceiverSpec) []string {
		if v == nil {
			return nil
		}
		return v.Events
	}).(pulumi.StringArrayOutput)
}

// Interval at which to reconcile the Receiver with its Secret references.
func (o ReceiverSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// ResourceFilter is a CEL expression expected to return a boolean that is
// evaluated for each resource referenced in the Resources field when a
// webhook is received. If the expression returns false then the controller
// will not request a reconciliation for the resource.
// When the expression is specified the controller will parse it and mark
// the object as terminally failed if the expression is invalid or does not
// return a boolean.
func (o ReceiverSpecPtrOutput) ResourceFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResourceFilter
	}).(pulumi.StringPtrOutput)
}

// A list of resources to be notified about changes.
func (o ReceiverSpecPtrOutput) Resources() ReceiverSpecResourcesArrayOutput {
	return o.ApplyT(func(v *ReceiverSpec) []ReceiverSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ReceiverSpecResourcesArrayOutput)
}

func (o ReceiverSpecPtrOutput) SecretRef() ReceiverSpecSecretRefPtrOutput {
	return o.ApplyT(func(v *ReceiverSpec) *ReceiverSpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ReceiverSpecSecretRefPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this receiver.
func (o ReceiverSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReceiverSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Type of webhook sender, used to determine
// the validation procedure and payload deserialization.
func (o ReceiverSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ReceiverSpec defines the desired state of the Receiver.
type ReceiverSpecPatch struct {
	// Events specifies the list of event types to handle,
	// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
	Events []string `pulumi:"events"`
	// Interval at which to reconcile the Receiver with its Secret references.
	Interval *string `pulumi:"interval"`
	// ResourceFilter is a CEL expression expected to return a boolean that is
	// evaluated for each resource referenced in the Resources field when a
	// webhook is received. If the expression returns false then the controller
	// will not request a reconciliation for the resource.
	// When the expression is specified the controller will parse it and mark
	// the object as terminally failed if the expression is invalid or does not
	// return a boolean.
	ResourceFilter *string `pulumi:"resourceFilter"`
	// A list of resources to be notified about changes.
	Resources []ReceiverSpecResourcesPatch `pulumi:"resources"`
	SecretRef *ReceiverSpecSecretRefPatch  `pulumi:"secretRef"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this receiver.
	Suspend *bool `pulumi:"suspend"`
	// Type of webhook sender, used to determine
	// the validation procedure and payload deserialization.
	Type *string `pulumi:"type"`
}

// ReceiverSpecPatchInput is an input type that accepts ReceiverSpecPatchArgs and ReceiverSpecPatchOutput values.
// You can construct a concrete instance of `ReceiverSpecPatchInput` via:
//
//	ReceiverSpecPatchArgs{...}
type ReceiverSpecPatchInput interface {
	pulumi.Input

	ToReceiverSpecPatchOutput() ReceiverSpecPatchOutput
	ToReceiverSpecPatchOutputWithContext(context.Context) ReceiverSpecPatchOutput
}

// ReceiverSpec defines the desired state of the Receiver.
type ReceiverSpecPatchArgs struct {
	// Events specifies the list of event types to handle,
	// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
	Events pulumi.StringArrayInput `pulumi:"events"`
	// Interval at which to reconcile the Receiver with its Secret references.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// ResourceFilter is a CEL expression expected to return a boolean that is
	// evaluated for each resource referenced in the Resources field when a
	// webhook is received. If the expression returns false then the controller
	// will not request a reconciliation for the resource.
	// When the expression is specified the controller will parse it and mark
	// the object as terminally failed if the expression is invalid or does not
	// return a boolean.
	ResourceFilter pulumi.StringPtrInput `pulumi:"resourceFilter"`
	// A list of resources to be notified about changes.
	Resources ReceiverSpecResourcesPatchArrayInput `pulumi:"resources"`
	SecretRef ReceiverSpecSecretRefPatchPtrInput   `pulumi:"secretRef"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this receiver.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Type of webhook sender, used to determine
	// the validation procedure and payload deserialization.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReceiverSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecPatch)(nil)).Elem()
}

func (i ReceiverSpecPatchArgs) ToReceiverSpecPatchOutput() ReceiverSpecPatchOutput {
	return i.ToReceiverSpecPatchOutputWithContext(context.Background())
}

func (i ReceiverSpecPatchArgs) ToReceiverSpecPatchOutputWithContext(ctx context.Context) ReceiverSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecPatchOutput)
}

func (i ReceiverSpecPatchArgs) ToReceiverSpecPatchPtrOutput() ReceiverSpecPatchPtrOutput {
	return i.ToReceiverSpecPatchPtrOutputWithContext(context.Background())
}

func (i ReceiverSpecPatchArgs) ToReceiverSpecPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecPatchOutput).ToReceiverSpecPatchPtrOutputWithContext(ctx)
}

// ReceiverSpecPatchPtrInput is an input type that accepts ReceiverSpecPatchArgs, ReceiverSpecPatchPtr and ReceiverSpecPatchPtrOutput values.
// You can construct a concrete instance of `ReceiverSpecPatchPtrInput` via:
//
//	        ReceiverSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ReceiverSpecPatchPtrInput interface {
	pulumi.Input

	ToReceiverSpecPatchPtrOutput() ReceiverSpecPatchPtrOutput
	ToReceiverSpecPatchPtrOutputWithContext(context.Context) ReceiverSpecPatchPtrOutput
}

type receiverSpecPatchPtrType ReceiverSpecPatchArgs

func ReceiverSpecPatchPtr(v *ReceiverSpecPatchArgs) ReceiverSpecPatchPtrInput {
	return (*receiverSpecPatchPtrType)(v)
}

func (*receiverSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpecPatch)(nil)).Elem()
}

func (i *receiverSpecPatchPtrType) ToReceiverSpecPatchPtrOutput() ReceiverSpecPatchPtrOutput {
	return i.ToReceiverSpecPatchPtrOutputWithContext(context.Background())
}

func (i *receiverSpecPatchPtrType) ToReceiverSpecPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecPatchPtrOutput)
}

// ReceiverSpec defines the desired state of the Receiver.
type ReceiverSpecPatchOutput struct{ *pulumi.OutputState }

func (ReceiverSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecPatch)(nil)).Elem()
}

func (o ReceiverSpecPatchOutput) ToReceiverSpecPatchOutput() ReceiverSpecPatchOutput {
	return o
}

func (o ReceiverSpecPatchOutput) ToReceiverSpecPatchOutputWithContext(ctx context.Context) ReceiverSpecPatchOutput {
	return o
}

func (o ReceiverSpecPatchOutput) ToReceiverSpecPatchPtrOutput() ReceiverSpecPatchPtrOutput {
	return o.ToReceiverSpecPatchPtrOutputWithContext(context.Background())
}

func (o ReceiverSpecPatchOutput) ToReceiverSpecPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReceiverSpecPatch) *ReceiverSpecPatch {
		return &v
	}).(ReceiverSpecPatchPtrOutput)
}

// Events specifies the list of event types to handle,
// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
func (o ReceiverSpecPatchOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) []string { return v.Events }).(pulumi.StringArrayOutput)
}

// Interval at which to reconcile the Receiver with its Secret references.
func (o ReceiverSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// ResourceFilter is a CEL expression expected to return a boolean that is
// evaluated for each resource referenced in the Resources field when a
// webhook is received. If the expression returns false then the controller
// will not request a reconciliation for the resource.
// When the expression is specified the controller will parse it and mark
// the object as terminally failed if the expression is invalid or does not
// return a boolean.
func (o ReceiverSpecPatchOutput) ResourceFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) *string { return v.ResourceFilter }).(pulumi.StringPtrOutput)
}

// A list of resources to be notified about changes.
func (o ReceiverSpecPatchOutput) Resources() ReceiverSpecResourcesPatchArrayOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) []ReceiverSpecResourcesPatch { return v.Resources }).(ReceiverSpecResourcesPatchArrayOutput)
}

func (o ReceiverSpecPatchOutput) SecretRef() ReceiverSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) *ReceiverSpecSecretRefPatch { return v.SecretRef }).(ReceiverSpecSecretRefPatchPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this receiver.
func (o ReceiverSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Type of webhook sender, used to determine
// the validation procedure and payload deserialization.
func (o ReceiverSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReceiverSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ReceiverSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpecPatch)(nil)).Elem()
}

func (o ReceiverSpecPatchPtrOutput) ToReceiverSpecPatchPtrOutput() ReceiverSpecPatchPtrOutput {
	return o
}

func (o ReceiverSpecPatchPtrOutput) ToReceiverSpecPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecPatchPtrOutput {
	return o
}

func (o ReceiverSpecPatchPtrOutput) Elem() ReceiverSpecPatchOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) ReceiverSpecPatch {
		if v != nil {
			return *v
		}
		var ret ReceiverSpecPatch
		return ret
	}).(ReceiverSpecPatchOutput)
}

// Events specifies the list of event types to handle,
// e.g. 'push' for GitHub or 'Push Hook' for GitLab.
func (o ReceiverSpecPatchPtrOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Events
	}).(pulumi.StringArrayOutput)
}

// Interval at which to reconcile the Receiver with its Secret references.
func (o ReceiverSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// ResourceFilter is a CEL expression expected to return a boolean that is
// evaluated for each resource referenced in the Resources field when a
// webhook is received. If the expression returns false then the controller
// will not request a reconciliation for the resource.
// When the expression is specified the controller will parse it and mark
// the object as terminally failed if the expression is invalid or does not
// return a boolean.
func (o ReceiverSpecPatchPtrOutput) ResourceFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceFilter
	}).(pulumi.StringPtrOutput)
}

// A list of resources to be notified about changes.
func (o ReceiverSpecPatchPtrOutput) Resources() ReceiverSpecResourcesPatchArrayOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) []ReceiverSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ReceiverSpecResourcesPatchArrayOutput)
}

func (o ReceiverSpecPatchPtrOutput) SecretRef() ReceiverSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) *ReceiverSpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ReceiverSpecSecretRefPatchPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this receiver.
func (o ReceiverSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Type of webhook sender, used to determine
// the validation procedure and payload deserialization.
func (o ReceiverSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type ReceiverSpecResources struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent
	Kind *string `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name *string `pulumi:"name"`
	// Namespace of the referent
	Namespace *string `pulumi:"namespace"`
}

// ReceiverSpecResourcesInput is an input type that accepts ReceiverSpecResourcesArgs and ReceiverSpecResourcesOutput values.
// You can construct a concrete instance of `ReceiverSpecResourcesInput` via:
//
//	ReceiverSpecResourcesArgs{...}
type ReceiverSpecResourcesInput interface {
	pulumi.Input

	ToReceiverSpecResourcesOutput() ReceiverSpecResourcesOutput
	ToReceiverSpecResourcesOutputWithContext(context.Context) ReceiverSpecResourcesOutput
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type ReceiverSpecResourcesArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ReceiverSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecResources)(nil)).Elem()
}

func (i ReceiverSpecResourcesArgs) ToReceiverSpecResourcesOutput() ReceiverSpecResourcesOutput {
	return i.ToReceiverSpecResourcesOutputWithContext(context.Background())
}

func (i ReceiverSpecResourcesArgs) ToReceiverSpecResourcesOutputWithContext(ctx context.Context) ReceiverSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecResourcesOutput)
}

// ReceiverSpecResourcesArrayInput is an input type that accepts ReceiverSpecResourcesArray and ReceiverSpecResourcesArrayOutput values.
// You can construct a concrete instance of `ReceiverSpecResourcesArrayInput` via:
//
//	ReceiverSpecResourcesArray{ ReceiverSpecResourcesArgs{...} }
type ReceiverSpecResourcesArrayInput interface {
	pulumi.Input

	ToReceiverSpecResourcesArrayOutput() ReceiverSpecResourcesArrayOutput
	ToReceiverSpecResourcesArrayOutputWithContext(context.Context) ReceiverSpecResourcesArrayOutput
}

type ReceiverSpecResourcesArray []ReceiverSpecResourcesInput

func (ReceiverSpecResourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverSpecResources)(nil)).Elem()
}

func (i ReceiverSpecResourcesArray) ToReceiverSpecResourcesArrayOutput() ReceiverSpecResourcesArrayOutput {
	return i.ToReceiverSpecResourcesArrayOutputWithContext(context.Background())
}

func (i ReceiverSpecResourcesArray) ToReceiverSpecResourcesArrayOutputWithContext(ctx context.Context) ReceiverSpecResourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecResourcesArrayOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type ReceiverSpecResourcesOutput struct{ *pulumi.OutputState }

func (ReceiverSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecResources)(nil)).Elem()
}

func (o ReceiverSpecResourcesOutput) ToReceiverSpecResourcesOutput() ReceiverSpecResourcesOutput {
	return o
}

func (o ReceiverSpecResourcesOutput) ToReceiverSpecResourcesOutputWithContext(ctx context.Context) ReceiverSpecResourcesOutput {
	return o
}

// API version of the referent
func (o ReceiverSpecResourcesOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResources) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent
func (o ReceiverSpecResourcesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResources) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
// MatchLabels requires the name to be set to `*`.
func (o ReceiverSpecResourcesOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReceiverSpecResources) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// Name of the referent
// If multiple resources are targeted `*` may be set.
func (o ReceiverSpecResourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent
func (o ReceiverSpecResourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ReceiverSpecResourcesArrayOutput struct{ *pulumi.OutputState }

func (ReceiverSpecResourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverSpecResources)(nil)).Elem()
}

func (o ReceiverSpecResourcesArrayOutput) ToReceiverSpecResourcesArrayOutput() ReceiverSpecResourcesArrayOutput {
	return o
}

func (o ReceiverSpecResourcesArrayOutput) ToReceiverSpecResourcesArrayOutputWithContext(ctx context.Context) ReceiverSpecResourcesArrayOutput {
	return o
}

func (o ReceiverSpecResourcesArrayOutput) Index(i pulumi.IntInput) ReceiverSpecResourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverSpecResources {
		return vs[0].([]ReceiverSpecResources)[vs[1].(int)]
	}).(ReceiverSpecResourcesOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type ReceiverSpecResourcesPatch struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent
	Kind *string `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name *string `pulumi:"name"`
	// Namespace of the referent
	Namespace *string `pulumi:"namespace"`
}

// ReceiverSpecResourcesPatchInput is an input type that accepts ReceiverSpecResourcesPatchArgs and ReceiverSpecResourcesPatchOutput values.
// You can construct a concrete instance of `ReceiverSpecResourcesPatchInput` via:
//
//	ReceiverSpecResourcesPatchArgs{...}
type ReceiverSpecResourcesPatchInput interface {
	pulumi.Input

	ToReceiverSpecResourcesPatchOutput() ReceiverSpecResourcesPatchOutput
	ToReceiverSpecResourcesPatchOutputWithContext(context.Context) ReceiverSpecResourcesPatchOutput
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type ReceiverSpecResourcesPatchArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ReceiverSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecResourcesPatch)(nil)).Elem()
}

func (i ReceiverSpecResourcesPatchArgs) ToReceiverSpecResourcesPatchOutput() ReceiverSpecResourcesPatchOutput {
	return i.ToReceiverSpecResourcesPatchOutputWithContext(context.Background())
}

func (i ReceiverSpecResourcesPatchArgs) ToReceiverSpecResourcesPatchOutputWithContext(ctx context.Context) ReceiverSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecResourcesPatchOutput)
}

// ReceiverSpecResourcesPatchArrayInput is an input type that accepts ReceiverSpecResourcesPatchArray and ReceiverSpecResourcesPatchArrayOutput values.
// You can construct a concrete instance of `ReceiverSpecResourcesPatchArrayInput` via:
//
//	ReceiverSpecResourcesPatchArray{ ReceiverSpecResourcesPatchArgs{...} }
type ReceiverSpecResourcesPatchArrayInput interface {
	pulumi.Input

	ToReceiverSpecResourcesPatchArrayOutput() ReceiverSpecResourcesPatchArrayOutput
	ToReceiverSpecResourcesPatchArrayOutputWithContext(context.Context) ReceiverSpecResourcesPatchArrayOutput
}

type ReceiverSpecResourcesPatchArray []ReceiverSpecResourcesPatchInput

func (ReceiverSpecResourcesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverSpecResourcesPatch)(nil)).Elem()
}

func (i ReceiverSpecResourcesPatchArray) ToReceiverSpecResourcesPatchArrayOutput() ReceiverSpecResourcesPatchArrayOutput {
	return i.ToReceiverSpecResourcesPatchArrayOutputWithContext(context.Background())
}

func (i ReceiverSpecResourcesPatchArray) ToReceiverSpecResourcesPatchArrayOutputWithContext(ctx context.Context) ReceiverSpecResourcesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecResourcesPatchArrayOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type ReceiverSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (ReceiverSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecResourcesPatch)(nil)).Elem()
}

func (o ReceiverSpecResourcesPatchOutput) ToReceiverSpecResourcesPatchOutput() ReceiverSpecResourcesPatchOutput {
	return o
}

func (o ReceiverSpecResourcesPatchOutput) ToReceiverSpecResourcesPatchOutputWithContext(ctx context.Context) ReceiverSpecResourcesPatchOutput {
	return o
}

// API version of the referent
func (o ReceiverSpecResourcesPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResourcesPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent
func (o ReceiverSpecResourcesPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResourcesPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
// MatchLabels requires the name to be set to `*`.
func (o ReceiverSpecResourcesPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReceiverSpecResourcesPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// Name of the referent
// If multiple resources are targeted `*` may be set.
func (o ReceiverSpecResourcesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResourcesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent
func (o ReceiverSpecResourcesPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecResourcesPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ReceiverSpecResourcesPatchArrayOutput struct{ *pulumi.OutputState }

func (ReceiverSpecResourcesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverSpecResourcesPatch)(nil)).Elem()
}

func (o ReceiverSpecResourcesPatchArrayOutput) ToReceiverSpecResourcesPatchArrayOutput() ReceiverSpecResourcesPatchArrayOutput {
	return o
}

func (o ReceiverSpecResourcesPatchArrayOutput) ToReceiverSpecResourcesPatchArrayOutputWithContext(ctx context.Context) ReceiverSpecResourcesPatchArrayOutput {
	return o
}

func (o ReceiverSpecResourcesPatchArrayOutput) Index(i pulumi.IntInput) ReceiverSpecResourcesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverSpecResourcesPatch {
		return vs[0].([]ReceiverSpecResourcesPatch)[vs[1].(int)]
	}).(ReceiverSpecResourcesPatchOutput)
}

// SecretRef specifies the Secret containing the token used
// to validate the payload authenticity.
type ReceiverSpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ReceiverSpecSecretRefInput is an input type that accepts ReceiverSpecSecretRefArgs and ReceiverSpecSecretRefOutput values.
// You can construct a concrete instance of `ReceiverSpecSecretRefInput` via:
//
//	ReceiverSpecSecretRefArgs{...}
type ReceiverSpecSecretRefInput interface {
	pulumi.Input

	ToReceiverSpecSecretRefOutput() ReceiverSpecSecretRefOutput
	ToReceiverSpecSecretRefOutputWithContext(context.Context) ReceiverSpecSecretRefOutput
}

// SecretRef specifies the Secret containing the token used
// to validate the payload authenticity.
type ReceiverSpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ReceiverSpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecSecretRef)(nil)).Elem()
}

func (i ReceiverSpecSecretRefArgs) ToReceiverSpecSecretRefOutput() ReceiverSpecSecretRefOutput {
	return i.ToReceiverSpecSecretRefOutputWithContext(context.Background())
}

func (i ReceiverSpecSecretRefArgs) ToReceiverSpecSecretRefOutputWithContext(ctx context.Context) ReceiverSpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecSecretRefOutput)
}

func (i ReceiverSpecSecretRefArgs) ToReceiverSpecSecretRefPtrOutput() ReceiverSpecSecretRefPtrOutput {
	return i.ToReceiverSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i ReceiverSpecSecretRefArgs) ToReceiverSpecSecretRefPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecSecretRefOutput).ToReceiverSpecSecretRefPtrOutputWithContext(ctx)
}

// ReceiverSpecSecretRefPtrInput is an input type that accepts ReceiverSpecSecretRefArgs, ReceiverSpecSecretRefPtr and ReceiverSpecSecretRefPtrOutput values.
// You can construct a concrete instance of `ReceiverSpecSecretRefPtrInput` via:
//
//	        ReceiverSpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type ReceiverSpecSecretRefPtrInput interface {
	pulumi.Input

	ToReceiverSpecSecretRefPtrOutput() ReceiverSpecSecretRefPtrOutput
	ToReceiverSpecSecretRefPtrOutputWithContext(context.Context) ReceiverSpecSecretRefPtrOutput
}

type receiverSpecSecretRefPtrType ReceiverSpecSecretRefArgs

func ReceiverSpecSecretRefPtr(v *ReceiverSpecSecretRefArgs) ReceiverSpecSecretRefPtrInput {
	return (*receiverSpecSecretRefPtrType)(v)
}

func (*receiverSpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpecSecretRef)(nil)).Elem()
}

func (i *receiverSpecSecretRefPtrType) ToReceiverSpecSecretRefPtrOutput() ReceiverSpecSecretRefPtrOutput {
	return i.ToReceiverSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *receiverSpecSecretRefPtrType) ToReceiverSpecSecretRefPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecSecretRefPtrOutput)
}

// SecretRef specifies the Secret containing the token used
// to validate the payload authenticity.
type ReceiverSpecSecretRefOutput struct{ *pulumi.OutputState }

func (ReceiverSpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecSecretRef)(nil)).Elem()
}

func (o ReceiverSpecSecretRefOutput) ToReceiverSpecSecretRefOutput() ReceiverSpecSecretRefOutput {
	return o
}

func (o ReceiverSpecSecretRefOutput) ToReceiverSpecSecretRefOutputWithContext(ctx context.Context) ReceiverSpecSecretRefOutput {
	return o
}

func (o ReceiverSpecSecretRefOutput) ToReceiverSpecSecretRefPtrOutput() ReceiverSpecSecretRefPtrOutput {
	return o.ToReceiverSpecSecretRefPtrOutputWithContext(context.Background())
}

func (o ReceiverSpecSecretRefOutput) ToReceiverSpecSecretRefPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReceiverSpecSecretRef) *ReceiverSpecSecretRef {
		return &v
	}).(ReceiverSpecSecretRefPtrOutput)
}

// Name of the referent.
func (o ReceiverSpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ReceiverSpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ReceiverSpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpecSecretRef)(nil)).Elem()
}

func (o ReceiverSpecSecretRefPtrOutput) ToReceiverSpecSecretRefPtrOutput() ReceiverSpecSecretRefPtrOutput {
	return o
}

func (o ReceiverSpecSecretRefPtrOutput) ToReceiverSpecSecretRefPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPtrOutput {
	return o
}

func (o ReceiverSpecSecretRefPtrOutput) Elem() ReceiverSpecSecretRefOutput {
	return o.ApplyT(func(v *ReceiverSpecSecretRef) ReceiverSpecSecretRef {
		if v != nil {
			return *v
		}
		var ret ReceiverSpecSecretRef
		return ret
	}).(ReceiverSpecSecretRefOutput)
}

// Name of the referent.
func (o ReceiverSpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing the token used
// to validate the payload authenticity.
type ReceiverSpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ReceiverSpecSecretRefPatchInput is an input type that accepts ReceiverSpecSecretRefPatchArgs and ReceiverSpecSecretRefPatchOutput values.
// You can construct a concrete instance of `ReceiverSpecSecretRefPatchInput` via:
//
//	ReceiverSpecSecretRefPatchArgs{...}
type ReceiverSpecSecretRefPatchInput interface {
	pulumi.Input

	ToReceiverSpecSecretRefPatchOutput() ReceiverSpecSecretRefPatchOutput
	ToReceiverSpecSecretRefPatchOutputWithContext(context.Context) ReceiverSpecSecretRefPatchOutput
}

// SecretRef specifies the Secret containing the token used
// to validate the payload authenticity.
type ReceiverSpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ReceiverSpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecSecretRefPatch)(nil)).Elem()
}

func (i ReceiverSpecSecretRefPatchArgs) ToReceiverSpecSecretRefPatchOutput() ReceiverSpecSecretRefPatchOutput {
	return i.ToReceiverSpecSecretRefPatchOutputWithContext(context.Background())
}

func (i ReceiverSpecSecretRefPatchArgs) ToReceiverSpecSecretRefPatchOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecSecretRefPatchOutput)
}

func (i ReceiverSpecSecretRefPatchArgs) ToReceiverSpecSecretRefPatchPtrOutput() ReceiverSpecSecretRefPatchPtrOutput {
	return i.ToReceiverSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ReceiverSpecSecretRefPatchArgs) ToReceiverSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecSecretRefPatchOutput).ToReceiverSpecSecretRefPatchPtrOutputWithContext(ctx)
}

// ReceiverSpecSecretRefPatchPtrInput is an input type that accepts ReceiverSpecSecretRefPatchArgs, ReceiverSpecSecretRefPatchPtr and ReceiverSpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ReceiverSpecSecretRefPatchPtrInput` via:
//
//	        ReceiverSpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ReceiverSpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToReceiverSpecSecretRefPatchPtrOutput() ReceiverSpecSecretRefPatchPtrOutput
	ToReceiverSpecSecretRefPatchPtrOutputWithContext(context.Context) ReceiverSpecSecretRefPatchPtrOutput
}

type receiverSpecSecretRefPatchPtrType ReceiverSpecSecretRefPatchArgs

func ReceiverSpecSecretRefPatchPtr(v *ReceiverSpecSecretRefPatchArgs) ReceiverSpecSecretRefPatchPtrInput {
	return (*receiverSpecSecretRefPatchPtrType)(v)
}

func (*receiverSpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpecSecretRefPatch)(nil)).Elem()
}

func (i *receiverSpecSecretRefPatchPtrType) ToReceiverSpecSecretRefPatchPtrOutput() ReceiverSpecSecretRefPatchPtrOutput {
	return i.ToReceiverSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *receiverSpecSecretRefPatchPtrType) ToReceiverSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverSpecSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing the token used
// to validate the payload authenticity.
type ReceiverSpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ReceiverSpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverSpecSecretRefPatch)(nil)).Elem()
}

func (o ReceiverSpecSecretRefPatchOutput) ToReceiverSpecSecretRefPatchOutput() ReceiverSpecSecretRefPatchOutput {
	return o
}

func (o ReceiverSpecSecretRefPatchOutput) ToReceiverSpecSecretRefPatchOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPatchOutput {
	return o
}

func (o ReceiverSpecSecretRefPatchOutput) ToReceiverSpecSecretRefPatchPtrOutput() ReceiverSpecSecretRefPatchPtrOutput {
	return o.ToReceiverSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ReceiverSpecSecretRefPatchOutput) ToReceiverSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReceiverSpecSecretRefPatch) *ReceiverSpecSecretRefPatch {
		return &v
	}).(ReceiverSpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ReceiverSpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverSpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ReceiverSpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ReceiverSpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverSpecSecretRefPatch)(nil)).Elem()
}

func (o ReceiverSpecSecretRefPatchPtrOutput) ToReceiverSpecSecretRefPatchPtrOutput() ReceiverSpecSecretRefPatchPtrOutput {
	return o
}

func (o ReceiverSpecSecretRefPatchPtrOutput) ToReceiverSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ReceiverSpecSecretRefPatchPtrOutput {
	return o
}

func (o ReceiverSpecSecretRefPatchPtrOutput) Elem() ReceiverSpecSecretRefPatchOutput {
	return o.ApplyT(func(v *ReceiverSpecSecretRefPatch) ReceiverSpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ReceiverSpecSecretRefPatch
		return ret
	}).(ReceiverSpecSecretRefPatchOutput)
}

// Name of the referent.
func (o ReceiverSpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverSpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ReceiverStatus defines the observed state of the Receiver.
type ReceiverStatus struct {
	// Conditions holds the conditions for the Receiver.
	Conditions []ReceiverStatusConditions `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Receiver object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// WebhookPath is the generated incoming webhook address in the format
	// of '/hook/sha256sum(token+name+namespace)'.
	WebhookPath *string `pulumi:"webhookPath"`
}

// ReceiverStatusInput is an input type that accepts ReceiverStatusArgs and ReceiverStatusOutput values.
// You can construct a concrete instance of `ReceiverStatusInput` via:
//
//	ReceiverStatusArgs{...}
type ReceiverStatusInput interface {
	pulumi.Input

	ToReceiverStatusOutput() ReceiverStatusOutput
	ToReceiverStatusOutputWithContext(context.Context) ReceiverStatusOutput
}

// ReceiverStatus defines the observed state of the Receiver.
type ReceiverStatusArgs struct {
	// Conditions holds the conditions for the Receiver.
	Conditions ReceiverStatusConditionsArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Receiver object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// WebhookPath is the generated incoming webhook address in the format
	// of '/hook/sha256sum(token+name+namespace)'.
	WebhookPath pulumi.StringPtrInput `pulumi:"webhookPath"`
}

func (ReceiverStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatus)(nil)).Elem()
}

func (i ReceiverStatusArgs) ToReceiverStatusOutput() ReceiverStatusOutput {
	return i.ToReceiverStatusOutputWithContext(context.Background())
}

func (i ReceiverStatusArgs) ToReceiverStatusOutputWithContext(ctx context.Context) ReceiverStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusOutput)
}

func (i ReceiverStatusArgs) ToReceiverStatusPtrOutput() ReceiverStatusPtrOutput {
	return i.ToReceiverStatusPtrOutputWithContext(context.Background())
}

func (i ReceiverStatusArgs) ToReceiverStatusPtrOutputWithContext(ctx context.Context) ReceiverStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusOutput).ToReceiverStatusPtrOutputWithContext(ctx)
}

// ReceiverStatusPtrInput is an input type that accepts ReceiverStatusArgs, ReceiverStatusPtr and ReceiverStatusPtrOutput values.
// You can construct a concrete instance of `ReceiverStatusPtrInput` via:
//
//	        ReceiverStatusArgs{...}
//
//	or:
//
//	        nil
type ReceiverStatusPtrInput interface {
	pulumi.Input

	ToReceiverStatusPtrOutput() ReceiverStatusPtrOutput
	ToReceiverStatusPtrOutputWithContext(context.Context) ReceiverStatusPtrOutput
}

type receiverStatusPtrType ReceiverStatusArgs

func ReceiverStatusPtr(v *ReceiverStatusArgs) ReceiverStatusPtrInput {
	return (*receiverStatusPtrType)(v)
}

func (*receiverStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverStatus)(nil)).Elem()
}

func (i *receiverStatusPtrType) ToReceiverStatusPtrOutput() ReceiverStatusPtrOutput {
	return i.ToReceiverStatusPtrOutputWithContext(context.Background())
}

func (i *receiverStatusPtrType) ToReceiverStatusPtrOutputWithContext(ctx context.Context) ReceiverStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusPtrOutput)
}

// ReceiverStatus defines the observed state of the Receiver.
type ReceiverStatusOutput struct{ *pulumi.OutputState }

func (ReceiverStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatus)(nil)).Elem()
}

func (o ReceiverStatusOutput) ToReceiverStatusOutput() ReceiverStatusOutput {
	return o
}

func (o ReceiverStatusOutput) ToReceiverStatusOutputWithContext(ctx context.Context) ReceiverStatusOutput {
	return o
}

func (o ReceiverStatusOutput) ToReceiverStatusPtrOutput() ReceiverStatusPtrOutput {
	return o.ToReceiverStatusPtrOutputWithContext(context.Background())
}

func (o ReceiverStatusOutput) ToReceiverStatusPtrOutputWithContext(ctx context.Context) ReceiverStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReceiverStatus) *ReceiverStatus {
		return &v
	}).(ReceiverStatusPtrOutput)
}

// Conditions holds the conditions for the Receiver.
func (o ReceiverStatusOutput) Conditions() ReceiverStatusConditionsArrayOutput {
	return o.ApplyT(func(v ReceiverStatus) []ReceiverStatusConditions { return v.Conditions }).(ReceiverStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ReceiverStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Receiver object.
func (o ReceiverStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReceiverStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// WebhookPath is the generated incoming webhook address in the format
// of '/hook/sha256sum(token+name+namespace)'.
func (o ReceiverStatusOutput) WebhookPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatus) *string { return v.WebhookPath }).(pulumi.StringPtrOutput)
}

type ReceiverStatusPtrOutput struct{ *pulumi.OutputState }

func (ReceiverStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverStatus)(nil)).Elem()
}

func (o ReceiverStatusPtrOutput) ToReceiverStatusPtrOutput() ReceiverStatusPtrOutput {
	return o
}

func (o ReceiverStatusPtrOutput) ToReceiverStatusPtrOutputWithContext(ctx context.Context) ReceiverStatusPtrOutput {
	return o
}

func (o ReceiverStatusPtrOutput) Elem() ReceiverStatusOutput {
	return o.ApplyT(func(v *ReceiverStatus) ReceiverStatus {
		if v != nil {
			return *v
		}
		var ret ReceiverStatus
		return ret
	}).(ReceiverStatusOutput)
}

// Conditions holds the conditions for the Receiver.
func (o ReceiverStatusPtrOutput) Conditions() ReceiverStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ReceiverStatus) []ReceiverStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ReceiverStatusConditionsArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ReceiverStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Receiver object.
func (o ReceiverStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReceiverStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// WebhookPath is the generated incoming webhook address in the format
// of '/hook/sha256sum(token+name+namespace)'.
func (o ReceiverStatusPtrOutput) WebhookPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverStatus) *string {
		if v == nil {
			return nil
		}
		return v.WebhookPath
	}).(pulumi.StringPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ReceiverStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ReceiverStatusConditionsInput is an input type that accepts ReceiverStatusConditionsArgs and ReceiverStatusConditionsOutput values.
// You can construct a concrete instance of `ReceiverStatusConditionsInput` via:
//
//	ReceiverStatusConditionsArgs{...}
type ReceiverStatusConditionsInput interface {
	pulumi.Input

	ToReceiverStatusConditionsOutput() ReceiverStatusConditionsOutput
	ToReceiverStatusConditionsOutputWithContext(context.Context) ReceiverStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ReceiverStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReceiverStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatusConditions)(nil)).Elem()
}

func (i ReceiverStatusConditionsArgs) ToReceiverStatusConditionsOutput() ReceiverStatusConditionsOutput {
	return i.ToReceiverStatusConditionsOutputWithContext(context.Background())
}

func (i ReceiverStatusConditionsArgs) ToReceiverStatusConditionsOutputWithContext(ctx context.Context) ReceiverStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusConditionsOutput)
}

// ReceiverStatusConditionsArrayInput is an input type that accepts ReceiverStatusConditionsArray and ReceiverStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ReceiverStatusConditionsArrayInput` via:
//
//	ReceiverStatusConditionsArray{ ReceiverStatusConditionsArgs{...} }
type ReceiverStatusConditionsArrayInput interface {
	pulumi.Input

	ToReceiverStatusConditionsArrayOutput() ReceiverStatusConditionsArrayOutput
	ToReceiverStatusConditionsArrayOutputWithContext(context.Context) ReceiverStatusConditionsArrayOutput
}

type ReceiverStatusConditionsArray []ReceiverStatusConditionsInput

func (ReceiverStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverStatusConditions)(nil)).Elem()
}

func (i ReceiverStatusConditionsArray) ToReceiverStatusConditionsArrayOutput() ReceiverStatusConditionsArrayOutput {
	return i.ToReceiverStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ReceiverStatusConditionsArray) ToReceiverStatusConditionsArrayOutputWithContext(ctx context.Context) ReceiverStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ReceiverStatusConditionsOutput struct{ *pulumi.OutputState }

func (ReceiverStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatusConditions)(nil)).Elem()
}

func (o ReceiverStatusConditionsOutput) ToReceiverStatusConditionsOutput() ReceiverStatusConditionsOutput {
	return o
}

func (o ReceiverStatusConditionsOutput) ToReceiverStatusConditionsOutputWithContext(ctx context.Context) ReceiverStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ReceiverStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ReceiverStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ReceiverStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ReceiverStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ReceiverStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ReceiverStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReceiverStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ReceiverStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverStatusConditions)(nil)).Elem()
}

func (o ReceiverStatusConditionsArrayOutput) ToReceiverStatusConditionsArrayOutput() ReceiverStatusConditionsArrayOutput {
	return o
}

func (o ReceiverStatusConditionsArrayOutput) ToReceiverStatusConditionsArrayOutputWithContext(ctx context.Context) ReceiverStatusConditionsArrayOutput {
	return o
}

func (o ReceiverStatusConditionsArrayOutput) Index(i pulumi.IntInput) ReceiverStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverStatusConditions {
		return vs[0].([]ReceiverStatusConditions)[vs[1].(int)]
	}).(ReceiverStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ReceiverStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// ReceiverStatusConditionsPatchInput is an input type that accepts ReceiverStatusConditionsPatchArgs and ReceiverStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ReceiverStatusConditionsPatchInput` via:
//
//	ReceiverStatusConditionsPatchArgs{...}
type ReceiverStatusConditionsPatchInput interface {
	pulumi.Input

	ToReceiverStatusConditionsPatchOutput() ReceiverStatusConditionsPatchOutput
	ToReceiverStatusConditionsPatchOutputWithContext(context.Context) ReceiverStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type ReceiverStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ReceiverStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatusConditionsPatch)(nil)).Elem()
}

func (i ReceiverStatusConditionsPatchArgs) ToReceiverStatusConditionsPatchOutput() ReceiverStatusConditionsPatchOutput {
	return i.ToReceiverStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ReceiverStatusConditionsPatchArgs) ToReceiverStatusConditionsPatchOutputWithContext(ctx context.Context) ReceiverStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusConditionsPatchOutput)
}

// ReceiverStatusConditionsPatchArrayInput is an input type that accepts ReceiverStatusConditionsPatchArray and ReceiverStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ReceiverStatusConditionsPatchArrayInput` via:
//
//	ReceiverStatusConditionsPatchArray{ ReceiverStatusConditionsPatchArgs{...} }
type ReceiverStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToReceiverStatusConditionsPatchArrayOutput() ReceiverStatusConditionsPatchArrayOutput
	ToReceiverStatusConditionsPatchArrayOutputWithContext(context.Context) ReceiverStatusConditionsPatchArrayOutput
}

type ReceiverStatusConditionsPatchArray []ReceiverStatusConditionsPatchInput

func (ReceiverStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverStatusConditionsPatch)(nil)).Elem()
}

func (i ReceiverStatusConditionsPatchArray) ToReceiverStatusConditionsPatchArrayOutput() ReceiverStatusConditionsPatchArrayOutput {
	return i.ToReceiverStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ReceiverStatusConditionsPatchArray) ToReceiverStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ReceiverStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type ReceiverStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ReceiverStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatusConditionsPatch)(nil)).Elem()
}

func (o ReceiverStatusConditionsPatchOutput) ToReceiverStatusConditionsPatchOutput() ReceiverStatusConditionsPatchOutput {
	return o
}

func (o ReceiverStatusConditionsPatchOutput) ToReceiverStatusConditionsPatchOutputWithContext(ctx context.Context) ReceiverStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o ReceiverStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o ReceiverStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o ReceiverStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o ReceiverStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o ReceiverStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o ReceiverStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ReceiverStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ReceiverStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverStatusConditionsPatch)(nil)).Elem()
}

func (o ReceiverStatusConditionsPatchArrayOutput) ToReceiverStatusConditionsPatchArrayOutput() ReceiverStatusConditionsPatchArrayOutput {
	return o
}

func (o ReceiverStatusConditionsPatchArrayOutput) ToReceiverStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ReceiverStatusConditionsPatchArrayOutput {
	return o
}

func (o ReceiverStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ReceiverStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverStatusConditionsPatch {
		return vs[0].([]ReceiverStatusConditionsPatch)[vs[1].(int)]
	}).(ReceiverStatusConditionsPatchOutput)
}

// ReceiverStatus defines the observed state of the Receiver.
type ReceiverStatusPatch struct {
	// Conditions holds the conditions for the Receiver.
	Conditions []ReceiverStatusConditionsPatch `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Receiver object.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// WebhookPath is the generated incoming webhook address in the format
	// of '/hook/sha256sum(token+name+namespace)'.
	WebhookPath *string `pulumi:"webhookPath"`
}

// ReceiverStatusPatchInput is an input type that accepts ReceiverStatusPatchArgs and ReceiverStatusPatchOutput values.
// You can construct a concrete instance of `ReceiverStatusPatchInput` via:
//
//	ReceiverStatusPatchArgs{...}
type ReceiverStatusPatchInput interface {
	pulumi.Input

	ToReceiverStatusPatchOutput() ReceiverStatusPatchOutput
	ToReceiverStatusPatchOutputWithContext(context.Context) ReceiverStatusPatchOutput
}

// ReceiverStatus defines the observed state of the Receiver.
type ReceiverStatusPatchArgs struct {
	// Conditions holds the conditions for the Receiver.
	Conditions ReceiverStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// ObservedGeneration is the last observed generation of the Receiver object.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// WebhookPath is the generated incoming webhook address in the format
	// of '/hook/sha256sum(token+name+namespace)'.
	WebhookPath pulumi.StringPtrInput `pulumi:"webhookPath"`
}

func (ReceiverStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatusPatch)(nil)).Elem()
}

func (i ReceiverStatusPatchArgs) ToReceiverStatusPatchOutput() ReceiverStatusPatchOutput {
	return i.ToReceiverStatusPatchOutputWithContext(context.Background())
}

func (i ReceiverStatusPatchArgs) ToReceiverStatusPatchOutputWithContext(ctx context.Context) ReceiverStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusPatchOutput)
}

func (i ReceiverStatusPatchArgs) ToReceiverStatusPatchPtrOutput() ReceiverStatusPatchPtrOutput {
	return i.ToReceiverStatusPatchPtrOutputWithContext(context.Background())
}

func (i ReceiverStatusPatchArgs) ToReceiverStatusPatchPtrOutputWithContext(ctx context.Context) ReceiverStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusPatchOutput).ToReceiverStatusPatchPtrOutputWithContext(ctx)
}

// ReceiverStatusPatchPtrInput is an input type that accepts ReceiverStatusPatchArgs, ReceiverStatusPatchPtr and ReceiverStatusPatchPtrOutput values.
// You can construct a concrete instance of `ReceiverStatusPatchPtrInput` via:
//
//	        ReceiverStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ReceiverStatusPatchPtrInput interface {
	pulumi.Input

	ToReceiverStatusPatchPtrOutput() ReceiverStatusPatchPtrOutput
	ToReceiverStatusPatchPtrOutputWithContext(context.Context) ReceiverStatusPatchPtrOutput
}

type receiverStatusPatchPtrType ReceiverStatusPatchArgs

func ReceiverStatusPatchPtr(v *ReceiverStatusPatchArgs) ReceiverStatusPatchPtrInput {
	return (*receiverStatusPatchPtrType)(v)
}

func (*receiverStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverStatusPatch)(nil)).Elem()
}

func (i *receiverStatusPatchPtrType) ToReceiverStatusPatchPtrOutput() ReceiverStatusPatchPtrOutput {
	return i.ToReceiverStatusPatchPtrOutputWithContext(context.Background())
}

func (i *receiverStatusPatchPtrType) ToReceiverStatusPatchPtrOutputWithContext(ctx context.Context) ReceiverStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverStatusPatchPtrOutput)
}

// ReceiverStatus defines the observed state of the Receiver.
type ReceiverStatusPatchOutput struct{ *pulumi.OutputState }

func (ReceiverStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverStatusPatch)(nil)).Elem()
}

func (o ReceiverStatusPatchOutput) ToReceiverStatusPatchOutput() ReceiverStatusPatchOutput {
	return o
}

func (o ReceiverStatusPatchOutput) ToReceiverStatusPatchOutputWithContext(ctx context.Context) ReceiverStatusPatchOutput {
	return o
}

func (o ReceiverStatusPatchOutput) ToReceiverStatusPatchPtrOutput() ReceiverStatusPatchPtrOutput {
	return o.ToReceiverStatusPatchPtrOutputWithContext(context.Background())
}

func (o ReceiverStatusPatchOutput) ToReceiverStatusPatchPtrOutputWithContext(ctx context.Context) ReceiverStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReceiverStatusPatch) *ReceiverStatusPatch {
		return &v
	}).(ReceiverStatusPatchPtrOutput)
}

// Conditions holds the conditions for the Receiver.
func (o ReceiverStatusPatchOutput) Conditions() ReceiverStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ReceiverStatusPatch) []ReceiverStatusConditionsPatch { return v.Conditions }).(ReceiverStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ReceiverStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Receiver object.
func (o ReceiverStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReceiverStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// WebhookPath is the generated incoming webhook address in the format
// of '/hook/sha256sum(token+name+namespace)'.
func (o ReceiverStatusPatchOutput) WebhookPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReceiverStatusPatch) *string { return v.WebhookPath }).(pulumi.StringPtrOutput)
}

type ReceiverStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ReceiverStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverStatusPatch)(nil)).Elem()
}

func (o ReceiverStatusPatchPtrOutput) ToReceiverStatusPatchPtrOutput() ReceiverStatusPatchPtrOutput {
	return o
}

func (o ReceiverStatusPatchPtrOutput) ToReceiverStatusPatchPtrOutputWithContext(ctx context.Context) ReceiverStatusPatchPtrOutput {
	return o
}

func (o ReceiverStatusPatchPtrOutput) Elem() ReceiverStatusPatchOutput {
	return o.ApplyT(func(v *ReceiverStatusPatch) ReceiverStatusPatch {
		if v != nil {
			return *v
		}
		var ret ReceiverStatusPatch
		return ret
	}).(ReceiverStatusPatchOutput)
}

// Conditions holds the conditions for the Receiver.
func (o ReceiverStatusPatchPtrOutput) Conditions() ReceiverStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ReceiverStatusPatch) []ReceiverStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ReceiverStatusConditionsPatchArrayOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o ReceiverStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the last observed generation of the Receiver object.
func (o ReceiverStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReceiverStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// WebhookPath is the generated incoming webhook address in the format
// of '/hook/sha256sum(token+name+namespace)'.
func (o ReceiverStatusPatchPtrOutput) WebhookPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.WebhookPath
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverTypeInput)(nil)).Elem(), ReceiverTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverTypeArrayInput)(nil)).Elem(), ReceiverTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverListTypeInput)(nil)).Elem(), ReceiverListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverPatchTypeInput)(nil)).Elem(), ReceiverPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecInput)(nil)).Elem(), ReceiverSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecPtrInput)(nil)).Elem(), ReceiverSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecPatchInput)(nil)).Elem(), ReceiverSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecPatchPtrInput)(nil)).Elem(), ReceiverSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecResourcesInput)(nil)).Elem(), ReceiverSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecResourcesArrayInput)(nil)).Elem(), ReceiverSpecResourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecResourcesPatchInput)(nil)).Elem(), ReceiverSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecResourcesPatchArrayInput)(nil)).Elem(), ReceiverSpecResourcesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecSecretRefInput)(nil)).Elem(), ReceiverSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecSecretRefPtrInput)(nil)).Elem(), ReceiverSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecSecretRefPatchInput)(nil)).Elem(), ReceiverSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverSpecSecretRefPatchPtrInput)(nil)).Elem(), ReceiverSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusInput)(nil)).Elem(), ReceiverStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusPtrInput)(nil)).Elem(), ReceiverStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusConditionsInput)(nil)).Elem(), ReceiverStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusConditionsArrayInput)(nil)).Elem(), ReceiverStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusConditionsPatchInput)(nil)).Elem(), ReceiverStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusConditionsPatchArrayInput)(nil)).Elem(), ReceiverStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusPatchInput)(nil)).Elem(), ReceiverStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverStatusPatchPtrInput)(nil)).Elem(), ReceiverStatusPatchArgs{})
	pulumi.RegisterOutputType(ReceiverTypeOutput{})
	pulumi.RegisterOutputType(ReceiverTypeArrayOutput{})
	pulumi.RegisterOutputType(ReceiverListTypeOutput{})
	pulumi.RegisterOutputType(ReceiverPatchTypeOutput{})
	pulumi.RegisterOutputType(ReceiverSpecOutput{})
	pulumi.RegisterOutputType(ReceiverSpecPtrOutput{})
	pulumi.RegisterOutputType(ReceiverSpecPatchOutput{})
	pulumi.RegisterOutputType(ReceiverSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ReceiverSpecResourcesOutput{})
	pulumi.RegisterOutputType(ReceiverSpecResourcesArrayOutput{})
	pulumi.RegisterOutputType(ReceiverSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(ReceiverSpecResourcesPatchArrayOutput{})
	pulumi.RegisterOutputType(ReceiverSpecSecretRefOutput{})
	pulumi.RegisterOutputType(ReceiverSpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ReceiverSpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ReceiverSpecSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ReceiverStatusOutput{})
	pulumi.RegisterOutputType(ReceiverStatusPtrOutput{})
	pulumi.RegisterOutputType(ReceiverStatusConditionsOutput{})
	pulumi.RegisterOutputType(ReceiverStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ReceiverStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ReceiverStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ReceiverStatusPatchOutput{})
	pulumi.RegisterOutputType(ReceiverStatusPatchPtrOutput{})
}
