// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ReceiverList is a list of Receiver
type ReceiverList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ReceiverTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewReceiverList registers a new resource with the given unique name, arguments, and options.
func NewReceiverList(ctx *pulumi.Context,
	name string, args *ReceiverListArgs, opts ...pulumi.ResourceOption) (*ReceiverList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("notification.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("ReceiverList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ReceiverList
	err := ctx.RegisterResource("kubernetes:notification.toolkit.fluxcd.io/v1beta1:ReceiverList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiverList gets an existing ReceiverList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiverList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiverListState, opts ...pulumi.ResourceOption) (*ReceiverList, error) {
	var resource ReceiverList
	err := ctx.ReadResource("kubernetes:notification.toolkit.fluxcd.io/v1beta1:ReceiverList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReceiverList resources.
type receiverListState struct {
}

type ReceiverListState struct {
}

func (ReceiverListState) ElementType() reflect.Type {
	return reflect.TypeOf((*receiverListState)(nil)).Elem()
}

type receiverListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ReceiverType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ReceiverList resource.
type ReceiverListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ReceiverTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ReceiverListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*receiverListArgs)(nil)).Elem()
}

type ReceiverListInput interface {
	pulumi.Input

	ToReceiverListOutput() ReceiverListOutput
	ToReceiverListOutputWithContext(ctx context.Context) ReceiverListOutput
}

func (*ReceiverList) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverList)(nil)).Elem()
}

func (i *ReceiverList) ToReceiverListOutput() ReceiverListOutput {
	return i.ToReceiverListOutputWithContext(context.Background())
}

func (i *ReceiverList) ToReceiverListOutputWithContext(ctx context.Context) ReceiverListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverListOutput)
}

// ReceiverListArrayInput is an input type that accepts ReceiverListArray and ReceiverListArrayOutput values.
// You can construct a concrete instance of `ReceiverListArrayInput` via:
//
//	ReceiverListArray{ ReceiverListArgs{...} }
type ReceiverListArrayInput interface {
	pulumi.Input

	ToReceiverListArrayOutput() ReceiverListArrayOutput
	ToReceiverListArrayOutputWithContext(context.Context) ReceiverListArrayOutput
}

type ReceiverListArray []ReceiverListInput

func (ReceiverListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReceiverList)(nil)).Elem()
}

func (i ReceiverListArray) ToReceiverListArrayOutput() ReceiverListArrayOutput {
	return i.ToReceiverListArrayOutputWithContext(context.Background())
}

func (i ReceiverListArray) ToReceiverListArrayOutputWithContext(ctx context.Context) ReceiverListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverListArrayOutput)
}

// ReceiverListMapInput is an input type that accepts ReceiverListMap and ReceiverListMapOutput values.
// You can construct a concrete instance of `ReceiverListMapInput` via:
//
//	ReceiverListMap{ "key": ReceiverListArgs{...} }
type ReceiverListMapInput interface {
	pulumi.Input

	ToReceiverListMapOutput() ReceiverListMapOutput
	ToReceiverListMapOutputWithContext(context.Context) ReceiverListMapOutput
}

type ReceiverListMap map[string]ReceiverListInput

func (ReceiverListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReceiverList)(nil)).Elem()
}

func (i ReceiverListMap) ToReceiverListMapOutput() ReceiverListMapOutput {
	return i.ToReceiverListMapOutputWithContext(context.Background())
}

func (i ReceiverListMap) ToReceiverListMapOutputWithContext(ctx context.Context) ReceiverListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverListMapOutput)
}

type ReceiverListOutput struct{ *pulumi.OutputState }

func (ReceiverListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverList)(nil)).Elem()
}

func (o ReceiverListOutput) ToReceiverListOutput() ReceiverListOutput {
	return o
}

func (o ReceiverListOutput) ToReceiverListOutputWithContext(ctx context.Context) ReceiverListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReceiverListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ReceiverList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of receivers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ReceiverListOutput) Items() ReceiverTypeArrayOutput {
	return o.ApplyT(func(v *ReceiverList) ReceiverTypeArrayOutput { return v.Items }).(ReceiverTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ReceiverList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ReceiverList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ReceiverListArrayOutput struct{ *pulumi.OutputState }

func (ReceiverListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReceiverList)(nil)).Elem()
}

func (o ReceiverListArrayOutput) ToReceiverListArrayOutput() ReceiverListArrayOutput {
	return o
}

func (o ReceiverListArrayOutput) ToReceiverListArrayOutputWithContext(ctx context.Context) ReceiverListArrayOutput {
	return o
}

func (o ReceiverListArrayOutput) Index(i pulumi.IntInput) ReceiverListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReceiverList {
		return vs[0].([]*ReceiverList)[vs[1].(int)]
	}).(ReceiverListOutput)
}

type ReceiverListMapOutput struct{ *pulumi.OutputState }

func (ReceiverListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReceiverList)(nil)).Elem()
}

func (o ReceiverListMapOutput) ToReceiverListMapOutput() ReceiverListMapOutput {
	return o
}

func (o ReceiverListMapOutput) ToReceiverListMapOutputWithContext(ctx context.Context) ReceiverListMapOutput {
	return o
}

func (o ReceiverListMapOutput) MapIndex(k pulumi.StringInput) ReceiverListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReceiverList {
		return vs[0].(map[string]*ReceiverList)[vs[1].(string)]
	}).(ReceiverListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverListInput)(nil)).Elem(), &ReceiverList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverListArrayInput)(nil)).Elem(), ReceiverListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverListMapInput)(nil)).Elem(), ReceiverListMap{})
	pulumi.RegisterOutputType(ReceiverListOutput{})
	pulumi.RegisterOutputType(ReceiverListArrayOutput{})
	pulumi.RegisterOutputType(ReceiverListMapOutput{})
}
