// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Alert is the Schema for the alerts API
type AlertPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     AlertSpecPatchPtrOutput         `pulumi:"spec"`
	Status   AlertStatusPatchPtrOutput       `pulumi:"status"`
}

// NewAlertPatch registers a new resource with the given unique name, arguments, and options.
func NewAlertPatch(ctx *pulumi.Context,
	name string, args *AlertPatchArgs, opts ...pulumi.ResourceOption) (*AlertPatch, error) {
	if args == nil {
		args = &AlertPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("notification.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("Alert")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:notification.toolkit.fluxcd.io/v1beta2:AlertPatch"),
		},
		{
			Type: pulumi.String("kubernetes:notification.toolkit.fluxcd.io/v1beta3:AlertPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AlertPatch
	err := ctx.RegisterResource("kubernetes:notification.toolkit.fluxcd.io/v1beta1:AlertPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertPatch gets an existing AlertPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertPatchState, opts ...pulumi.ResourceOption) (*AlertPatch, error) {
	var resource AlertPatch
	err := ctx.ReadResource("kubernetes:notification.toolkit.fluxcd.io/v1beta1:AlertPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertPatch resources.
type alertPatchState struct {
}

type AlertPatchState struct {
}

func (AlertPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertPatchState)(nil)).Elem()
}

type alertPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *AlertSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a AlertPatch resource.
type AlertPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     AlertSpecPatchPtrInput
}

func (AlertPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertPatchArgs)(nil)).Elem()
}

type AlertPatchInput interface {
	pulumi.Input

	ToAlertPatchOutput() AlertPatchOutput
	ToAlertPatchOutputWithContext(ctx context.Context) AlertPatchOutput
}

func (*AlertPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPatch)(nil)).Elem()
}

func (i *AlertPatch) ToAlertPatchOutput() AlertPatchOutput {
	return i.ToAlertPatchOutputWithContext(context.Background())
}

func (i *AlertPatch) ToAlertPatchOutputWithContext(ctx context.Context) AlertPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPatchOutput)
}

// AlertPatchArrayInput is an input type that accepts AlertPatchArray and AlertPatchArrayOutput values.
// You can construct a concrete instance of `AlertPatchArrayInput` via:
//
//	AlertPatchArray{ AlertPatchArgs{...} }
type AlertPatchArrayInput interface {
	pulumi.Input

	ToAlertPatchArrayOutput() AlertPatchArrayOutput
	ToAlertPatchArrayOutputWithContext(context.Context) AlertPatchArrayOutput
}

type AlertPatchArray []AlertPatchInput

func (AlertPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertPatch)(nil)).Elem()
}

func (i AlertPatchArray) ToAlertPatchArrayOutput() AlertPatchArrayOutput {
	return i.ToAlertPatchArrayOutputWithContext(context.Background())
}

func (i AlertPatchArray) ToAlertPatchArrayOutputWithContext(ctx context.Context) AlertPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPatchArrayOutput)
}

// AlertPatchMapInput is an input type that accepts AlertPatchMap and AlertPatchMapOutput values.
// You can construct a concrete instance of `AlertPatchMapInput` via:
//
//	AlertPatchMap{ "key": AlertPatchArgs{...} }
type AlertPatchMapInput interface {
	pulumi.Input

	ToAlertPatchMapOutput() AlertPatchMapOutput
	ToAlertPatchMapOutputWithContext(context.Context) AlertPatchMapOutput
}

type AlertPatchMap map[string]AlertPatchInput

func (AlertPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertPatch)(nil)).Elem()
}

func (i AlertPatchMap) ToAlertPatchMapOutput() AlertPatchMapOutput {
	return i.ToAlertPatchMapOutputWithContext(context.Background())
}

func (i AlertPatchMap) ToAlertPatchMapOutputWithContext(ctx context.Context) AlertPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPatchMapOutput)
}

type AlertPatchOutput struct{ *pulumi.OutputState }

func (AlertPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertPatch)(nil)).Elem()
}

func (o AlertPatchOutput) ToAlertPatchOutput() AlertPatchOutput {
	return o
}

func (o AlertPatchOutput) ToAlertPatchOutputWithContext(ctx context.Context) AlertPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AlertPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AlertPatchOutput) Spec() AlertSpecPatchPtrOutput {
	return o.ApplyT(func(v *AlertPatch) AlertSpecPatchPtrOutput { return v.Spec }).(AlertSpecPatchPtrOutput)
}

func (o AlertPatchOutput) Status() AlertStatusPatchPtrOutput {
	return o.ApplyT(func(v *AlertPatch) AlertStatusPatchPtrOutput { return v.Status }).(AlertStatusPatchPtrOutput)
}

type AlertPatchArrayOutput struct{ *pulumi.OutputState }

func (AlertPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertPatch)(nil)).Elem()
}

func (o AlertPatchArrayOutput) ToAlertPatchArrayOutput() AlertPatchArrayOutput {
	return o
}

func (o AlertPatchArrayOutput) ToAlertPatchArrayOutputWithContext(ctx context.Context) AlertPatchArrayOutput {
	return o
}

func (o AlertPatchArrayOutput) Index(i pulumi.IntInput) AlertPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertPatch {
		return vs[0].([]*AlertPatch)[vs[1].(int)]
	}).(AlertPatchOutput)
}

type AlertPatchMapOutput struct{ *pulumi.OutputState }

func (AlertPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertPatch)(nil)).Elem()
}

func (o AlertPatchMapOutput) ToAlertPatchMapOutput() AlertPatchMapOutput {
	return o
}

func (o AlertPatchMapOutput) ToAlertPatchMapOutputWithContext(ctx context.Context) AlertPatchMapOutput {
	return o
}

func (o AlertPatchMapOutput) MapIndex(k pulumi.StringInput) AlertPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertPatch {
		return vs[0].(map[string]*AlertPatch)[vs[1].(string)]
	}).(AlertPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPatchInput)(nil)).Elem(), &AlertPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPatchArrayInput)(nil)).Elem(), AlertPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPatchMapInput)(nil)).Elem(), AlertPatchMap{})
	pulumi.RegisterOutputType(AlertPatchOutput{})
	pulumi.RegisterOutputType(AlertPatchArrayOutput{})
	pulumi.RegisterOutputType(AlertPatchMapOutput{})
}
