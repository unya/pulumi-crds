// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Receiver is the Schema for the receivers API
type ReceiverPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ReceiverSpecPatchPtrOutput      `pulumi:"spec"`
	Status   ReceiverStatusPatchPtrOutput    `pulumi:"status"`
}

// NewReceiverPatch registers a new resource with the given unique name, arguments, and options.
func NewReceiverPatch(ctx *pulumi.Context,
	name string, args *ReceiverPatchArgs, opts ...pulumi.ResourceOption) (*ReceiverPatch, error) {
	if args == nil {
		args = &ReceiverPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("notification.toolkit.fluxcd.io/v1beta1")
	args.Kind = pulumi.StringPtr("Receiver")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:notification.toolkit.fluxcd.io/v1:ReceiverPatch"),
		},
		{
			Type: pulumi.String("kubernetes:notification.toolkit.fluxcd.io/v1beta2:ReceiverPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ReceiverPatch
	err := ctx.RegisterResource("kubernetes:notification.toolkit.fluxcd.io/v1beta1:ReceiverPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReceiverPatch gets an existing ReceiverPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReceiverPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReceiverPatchState, opts ...pulumi.ResourceOption) (*ReceiverPatch, error) {
	var resource ReceiverPatch
	err := ctx.ReadResource("kubernetes:notification.toolkit.fluxcd.io/v1beta1:ReceiverPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReceiverPatch resources.
type receiverPatchState struct {
}

type ReceiverPatchState struct {
}

func (ReceiverPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*receiverPatchState)(nil)).Elem()
}

type receiverPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ReceiverSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a ReceiverPatch resource.
type ReceiverPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ReceiverSpecPatchPtrInput
}

func (ReceiverPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*receiverPatchArgs)(nil)).Elem()
}

type ReceiverPatchInput interface {
	pulumi.Input

	ToReceiverPatchOutput() ReceiverPatchOutput
	ToReceiverPatchOutputWithContext(ctx context.Context) ReceiverPatchOutput
}

func (*ReceiverPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverPatch)(nil)).Elem()
}

func (i *ReceiverPatch) ToReceiverPatchOutput() ReceiverPatchOutput {
	return i.ToReceiverPatchOutputWithContext(context.Background())
}

func (i *ReceiverPatch) ToReceiverPatchOutputWithContext(ctx context.Context) ReceiverPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverPatchOutput)
}

// ReceiverPatchArrayInput is an input type that accepts ReceiverPatchArray and ReceiverPatchArrayOutput values.
// You can construct a concrete instance of `ReceiverPatchArrayInput` via:
//
//	ReceiverPatchArray{ ReceiverPatchArgs{...} }
type ReceiverPatchArrayInput interface {
	pulumi.Input

	ToReceiverPatchArrayOutput() ReceiverPatchArrayOutput
	ToReceiverPatchArrayOutputWithContext(context.Context) ReceiverPatchArrayOutput
}

type ReceiverPatchArray []ReceiverPatchInput

func (ReceiverPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReceiverPatch)(nil)).Elem()
}

func (i ReceiverPatchArray) ToReceiverPatchArrayOutput() ReceiverPatchArrayOutput {
	return i.ToReceiverPatchArrayOutputWithContext(context.Background())
}

func (i ReceiverPatchArray) ToReceiverPatchArrayOutputWithContext(ctx context.Context) ReceiverPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverPatchArrayOutput)
}

// ReceiverPatchMapInput is an input type that accepts ReceiverPatchMap and ReceiverPatchMapOutput values.
// You can construct a concrete instance of `ReceiverPatchMapInput` via:
//
//	ReceiverPatchMap{ "key": ReceiverPatchArgs{...} }
type ReceiverPatchMapInput interface {
	pulumi.Input

	ToReceiverPatchMapOutput() ReceiverPatchMapOutput
	ToReceiverPatchMapOutputWithContext(context.Context) ReceiverPatchMapOutput
}

type ReceiverPatchMap map[string]ReceiverPatchInput

func (ReceiverPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReceiverPatch)(nil)).Elem()
}

func (i ReceiverPatchMap) ToReceiverPatchMapOutput() ReceiverPatchMapOutput {
	return i.ToReceiverPatchMapOutputWithContext(context.Background())
}

func (i ReceiverPatchMap) ToReceiverPatchMapOutputWithContext(ctx context.Context) ReceiverPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverPatchMapOutput)
}

type ReceiverPatchOutput struct{ *pulumi.OutputState }

func (ReceiverPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReceiverPatch)(nil)).Elem()
}

func (o ReceiverPatchOutput) ToReceiverPatchOutput() ReceiverPatchOutput {
	return o
}

func (o ReceiverPatchOutput) ToReceiverPatchOutputWithContext(ctx context.Context) ReceiverPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReceiverPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReceiverPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReceiverPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReceiverPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ReceiverPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ReceiverPatchOutput) Spec() ReceiverSpecPatchPtrOutput {
	return o.ApplyT(func(v *ReceiverPatch) ReceiverSpecPatchPtrOutput { return v.Spec }).(ReceiverSpecPatchPtrOutput)
}

func (o ReceiverPatchOutput) Status() ReceiverStatusPatchPtrOutput {
	return o.ApplyT(func(v *ReceiverPatch) ReceiverStatusPatchPtrOutput { return v.Status }).(ReceiverStatusPatchPtrOutput)
}

type ReceiverPatchArrayOutput struct{ *pulumi.OutputState }

func (ReceiverPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReceiverPatch)(nil)).Elem()
}

func (o ReceiverPatchArrayOutput) ToReceiverPatchArrayOutput() ReceiverPatchArrayOutput {
	return o
}

func (o ReceiverPatchArrayOutput) ToReceiverPatchArrayOutputWithContext(ctx context.Context) ReceiverPatchArrayOutput {
	return o
}

func (o ReceiverPatchArrayOutput) Index(i pulumi.IntInput) ReceiverPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReceiverPatch {
		return vs[0].([]*ReceiverPatch)[vs[1].(int)]
	}).(ReceiverPatchOutput)
}

type ReceiverPatchMapOutput struct{ *pulumi.OutputState }

func (ReceiverPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReceiverPatch)(nil)).Elem()
}

func (o ReceiverPatchMapOutput) ToReceiverPatchMapOutput() ReceiverPatchMapOutput {
	return o
}

func (o ReceiverPatchMapOutput) ToReceiverPatchMapOutputWithContext(ctx context.Context) ReceiverPatchMapOutput {
	return o
}

func (o ReceiverPatchMapOutput) MapIndex(k pulumi.StringInput) ReceiverPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReceiverPatch {
		return vs[0].(map[string]*ReceiverPatch)[vs[1].(string)]
	}).(ReceiverPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverPatchInput)(nil)).Elem(), &ReceiverPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverPatchArrayInput)(nil)).Elem(), ReceiverPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReceiverPatchMapInput)(nil)).Elem(), ReceiverPatchMap{})
	pulumi.RegisterOutputType(ReceiverPatchOutput{})
	pulumi.RegisterOutputType(ReceiverPatchArrayOutput{})
	pulumi.RegisterOutputType(ReceiverPatchMapOutput{})
}
