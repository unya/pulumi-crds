// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Alert is the Schema for the alerts API
type AlertType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *AlertSpec         `pulumi:"spec"`
}

// AlertTypeInput is an input type that accepts AlertTypeArgs and AlertTypeOutput values.
// You can construct a concrete instance of `AlertTypeInput` via:
//
//	AlertTypeArgs{...}
type AlertTypeInput interface {
	pulumi.Input

	ToAlertTypeOutput() AlertTypeOutput
	ToAlertTypeOutputWithContext(context.Context) AlertTypeOutput
}

// Alert is the Schema for the alerts API
type AlertTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     AlertSpecPtrInput         `pulumi:"spec"`
}

func (AlertTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertType)(nil)).Elem()
}

func (i AlertTypeArgs) ToAlertTypeOutput() AlertTypeOutput {
	return i.ToAlertTypeOutputWithContext(context.Background())
}

func (i AlertTypeArgs) ToAlertTypeOutputWithContext(ctx context.Context) AlertTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTypeOutput)
}

// AlertTypeArrayInput is an input type that accepts AlertTypeArray and AlertTypeArrayOutput values.
// You can construct a concrete instance of `AlertTypeArrayInput` via:
//
//	AlertTypeArray{ AlertTypeArgs{...} }
type AlertTypeArrayInput interface {
	pulumi.Input

	ToAlertTypeArrayOutput() AlertTypeArrayOutput
	ToAlertTypeArrayOutputWithContext(context.Context) AlertTypeArrayOutput
}

type AlertTypeArray []AlertTypeInput

func (AlertTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertType)(nil)).Elem()
}

func (i AlertTypeArray) ToAlertTypeArrayOutput() AlertTypeArrayOutput {
	return i.ToAlertTypeArrayOutputWithContext(context.Background())
}

func (i AlertTypeArray) ToAlertTypeArrayOutputWithContext(ctx context.Context) AlertTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertTypeArrayOutput)
}

// Alert is the Schema for the alerts API
type AlertTypeOutput struct{ *pulumi.OutputState }

func (AlertTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertType)(nil)).Elem()
}

func (o AlertTypeOutput) ToAlertTypeOutput() AlertTypeOutput {
	return o
}

func (o AlertTypeOutput) ToAlertTypeOutputWithContext(ctx context.Context) AlertTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v AlertType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o AlertTypeOutput) Spec() AlertSpecPtrOutput {
	return o.ApplyT(func(v AlertType) *AlertSpec { return v.Spec }).(AlertSpecPtrOutput)
}

type AlertTypeArrayOutput struct{ *pulumi.OutputState }

func (AlertTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertType)(nil)).Elem()
}

func (o AlertTypeArrayOutput) ToAlertTypeArrayOutput() AlertTypeArrayOutput {
	return o
}

func (o AlertTypeArrayOutput) ToAlertTypeArrayOutputWithContext(ctx context.Context) AlertTypeArrayOutput {
	return o
}

func (o AlertTypeArrayOutput) Index(i pulumi.IntInput) AlertTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertType {
		return vs[0].([]AlertType)[vs[1].(int)]
	}).(AlertTypeOutput)
}

// AlertList is a list of Alert
type AlertListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of alerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []AlertType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// AlertListTypeInput is an input type that accepts AlertListTypeArgs and AlertListTypeOutput values.
// You can construct a concrete instance of `AlertListTypeInput` via:
//
//	AlertListTypeArgs{...}
type AlertListTypeInput interface {
	pulumi.Input

	ToAlertListTypeOutput() AlertListTypeOutput
	ToAlertListTypeOutputWithContext(context.Context) AlertListTypeOutput
}

// AlertList is a list of Alert
type AlertListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of alerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items AlertTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (AlertListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertListType)(nil)).Elem()
}

func (i AlertListTypeArgs) ToAlertListTypeOutput() AlertListTypeOutput {
	return i.ToAlertListTypeOutputWithContext(context.Background())
}

func (i AlertListTypeArgs) ToAlertListTypeOutputWithContext(ctx context.Context) AlertListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertListTypeOutput)
}

// AlertList is a list of Alert
type AlertListTypeOutput struct{ *pulumi.OutputState }

func (AlertListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertListType)(nil)).Elem()
}

func (o AlertListTypeOutput) ToAlertListTypeOutput() AlertListTypeOutput {
	return o
}

func (o AlertListTypeOutput) ToAlertListTypeOutputWithContext(ctx context.Context) AlertListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of alerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o AlertListTypeOutput) Items() AlertTypeArrayOutput {
	return o.ApplyT(func(v AlertListType) []AlertType { return v.Items }).(AlertTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v AlertListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Alert is the Schema for the alerts API
type AlertPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *AlertSpecPatch         `pulumi:"spec"`
}

// AlertPatchTypeInput is an input type that accepts AlertPatchTypeArgs and AlertPatchTypeOutput values.
// You can construct a concrete instance of `AlertPatchTypeInput` via:
//
//	AlertPatchTypeArgs{...}
type AlertPatchTypeInput interface {
	pulumi.Input

	ToAlertPatchTypeOutput() AlertPatchTypeOutput
	ToAlertPatchTypeOutputWithContext(context.Context) AlertPatchTypeOutput
}

// Alert is the Schema for the alerts API
type AlertPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     AlertSpecPatchPtrInput         `pulumi:"spec"`
}

func (AlertPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPatchType)(nil)).Elem()
}

func (i AlertPatchTypeArgs) ToAlertPatchTypeOutput() AlertPatchTypeOutput {
	return i.ToAlertPatchTypeOutputWithContext(context.Background())
}

func (i AlertPatchTypeArgs) ToAlertPatchTypeOutputWithContext(ctx context.Context) AlertPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPatchTypeOutput)
}

// Alert is the Schema for the alerts API
type AlertPatchTypeOutput struct{ *pulumi.OutputState }

func (AlertPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPatchType)(nil)).Elem()
}

func (o AlertPatchTypeOutput) ToAlertPatchTypeOutput() AlertPatchTypeOutput {
	return o
}

func (o AlertPatchTypeOutput) ToAlertPatchTypeOutputWithContext(ctx context.Context) AlertPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v AlertPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AlertPatchTypeOutput) Spec() AlertSpecPatchPtrOutput {
	return o.ApplyT(func(v AlertPatchType) *AlertSpecPatch { return v.Spec }).(AlertSpecPatchPtrOutput)
}

// AlertSpec defines an alerting rule for events involving a list of objects.
type AlertSpec struct {
	// EventMetadata is an optional field for adding metadata to events dispatched by the
	// controller. This can be used for enhancing the context of the event. If a field
	// would override one already present on the original event as generated by the emitter,
	// then the override doesn't happen, i.e. the original value is preserved, and an info
	// log is printed.
	EventMetadata map[string]string `pulumi:"eventMetadata"`
	// EventSeverity specifies how to filter events based on severity.
	// If set to 'info' no events will be filtered.
	EventSeverity *string `pulumi:"eventSeverity"`
	// EventSources specifies how to filter events based
	// on the involved object kind, name and namespace.
	EventSources []AlertSpecEventSources `pulumi:"eventSources"`
	// ExclusionList specifies a list of Golang regular expressions
	// to be used for excluding messages.
	ExclusionList []string `pulumi:"exclusionList"`
	// InclusionList specifies a list of Golang regular expressions
	// to be used for including messages.
	InclusionList []string              `pulumi:"inclusionList"`
	ProviderRef   *AlertSpecProviderRef `pulumi:"providerRef"`
	// Summary holds a short description of the impact and affected cluster.
	// Deprecated: Use EventMetadata instead.
	Summary *string `pulumi:"summary"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Alert.
	Suspend *bool `pulumi:"suspend"`
}

// AlertSpecInput is an input type that accepts AlertSpecArgs and AlertSpecOutput values.
// You can construct a concrete instance of `AlertSpecInput` via:
//
//	AlertSpecArgs{...}
type AlertSpecInput interface {
	pulumi.Input

	ToAlertSpecOutput() AlertSpecOutput
	ToAlertSpecOutputWithContext(context.Context) AlertSpecOutput
}

// AlertSpec defines an alerting rule for events involving a list of objects.
type AlertSpecArgs struct {
	// EventMetadata is an optional field for adding metadata to events dispatched by the
	// controller. This can be used for enhancing the context of the event. If a field
	// would override one already present on the original event as generated by the emitter,
	// then the override doesn't happen, i.e. the original value is preserved, and an info
	// log is printed.
	EventMetadata pulumi.StringMapInput `pulumi:"eventMetadata"`
	// EventSeverity specifies how to filter events based on severity.
	// If set to 'info' no events will be filtered.
	EventSeverity pulumi.StringPtrInput `pulumi:"eventSeverity"`
	// EventSources specifies how to filter events based
	// on the involved object kind, name and namespace.
	EventSources AlertSpecEventSourcesArrayInput `pulumi:"eventSources"`
	// ExclusionList specifies a list of Golang regular expressions
	// to be used for excluding messages.
	ExclusionList pulumi.StringArrayInput `pulumi:"exclusionList"`
	// InclusionList specifies a list of Golang regular expressions
	// to be used for including messages.
	InclusionList pulumi.StringArrayInput      `pulumi:"inclusionList"`
	ProviderRef   AlertSpecProviderRefPtrInput `pulumi:"providerRef"`
	// Summary holds a short description of the impact and affected cluster.
	// Deprecated: Use EventMetadata instead.
	Summary pulumi.StringPtrInput `pulumi:"summary"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Alert.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
}

func (AlertSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpec)(nil)).Elem()
}

func (i AlertSpecArgs) ToAlertSpecOutput() AlertSpecOutput {
	return i.ToAlertSpecOutputWithContext(context.Background())
}

func (i AlertSpecArgs) ToAlertSpecOutputWithContext(ctx context.Context) AlertSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecOutput)
}

func (i AlertSpecArgs) ToAlertSpecPtrOutput() AlertSpecPtrOutput {
	return i.ToAlertSpecPtrOutputWithContext(context.Background())
}

func (i AlertSpecArgs) ToAlertSpecPtrOutputWithContext(ctx context.Context) AlertSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecOutput).ToAlertSpecPtrOutputWithContext(ctx)
}

// AlertSpecPtrInput is an input type that accepts AlertSpecArgs, AlertSpecPtr and AlertSpecPtrOutput values.
// You can construct a concrete instance of `AlertSpecPtrInput` via:
//
//	        AlertSpecArgs{...}
//
//	or:
//
//	        nil
type AlertSpecPtrInput interface {
	pulumi.Input

	ToAlertSpecPtrOutput() AlertSpecPtrOutput
	ToAlertSpecPtrOutputWithContext(context.Context) AlertSpecPtrOutput
}

type alertSpecPtrType AlertSpecArgs

func AlertSpecPtr(v *AlertSpecArgs) AlertSpecPtrInput {
	return (*alertSpecPtrType)(v)
}

func (*alertSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpec)(nil)).Elem()
}

func (i *alertSpecPtrType) ToAlertSpecPtrOutput() AlertSpecPtrOutput {
	return i.ToAlertSpecPtrOutputWithContext(context.Background())
}

func (i *alertSpecPtrType) ToAlertSpecPtrOutputWithContext(ctx context.Context) AlertSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecPtrOutput)
}

// AlertSpec defines an alerting rule for events involving a list of objects.
type AlertSpecOutput struct{ *pulumi.OutputState }

func (AlertSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpec)(nil)).Elem()
}

func (o AlertSpecOutput) ToAlertSpecOutput() AlertSpecOutput {
	return o
}

func (o AlertSpecOutput) ToAlertSpecOutputWithContext(ctx context.Context) AlertSpecOutput {
	return o
}

func (o AlertSpecOutput) ToAlertSpecPtrOutput() AlertSpecPtrOutput {
	return o.ToAlertSpecPtrOutputWithContext(context.Background())
}

func (o AlertSpecOutput) ToAlertSpecPtrOutputWithContext(ctx context.Context) AlertSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertSpec) *AlertSpec {
		return &v
	}).(AlertSpecPtrOutput)
}

// EventMetadata is an optional field for adding metadata to events dispatched by the
// controller. This can be used for enhancing the context of the event. If a field
// would override one already present on the original event as generated by the emitter,
// then the override doesn't happen, i.e. the original value is preserved, and an info
// log is printed.
func (o AlertSpecOutput) EventMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertSpec) map[string]string { return v.EventMetadata }).(pulumi.StringMapOutput)
}

// EventSeverity specifies how to filter events based on severity.
// If set to 'info' no events will be filtered.
func (o AlertSpecOutput) EventSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpec) *string { return v.EventSeverity }).(pulumi.StringPtrOutput)
}

// EventSources specifies how to filter events based
// on the involved object kind, name and namespace.
func (o AlertSpecOutput) EventSources() AlertSpecEventSourcesArrayOutput {
	return o.ApplyT(func(v AlertSpec) []AlertSpecEventSources { return v.EventSources }).(AlertSpecEventSourcesArrayOutput)
}

// ExclusionList specifies a list of Golang regular expressions
// to be used for excluding messages.
func (o AlertSpecOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertSpec) []string { return v.ExclusionList }).(pulumi.StringArrayOutput)
}

// InclusionList specifies a list of Golang regular expressions
// to be used for including messages.
func (o AlertSpecOutput) InclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertSpec) []string { return v.InclusionList }).(pulumi.StringArrayOutput)
}

func (o AlertSpecOutput) ProviderRef() AlertSpecProviderRefPtrOutput {
	return o.ApplyT(func(v AlertSpec) *AlertSpecProviderRef { return v.ProviderRef }).(AlertSpecProviderRefPtrOutput)
}

// Summary holds a short description of the impact and affected cluster.
// Deprecated: Use EventMetadata instead.
func (o AlertSpecOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpec) *string { return v.Summary }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Alert.
func (o AlertSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type AlertSpecPtrOutput struct{ *pulumi.OutputState }

func (AlertSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpec)(nil)).Elem()
}

func (o AlertSpecPtrOutput) ToAlertSpecPtrOutput() AlertSpecPtrOutput {
	return o
}

func (o AlertSpecPtrOutput) ToAlertSpecPtrOutputWithContext(ctx context.Context) AlertSpecPtrOutput {
	return o
}

func (o AlertSpecPtrOutput) Elem() AlertSpecOutput {
	return o.ApplyT(func(v *AlertSpec) AlertSpec {
		if v != nil {
			return *v
		}
		var ret AlertSpec
		return ret
	}).(AlertSpecOutput)
}

// EventMetadata is an optional field for adding metadata to events dispatched by the
// controller. This can be used for enhancing the context of the event. If a field
// would override one already present on the original event as generated by the emitter,
// then the override doesn't happen, i.e. the original value is preserved, and an info
// log is printed.
func (o AlertSpecPtrOutput) EventMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.EventMetadata
	}).(pulumi.StringMapOutput)
}

// EventSeverity specifies how to filter events based on severity.
// If set to 'info' no events will be filtered.
func (o AlertSpecPtrOutput) EventSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertSpec) *string {
		if v == nil {
			return nil
		}
		return v.EventSeverity
	}).(pulumi.StringPtrOutput)
}

// EventSources specifies how to filter events based
// on the involved object kind, name and namespace.
func (o AlertSpecPtrOutput) EventSources() AlertSpecEventSourcesArrayOutput {
	return o.ApplyT(func(v *AlertSpec) []AlertSpecEventSources {
		if v == nil {
			return nil
		}
		return v.EventSources
	}).(AlertSpecEventSourcesArrayOutput)
}

// ExclusionList specifies a list of Golang regular expressions
// to be used for excluding messages.
func (o AlertSpecPtrOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExclusionList
	}).(pulumi.StringArrayOutput)
}

// InclusionList specifies a list of Golang regular expressions
// to be used for including messages.
func (o AlertSpecPtrOutput) InclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertSpec) []string {
		if v == nil {
			return nil
		}
		return v.InclusionList
	}).(pulumi.StringArrayOutput)
}

func (o AlertSpecPtrOutput) ProviderRef() AlertSpecProviderRefPtrOutput {
	return o.ApplyT(func(v *AlertSpec) *AlertSpecProviderRef {
		if v == nil {
			return nil
		}
		return v.ProviderRef
	}).(AlertSpecProviderRefPtrOutput)
}

// Summary holds a short description of the impact and affected cluster.
// Deprecated: Use EventMetadata instead.
func (o AlertSpecPtrOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertSpec) *string {
		if v == nil {
			return nil
		}
		return v.Summary
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Alert.
func (o AlertSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type AlertSpecEventSources struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent
	Kind *string `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name *string `pulumi:"name"`
	// Namespace of the referent
	Namespace *string `pulumi:"namespace"`
}

// AlertSpecEventSourcesInput is an input type that accepts AlertSpecEventSourcesArgs and AlertSpecEventSourcesOutput values.
// You can construct a concrete instance of `AlertSpecEventSourcesInput` via:
//
//	AlertSpecEventSourcesArgs{...}
type AlertSpecEventSourcesInput interface {
	pulumi.Input

	ToAlertSpecEventSourcesOutput() AlertSpecEventSourcesOutput
	ToAlertSpecEventSourcesOutputWithContext(context.Context) AlertSpecEventSourcesOutput
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type AlertSpecEventSourcesArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (AlertSpecEventSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecEventSources)(nil)).Elem()
}

func (i AlertSpecEventSourcesArgs) ToAlertSpecEventSourcesOutput() AlertSpecEventSourcesOutput {
	return i.ToAlertSpecEventSourcesOutputWithContext(context.Background())
}

func (i AlertSpecEventSourcesArgs) ToAlertSpecEventSourcesOutputWithContext(ctx context.Context) AlertSpecEventSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecEventSourcesOutput)
}

// AlertSpecEventSourcesArrayInput is an input type that accepts AlertSpecEventSourcesArray and AlertSpecEventSourcesArrayOutput values.
// You can construct a concrete instance of `AlertSpecEventSourcesArrayInput` via:
//
//	AlertSpecEventSourcesArray{ AlertSpecEventSourcesArgs{...} }
type AlertSpecEventSourcesArrayInput interface {
	pulumi.Input

	ToAlertSpecEventSourcesArrayOutput() AlertSpecEventSourcesArrayOutput
	ToAlertSpecEventSourcesArrayOutputWithContext(context.Context) AlertSpecEventSourcesArrayOutput
}

type AlertSpecEventSourcesArray []AlertSpecEventSourcesInput

func (AlertSpecEventSourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertSpecEventSources)(nil)).Elem()
}

func (i AlertSpecEventSourcesArray) ToAlertSpecEventSourcesArrayOutput() AlertSpecEventSourcesArrayOutput {
	return i.ToAlertSpecEventSourcesArrayOutputWithContext(context.Background())
}

func (i AlertSpecEventSourcesArray) ToAlertSpecEventSourcesArrayOutputWithContext(ctx context.Context) AlertSpecEventSourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecEventSourcesArrayOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type AlertSpecEventSourcesOutput struct{ *pulumi.OutputState }

func (AlertSpecEventSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecEventSources)(nil)).Elem()
}

func (o AlertSpecEventSourcesOutput) ToAlertSpecEventSourcesOutput() AlertSpecEventSourcesOutput {
	return o
}

func (o AlertSpecEventSourcesOutput) ToAlertSpecEventSourcesOutputWithContext(ctx context.Context) AlertSpecEventSourcesOutput {
	return o
}

// API version of the referent
func (o AlertSpecEventSourcesOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSources) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent
func (o AlertSpecEventSourcesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSources) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
// MatchLabels requires the name to be set to `*`.
func (o AlertSpecEventSourcesOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertSpecEventSources) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// Name of the referent
// If multiple resources are targeted `*` may be set.
func (o AlertSpecEventSourcesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSources) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent
func (o AlertSpecEventSourcesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSources) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AlertSpecEventSourcesArrayOutput struct{ *pulumi.OutputState }

func (AlertSpecEventSourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertSpecEventSources)(nil)).Elem()
}

func (o AlertSpecEventSourcesArrayOutput) ToAlertSpecEventSourcesArrayOutput() AlertSpecEventSourcesArrayOutput {
	return o
}

func (o AlertSpecEventSourcesArrayOutput) ToAlertSpecEventSourcesArrayOutputWithContext(ctx context.Context) AlertSpecEventSourcesArrayOutput {
	return o
}

func (o AlertSpecEventSourcesArrayOutput) Index(i pulumi.IntInput) AlertSpecEventSourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertSpecEventSources {
		return vs[0].([]AlertSpecEventSources)[vs[1].(int)]
	}).(AlertSpecEventSourcesOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type AlertSpecEventSourcesPatch struct {
	// API version of the referent
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent
	Kind *string `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name *string `pulumi:"name"`
	// Namespace of the referent
	Namespace *string `pulumi:"namespace"`
}

// AlertSpecEventSourcesPatchInput is an input type that accepts AlertSpecEventSourcesPatchArgs and AlertSpecEventSourcesPatchOutput values.
// You can construct a concrete instance of `AlertSpecEventSourcesPatchInput` via:
//
//	AlertSpecEventSourcesPatchArgs{...}
type AlertSpecEventSourcesPatchInput interface {
	pulumi.Input

	ToAlertSpecEventSourcesPatchOutput() AlertSpecEventSourcesPatchOutput
	ToAlertSpecEventSourcesPatchOutputWithContext(context.Context) AlertSpecEventSourcesPatchOutput
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type AlertSpecEventSourcesPatchArgs struct {
	// API version of the referent
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// MatchLabels requires the name to be set to `*`.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
	// Name of the referent
	// If multiple resources are targeted `*` may be set.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (AlertSpecEventSourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecEventSourcesPatch)(nil)).Elem()
}

func (i AlertSpecEventSourcesPatchArgs) ToAlertSpecEventSourcesPatchOutput() AlertSpecEventSourcesPatchOutput {
	return i.ToAlertSpecEventSourcesPatchOutputWithContext(context.Background())
}

func (i AlertSpecEventSourcesPatchArgs) ToAlertSpecEventSourcesPatchOutputWithContext(ctx context.Context) AlertSpecEventSourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecEventSourcesPatchOutput)
}

// AlertSpecEventSourcesPatchArrayInput is an input type that accepts AlertSpecEventSourcesPatchArray and AlertSpecEventSourcesPatchArrayOutput values.
// You can construct a concrete instance of `AlertSpecEventSourcesPatchArrayInput` via:
//
//	AlertSpecEventSourcesPatchArray{ AlertSpecEventSourcesPatchArgs{...} }
type AlertSpecEventSourcesPatchArrayInput interface {
	pulumi.Input

	ToAlertSpecEventSourcesPatchArrayOutput() AlertSpecEventSourcesPatchArrayOutput
	ToAlertSpecEventSourcesPatchArrayOutputWithContext(context.Context) AlertSpecEventSourcesPatchArrayOutput
}

type AlertSpecEventSourcesPatchArray []AlertSpecEventSourcesPatchInput

func (AlertSpecEventSourcesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertSpecEventSourcesPatch)(nil)).Elem()
}

func (i AlertSpecEventSourcesPatchArray) ToAlertSpecEventSourcesPatchArrayOutput() AlertSpecEventSourcesPatchArrayOutput {
	return i.ToAlertSpecEventSourcesPatchArrayOutputWithContext(context.Background())
}

func (i AlertSpecEventSourcesPatchArray) ToAlertSpecEventSourcesPatchArrayOutputWithContext(ctx context.Context) AlertSpecEventSourcesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecEventSourcesPatchArrayOutput)
}

// CrossNamespaceObjectReference contains enough information to let you locate the
// typed referenced object at cluster level
type AlertSpecEventSourcesPatchOutput struct{ *pulumi.OutputState }

func (AlertSpecEventSourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecEventSourcesPatch)(nil)).Elem()
}

func (o AlertSpecEventSourcesPatchOutput) ToAlertSpecEventSourcesPatchOutput() AlertSpecEventSourcesPatchOutput {
	return o
}

func (o AlertSpecEventSourcesPatchOutput) ToAlertSpecEventSourcesPatchOutputWithContext(ctx context.Context) AlertSpecEventSourcesPatchOutput {
	return o
}

// API version of the referent
func (o AlertSpecEventSourcesPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSourcesPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent
func (o AlertSpecEventSourcesPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSourcesPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
// MatchLabels requires the name to be set to `*`.
func (o AlertSpecEventSourcesPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertSpecEventSourcesPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// Name of the referent
// If multiple resources are targeted `*` may be set.
func (o AlertSpecEventSourcesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSourcesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent
func (o AlertSpecEventSourcesPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecEventSourcesPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type AlertSpecEventSourcesPatchArrayOutput struct{ *pulumi.OutputState }

func (AlertSpecEventSourcesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertSpecEventSourcesPatch)(nil)).Elem()
}

func (o AlertSpecEventSourcesPatchArrayOutput) ToAlertSpecEventSourcesPatchArrayOutput() AlertSpecEventSourcesPatchArrayOutput {
	return o
}

func (o AlertSpecEventSourcesPatchArrayOutput) ToAlertSpecEventSourcesPatchArrayOutputWithContext(ctx context.Context) AlertSpecEventSourcesPatchArrayOutput {
	return o
}

func (o AlertSpecEventSourcesPatchArrayOutput) Index(i pulumi.IntInput) AlertSpecEventSourcesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertSpecEventSourcesPatch {
		return vs[0].([]AlertSpecEventSourcesPatch)[vs[1].(int)]
	}).(AlertSpecEventSourcesPatchOutput)
}

// AlertSpec defines an alerting rule for events involving a list of objects.
type AlertSpecPatch struct {
	// EventMetadata is an optional field for adding metadata to events dispatched by the
	// controller. This can be used for enhancing the context of the event. If a field
	// would override one already present on the original event as generated by the emitter,
	// then the override doesn't happen, i.e. the original value is preserved, and an info
	// log is printed.
	EventMetadata map[string]string `pulumi:"eventMetadata"`
	// EventSeverity specifies how to filter events based on severity.
	// If set to 'info' no events will be filtered.
	EventSeverity *string `pulumi:"eventSeverity"`
	// EventSources specifies how to filter events based
	// on the involved object kind, name and namespace.
	EventSources []AlertSpecEventSourcesPatch `pulumi:"eventSources"`
	// ExclusionList specifies a list of Golang regular expressions
	// to be used for excluding messages.
	ExclusionList []string `pulumi:"exclusionList"`
	// InclusionList specifies a list of Golang regular expressions
	// to be used for including messages.
	InclusionList []string                   `pulumi:"inclusionList"`
	ProviderRef   *AlertSpecProviderRefPatch `pulumi:"providerRef"`
	// Summary holds a short description of the impact and affected cluster.
	// Deprecated: Use EventMetadata instead.
	Summary *string `pulumi:"summary"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Alert.
	Suspend *bool `pulumi:"suspend"`
}

// AlertSpecPatchInput is an input type that accepts AlertSpecPatchArgs and AlertSpecPatchOutput values.
// You can construct a concrete instance of `AlertSpecPatchInput` via:
//
//	AlertSpecPatchArgs{...}
type AlertSpecPatchInput interface {
	pulumi.Input

	ToAlertSpecPatchOutput() AlertSpecPatchOutput
	ToAlertSpecPatchOutputWithContext(context.Context) AlertSpecPatchOutput
}

// AlertSpec defines an alerting rule for events involving a list of objects.
type AlertSpecPatchArgs struct {
	// EventMetadata is an optional field for adding metadata to events dispatched by the
	// controller. This can be used for enhancing the context of the event. If a field
	// would override one already present on the original event as generated by the emitter,
	// then the override doesn't happen, i.e. the original value is preserved, and an info
	// log is printed.
	EventMetadata pulumi.StringMapInput `pulumi:"eventMetadata"`
	// EventSeverity specifies how to filter events based on severity.
	// If set to 'info' no events will be filtered.
	EventSeverity pulumi.StringPtrInput `pulumi:"eventSeverity"`
	// EventSources specifies how to filter events based
	// on the involved object kind, name and namespace.
	EventSources AlertSpecEventSourcesPatchArrayInput `pulumi:"eventSources"`
	// ExclusionList specifies a list of Golang regular expressions
	// to be used for excluding messages.
	ExclusionList pulumi.StringArrayInput `pulumi:"exclusionList"`
	// InclusionList specifies a list of Golang regular expressions
	// to be used for including messages.
	InclusionList pulumi.StringArrayInput           `pulumi:"inclusionList"`
	ProviderRef   AlertSpecProviderRefPatchPtrInput `pulumi:"providerRef"`
	// Summary holds a short description of the impact and affected cluster.
	// Deprecated: Use EventMetadata instead.
	Summary pulumi.StringPtrInput `pulumi:"summary"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Alert.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
}

func (AlertSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecPatch)(nil)).Elem()
}

func (i AlertSpecPatchArgs) ToAlertSpecPatchOutput() AlertSpecPatchOutput {
	return i.ToAlertSpecPatchOutputWithContext(context.Background())
}

func (i AlertSpecPatchArgs) ToAlertSpecPatchOutputWithContext(ctx context.Context) AlertSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecPatchOutput)
}

func (i AlertSpecPatchArgs) ToAlertSpecPatchPtrOutput() AlertSpecPatchPtrOutput {
	return i.ToAlertSpecPatchPtrOutputWithContext(context.Background())
}

func (i AlertSpecPatchArgs) ToAlertSpecPatchPtrOutputWithContext(ctx context.Context) AlertSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecPatchOutput).ToAlertSpecPatchPtrOutputWithContext(ctx)
}

// AlertSpecPatchPtrInput is an input type that accepts AlertSpecPatchArgs, AlertSpecPatchPtr and AlertSpecPatchPtrOutput values.
// You can construct a concrete instance of `AlertSpecPatchPtrInput` via:
//
//	        AlertSpecPatchArgs{...}
//
//	or:
//
//	        nil
type AlertSpecPatchPtrInput interface {
	pulumi.Input

	ToAlertSpecPatchPtrOutput() AlertSpecPatchPtrOutput
	ToAlertSpecPatchPtrOutputWithContext(context.Context) AlertSpecPatchPtrOutput
}

type alertSpecPatchPtrType AlertSpecPatchArgs

func AlertSpecPatchPtr(v *AlertSpecPatchArgs) AlertSpecPatchPtrInput {
	return (*alertSpecPatchPtrType)(v)
}

func (*alertSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpecPatch)(nil)).Elem()
}

func (i *alertSpecPatchPtrType) ToAlertSpecPatchPtrOutput() AlertSpecPatchPtrOutput {
	return i.ToAlertSpecPatchPtrOutputWithContext(context.Background())
}

func (i *alertSpecPatchPtrType) ToAlertSpecPatchPtrOutputWithContext(ctx context.Context) AlertSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecPatchPtrOutput)
}

// AlertSpec defines an alerting rule for events involving a list of objects.
type AlertSpecPatchOutput struct{ *pulumi.OutputState }

func (AlertSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecPatch)(nil)).Elem()
}

func (o AlertSpecPatchOutput) ToAlertSpecPatchOutput() AlertSpecPatchOutput {
	return o
}

func (o AlertSpecPatchOutput) ToAlertSpecPatchOutputWithContext(ctx context.Context) AlertSpecPatchOutput {
	return o
}

func (o AlertSpecPatchOutput) ToAlertSpecPatchPtrOutput() AlertSpecPatchPtrOutput {
	return o.ToAlertSpecPatchPtrOutputWithContext(context.Background())
}

func (o AlertSpecPatchOutput) ToAlertSpecPatchPtrOutputWithContext(ctx context.Context) AlertSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertSpecPatch) *AlertSpecPatch {
		return &v
	}).(AlertSpecPatchPtrOutput)
}

// EventMetadata is an optional field for adding metadata to events dispatched by the
// controller. This can be used for enhancing the context of the event. If a field
// would override one already present on the original event as generated by the emitter,
// then the override doesn't happen, i.e. the original value is preserved, and an info
// log is printed.
func (o AlertSpecPatchOutput) EventMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertSpecPatch) map[string]string { return v.EventMetadata }).(pulumi.StringMapOutput)
}

// EventSeverity specifies how to filter events based on severity.
// If set to 'info' no events will be filtered.
func (o AlertSpecPatchOutput) EventSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecPatch) *string { return v.EventSeverity }).(pulumi.StringPtrOutput)
}

// EventSources specifies how to filter events based
// on the involved object kind, name and namespace.
func (o AlertSpecPatchOutput) EventSources() AlertSpecEventSourcesPatchArrayOutput {
	return o.ApplyT(func(v AlertSpecPatch) []AlertSpecEventSourcesPatch { return v.EventSources }).(AlertSpecEventSourcesPatchArrayOutput)
}

// ExclusionList specifies a list of Golang regular expressions
// to be used for excluding messages.
func (o AlertSpecPatchOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertSpecPatch) []string { return v.ExclusionList }).(pulumi.StringArrayOutput)
}

// InclusionList specifies a list of Golang regular expressions
// to be used for including messages.
func (o AlertSpecPatchOutput) InclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertSpecPatch) []string { return v.InclusionList }).(pulumi.StringArrayOutput)
}

func (o AlertSpecPatchOutput) ProviderRef() AlertSpecProviderRefPatchPtrOutput {
	return o.ApplyT(func(v AlertSpecPatch) *AlertSpecProviderRefPatch { return v.ProviderRef }).(AlertSpecProviderRefPatchPtrOutput)
}

// Summary holds a short description of the impact and affected cluster.
// Deprecated: Use EventMetadata instead.
func (o AlertSpecPatchOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecPatch) *string { return v.Summary }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Alert.
func (o AlertSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type AlertSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (AlertSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpecPatch)(nil)).Elem()
}

func (o AlertSpecPatchPtrOutput) ToAlertSpecPatchPtrOutput() AlertSpecPatchPtrOutput {
	return o
}

func (o AlertSpecPatchPtrOutput) ToAlertSpecPatchPtrOutputWithContext(ctx context.Context) AlertSpecPatchPtrOutput {
	return o
}

func (o AlertSpecPatchPtrOutput) Elem() AlertSpecPatchOutput {
	return o.ApplyT(func(v *AlertSpecPatch) AlertSpecPatch {
		if v != nil {
			return *v
		}
		var ret AlertSpecPatch
		return ret
	}).(AlertSpecPatchOutput)
}

// EventMetadata is an optional field for adding metadata to events dispatched by the
// controller. This can be used for enhancing the context of the event. If a field
// would override one already present on the original event as generated by the emitter,
// then the override doesn't happen, i.e. the original value is preserved, and an info
// log is printed.
func (o AlertSpecPatchPtrOutput) EventMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.EventMetadata
	}).(pulumi.StringMapOutput)
}

// EventSeverity specifies how to filter events based on severity.
// If set to 'info' no events will be filtered.
func (o AlertSpecPatchPtrOutput) EventSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.EventSeverity
	}).(pulumi.StringPtrOutput)
}

// EventSources specifies how to filter events based
// on the involved object kind, name and namespace.
func (o AlertSpecPatchPtrOutput) EventSources() AlertSpecEventSourcesPatchArrayOutput {
	return o.ApplyT(func(v *AlertSpecPatch) []AlertSpecEventSourcesPatch {
		if v == nil {
			return nil
		}
		return v.EventSources
	}).(AlertSpecEventSourcesPatchArrayOutput)
}

// ExclusionList specifies a list of Golang regular expressions
// to be used for excluding messages.
func (o AlertSpecPatchPtrOutput) ExclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ExclusionList
	}).(pulumi.StringArrayOutput)
}

// InclusionList specifies a list of Golang regular expressions
// to be used for including messages.
func (o AlertSpecPatchPtrOutput) InclusionList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.InclusionList
	}).(pulumi.StringArrayOutput)
}

func (o AlertSpecPatchPtrOutput) ProviderRef() AlertSpecProviderRefPatchPtrOutput {
	return o.ApplyT(func(v *AlertSpecPatch) *AlertSpecProviderRefPatch {
		if v == nil {
			return nil
		}
		return v.ProviderRef
	}).(AlertSpecProviderRefPatchPtrOutput)
}

// Summary holds a short description of the impact and affected cluster.
// Deprecated: Use EventMetadata instead.
func (o AlertSpecPatchPtrOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Summary
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Alert.
func (o AlertSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// ProviderRef specifies which Provider this Alert should use.
type AlertSpecProviderRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// AlertSpecProviderRefInput is an input type that accepts AlertSpecProviderRefArgs and AlertSpecProviderRefOutput values.
// You can construct a concrete instance of `AlertSpecProviderRefInput` via:
//
//	AlertSpecProviderRefArgs{...}
type AlertSpecProviderRefInput interface {
	pulumi.Input

	ToAlertSpecProviderRefOutput() AlertSpecProviderRefOutput
	ToAlertSpecProviderRefOutputWithContext(context.Context) AlertSpecProviderRefOutput
}

// ProviderRef specifies which Provider this Alert should use.
type AlertSpecProviderRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertSpecProviderRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecProviderRef)(nil)).Elem()
}

func (i AlertSpecProviderRefArgs) ToAlertSpecProviderRefOutput() AlertSpecProviderRefOutput {
	return i.ToAlertSpecProviderRefOutputWithContext(context.Background())
}

func (i AlertSpecProviderRefArgs) ToAlertSpecProviderRefOutputWithContext(ctx context.Context) AlertSpecProviderRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecProviderRefOutput)
}

func (i AlertSpecProviderRefArgs) ToAlertSpecProviderRefPtrOutput() AlertSpecProviderRefPtrOutput {
	return i.ToAlertSpecProviderRefPtrOutputWithContext(context.Background())
}

func (i AlertSpecProviderRefArgs) ToAlertSpecProviderRefPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecProviderRefOutput).ToAlertSpecProviderRefPtrOutputWithContext(ctx)
}

// AlertSpecProviderRefPtrInput is an input type that accepts AlertSpecProviderRefArgs, AlertSpecProviderRefPtr and AlertSpecProviderRefPtrOutput values.
// You can construct a concrete instance of `AlertSpecProviderRefPtrInput` via:
//
//	        AlertSpecProviderRefArgs{...}
//
//	or:
//
//	        nil
type AlertSpecProviderRefPtrInput interface {
	pulumi.Input

	ToAlertSpecProviderRefPtrOutput() AlertSpecProviderRefPtrOutput
	ToAlertSpecProviderRefPtrOutputWithContext(context.Context) AlertSpecProviderRefPtrOutput
}

type alertSpecProviderRefPtrType AlertSpecProviderRefArgs

func AlertSpecProviderRefPtr(v *AlertSpecProviderRefArgs) AlertSpecProviderRefPtrInput {
	return (*alertSpecProviderRefPtrType)(v)
}

func (*alertSpecProviderRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpecProviderRef)(nil)).Elem()
}

func (i *alertSpecProviderRefPtrType) ToAlertSpecProviderRefPtrOutput() AlertSpecProviderRefPtrOutput {
	return i.ToAlertSpecProviderRefPtrOutputWithContext(context.Background())
}

func (i *alertSpecProviderRefPtrType) ToAlertSpecProviderRefPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecProviderRefPtrOutput)
}

// ProviderRef specifies which Provider this Alert should use.
type AlertSpecProviderRefOutput struct{ *pulumi.OutputState }

func (AlertSpecProviderRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecProviderRef)(nil)).Elem()
}

func (o AlertSpecProviderRefOutput) ToAlertSpecProviderRefOutput() AlertSpecProviderRefOutput {
	return o
}

func (o AlertSpecProviderRefOutput) ToAlertSpecProviderRefOutputWithContext(ctx context.Context) AlertSpecProviderRefOutput {
	return o
}

func (o AlertSpecProviderRefOutput) ToAlertSpecProviderRefPtrOutput() AlertSpecProviderRefPtrOutput {
	return o.ToAlertSpecProviderRefPtrOutputWithContext(context.Background())
}

func (o AlertSpecProviderRefOutput) ToAlertSpecProviderRefPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertSpecProviderRef) *AlertSpecProviderRef {
		return &v
	}).(AlertSpecProviderRefPtrOutput)
}

// Name of the referent.
func (o AlertSpecProviderRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecProviderRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertSpecProviderRefPtrOutput struct{ *pulumi.OutputState }

func (AlertSpecProviderRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpecProviderRef)(nil)).Elem()
}

func (o AlertSpecProviderRefPtrOutput) ToAlertSpecProviderRefPtrOutput() AlertSpecProviderRefPtrOutput {
	return o
}

func (o AlertSpecProviderRefPtrOutput) ToAlertSpecProviderRefPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPtrOutput {
	return o
}

func (o AlertSpecProviderRefPtrOutput) Elem() AlertSpecProviderRefOutput {
	return o.ApplyT(func(v *AlertSpecProviderRef) AlertSpecProviderRef {
		if v != nil {
			return *v
		}
		var ret AlertSpecProviderRef
		return ret
	}).(AlertSpecProviderRefOutput)
}

// Name of the referent.
func (o AlertSpecProviderRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertSpecProviderRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ProviderRef specifies which Provider this Alert should use.
type AlertSpecProviderRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// AlertSpecProviderRefPatchInput is an input type that accepts AlertSpecProviderRefPatchArgs and AlertSpecProviderRefPatchOutput values.
// You can construct a concrete instance of `AlertSpecProviderRefPatchInput` via:
//
//	AlertSpecProviderRefPatchArgs{...}
type AlertSpecProviderRefPatchInput interface {
	pulumi.Input

	ToAlertSpecProviderRefPatchOutput() AlertSpecProviderRefPatchOutput
	ToAlertSpecProviderRefPatchOutputWithContext(context.Context) AlertSpecProviderRefPatchOutput
}

// ProviderRef specifies which Provider this Alert should use.
type AlertSpecProviderRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AlertSpecProviderRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecProviderRefPatch)(nil)).Elem()
}

func (i AlertSpecProviderRefPatchArgs) ToAlertSpecProviderRefPatchOutput() AlertSpecProviderRefPatchOutput {
	return i.ToAlertSpecProviderRefPatchOutputWithContext(context.Background())
}

func (i AlertSpecProviderRefPatchArgs) ToAlertSpecProviderRefPatchOutputWithContext(ctx context.Context) AlertSpecProviderRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecProviderRefPatchOutput)
}

func (i AlertSpecProviderRefPatchArgs) ToAlertSpecProviderRefPatchPtrOutput() AlertSpecProviderRefPatchPtrOutput {
	return i.ToAlertSpecProviderRefPatchPtrOutputWithContext(context.Background())
}

func (i AlertSpecProviderRefPatchArgs) ToAlertSpecProviderRefPatchPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecProviderRefPatchOutput).ToAlertSpecProviderRefPatchPtrOutputWithContext(ctx)
}

// AlertSpecProviderRefPatchPtrInput is an input type that accepts AlertSpecProviderRefPatchArgs, AlertSpecProviderRefPatchPtr and AlertSpecProviderRefPatchPtrOutput values.
// You can construct a concrete instance of `AlertSpecProviderRefPatchPtrInput` via:
//
//	        AlertSpecProviderRefPatchArgs{...}
//
//	or:
//
//	        nil
type AlertSpecProviderRefPatchPtrInput interface {
	pulumi.Input

	ToAlertSpecProviderRefPatchPtrOutput() AlertSpecProviderRefPatchPtrOutput
	ToAlertSpecProviderRefPatchPtrOutputWithContext(context.Context) AlertSpecProviderRefPatchPtrOutput
}

type alertSpecProviderRefPatchPtrType AlertSpecProviderRefPatchArgs

func AlertSpecProviderRefPatchPtr(v *AlertSpecProviderRefPatchArgs) AlertSpecProviderRefPatchPtrInput {
	return (*alertSpecProviderRefPatchPtrType)(v)
}

func (*alertSpecProviderRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpecProviderRefPatch)(nil)).Elem()
}

func (i *alertSpecProviderRefPatchPtrType) ToAlertSpecProviderRefPatchPtrOutput() AlertSpecProviderRefPatchPtrOutput {
	return i.ToAlertSpecProviderRefPatchPtrOutputWithContext(context.Background())
}

func (i *alertSpecProviderRefPatchPtrType) ToAlertSpecProviderRefPatchPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertSpecProviderRefPatchPtrOutput)
}

// ProviderRef specifies which Provider this Alert should use.
type AlertSpecProviderRefPatchOutput struct{ *pulumi.OutputState }

func (AlertSpecProviderRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSpecProviderRefPatch)(nil)).Elem()
}

func (o AlertSpecProviderRefPatchOutput) ToAlertSpecProviderRefPatchOutput() AlertSpecProviderRefPatchOutput {
	return o
}

func (o AlertSpecProviderRefPatchOutput) ToAlertSpecProviderRefPatchOutputWithContext(ctx context.Context) AlertSpecProviderRefPatchOutput {
	return o
}

func (o AlertSpecProviderRefPatchOutput) ToAlertSpecProviderRefPatchPtrOutput() AlertSpecProviderRefPatchPtrOutput {
	return o.ToAlertSpecProviderRefPatchPtrOutputWithContext(context.Background())
}

func (o AlertSpecProviderRefPatchOutput) ToAlertSpecProviderRefPatchPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertSpecProviderRefPatch) *AlertSpecProviderRefPatch {
		return &v
	}).(AlertSpecProviderRefPatchPtrOutput)
}

// Name of the referent.
func (o AlertSpecProviderRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertSpecProviderRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AlertSpecProviderRefPatchPtrOutput struct{ *pulumi.OutputState }

func (AlertSpecProviderRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSpecProviderRefPatch)(nil)).Elem()
}

func (o AlertSpecProviderRefPatchPtrOutput) ToAlertSpecProviderRefPatchPtrOutput() AlertSpecProviderRefPatchPtrOutput {
	return o
}

func (o AlertSpecProviderRefPatchPtrOutput) ToAlertSpecProviderRefPatchPtrOutputWithContext(ctx context.Context) AlertSpecProviderRefPatchPtrOutput {
	return o
}

func (o AlertSpecProviderRefPatchPtrOutput) Elem() AlertSpecProviderRefPatchOutput {
	return o.ApplyT(func(v *AlertSpecProviderRefPatch) AlertSpecProviderRefPatch {
		if v != nil {
			return *v
		}
		var ret AlertSpecProviderRefPatch
		return ret
	}).(AlertSpecProviderRefPatchOutput)
}

// Name of the referent.
func (o AlertSpecProviderRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertSpecProviderRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Provider is the Schema for the providers API
type ProviderType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ProviderSpec      `pulumi:"spec"`
}

// ProviderTypeInput is an input type that accepts ProviderTypeArgs and ProviderTypeOutput values.
// You can construct a concrete instance of `ProviderTypeInput` via:
//
//	ProviderTypeArgs{...}
type ProviderTypeInput interface {
	pulumi.Input

	ToProviderTypeOutput() ProviderTypeOutput
	ToProviderTypeOutputWithContext(context.Context) ProviderTypeOutput
}

// Provider is the Schema for the providers API
type ProviderTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     ProviderSpecPtrInput      `pulumi:"spec"`
}

func (ProviderTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderType)(nil)).Elem()
}

func (i ProviderTypeArgs) ToProviderTypeOutput() ProviderTypeOutput {
	return i.ToProviderTypeOutputWithContext(context.Background())
}

func (i ProviderTypeArgs) ToProviderTypeOutputWithContext(ctx context.Context) ProviderTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTypeOutput)
}

// ProviderTypeArrayInput is an input type that accepts ProviderTypeArray and ProviderTypeArrayOutput values.
// You can construct a concrete instance of `ProviderTypeArrayInput` via:
//
//	ProviderTypeArray{ ProviderTypeArgs{...} }
type ProviderTypeArrayInput interface {
	pulumi.Input

	ToProviderTypeArrayOutput() ProviderTypeArrayOutput
	ToProviderTypeArrayOutputWithContext(context.Context) ProviderTypeArrayOutput
}

type ProviderTypeArray []ProviderTypeInput

func (ProviderTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderType)(nil)).Elem()
}

func (i ProviderTypeArray) ToProviderTypeArrayOutput() ProviderTypeArrayOutput {
	return i.ToProviderTypeArrayOutputWithContext(context.Background())
}

func (i ProviderTypeArray) ToProviderTypeArrayOutputWithContext(ctx context.Context) ProviderTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTypeArrayOutput)
}

// Provider is the Schema for the providers API
type ProviderTypeOutput struct{ *pulumi.OutputState }

func (ProviderTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderType)(nil)).Elem()
}

func (o ProviderTypeOutput) ToProviderTypeOutput() ProviderTypeOutput {
	return o
}

func (o ProviderTypeOutput) ToProviderTypeOutputWithContext(ctx context.Context) ProviderTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProviderTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProviderTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ProviderTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ProviderType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ProviderTypeOutput) Spec() ProviderSpecPtrOutput {
	return o.ApplyT(func(v ProviderType) *ProviderSpec { return v.Spec }).(ProviderSpecPtrOutput)
}

type ProviderTypeArrayOutput struct{ *pulumi.OutputState }

func (ProviderTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderType)(nil)).Elem()
}

func (o ProviderTypeArrayOutput) ToProviderTypeArrayOutput() ProviderTypeArrayOutput {
	return o
}

func (o ProviderTypeArrayOutput) ToProviderTypeArrayOutputWithContext(ctx context.Context) ProviderTypeArrayOutput {
	return o
}

func (o ProviderTypeArrayOutput) Index(i pulumi.IntInput) ProviderTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderType {
		return vs[0].([]ProviderType)[vs[1].(int)]
	}).(ProviderTypeOutput)
}

// ProviderList is a list of Provider
type ProviderListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of providers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ProviderType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ProviderListTypeInput is an input type that accepts ProviderListTypeArgs and ProviderListTypeOutput values.
// You can construct a concrete instance of `ProviderListTypeInput` via:
//
//	ProviderListTypeArgs{...}
type ProviderListTypeInput interface {
	pulumi.Input

	ToProviderListTypeOutput() ProviderListTypeOutput
	ToProviderListTypeOutputWithContext(context.Context) ProviderListTypeOutput
}

// ProviderList is a list of Provider
type ProviderListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of providers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProviderTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ProviderListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderListType)(nil)).Elem()
}

func (i ProviderListTypeArgs) ToProviderListTypeOutput() ProviderListTypeOutput {
	return i.ToProviderListTypeOutputWithContext(context.Background())
}

func (i ProviderListTypeArgs) ToProviderListTypeOutputWithContext(ctx context.Context) ProviderListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderListTypeOutput)
}

// ProviderList is a list of Provider
type ProviderListTypeOutput struct{ *pulumi.OutputState }

func (ProviderListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderListType)(nil)).Elem()
}

func (o ProviderListTypeOutput) ToProviderListTypeOutput() ProviderListTypeOutput {
	return o
}

func (o ProviderListTypeOutput) ToProviderListTypeOutputWithContext(ctx context.Context) ProviderListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProviderListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of providers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ProviderListTypeOutput) Items() ProviderTypeArrayOutput {
	return o.ApplyT(func(v ProviderListType) []ProviderType { return v.Items }).(ProviderTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProviderListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProviderListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ProviderListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// Provider is the Schema for the providers API
type ProviderPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ProviderSpecPatch      `pulumi:"spec"`
}

// ProviderPatchTypeInput is an input type that accepts ProviderPatchTypeArgs and ProviderPatchTypeOutput values.
// You can construct a concrete instance of `ProviderPatchTypeInput` via:
//
//	ProviderPatchTypeArgs{...}
type ProviderPatchTypeInput interface {
	pulumi.Input

	ToProviderPatchTypeOutput() ProviderPatchTypeOutput
	ToProviderPatchTypeOutputWithContext(context.Context) ProviderPatchTypeOutput
}

// Provider is the Schema for the providers API
type ProviderPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     ProviderSpecPatchPtrInput      `pulumi:"spec"`
}

func (ProviderPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderPatchType)(nil)).Elem()
}

func (i ProviderPatchTypeArgs) ToProviderPatchTypeOutput() ProviderPatchTypeOutput {
	return i.ToProviderPatchTypeOutputWithContext(context.Background())
}

func (i ProviderPatchTypeArgs) ToProviderPatchTypeOutputWithContext(ctx context.Context) ProviderPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPatchTypeOutput)
}

// Provider is the Schema for the providers API
type ProviderPatchTypeOutput struct{ *pulumi.OutputState }

func (ProviderPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderPatchType)(nil)).Elem()
}

func (o ProviderPatchTypeOutput) ToProviderPatchTypeOutput() ProviderPatchTypeOutput {
	return o
}

func (o ProviderPatchTypeOutput) ToProviderPatchTypeOutputWithContext(ctx context.Context) ProviderPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProviderPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProviderPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ProviderPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ProviderPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ProviderPatchTypeOutput) Spec() ProviderSpecPatchPtrOutput {
	return o.ApplyT(func(v ProviderPatchType) *ProviderSpecPatch { return v.Spec }).(ProviderSpecPatchPtrOutput)
}

// ProviderSpec defines the desired state of the Provider.
type ProviderSpec struct {
	// Address specifies the endpoint, in a generic sense, to where alerts are sent.
	// What kind of endpoint depends on the specific Provider type being used.
	// For the generic Provider, for example, this is an HTTP/S address.
	// For other Provider types this could be a project ID or a namespace.
	Address       *string                    `pulumi:"address"`
	CertSecretRef *ProviderSpecCertSecretRef `pulumi:"certSecretRef"`
	// Channel specifies the destination channel where events should be posted.
	Channel *string `pulumi:"channel"`
	// CommitStatusExpr is a CEL expression that evaluates to a string value
	// that can be used to generate a custom commit status message for use
	// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
	// bitbucket, azuredevops). Supported variables are: event, provider,
	// and alert.
	CommitStatusExpr *string `pulumi:"commitStatusExpr"`
	// Interval at which to reconcile the Provider with its Secret references.
	// Deprecated and not used in v1beta3.
	Interval *string `pulumi:"interval"`
	// Proxy the HTTP/S address of the proxy server.
	Proxy     *string                `pulumi:"proxy"`
	SecretRef *ProviderSpecSecretRef `pulumi:"secretRef"`
	// ServiceAccountName is the name of the service account used to
	// authenticate with services from cloud providers. An error is thrown if a
	// static credential is also defined inside the Secret referenced by the
	// SecretRef.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Provider.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for sending alerts to the Provider.
	Timeout *string `pulumi:"timeout"`
	// Type specifies which Provider implementation to use.
	Type *string `pulumi:"type"`
	// Username specifies the name under which events are posted.
	Username *string `pulumi:"username"`
}

// ProviderSpecInput is an input type that accepts ProviderSpecArgs and ProviderSpecOutput values.
// You can construct a concrete instance of `ProviderSpecInput` via:
//
//	ProviderSpecArgs{...}
type ProviderSpecInput interface {
	pulumi.Input

	ToProviderSpecOutput() ProviderSpecOutput
	ToProviderSpecOutputWithContext(context.Context) ProviderSpecOutput
}

// ProviderSpec defines the desired state of the Provider.
type ProviderSpecArgs struct {
	// Address specifies the endpoint, in a generic sense, to where alerts are sent.
	// What kind of endpoint depends on the specific Provider type being used.
	// For the generic Provider, for example, this is an HTTP/S address.
	// For other Provider types this could be a project ID or a namespace.
	Address       pulumi.StringPtrInput             `pulumi:"address"`
	CertSecretRef ProviderSpecCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// Channel specifies the destination channel where events should be posted.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// CommitStatusExpr is a CEL expression that evaluates to a string value
	// that can be used to generate a custom commit status message for use
	// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
	// bitbucket, azuredevops). Supported variables are: event, provider,
	// and alert.
	CommitStatusExpr pulumi.StringPtrInput `pulumi:"commitStatusExpr"`
	// Interval at which to reconcile the Provider with its Secret references.
	// Deprecated and not used in v1beta3.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Proxy the HTTP/S address of the proxy server.
	Proxy     pulumi.StringPtrInput         `pulumi:"proxy"`
	SecretRef ProviderSpecSecretRefPtrInput `pulumi:"secretRef"`
	// ServiceAccountName is the name of the service account used to
	// authenticate with services from cloud providers. An error is thrown if a
	// static credential is also defined inside the Secret referenced by the
	// SecretRef.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Provider.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for sending alerts to the Provider.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type specifies which Provider implementation to use.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Username specifies the name under which events are posted.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpec)(nil)).Elem()
}

func (i ProviderSpecArgs) ToProviderSpecOutput() ProviderSpecOutput {
	return i.ToProviderSpecOutputWithContext(context.Background())
}

func (i ProviderSpecArgs) ToProviderSpecOutputWithContext(ctx context.Context) ProviderSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecOutput)
}

func (i ProviderSpecArgs) ToProviderSpecPtrOutput() ProviderSpecPtrOutput {
	return i.ToProviderSpecPtrOutputWithContext(context.Background())
}

func (i ProviderSpecArgs) ToProviderSpecPtrOutputWithContext(ctx context.Context) ProviderSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecOutput).ToProviderSpecPtrOutputWithContext(ctx)
}

// ProviderSpecPtrInput is an input type that accepts ProviderSpecArgs, ProviderSpecPtr and ProviderSpecPtrOutput values.
// You can construct a concrete instance of `ProviderSpecPtrInput` via:
//
//	        ProviderSpecArgs{...}
//
//	or:
//
//	        nil
type ProviderSpecPtrInput interface {
	pulumi.Input

	ToProviderSpecPtrOutput() ProviderSpecPtrOutput
	ToProviderSpecPtrOutputWithContext(context.Context) ProviderSpecPtrOutput
}

type providerSpecPtrType ProviderSpecArgs

func ProviderSpecPtr(v *ProviderSpecArgs) ProviderSpecPtrInput {
	return (*providerSpecPtrType)(v)
}

func (*providerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpec)(nil)).Elem()
}

func (i *providerSpecPtrType) ToProviderSpecPtrOutput() ProviderSpecPtrOutput {
	return i.ToProviderSpecPtrOutputWithContext(context.Background())
}

func (i *providerSpecPtrType) ToProviderSpecPtrOutputWithContext(ctx context.Context) ProviderSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecPtrOutput)
}

// ProviderSpec defines the desired state of the Provider.
type ProviderSpecOutput struct{ *pulumi.OutputState }

func (ProviderSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpec)(nil)).Elem()
}

func (o ProviderSpecOutput) ToProviderSpecOutput() ProviderSpecOutput {
	return o
}

func (o ProviderSpecOutput) ToProviderSpecOutputWithContext(ctx context.Context) ProviderSpecOutput {
	return o
}

func (o ProviderSpecOutput) ToProviderSpecPtrOutput() ProviderSpecPtrOutput {
	return o.ToProviderSpecPtrOutputWithContext(context.Background())
}

func (o ProviderSpecOutput) ToProviderSpecPtrOutputWithContext(ctx context.Context) ProviderSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSpec) *ProviderSpec {
		return &v
	}).(ProviderSpecPtrOutput)
}

// Address specifies the endpoint, in a generic sense, to where alerts are sent.
// What kind of endpoint depends on the specific Provider type being used.
// For the generic Provider, for example, this is an HTTP/S address.
// For other Provider types this could be a project ID or a namespace.
func (o ProviderSpecOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o ProviderSpecOutput) CertSecretRef() ProviderSpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *ProviderSpecCertSecretRef { return v.CertSecretRef }).(ProviderSpecCertSecretRefPtrOutput)
}

// Channel specifies the destination channel where events should be posted.
func (o ProviderSpecOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// CommitStatusExpr is a CEL expression that evaluates to a string value
// that can be used to generate a custom commit status message for use
// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
// bitbucket, azuredevops). Supported variables are: event, provider,
// and alert.
func (o ProviderSpecOutput) CommitStatusExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.CommitStatusExpr }).(pulumi.StringPtrOutput)
}

// Interval at which to reconcile the Provider with its Secret references.
// Deprecated and not used in v1beta3.
func (o ProviderSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Proxy the HTTP/S address of the proxy server.
func (o ProviderSpecOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

func (o ProviderSpecOutput) SecretRef() ProviderSpecSecretRefPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *ProviderSpecSecretRef { return v.SecretRef }).(ProviderSpecSecretRefPtrOutput)
}

// ServiceAccountName is the name of the service account used to
// authenticate with services from cloud providers. An error is thrown if a
// static credential is also defined inside the Secret referenced by the
// SecretRef.
func (o ProviderSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Provider.
func (o ProviderSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for sending alerts to the Provider.
func (o ProviderSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type specifies which Provider implementation to use.
func (o ProviderSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Username specifies the name under which events are posted.
func (o ProviderSpecOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpec) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderSpecPtrOutput struct{ *pulumi.OutputState }

func (ProviderSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpec)(nil)).Elem()
}

func (o ProviderSpecPtrOutput) ToProviderSpecPtrOutput() ProviderSpecPtrOutput {
	return o
}

func (o ProviderSpecPtrOutput) ToProviderSpecPtrOutputWithContext(ctx context.Context) ProviderSpecPtrOutput {
	return o
}

func (o ProviderSpecPtrOutput) Elem() ProviderSpecOutput {
	return o.ApplyT(func(v *ProviderSpec) ProviderSpec {
		if v != nil {
			return *v
		}
		var ret ProviderSpec
		return ret
	}).(ProviderSpecOutput)
}

// Address specifies the endpoint, in a generic sense, to where alerts are sent.
// What kind of endpoint depends on the specific Provider type being used.
// For the generic Provider, for example, this is an HTTP/S address.
// For other Provider types this could be a project ID or a namespace.
func (o ProviderSpecPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

func (o ProviderSpecPtrOutput) CertSecretRef() ProviderSpecCertSecretRefPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *ProviderSpecCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(ProviderSpecCertSecretRefPtrOutput)
}

// Channel specifies the destination channel where events should be posted.
func (o ProviderSpecPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// CommitStatusExpr is a CEL expression that evaluates to a string value
// that can be used to generate a custom commit status message for use
// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
// bitbucket, azuredevops). Supported variables are: event, provider,
// and alert.
func (o ProviderSpecPtrOutput) CommitStatusExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.CommitStatusExpr
	}).(pulumi.StringPtrOutput)
}

// Interval at which to reconcile the Provider with its Secret references.
// Deprecated and not used in v1beta3.
func (o ProviderSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Proxy the HTTP/S address of the proxy server.
func (o ProviderSpecPtrOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Proxy
	}).(pulumi.StringPtrOutput)
}

func (o ProviderSpecPtrOutput) SecretRef() ProviderSpecSecretRefPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *ProviderSpecSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ProviderSpecSecretRefPtrOutput)
}

// ServiceAccountName is the name of the service account used to
// authenticate with services from cloud providers. An error is thrown if a
// static credential is also defined inside the Secret referenced by the
// SecretRef.
func (o ProviderSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Provider.
func (o ProviderSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for sending alerts to the Provider.
func (o ProviderSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Type specifies which Provider implementation to use.
func (o ProviderSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Username specifies the name under which events are posted.
func (o ProviderSpecPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpec) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef specifies the Secret containing
// a PEM-encoded CA certificate (in the `ca.crt` key).
//
// Note: Support for the `caFile` key has
// been deprecated.
type ProviderSpecCertSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ProviderSpecCertSecretRefInput is an input type that accepts ProviderSpecCertSecretRefArgs and ProviderSpecCertSecretRefOutput values.
// You can construct a concrete instance of `ProviderSpecCertSecretRefInput` via:
//
//	ProviderSpecCertSecretRefArgs{...}
type ProviderSpecCertSecretRefInput interface {
	pulumi.Input

	ToProviderSpecCertSecretRefOutput() ProviderSpecCertSecretRefOutput
	ToProviderSpecCertSecretRefOutputWithContext(context.Context) ProviderSpecCertSecretRefOutput
}

// CertSecretRef specifies the Secret containing
// a PEM-encoded CA certificate (in the `ca.crt` key).
//
// Note: Support for the `caFile` key has
// been deprecated.
type ProviderSpecCertSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProviderSpecCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecCertSecretRef)(nil)).Elem()
}

func (i ProviderSpecCertSecretRefArgs) ToProviderSpecCertSecretRefOutput() ProviderSpecCertSecretRefOutput {
	return i.ToProviderSpecCertSecretRefOutputWithContext(context.Background())
}

func (i ProviderSpecCertSecretRefArgs) ToProviderSpecCertSecretRefOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecCertSecretRefOutput)
}

func (i ProviderSpecCertSecretRefArgs) ToProviderSpecCertSecretRefPtrOutput() ProviderSpecCertSecretRefPtrOutput {
	return i.ToProviderSpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i ProviderSpecCertSecretRefArgs) ToProviderSpecCertSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecCertSecretRefOutput).ToProviderSpecCertSecretRefPtrOutputWithContext(ctx)
}

// ProviderSpecCertSecretRefPtrInput is an input type that accepts ProviderSpecCertSecretRefArgs, ProviderSpecCertSecretRefPtr and ProviderSpecCertSecretRefPtrOutput values.
// You can construct a concrete instance of `ProviderSpecCertSecretRefPtrInput` via:
//
//	        ProviderSpecCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type ProviderSpecCertSecretRefPtrInput interface {
	pulumi.Input

	ToProviderSpecCertSecretRefPtrOutput() ProviderSpecCertSecretRefPtrOutput
	ToProviderSpecCertSecretRefPtrOutputWithContext(context.Context) ProviderSpecCertSecretRefPtrOutput
}

type providerSpecCertSecretRefPtrType ProviderSpecCertSecretRefArgs

func ProviderSpecCertSecretRefPtr(v *ProviderSpecCertSecretRefArgs) ProviderSpecCertSecretRefPtrInput {
	return (*providerSpecCertSecretRefPtrType)(v)
}

func (*providerSpecCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecCertSecretRef)(nil)).Elem()
}

func (i *providerSpecCertSecretRefPtrType) ToProviderSpecCertSecretRefPtrOutput() ProviderSpecCertSecretRefPtrOutput {
	return i.ToProviderSpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *providerSpecCertSecretRefPtrType) ToProviderSpecCertSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecCertSecretRefPtrOutput)
}

// CertSecretRef specifies the Secret containing
// a PEM-encoded CA certificate (in the `ca.crt` key).
//
// Note: Support for the `caFile` key has
// been deprecated.
type ProviderSpecCertSecretRefOutput struct{ *pulumi.OutputState }

func (ProviderSpecCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecCertSecretRef)(nil)).Elem()
}

func (o ProviderSpecCertSecretRefOutput) ToProviderSpecCertSecretRefOutput() ProviderSpecCertSecretRefOutput {
	return o
}

func (o ProviderSpecCertSecretRefOutput) ToProviderSpecCertSecretRefOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefOutput {
	return o
}

func (o ProviderSpecCertSecretRefOutput) ToProviderSpecCertSecretRefPtrOutput() ProviderSpecCertSecretRefPtrOutput {
	return o.ToProviderSpecCertSecretRefPtrOutputWithContext(context.Background())
}

func (o ProviderSpecCertSecretRefOutput) ToProviderSpecCertSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSpecCertSecretRef) *ProviderSpecCertSecretRef {
		return &v
	}).(ProviderSpecCertSecretRefPtrOutput)
}

// Name of the referent.
func (o ProviderSpecCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProviderSpecCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ProviderSpecCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecCertSecretRef)(nil)).Elem()
}

func (o ProviderSpecCertSecretRefPtrOutput) ToProviderSpecCertSecretRefPtrOutput() ProviderSpecCertSecretRefPtrOutput {
	return o
}

func (o ProviderSpecCertSecretRefPtrOutput) ToProviderSpecCertSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPtrOutput {
	return o
}

func (o ProviderSpecCertSecretRefPtrOutput) Elem() ProviderSpecCertSecretRefOutput {
	return o.ApplyT(func(v *ProviderSpecCertSecretRef) ProviderSpecCertSecretRef {
		if v != nil {
			return *v
		}
		var ret ProviderSpecCertSecretRef
		return ret
	}).(ProviderSpecCertSecretRefOutput)
}

// Name of the referent.
func (o ProviderSpecCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// CertSecretRef specifies the Secret containing
// a PEM-encoded CA certificate (in the `ca.crt` key).
//
// Note: Support for the `caFile` key has
// been deprecated.
type ProviderSpecCertSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ProviderSpecCertSecretRefPatchInput is an input type that accepts ProviderSpecCertSecretRefPatchArgs and ProviderSpecCertSecretRefPatchOutput values.
// You can construct a concrete instance of `ProviderSpecCertSecretRefPatchInput` via:
//
//	ProviderSpecCertSecretRefPatchArgs{...}
type ProviderSpecCertSecretRefPatchInput interface {
	pulumi.Input

	ToProviderSpecCertSecretRefPatchOutput() ProviderSpecCertSecretRefPatchOutput
	ToProviderSpecCertSecretRefPatchOutputWithContext(context.Context) ProviderSpecCertSecretRefPatchOutput
}

// CertSecretRef specifies the Secret containing
// a PEM-encoded CA certificate (in the `ca.crt` key).
//
// Note: Support for the `caFile` key has
// been deprecated.
type ProviderSpecCertSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProviderSpecCertSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecCertSecretRefPatch)(nil)).Elem()
}

func (i ProviderSpecCertSecretRefPatchArgs) ToProviderSpecCertSecretRefPatchOutput() ProviderSpecCertSecretRefPatchOutput {
	return i.ToProviderSpecCertSecretRefPatchOutputWithContext(context.Background())
}

func (i ProviderSpecCertSecretRefPatchArgs) ToProviderSpecCertSecretRefPatchOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecCertSecretRefPatchOutput)
}

func (i ProviderSpecCertSecretRefPatchArgs) ToProviderSpecCertSecretRefPatchPtrOutput() ProviderSpecCertSecretRefPatchPtrOutput {
	return i.ToProviderSpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ProviderSpecCertSecretRefPatchArgs) ToProviderSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecCertSecretRefPatchOutput).ToProviderSpecCertSecretRefPatchPtrOutputWithContext(ctx)
}

// ProviderSpecCertSecretRefPatchPtrInput is an input type that accepts ProviderSpecCertSecretRefPatchArgs, ProviderSpecCertSecretRefPatchPtr and ProviderSpecCertSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ProviderSpecCertSecretRefPatchPtrInput` via:
//
//	        ProviderSpecCertSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ProviderSpecCertSecretRefPatchPtrInput interface {
	pulumi.Input

	ToProviderSpecCertSecretRefPatchPtrOutput() ProviderSpecCertSecretRefPatchPtrOutput
	ToProviderSpecCertSecretRefPatchPtrOutputWithContext(context.Context) ProviderSpecCertSecretRefPatchPtrOutput
}

type providerSpecCertSecretRefPatchPtrType ProviderSpecCertSecretRefPatchArgs

func ProviderSpecCertSecretRefPatchPtr(v *ProviderSpecCertSecretRefPatchArgs) ProviderSpecCertSecretRefPatchPtrInput {
	return (*providerSpecCertSecretRefPatchPtrType)(v)
}

func (*providerSpecCertSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecCertSecretRefPatch)(nil)).Elem()
}

func (i *providerSpecCertSecretRefPatchPtrType) ToProviderSpecCertSecretRefPatchPtrOutput() ProviderSpecCertSecretRefPatchPtrOutput {
	return i.ToProviderSpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *providerSpecCertSecretRefPatchPtrType) ToProviderSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecCertSecretRefPatchPtrOutput)
}

// CertSecretRef specifies the Secret containing
// a PEM-encoded CA certificate (in the `ca.crt` key).
//
// Note: Support for the `caFile` key has
// been deprecated.
type ProviderSpecCertSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ProviderSpecCertSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecCertSecretRefPatch)(nil)).Elem()
}

func (o ProviderSpecCertSecretRefPatchOutput) ToProviderSpecCertSecretRefPatchOutput() ProviderSpecCertSecretRefPatchOutput {
	return o
}

func (o ProviderSpecCertSecretRefPatchOutput) ToProviderSpecCertSecretRefPatchOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPatchOutput {
	return o
}

func (o ProviderSpecCertSecretRefPatchOutput) ToProviderSpecCertSecretRefPatchPtrOutput() ProviderSpecCertSecretRefPatchPtrOutput {
	return o.ToProviderSpecCertSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ProviderSpecCertSecretRefPatchOutput) ToProviderSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSpecCertSecretRefPatch) *ProviderSpecCertSecretRefPatch {
		return &v
	}).(ProviderSpecCertSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ProviderSpecCertSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecCertSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProviderSpecCertSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ProviderSpecCertSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecCertSecretRefPatch)(nil)).Elem()
}

func (o ProviderSpecCertSecretRefPatchPtrOutput) ToProviderSpecCertSecretRefPatchPtrOutput() ProviderSpecCertSecretRefPatchPtrOutput {
	return o
}

func (o ProviderSpecCertSecretRefPatchPtrOutput) ToProviderSpecCertSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecCertSecretRefPatchPtrOutput {
	return o
}

func (o ProviderSpecCertSecretRefPatchPtrOutput) Elem() ProviderSpecCertSecretRefPatchOutput {
	return o.ApplyT(func(v *ProviderSpecCertSecretRefPatch) ProviderSpecCertSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ProviderSpecCertSecretRefPatch
		return ret
	}).(ProviderSpecCertSecretRefPatchOutput)
}

// Name of the referent.
func (o ProviderSpecCertSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecCertSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ProviderSpec defines the desired state of the Provider.
type ProviderSpecPatch struct {
	// Address specifies the endpoint, in a generic sense, to where alerts are sent.
	// What kind of endpoint depends on the specific Provider type being used.
	// For the generic Provider, for example, this is an HTTP/S address.
	// For other Provider types this could be a project ID or a namespace.
	Address       *string                         `pulumi:"address"`
	CertSecretRef *ProviderSpecCertSecretRefPatch `pulumi:"certSecretRef"`
	// Channel specifies the destination channel where events should be posted.
	Channel *string `pulumi:"channel"`
	// CommitStatusExpr is a CEL expression that evaluates to a string value
	// that can be used to generate a custom commit status message for use
	// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
	// bitbucket, azuredevops). Supported variables are: event, provider,
	// and alert.
	CommitStatusExpr *string `pulumi:"commitStatusExpr"`
	// Interval at which to reconcile the Provider with its Secret references.
	// Deprecated and not used in v1beta3.
	Interval *string `pulumi:"interval"`
	// Proxy the HTTP/S address of the proxy server.
	Proxy     *string                     `pulumi:"proxy"`
	SecretRef *ProviderSpecSecretRefPatch `pulumi:"secretRef"`
	// ServiceAccountName is the name of the service account used to
	// authenticate with services from cloud providers. An error is thrown if a
	// static credential is also defined inside the Secret referenced by the
	// SecretRef.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Provider.
	Suspend *bool `pulumi:"suspend"`
	// Timeout for sending alerts to the Provider.
	Timeout *string `pulumi:"timeout"`
	// Type specifies which Provider implementation to use.
	Type *string `pulumi:"type"`
	// Username specifies the name under which events are posted.
	Username *string `pulumi:"username"`
}

// ProviderSpecPatchInput is an input type that accepts ProviderSpecPatchArgs and ProviderSpecPatchOutput values.
// You can construct a concrete instance of `ProviderSpecPatchInput` via:
//
//	ProviderSpecPatchArgs{...}
type ProviderSpecPatchInput interface {
	pulumi.Input

	ToProviderSpecPatchOutput() ProviderSpecPatchOutput
	ToProviderSpecPatchOutputWithContext(context.Context) ProviderSpecPatchOutput
}

// ProviderSpec defines the desired state of the Provider.
type ProviderSpecPatchArgs struct {
	// Address specifies the endpoint, in a generic sense, to where alerts are sent.
	// What kind of endpoint depends on the specific Provider type being used.
	// For the generic Provider, for example, this is an HTTP/S address.
	// For other Provider types this could be a project ID or a namespace.
	Address       pulumi.StringPtrInput                  `pulumi:"address"`
	CertSecretRef ProviderSpecCertSecretRefPatchPtrInput `pulumi:"certSecretRef"`
	// Channel specifies the destination channel where events should be posted.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// CommitStatusExpr is a CEL expression that evaluates to a string value
	// that can be used to generate a custom commit status message for use
	// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
	// bitbucket, azuredevops). Supported variables are: event, provider,
	// and alert.
	CommitStatusExpr pulumi.StringPtrInput `pulumi:"commitStatusExpr"`
	// Interval at which to reconcile the Provider with its Secret references.
	// Deprecated and not used in v1beta3.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Proxy the HTTP/S address of the proxy server.
	Proxy     pulumi.StringPtrInput              `pulumi:"proxy"`
	SecretRef ProviderSpecSecretRefPatchPtrInput `pulumi:"secretRef"`
	// ServiceAccountName is the name of the service account used to
	// authenticate with services from cloud providers. An error is thrown if a
	// static credential is also defined inside the Secret referenced by the
	// SecretRef.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Suspend tells the controller to suspend subsequent
	// events handling for this Provider.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// Timeout for sending alerts to the Provider.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Type specifies which Provider implementation to use.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Username specifies the name under which events are posted.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecPatch)(nil)).Elem()
}

func (i ProviderSpecPatchArgs) ToProviderSpecPatchOutput() ProviderSpecPatchOutput {
	return i.ToProviderSpecPatchOutputWithContext(context.Background())
}

func (i ProviderSpecPatchArgs) ToProviderSpecPatchOutputWithContext(ctx context.Context) ProviderSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecPatchOutput)
}

func (i ProviderSpecPatchArgs) ToProviderSpecPatchPtrOutput() ProviderSpecPatchPtrOutput {
	return i.ToProviderSpecPatchPtrOutputWithContext(context.Background())
}

func (i ProviderSpecPatchArgs) ToProviderSpecPatchPtrOutputWithContext(ctx context.Context) ProviderSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecPatchOutput).ToProviderSpecPatchPtrOutputWithContext(ctx)
}

// ProviderSpecPatchPtrInput is an input type that accepts ProviderSpecPatchArgs, ProviderSpecPatchPtr and ProviderSpecPatchPtrOutput values.
// You can construct a concrete instance of `ProviderSpecPatchPtrInput` via:
//
//	        ProviderSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ProviderSpecPatchPtrInput interface {
	pulumi.Input

	ToProviderSpecPatchPtrOutput() ProviderSpecPatchPtrOutput
	ToProviderSpecPatchPtrOutputWithContext(context.Context) ProviderSpecPatchPtrOutput
}

type providerSpecPatchPtrType ProviderSpecPatchArgs

func ProviderSpecPatchPtr(v *ProviderSpecPatchArgs) ProviderSpecPatchPtrInput {
	return (*providerSpecPatchPtrType)(v)
}

func (*providerSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecPatch)(nil)).Elem()
}

func (i *providerSpecPatchPtrType) ToProviderSpecPatchPtrOutput() ProviderSpecPatchPtrOutput {
	return i.ToProviderSpecPatchPtrOutputWithContext(context.Background())
}

func (i *providerSpecPatchPtrType) ToProviderSpecPatchPtrOutputWithContext(ctx context.Context) ProviderSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecPatchPtrOutput)
}

// ProviderSpec defines the desired state of the Provider.
type ProviderSpecPatchOutput struct{ *pulumi.OutputState }

func (ProviderSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecPatch)(nil)).Elem()
}

func (o ProviderSpecPatchOutput) ToProviderSpecPatchOutput() ProviderSpecPatchOutput {
	return o
}

func (o ProviderSpecPatchOutput) ToProviderSpecPatchOutputWithContext(ctx context.Context) ProviderSpecPatchOutput {
	return o
}

func (o ProviderSpecPatchOutput) ToProviderSpecPatchPtrOutput() ProviderSpecPatchPtrOutput {
	return o.ToProviderSpecPatchPtrOutputWithContext(context.Background())
}

func (o ProviderSpecPatchOutput) ToProviderSpecPatchPtrOutputWithContext(ctx context.Context) ProviderSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSpecPatch) *ProviderSpecPatch {
		return &v
	}).(ProviderSpecPatchPtrOutput)
}

// Address specifies the endpoint, in a generic sense, to where alerts are sent.
// What kind of endpoint depends on the specific Provider type being used.
// For the generic Provider, for example, this is an HTTP/S address.
// For other Provider types this could be a project ID or a namespace.
func (o ProviderSpecPatchOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o ProviderSpecPatchOutput) CertSecretRef() ProviderSpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *ProviderSpecCertSecretRefPatch { return v.CertSecretRef }).(ProviderSpecCertSecretRefPatchPtrOutput)
}

// Channel specifies the destination channel where events should be posted.
func (o ProviderSpecPatchOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// CommitStatusExpr is a CEL expression that evaluates to a string value
// that can be used to generate a custom commit status message for use
// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
// bitbucket, azuredevops). Supported variables are: event, provider,
// and alert.
func (o ProviderSpecPatchOutput) CommitStatusExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.CommitStatusExpr }).(pulumi.StringPtrOutput)
}

// Interval at which to reconcile the Provider with its Secret references.
// Deprecated and not used in v1beta3.
func (o ProviderSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Proxy the HTTP/S address of the proxy server.
func (o ProviderSpecPatchOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

func (o ProviderSpecPatchOutput) SecretRef() ProviderSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *ProviderSpecSecretRefPatch { return v.SecretRef }).(ProviderSpecSecretRefPatchPtrOutput)
}

// ServiceAccountName is the name of the service account used to
// authenticate with services from cloud providers. An error is thrown if a
// static credential is also defined inside the Secret referenced by the
// SecretRef.
func (o ProviderSpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Provider.
func (o ProviderSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// Timeout for sending alerts to the Provider.
func (o ProviderSpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Type specifies which Provider implementation to use.
func (o ProviderSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Username specifies the name under which events are posted.
func (o ProviderSpecPatchOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecPatch) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ProviderSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecPatch)(nil)).Elem()
}

func (o ProviderSpecPatchPtrOutput) ToProviderSpecPatchPtrOutput() ProviderSpecPatchPtrOutput {
	return o
}

func (o ProviderSpecPatchPtrOutput) ToProviderSpecPatchPtrOutputWithContext(ctx context.Context) ProviderSpecPatchPtrOutput {
	return o
}

func (o ProviderSpecPatchPtrOutput) Elem() ProviderSpecPatchOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) ProviderSpecPatch {
		if v != nil {
			return *v
		}
		var ret ProviderSpecPatch
		return ret
	}).(ProviderSpecPatchOutput)
}

// Address specifies the endpoint, in a generic sense, to where alerts are sent.
// What kind of endpoint depends on the specific Provider type being used.
// For the generic Provider, for example, this is an HTTP/S address.
// For other Provider types this could be a project ID or a namespace.
func (o ProviderSpecPatchPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

func (o ProviderSpecPatchPtrOutput) CertSecretRef() ProviderSpecCertSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *ProviderSpecCertSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(ProviderSpecCertSecretRefPatchPtrOutput)
}

// Channel specifies the destination channel where events should be posted.
func (o ProviderSpecPatchPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Channel
	}).(pulumi.StringPtrOutput)
}

// CommitStatusExpr is a CEL expression that evaluates to a string value
// that can be used to generate a custom commit status message for use
// with eligible Provider types (github, gitlab, gitea, bitbucketserver,
// bitbucket, azuredevops). Supported variables are: event, provider,
// and alert.
func (o ProviderSpecPatchPtrOutput) CommitStatusExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.CommitStatusExpr
	}).(pulumi.StringPtrOutput)
}

// Interval at which to reconcile the Provider with its Secret references.
// Deprecated and not used in v1beta3.
func (o ProviderSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Proxy the HTTP/S address of the proxy server.
func (o ProviderSpecPatchPtrOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Proxy
	}).(pulumi.StringPtrOutput)
}

func (o ProviderSpecPatchPtrOutput) SecretRef() ProviderSpecSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *ProviderSpecSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ProviderSpecSecretRefPatchPtrOutput)
}

// ServiceAccountName is the name of the service account used to
// authenticate with services from cloud providers. An error is thrown if a
// static credential is also defined inside the Secret referenced by the
// SecretRef.
func (o ProviderSpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend subsequent
// events handling for this Provider.
func (o ProviderSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Timeout for sending alerts to the Provider.
func (o ProviderSpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Type specifies which Provider implementation to use.
func (o ProviderSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Username specifies the name under which events are posted.
func (o ProviderSpecPatchPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing the authentication
// credentials for this Provider.
type ProviderSpecSecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ProviderSpecSecretRefInput is an input type that accepts ProviderSpecSecretRefArgs and ProviderSpecSecretRefOutput values.
// You can construct a concrete instance of `ProviderSpecSecretRefInput` via:
//
//	ProviderSpecSecretRefArgs{...}
type ProviderSpecSecretRefInput interface {
	pulumi.Input

	ToProviderSpecSecretRefOutput() ProviderSpecSecretRefOutput
	ToProviderSpecSecretRefOutputWithContext(context.Context) ProviderSpecSecretRefOutput
}

// SecretRef specifies the Secret containing the authentication
// credentials for this Provider.
type ProviderSpecSecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProviderSpecSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecSecretRef)(nil)).Elem()
}

func (i ProviderSpecSecretRefArgs) ToProviderSpecSecretRefOutput() ProviderSpecSecretRefOutput {
	return i.ToProviderSpecSecretRefOutputWithContext(context.Background())
}

func (i ProviderSpecSecretRefArgs) ToProviderSpecSecretRefOutputWithContext(ctx context.Context) ProviderSpecSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecSecretRefOutput)
}

func (i ProviderSpecSecretRefArgs) ToProviderSpecSecretRefPtrOutput() ProviderSpecSecretRefPtrOutput {
	return i.ToProviderSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i ProviderSpecSecretRefArgs) ToProviderSpecSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecSecretRefOutput).ToProviderSpecSecretRefPtrOutputWithContext(ctx)
}

// ProviderSpecSecretRefPtrInput is an input type that accepts ProviderSpecSecretRefArgs, ProviderSpecSecretRefPtr and ProviderSpecSecretRefPtrOutput values.
// You can construct a concrete instance of `ProviderSpecSecretRefPtrInput` via:
//
//	        ProviderSpecSecretRefArgs{...}
//
//	or:
//
//	        nil
type ProviderSpecSecretRefPtrInput interface {
	pulumi.Input

	ToProviderSpecSecretRefPtrOutput() ProviderSpecSecretRefPtrOutput
	ToProviderSpecSecretRefPtrOutputWithContext(context.Context) ProviderSpecSecretRefPtrOutput
}

type providerSpecSecretRefPtrType ProviderSpecSecretRefArgs

func ProviderSpecSecretRefPtr(v *ProviderSpecSecretRefArgs) ProviderSpecSecretRefPtrInput {
	return (*providerSpecSecretRefPtrType)(v)
}

func (*providerSpecSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecSecretRef)(nil)).Elem()
}

func (i *providerSpecSecretRefPtrType) ToProviderSpecSecretRefPtrOutput() ProviderSpecSecretRefPtrOutput {
	return i.ToProviderSpecSecretRefPtrOutputWithContext(context.Background())
}

func (i *providerSpecSecretRefPtrType) ToProviderSpecSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecSecretRefPtrOutput)
}

// SecretRef specifies the Secret containing the authentication
// credentials for this Provider.
type ProviderSpecSecretRefOutput struct{ *pulumi.OutputState }

func (ProviderSpecSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecSecretRef)(nil)).Elem()
}

func (o ProviderSpecSecretRefOutput) ToProviderSpecSecretRefOutput() ProviderSpecSecretRefOutput {
	return o
}

func (o ProviderSpecSecretRefOutput) ToProviderSpecSecretRefOutputWithContext(ctx context.Context) ProviderSpecSecretRefOutput {
	return o
}

func (o ProviderSpecSecretRefOutput) ToProviderSpecSecretRefPtrOutput() ProviderSpecSecretRefPtrOutput {
	return o.ToProviderSpecSecretRefPtrOutputWithContext(context.Background())
}

func (o ProviderSpecSecretRefOutput) ToProviderSpecSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSpecSecretRef) *ProviderSpecSecretRef {
		return &v
	}).(ProviderSpecSecretRefPtrOutput)
}

// Name of the referent.
func (o ProviderSpecSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProviderSpecSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ProviderSpecSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecSecretRef)(nil)).Elem()
}

func (o ProviderSpecSecretRefPtrOutput) ToProviderSpecSecretRefPtrOutput() ProviderSpecSecretRefPtrOutput {
	return o
}

func (o ProviderSpecSecretRefPtrOutput) ToProviderSpecSecretRefPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPtrOutput {
	return o
}

func (o ProviderSpecSecretRefPtrOutput) Elem() ProviderSpecSecretRefOutput {
	return o.ApplyT(func(v *ProviderSpecSecretRef) ProviderSpecSecretRef {
		if v != nil {
			return *v
		}
		var ret ProviderSpecSecretRef
		return ret
	}).(ProviderSpecSecretRefOutput)
}

// Name of the referent.
func (o ProviderSpecSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Secret containing the authentication
// credentials for this Provider.
type ProviderSpecSecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// ProviderSpecSecretRefPatchInput is an input type that accepts ProviderSpecSecretRefPatchArgs and ProviderSpecSecretRefPatchOutput values.
// You can construct a concrete instance of `ProviderSpecSecretRefPatchInput` via:
//
//	ProviderSpecSecretRefPatchArgs{...}
type ProviderSpecSecretRefPatchInput interface {
	pulumi.Input

	ToProviderSpecSecretRefPatchOutput() ProviderSpecSecretRefPatchOutput
	ToProviderSpecSecretRefPatchOutputWithContext(context.Context) ProviderSpecSecretRefPatchOutput
}

// SecretRef specifies the Secret containing the authentication
// credentials for this Provider.
type ProviderSpecSecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProviderSpecSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecSecretRefPatch)(nil)).Elem()
}

func (i ProviderSpecSecretRefPatchArgs) ToProviderSpecSecretRefPatchOutput() ProviderSpecSecretRefPatchOutput {
	return i.ToProviderSpecSecretRefPatchOutputWithContext(context.Background())
}

func (i ProviderSpecSecretRefPatchArgs) ToProviderSpecSecretRefPatchOutputWithContext(ctx context.Context) ProviderSpecSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecSecretRefPatchOutput)
}

func (i ProviderSpecSecretRefPatchArgs) ToProviderSpecSecretRefPatchPtrOutput() ProviderSpecSecretRefPatchPtrOutput {
	return i.ToProviderSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ProviderSpecSecretRefPatchArgs) ToProviderSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecSecretRefPatchOutput).ToProviderSpecSecretRefPatchPtrOutputWithContext(ctx)
}

// ProviderSpecSecretRefPatchPtrInput is an input type that accepts ProviderSpecSecretRefPatchArgs, ProviderSpecSecretRefPatchPtr and ProviderSpecSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ProviderSpecSecretRefPatchPtrInput` via:
//
//	        ProviderSpecSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ProviderSpecSecretRefPatchPtrInput interface {
	pulumi.Input

	ToProviderSpecSecretRefPatchPtrOutput() ProviderSpecSecretRefPatchPtrOutput
	ToProviderSpecSecretRefPatchPtrOutputWithContext(context.Context) ProviderSpecSecretRefPatchPtrOutput
}

type providerSpecSecretRefPatchPtrType ProviderSpecSecretRefPatchArgs

func ProviderSpecSecretRefPatchPtr(v *ProviderSpecSecretRefPatchArgs) ProviderSpecSecretRefPatchPtrInput {
	return (*providerSpecSecretRefPatchPtrType)(v)
}

func (*providerSpecSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecSecretRefPatch)(nil)).Elem()
}

func (i *providerSpecSecretRefPatchPtrType) ToProviderSpecSecretRefPatchPtrOutput() ProviderSpecSecretRefPatchPtrOutput {
	return i.ToProviderSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *providerSpecSecretRefPatchPtrType) ToProviderSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSpecSecretRefPatchPtrOutput)
}

// SecretRef specifies the Secret containing the authentication
// credentials for this Provider.
type ProviderSpecSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ProviderSpecSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSpecSecretRefPatch)(nil)).Elem()
}

func (o ProviderSpecSecretRefPatchOutput) ToProviderSpecSecretRefPatchOutput() ProviderSpecSecretRefPatchOutput {
	return o
}

func (o ProviderSpecSecretRefPatchOutput) ToProviderSpecSecretRefPatchOutputWithContext(ctx context.Context) ProviderSpecSecretRefPatchOutput {
	return o
}

func (o ProviderSpecSecretRefPatchOutput) ToProviderSpecSecretRefPatchPtrOutput() ProviderSpecSecretRefPatchPtrOutput {
	return o.ToProviderSpecSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ProviderSpecSecretRefPatchOutput) ToProviderSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSpecSecretRefPatch) *ProviderSpecSecretRefPatch {
		return &v
	}).(ProviderSpecSecretRefPatchPtrOutput)
}

// Name of the referent.
func (o ProviderSpecSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderSpecSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProviderSpecSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ProviderSpecSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSpecSecretRefPatch)(nil)).Elem()
}

func (o ProviderSpecSecretRefPatchPtrOutput) ToProviderSpecSecretRefPatchPtrOutput() ProviderSpecSecretRefPatchPtrOutput {
	return o
}

func (o ProviderSpecSecretRefPatchPtrOutput) ToProviderSpecSecretRefPatchPtrOutputWithContext(ctx context.Context) ProviderSpecSecretRefPatchPtrOutput {
	return o
}

func (o ProviderSpecSecretRefPatchPtrOutput) Elem() ProviderSpecSecretRefPatchOutput {
	return o.ApplyT(func(v *ProviderSpecSecretRefPatch) ProviderSpecSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ProviderSpecSecretRefPatch
		return ret
	}).(ProviderSpecSecretRefPatchOutput)
}

// Name of the referent.
func (o ProviderSpecSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSpecSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTypeInput)(nil)).Elem(), AlertTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertTypeArrayInput)(nil)).Elem(), AlertTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertListTypeInput)(nil)).Elem(), AlertListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPatchTypeInput)(nil)).Elem(), AlertPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecInput)(nil)).Elem(), AlertSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecPtrInput)(nil)).Elem(), AlertSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecEventSourcesInput)(nil)).Elem(), AlertSpecEventSourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecEventSourcesArrayInput)(nil)).Elem(), AlertSpecEventSourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecEventSourcesPatchInput)(nil)).Elem(), AlertSpecEventSourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecEventSourcesPatchArrayInput)(nil)).Elem(), AlertSpecEventSourcesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecPatchInput)(nil)).Elem(), AlertSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecPatchPtrInput)(nil)).Elem(), AlertSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecProviderRefInput)(nil)).Elem(), AlertSpecProviderRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecProviderRefPtrInput)(nil)).Elem(), AlertSpecProviderRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecProviderRefPatchInput)(nil)).Elem(), AlertSpecProviderRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertSpecProviderRefPatchPtrInput)(nil)).Elem(), AlertSpecProviderRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderTypeInput)(nil)).Elem(), ProviderTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderTypeArrayInput)(nil)).Elem(), ProviderTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderListTypeInput)(nil)).Elem(), ProviderListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPatchTypeInput)(nil)).Elem(), ProviderPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecInput)(nil)).Elem(), ProviderSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecPtrInput)(nil)).Elem(), ProviderSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecCertSecretRefInput)(nil)).Elem(), ProviderSpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecCertSecretRefPtrInput)(nil)).Elem(), ProviderSpecCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecCertSecretRefPatchInput)(nil)).Elem(), ProviderSpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecCertSecretRefPatchPtrInput)(nil)).Elem(), ProviderSpecCertSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecPatchInput)(nil)).Elem(), ProviderSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecPatchPtrInput)(nil)).Elem(), ProviderSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecSecretRefInput)(nil)).Elem(), ProviderSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecSecretRefPtrInput)(nil)).Elem(), ProviderSpecSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecSecretRefPatchInput)(nil)).Elem(), ProviderSpecSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSpecSecretRefPatchPtrInput)(nil)).Elem(), ProviderSpecSecretRefPatchArgs{})
	pulumi.RegisterOutputType(AlertTypeOutput{})
	pulumi.RegisterOutputType(AlertTypeArrayOutput{})
	pulumi.RegisterOutputType(AlertListTypeOutput{})
	pulumi.RegisterOutputType(AlertPatchTypeOutput{})
	pulumi.RegisterOutputType(AlertSpecOutput{})
	pulumi.RegisterOutputType(AlertSpecPtrOutput{})
	pulumi.RegisterOutputType(AlertSpecEventSourcesOutput{})
	pulumi.RegisterOutputType(AlertSpecEventSourcesArrayOutput{})
	pulumi.RegisterOutputType(AlertSpecEventSourcesPatchOutput{})
	pulumi.RegisterOutputType(AlertSpecEventSourcesPatchArrayOutput{})
	pulumi.RegisterOutputType(AlertSpecPatchOutput{})
	pulumi.RegisterOutputType(AlertSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(AlertSpecProviderRefOutput{})
	pulumi.RegisterOutputType(AlertSpecProviderRefPtrOutput{})
	pulumi.RegisterOutputType(AlertSpecProviderRefPatchOutput{})
	pulumi.RegisterOutputType(AlertSpecProviderRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ProviderTypeOutput{})
	pulumi.RegisterOutputType(ProviderTypeArrayOutput{})
	pulumi.RegisterOutputType(ProviderListTypeOutput{})
	pulumi.RegisterOutputType(ProviderPatchTypeOutput{})
	pulumi.RegisterOutputType(ProviderSpecOutput{})
	pulumi.RegisterOutputType(ProviderSpecPtrOutput{})
	pulumi.RegisterOutputType(ProviderSpecCertSecretRefOutput{})
	pulumi.RegisterOutputType(ProviderSpecCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ProviderSpecCertSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ProviderSpecCertSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ProviderSpecPatchOutput{})
	pulumi.RegisterOutputType(ProviderSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ProviderSpecSecretRefOutput{})
	pulumi.RegisterOutputType(ProviderSpecSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ProviderSpecSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ProviderSpecSecretRefPatchPtrOutput{})
}
