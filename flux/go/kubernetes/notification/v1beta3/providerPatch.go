// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Provider is the Schema for the providers API
type ProviderPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ProviderSpecPatchPtrOutput      `pulumi:"spec"`
}

// NewProviderPatch registers a new resource with the given unique name, arguments, and options.
func NewProviderPatch(ctx *pulumi.Context,
	name string, args *ProviderPatchArgs, opts ...pulumi.ResourceOption) (*ProviderPatch, error) {
	if args == nil {
		args = &ProviderPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("notification.toolkit.fluxcd.io/v1beta3")
	args.Kind = pulumi.StringPtr("Provider")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:notification.toolkit.fluxcd.io/v1beta1:ProviderPatch"),
		},
		{
			Type: pulumi.String("kubernetes:notification.toolkit.fluxcd.io/v1beta2:ProviderPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProviderPatch
	err := ctx.RegisterResource("kubernetes:notification.toolkit.fluxcd.io/v1beta3:ProviderPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderPatch gets an existing ProviderPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderPatchState, opts ...pulumi.ResourceOption) (*ProviderPatch, error) {
	var resource ProviderPatch
	err := ctx.ReadResource("kubernetes:notification.toolkit.fluxcd.io/v1beta3:ProviderPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderPatch resources.
type providerPatchState struct {
}

type ProviderPatchState struct {
}

func (ProviderPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerPatchState)(nil)).Elem()
}

type providerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ProviderSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a ProviderPatch resource.
type ProviderPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ProviderSpecPatchPtrInput
}

func (ProviderPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerPatchArgs)(nil)).Elem()
}

type ProviderPatchInput interface {
	pulumi.Input

	ToProviderPatchOutput() ProviderPatchOutput
	ToProviderPatchOutputWithContext(ctx context.Context) ProviderPatchOutput
}

func (*ProviderPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderPatch)(nil)).Elem()
}

func (i *ProviderPatch) ToProviderPatchOutput() ProviderPatchOutput {
	return i.ToProviderPatchOutputWithContext(context.Background())
}

func (i *ProviderPatch) ToProviderPatchOutputWithContext(ctx context.Context) ProviderPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPatchOutput)
}

// ProviderPatchArrayInput is an input type that accepts ProviderPatchArray and ProviderPatchArrayOutput values.
// You can construct a concrete instance of `ProviderPatchArrayInput` via:
//
//	ProviderPatchArray{ ProviderPatchArgs{...} }
type ProviderPatchArrayInput interface {
	pulumi.Input

	ToProviderPatchArrayOutput() ProviderPatchArrayOutput
	ToProviderPatchArrayOutputWithContext(context.Context) ProviderPatchArrayOutput
}

type ProviderPatchArray []ProviderPatchInput

func (ProviderPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderPatch)(nil)).Elem()
}

func (i ProviderPatchArray) ToProviderPatchArrayOutput() ProviderPatchArrayOutput {
	return i.ToProviderPatchArrayOutputWithContext(context.Background())
}

func (i ProviderPatchArray) ToProviderPatchArrayOutputWithContext(ctx context.Context) ProviderPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPatchArrayOutput)
}

// ProviderPatchMapInput is an input type that accepts ProviderPatchMap and ProviderPatchMapOutput values.
// You can construct a concrete instance of `ProviderPatchMapInput` via:
//
//	ProviderPatchMap{ "key": ProviderPatchArgs{...} }
type ProviderPatchMapInput interface {
	pulumi.Input

	ToProviderPatchMapOutput() ProviderPatchMapOutput
	ToProviderPatchMapOutputWithContext(context.Context) ProviderPatchMapOutput
}

type ProviderPatchMap map[string]ProviderPatchInput

func (ProviderPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderPatch)(nil)).Elem()
}

func (i ProviderPatchMap) ToProviderPatchMapOutput() ProviderPatchMapOutput {
	return i.ToProviderPatchMapOutputWithContext(context.Background())
}

func (i ProviderPatchMap) ToProviderPatchMapOutputWithContext(ctx context.Context) ProviderPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPatchMapOutput)
}

type ProviderPatchOutput struct{ *pulumi.OutputState }

func (ProviderPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderPatch)(nil)).Elem()
}

func (o ProviderPatchOutput) ToProviderPatchOutput() ProviderPatchOutput {
	return o
}

func (o ProviderPatchOutput) ToProviderPatchOutputWithContext(ctx context.Context) ProviderPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProviderPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProviderPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ProviderPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ProviderPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ProviderPatchOutput) Spec() ProviderSpecPatchPtrOutput {
	return o.ApplyT(func(v *ProviderPatch) ProviderSpecPatchPtrOutput { return v.Spec }).(ProviderSpecPatchPtrOutput)
}

type ProviderPatchArrayOutput struct{ *pulumi.OutputState }

func (ProviderPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderPatch)(nil)).Elem()
}

func (o ProviderPatchArrayOutput) ToProviderPatchArrayOutput() ProviderPatchArrayOutput {
	return o
}

func (o ProviderPatchArrayOutput) ToProviderPatchArrayOutputWithContext(ctx context.Context) ProviderPatchArrayOutput {
	return o
}

func (o ProviderPatchArrayOutput) Index(i pulumi.IntInput) ProviderPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProviderPatch {
		return vs[0].([]*ProviderPatch)[vs[1].(int)]
	}).(ProviderPatchOutput)
}

type ProviderPatchMapOutput struct{ *pulumi.OutputState }

func (ProviderPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderPatch)(nil)).Elem()
}

func (o ProviderPatchMapOutput) ToProviderPatchMapOutput() ProviderPatchMapOutput {
	return o
}

func (o ProviderPatchMapOutput) ToProviderPatchMapOutputWithContext(ctx context.Context) ProviderPatchMapOutput {
	return o
}

func (o ProviderPatchMapOutput) MapIndex(k pulumi.StringInput) ProviderPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProviderPatch {
		return vs[0].(map[string]*ProviderPatch)[vs[1].(string)]
	}).(ProviderPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPatchInput)(nil)).Elem(), &ProviderPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPatchArrayInput)(nil)).Elem(), ProviderPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPatchMapInput)(nil)).Elem(), ProviderPatchMap{})
	pulumi.RegisterOutputType(ProviderPatchOutput{})
	pulumi.RegisterOutputType(ProviderPatchArrayOutput{})
	pulumi.RegisterOutputType(ProviderPatchMapOutput{})
}
