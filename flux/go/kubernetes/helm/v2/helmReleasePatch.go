// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// HelmRelease is the Schema for the helmreleases API
type HelmReleasePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     HelmReleaseSpecPatchPtrOutput   `pulumi:"spec"`
	Status   HelmReleaseStatusPatchPtrOutput `pulumi:"status"`
}

// NewHelmReleasePatch registers a new resource with the given unique name, arguments, and options.
func NewHelmReleasePatch(ctx *pulumi.Context,
	name string, args *HelmReleasePatchArgs, opts ...pulumi.ResourceOption) (*HelmReleasePatch, error) {
	if args == nil {
		args = &HelmReleasePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("helm.toolkit.fluxcd.io/v2")
	args.Kind = pulumi.StringPtr("HelmRelease")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:helm.toolkit.fluxcd.io/v2beta1:HelmReleasePatch"),
		},
		{
			Type: pulumi.String("kubernetes:helm.toolkit.fluxcd.io/v2beta2:HelmReleasePatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmReleasePatch
	err := ctx.RegisterResource("kubernetes:helm.toolkit.fluxcd.io/v2:HelmReleasePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmReleasePatch gets an existing HelmReleasePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmReleasePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmReleasePatchState, opts ...pulumi.ResourceOption) (*HelmReleasePatch, error) {
	var resource HelmReleasePatch
	err := ctx.ReadResource("kubernetes:helm.toolkit.fluxcd.io/v2:HelmReleasePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmReleasePatch resources.
type helmReleasePatchState struct {
}

type HelmReleasePatchState struct {
}

func (HelmReleasePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleasePatchState)(nil)).Elem()
}

type helmReleasePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *HelmReleaseSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a HelmReleasePatch resource.
type HelmReleasePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     HelmReleaseSpecPatchPtrInput
}

func (HelmReleasePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleasePatchArgs)(nil)).Elem()
}

type HelmReleasePatchInput interface {
	pulumi.Input

	ToHelmReleasePatchOutput() HelmReleasePatchOutput
	ToHelmReleasePatchOutputWithContext(ctx context.Context) HelmReleasePatchOutput
}

func (*HelmReleasePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleasePatch)(nil)).Elem()
}

func (i *HelmReleasePatch) ToHelmReleasePatchOutput() HelmReleasePatchOutput {
	return i.ToHelmReleasePatchOutputWithContext(context.Background())
}

func (i *HelmReleasePatch) ToHelmReleasePatchOutputWithContext(ctx context.Context) HelmReleasePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleasePatchOutput)
}

// HelmReleasePatchArrayInput is an input type that accepts HelmReleasePatchArray and HelmReleasePatchArrayOutput values.
// You can construct a concrete instance of `HelmReleasePatchArrayInput` via:
//
//	HelmReleasePatchArray{ HelmReleasePatchArgs{...} }
type HelmReleasePatchArrayInput interface {
	pulumi.Input

	ToHelmReleasePatchArrayOutput() HelmReleasePatchArrayOutput
	ToHelmReleasePatchArrayOutputWithContext(context.Context) HelmReleasePatchArrayOutput
}

type HelmReleasePatchArray []HelmReleasePatchInput

func (HelmReleasePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmReleasePatch)(nil)).Elem()
}

func (i HelmReleasePatchArray) ToHelmReleasePatchArrayOutput() HelmReleasePatchArrayOutput {
	return i.ToHelmReleasePatchArrayOutputWithContext(context.Background())
}

func (i HelmReleasePatchArray) ToHelmReleasePatchArrayOutputWithContext(ctx context.Context) HelmReleasePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleasePatchArrayOutput)
}

// HelmReleasePatchMapInput is an input type that accepts HelmReleasePatchMap and HelmReleasePatchMapOutput values.
// You can construct a concrete instance of `HelmReleasePatchMapInput` via:
//
//	HelmReleasePatchMap{ "key": HelmReleasePatchArgs{...} }
type HelmReleasePatchMapInput interface {
	pulumi.Input

	ToHelmReleasePatchMapOutput() HelmReleasePatchMapOutput
	ToHelmReleasePatchMapOutputWithContext(context.Context) HelmReleasePatchMapOutput
}

type HelmReleasePatchMap map[string]HelmReleasePatchInput

func (HelmReleasePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmReleasePatch)(nil)).Elem()
}

func (i HelmReleasePatchMap) ToHelmReleasePatchMapOutput() HelmReleasePatchMapOutput {
	return i.ToHelmReleasePatchMapOutputWithContext(context.Background())
}

func (i HelmReleasePatchMap) ToHelmReleasePatchMapOutputWithContext(ctx context.Context) HelmReleasePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleasePatchMapOutput)
}

type HelmReleasePatchOutput struct{ *pulumi.OutputState }

func (HelmReleasePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleasePatch)(nil)).Elem()
}

func (o HelmReleasePatchOutput) ToHelmReleasePatchOutput() HelmReleasePatchOutput {
	return o
}

func (o HelmReleasePatchOutput) ToHelmReleasePatchOutputWithContext(ctx context.Context) HelmReleasePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmReleasePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleasePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleasePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleasePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmReleasePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleasePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmReleasePatchOutput) Spec() HelmReleaseSpecPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleasePatch) HelmReleaseSpecPatchPtrOutput { return v.Spec }).(HelmReleaseSpecPatchPtrOutput)
}

func (o HelmReleasePatchOutput) Status() HelmReleaseStatusPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleasePatch) HelmReleaseStatusPatchPtrOutput { return v.Status }).(HelmReleaseStatusPatchPtrOutput)
}

type HelmReleasePatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleasePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmReleasePatch)(nil)).Elem()
}

func (o HelmReleasePatchArrayOutput) ToHelmReleasePatchArrayOutput() HelmReleasePatchArrayOutput {
	return o
}

func (o HelmReleasePatchArrayOutput) ToHelmReleasePatchArrayOutputWithContext(ctx context.Context) HelmReleasePatchArrayOutput {
	return o
}

func (o HelmReleasePatchArrayOutput) Index(i pulumi.IntInput) HelmReleasePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmReleasePatch {
		return vs[0].([]*HelmReleasePatch)[vs[1].(int)]
	}).(HelmReleasePatchOutput)
}

type HelmReleasePatchMapOutput struct{ *pulumi.OutputState }

func (HelmReleasePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmReleasePatch)(nil)).Elem()
}

func (o HelmReleasePatchMapOutput) ToHelmReleasePatchMapOutput() HelmReleasePatchMapOutput {
	return o
}

func (o HelmReleasePatchMapOutput) ToHelmReleasePatchMapOutputWithContext(ctx context.Context) HelmReleasePatchMapOutput {
	return o
}

func (o HelmReleasePatchMapOutput) MapIndex(k pulumi.StringInput) HelmReleasePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmReleasePatch {
		return vs[0].(map[string]*HelmReleasePatch)[vs[1].(string)]
	}).(HelmReleasePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleasePatchInput)(nil)).Elem(), &HelmReleasePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleasePatchArrayInput)(nil)).Elem(), HelmReleasePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleasePatchMapInput)(nil)).Elem(), HelmReleasePatchMap{})
	pulumi.RegisterOutputType(HelmReleasePatchOutput{})
	pulumi.RegisterOutputType(HelmReleasePatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleasePatchMapOutput{})
}
