// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmReleaseList is a list of HelmRelease
type HelmReleaseList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmReleaseTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewHelmReleaseList registers a new resource with the given unique name, arguments, and options.
func NewHelmReleaseList(ctx *pulumi.Context,
	name string, args *HelmReleaseListArgs, opts ...pulumi.ResourceOption) (*HelmReleaseList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("helm.toolkit.fluxcd.io/v2")
	args.Kind = pulumi.StringPtr("HelmReleaseList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmReleaseList
	err := ctx.RegisterResource("kubernetes:helm.toolkit.fluxcd.io/v2:HelmReleaseList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmReleaseList gets an existing HelmReleaseList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmReleaseList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmReleaseListState, opts ...pulumi.ResourceOption) (*HelmReleaseList, error) {
	var resource HelmReleaseList
	err := ctx.ReadResource("kubernetes:helm.toolkit.fluxcd.io/v2:HelmReleaseList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmReleaseList resources.
type helmReleaseListState struct {
}

type HelmReleaseListState struct {
}

func (HelmReleaseListState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleaseListState)(nil)).Elem()
}

type helmReleaseListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmReleaseType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a HelmReleaseList resource.
type HelmReleaseListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmReleaseTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (HelmReleaseListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleaseListArgs)(nil)).Elem()
}

type HelmReleaseListInput interface {
	pulumi.Input

	ToHelmReleaseListOutput() HelmReleaseListOutput
	ToHelmReleaseListOutputWithContext(ctx context.Context) HelmReleaseListOutput
}

func (*HelmReleaseList) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseList)(nil)).Elem()
}

func (i *HelmReleaseList) ToHelmReleaseListOutput() HelmReleaseListOutput {
	return i.ToHelmReleaseListOutputWithContext(context.Background())
}

func (i *HelmReleaseList) ToHelmReleaseListOutputWithContext(ctx context.Context) HelmReleaseListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseListOutput)
}

// HelmReleaseListArrayInput is an input type that accepts HelmReleaseListArray and HelmReleaseListArrayOutput values.
// You can construct a concrete instance of `HelmReleaseListArrayInput` via:
//
//	HelmReleaseListArray{ HelmReleaseListArgs{...} }
type HelmReleaseListArrayInput interface {
	pulumi.Input

	ToHelmReleaseListArrayOutput() HelmReleaseListArrayOutput
	ToHelmReleaseListArrayOutputWithContext(context.Context) HelmReleaseListArrayOutput
}

type HelmReleaseListArray []HelmReleaseListInput

func (HelmReleaseListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmReleaseList)(nil)).Elem()
}

func (i HelmReleaseListArray) ToHelmReleaseListArrayOutput() HelmReleaseListArrayOutput {
	return i.ToHelmReleaseListArrayOutputWithContext(context.Background())
}

func (i HelmReleaseListArray) ToHelmReleaseListArrayOutputWithContext(ctx context.Context) HelmReleaseListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseListArrayOutput)
}

// HelmReleaseListMapInput is an input type that accepts HelmReleaseListMap and HelmReleaseListMapOutput values.
// You can construct a concrete instance of `HelmReleaseListMapInput` via:
//
//	HelmReleaseListMap{ "key": HelmReleaseListArgs{...} }
type HelmReleaseListMapInput interface {
	pulumi.Input

	ToHelmReleaseListMapOutput() HelmReleaseListMapOutput
	ToHelmReleaseListMapOutputWithContext(context.Context) HelmReleaseListMapOutput
}

type HelmReleaseListMap map[string]HelmReleaseListInput

func (HelmReleaseListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmReleaseList)(nil)).Elem()
}

func (i HelmReleaseListMap) ToHelmReleaseListMapOutput() HelmReleaseListMapOutput {
	return i.ToHelmReleaseListMapOutputWithContext(context.Background())
}

func (i HelmReleaseListMap) ToHelmReleaseListMapOutputWithContext(ctx context.Context) HelmReleaseListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseListMapOutput)
}

type HelmReleaseListOutput struct{ *pulumi.OutputState }

func (HelmReleaseListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseList)(nil)).Elem()
}

func (o HelmReleaseListOutput) ToHelmReleaseListOutput() HelmReleaseListOutput {
	return o
}

func (o HelmReleaseListOutput) ToHelmReleaseListOutputWithContext(ctx context.Context) HelmReleaseListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmReleaseListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmReleaseList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmReleaseListOutput) Items() HelmReleaseTypeArrayOutput {
	return o.ApplyT(func(v *HelmReleaseList) HelmReleaseTypeArrayOutput { return v.Items }).(HelmReleaseTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleaseListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmReleaseList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleaseListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *HelmReleaseList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type HelmReleaseListArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmReleaseList)(nil)).Elem()
}

func (o HelmReleaseListArrayOutput) ToHelmReleaseListArrayOutput() HelmReleaseListArrayOutput {
	return o
}

func (o HelmReleaseListArrayOutput) ToHelmReleaseListArrayOutputWithContext(ctx context.Context) HelmReleaseListArrayOutput {
	return o
}

func (o HelmReleaseListArrayOutput) Index(i pulumi.IntInput) HelmReleaseListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmReleaseList {
		return vs[0].([]*HelmReleaseList)[vs[1].(int)]
	}).(HelmReleaseListOutput)
}

type HelmReleaseListMapOutput struct{ *pulumi.OutputState }

func (HelmReleaseListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmReleaseList)(nil)).Elem()
}

func (o HelmReleaseListMapOutput) ToHelmReleaseListMapOutput() HelmReleaseListMapOutput {
	return o
}

func (o HelmReleaseListMapOutput) ToHelmReleaseListMapOutputWithContext(ctx context.Context) HelmReleaseListMapOutput {
	return o
}

func (o HelmReleaseListMapOutput) MapIndex(k pulumi.StringInput) HelmReleaseListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmReleaseList {
		return vs[0].(map[string]*HelmReleaseList)[vs[1].(string)]
	}).(HelmReleaseListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseListInput)(nil)).Elem(), &HelmReleaseList{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseListArrayInput)(nil)).Elem(), HelmReleaseListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseListMapInput)(nil)).Elem(), HelmReleaseListMap{})
	pulumi.RegisterOutputType(HelmReleaseListOutput{})
	pulumi.RegisterOutputType(HelmReleaseListArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseListMapOutput{})
}
