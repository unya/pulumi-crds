// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HelmRelease is the Schema for the helmreleases API
type HelmRelease struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     HelmReleaseSpecOutput      `pulumi:"spec"`
	Status   HelmReleaseStatusPtrOutput `pulumi:"status"`
}

// NewHelmRelease registers a new resource with the given unique name, arguments, and options.
func NewHelmRelease(ctx *pulumi.Context,
	name string, args *HelmReleaseArgs, opts ...pulumi.ResourceOption) (*HelmRelease, error) {
	if args == nil {
		args = &HelmReleaseArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("helm.toolkit.fluxcd.io/v2beta1")
	args.Kind = pulumi.StringPtr("HelmRelease")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:helm.toolkit.fluxcd.io/v2:HelmRelease"),
		},
		{
			Type: pulumi.String("kubernetes:helm.toolkit.fluxcd.io/v2beta2:HelmRelease"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HelmRelease
	err := ctx.RegisterResource("kubernetes:helm.toolkit.fluxcd.io/v2beta1:HelmRelease", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHelmRelease gets an existing HelmRelease resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHelmRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HelmReleaseState, opts ...pulumi.ResourceOption) (*HelmRelease, error) {
	var resource HelmRelease
	err := ctx.ReadResource("kubernetes:helm.toolkit.fluxcd.io/v2beta1:HelmRelease", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HelmRelease resources.
type helmReleaseState struct {
}

type HelmReleaseState struct {
}

func (HelmReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleaseState)(nil)).Elem()
}

type helmReleaseArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *HelmReleaseSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a HelmRelease resource.
type HelmReleaseArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     HelmReleaseSpecPtrInput
}

func (HelmReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*helmReleaseArgs)(nil)).Elem()
}

type HelmReleaseInput interface {
	pulumi.Input

	ToHelmReleaseOutput() HelmReleaseOutput
	ToHelmReleaseOutputWithContext(ctx context.Context) HelmReleaseOutput
}

func (*HelmRelease) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRelease)(nil)).Elem()
}

func (i *HelmRelease) ToHelmReleaseOutput() HelmReleaseOutput {
	return i.ToHelmReleaseOutputWithContext(context.Background())
}

func (i *HelmRelease) ToHelmReleaseOutputWithContext(ctx context.Context) HelmReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseOutput)
}

// HelmReleaseArrayInput is an input type that accepts HelmReleaseArray and HelmReleaseArrayOutput values.
// You can construct a concrete instance of `HelmReleaseArrayInput` via:
//
//	HelmReleaseArray{ HelmReleaseArgs{...} }
type HelmReleaseArrayInput interface {
	pulumi.Input

	ToHelmReleaseArrayOutput() HelmReleaseArrayOutput
	ToHelmReleaseArrayOutputWithContext(context.Context) HelmReleaseArrayOutput
}

type HelmReleaseArray []HelmReleaseInput

func (HelmReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRelease)(nil)).Elem()
}

func (i HelmReleaseArray) ToHelmReleaseArrayOutput() HelmReleaseArrayOutput {
	return i.ToHelmReleaseArrayOutputWithContext(context.Background())
}

func (i HelmReleaseArray) ToHelmReleaseArrayOutputWithContext(ctx context.Context) HelmReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseArrayOutput)
}

// HelmReleaseMapInput is an input type that accepts HelmReleaseMap and HelmReleaseMapOutput values.
// You can construct a concrete instance of `HelmReleaseMapInput` via:
//
//	HelmReleaseMap{ "key": HelmReleaseArgs{...} }
type HelmReleaseMapInput interface {
	pulumi.Input

	ToHelmReleaseMapOutput() HelmReleaseMapOutput
	ToHelmReleaseMapOutputWithContext(context.Context) HelmReleaseMapOutput
}

type HelmReleaseMap map[string]HelmReleaseInput

func (HelmReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRelease)(nil)).Elem()
}

func (i HelmReleaseMap) ToHelmReleaseMapOutput() HelmReleaseMapOutput {
	return i.ToHelmReleaseMapOutputWithContext(context.Background())
}

func (i HelmReleaseMap) ToHelmReleaseMapOutputWithContext(ctx context.Context) HelmReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseMapOutput)
}

type HelmReleaseOutput struct{ *pulumi.OutputState }

func (HelmReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmRelease)(nil)).Elem()
}

func (o HelmReleaseOutput) ToHelmReleaseOutput() HelmReleaseOutput {
	return o
}

func (o HelmReleaseOutput) ToHelmReleaseOutputWithContext(ctx context.Context) HelmReleaseOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmReleaseOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmRelease) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleaseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HelmRelease) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmReleaseOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *HelmRelease) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o HelmReleaseOutput) Spec() HelmReleaseSpecOutput {
	return o.ApplyT(func(v *HelmRelease) HelmReleaseSpecOutput { return v.Spec }).(HelmReleaseSpecOutput)
}

func (o HelmReleaseOutput) Status() HelmReleaseStatusPtrOutput {
	return o.ApplyT(func(v *HelmRelease) HelmReleaseStatusPtrOutput { return v.Status }).(HelmReleaseStatusPtrOutput)
}

type HelmReleaseArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HelmRelease)(nil)).Elem()
}

func (o HelmReleaseArrayOutput) ToHelmReleaseArrayOutput() HelmReleaseArrayOutput {
	return o
}

func (o HelmReleaseArrayOutput) ToHelmReleaseArrayOutputWithContext(ctx context.Context) HelmReleaseArrayOutput {
	return o
}

func (o HelmReleaseArrayOutput) Index(i pulumi.IntInput) HelmReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HelmRelease {
		return vs[0].([]*HelmRelease)[vs[1].(int)]
	}).(HelmReleaseOutput)
}

type HelmReleaseMapOutput struct{ *pulumi.OutputState }

func (HelmReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HelmRelease)(nil)).Elem()
}

func (o HelmReleaseMapOutput) ToHelmReleaseMapOutput() HelmReleaseMapOutput {
	return o
}

func (o HelmReleaseMapOutput) ToHelmReleaseMapOutputWithContext(ctx context.Context) HelmReleaseMapOutput {
	return o
}

func (o HelmReleaseMapOutput) MapIndex(k pulumi.StringInput) HelmReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HelmRelease {
		return vs[0].(map[string]*HelmRelease)[vs[1].(string)]
	}).(HelmReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseInput)(nil)).Elem(), &HelmRelease{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseArrayInput)(nil)).Elem(), HelmReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseMapInput)(nil)).Elem(), HelmReleaseMap{})
	pulumi.RegisterOutputType(HelmReleaseOutput{})
	pulumi.RegisterOutputType(HelmReleaseArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseMapOutput{})
}
