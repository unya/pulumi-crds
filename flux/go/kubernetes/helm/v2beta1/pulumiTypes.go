// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// HelmRelease is the Schema for the helmreleases API
type HelmReleaseType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *HelmReleaseSpec   `pulumi:"spec"`
	Status   *HelmReleaseStatus `pulumi:"status"`
}

// HelmReleaseTypeInput is an input type that accepts HelmReleaseTypeArgs and HelmReleaseTypeOutput values.
// You can construct a concrete instance of `HelmReleaseTypeInput` via:
//
//	HelmReleaseTypeArgs{...}
type HelmReleaseTypeInput interface {
	pulumi.Input

	ToHelmReleaseTypeOutput() HelmReleaseTypeOutput
	ToHelmReleaseTypeOutputWithContext(context.Context) HelmReleaseTypeOutput
}

// HelmRelease is the Schema for the helmreleases API
type HelmReleaseTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     HelmReleaseSpecPtrInput   `pulumi:"spec"`
	Status   HelmReleaseStatusPtrInput `pulumi:"status"`
}

func (HelmReleaseTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseType)(nil)).Elem()
}

func (i HelmReleaseTypeArgs) ToHelmReleaseTypeOutput() HelmReleaseTypeOutput {
	return i.ToHelmReleaseTypeOutputWithContext(context.Background())
}

func (i HelmReleaseTypeArgs) ToHelmReleaseTypeOutputWithContext(ctx context.Context) HelmReleaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseTypeOutput)
}

// HelmReleaseTypeArrayInput is an input type that accepts HelmReleaseTypeArray and HelmReleaseTypeArrayOutput values.
// You can construct a concrete instance of `HelmReleaseTypeArrayInput` via:
//
//	HelmReleaseTypeArray{ HelmReleaseTypeArgs{...} }
type HelmReleaseTypeArrayInput interface {
	pulumi.Input

	ToHelmReleaseTypeArrayOutput() HelmReleaseTypeArrayOutput
	ToHelmReleaseTypeArrayOutputWithContext(context.Context) HelmReleaseTypeArrayOutput
}

type HelmReleaseTypeArray []HelmReleaseTypeInput

func (HelmReleaseTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseType)(nil)).Elem()
}

func (i HelmReleaseTypeArray) ToHelmReleaseTypeArrayOutput() HelmReleaseTypeArrayOutput {
	return i.ToHelmReleaseTypeArrayOutputWithContext(context.Background())
}

func (i HelmReleaseTypeArray) ToHelmReleaseTypeArrayOutputWithContext(ctx context.Context) HelmReleaseTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseTypeArrayOutput)
}

// HelmRelease is the Schema for the helmreleases API
type HelmReleaseTypeOutput struct{ *pulumi.OutputState }

func (HelmReleaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseType)(nil)).Elem()
}

func (o HelmReleaseTypeOutput) ToHelmReleaseTypeOutput() HelmReleaseTypeOutput {
	return o
}

func (o HelmReleaseTypeOutput) ToHelmReleaseTypeOutputWithContext(ctx context.Context) HelmReleaseTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmReleaseTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleaseTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmReleaseTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v HelmReleaseType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o HelmReleaseTypeOutput) Spec() HelmReleaseSpecPtrOutput {
	return o.ApplyT(func(v HelmReleaseType) *HelmReleaseSpec { return v.Spec }).(HelmReleaseSpecPtrOutput)
}

func (o HelmReleaseTypeOutput) Status() HelmReleaseStatusPtrOutput {
	return o.ApplyT(func(v HelmReleaseType) *HelmReleaseStatus { return v.Status }).(HelmReleaseStatusPtrOutput)
}

type HelmReleaseTypeArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseType)(nil)).Elem()
}

func (o HelmReleaseTypeArrayOutput) ToHelmReleaseTypeArrayOutput() HelmReleaseTypeArrayOutput {
	return o
}

func (o HelmReleaseTypeArrayOutput) ToHelmReleaseTypeArrayOutputWithContext(ctx context.Context) HelmReleaseTypeArrayOutput {
	return o
}

func (o HelmReleaseTypeArrayOutput) Index(i pulumi.IntInput) HelmReleaseTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseType {
		return vs[0].([]HelmReleaseType)[vs[1].(int)]
	}).(HelmReleaseTypeOutput)
}

// HelmReleaseList is a list of HelmRelease
type HelmReleaseListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HelmReleaseType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// HelmReleaseListTypeInput is an input type that accepts HelmReleaseListTypeArgs and HelmReleaseListTypeOutput values.
// You can construct a concrete instance of `HelmReleaseListTypeInput` via:
//
//	HelmReleaseListTypeArgs{...}
type HelmReleaseListTypeInput interface {
	pulumi.Input

	ToHelmReleaseListTypeOutput() HelmReleaseListTypeOutput
	ToHelmReleaseListTypeOutputWithContext(context.Context) HelmReleaseListTypeOutput
}

// HelmReleaseList is a list of HelmRelease
type HelmReleaseListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HelmReleaseTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (HelmReleaseListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseListType)(nil)).Elem()
}

func (i HelmReleaseListTypeArgs) ToHelmReleaseListTypeOutput() HelmReleaseListTypeOutput {
	return i.ToHelmReleaseListTypeOutputWithContext(context.Background())
}

func (i HelmReleaseListTypeArgs) ToHelmReleaseListTypeOutputWithContext(ctx context.Context) HelmReleaseListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseListTypeOutput)
}

// HelmReleaseList is a list of HelmRelease
type HelmReleaseListTypeOutput struct{ *pulumi.OutputState }

func (HelmReleaseListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseListType)(nil)).Elem()
}

func (o HelmReleaseListTypeOutput) ToHelmReleaseListTypeOutput() HelmReleaseListTypeOutput {
	return o
}

func (o HelmReleaseListTypeOutput) ToHelmReleaseListTypeOutputWithContext(ctx context.Context) HelmReleaseListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmReleaseListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of helmreleases. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HelmReleaseListTypeOutput) Items() HelmReleaseTypeArrayOutput {
	return o.ApplyT(func(v HelmReleaseListType) []HelmReleaseType { return v.Items }).(HelmReleaseTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleaseListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleaseListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v HelmReleaseListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// HelmRelease is the Schema for the helmreleases API
type HelmReleasePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *HelmReleaseSpecPatch   `pulumi:"spec"`
	Status   *HelmReleaseStatusPatch `pulumi:"status"`
}

// HelmReleasePatchTypeInput is an input type that accepts HelmReleasePatchTypeArgs and HelmReleasePatchTypeOutput values.
// You can construct a concrete instance of `HelmReleasePatchTypeInput` via:
//
//	HelmReleasePatchTypeArgs{...}
type HelmReleasePatchTypeInput interface {
	pulumi.Input

	ToHelmReleasePatchTypeOutput() HelmReleasePatchTypeOutput
	ToHelmReleasePatchTypeOutputWithContext(context.Context) HelmReleasePatchTypeOutput
}

// HelmRelease is the Schema for the helmreleases API
type HelmReleasePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     HelmReleaseSpecPatchPtrInput   `pulumi:"spec"`
	Status   HelmReleaseStatusPatchPtrInput `pulumi:"status"`
}

func (HelmReleasePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleasePatchType)(nil)).Elem()
}

func (i HelmReleasePatchTypeArgs) ToHelmReleasePatchTypeOutput() HelmReleasePatchTypeOutput {
	return i.ToHelmReleasePatchTypeOutputWithContext(context.Background())
}

func (i HelmReleasePatchTypeArgs) ToHelmReleasePatchTypeOutputWithContext(ctx context.Context) HelmReleasePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleasePatchTypeOutput)
}

// HelmRelease is the Schema for the helmreleases API
type HelmReleasePatchTypeOutput struct{ *pulumi.OutputState }

func (HelmReleasePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleasePatchType)(nil)).Elem()
}

func (o HelmReleasePatchTypeOutput) ToHelmReleasePatchTypeOutput() HelmReleasePatchTypeOutput {
	return o
}

func (o HelmReleasePatchTypeOutput) ToHelmReleasePatchTypeOutputWithContext(ctx context.Context) HelmReleasePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HelmReleasePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleasePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HelmReleasePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleasePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HelmReleasePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v HelmReleasePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o HelmReleasePatchTypeOutput) Spec() HelmReleaseSpecPatchPtrOutput {
	return o.ApplyT(func(v HelmReleasePatchType) *HelmReleaseSpecPatch { return v.Spec }).(HelmReleaseSpecPatchPtrOutput)
}

func (o HelmReleasePatchTypeOutput) Status() HelmReleaseStatusPatchPtrOutput {
	return o.ApplyT(func(v HelmReleasePatchType) *HelmReleaseStatusPatch { return v.Status }).(HelmReleaseStatusPatchPtrOutput)
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpec struct {
	Chart    *HelmReleaseSpecChart    `pulumi:"chart"`
	ChartRef *HelmReleaseSpecChartRef `pulumi:"chartRef"`
	// DependsOn may contain a meta.NamespacedObjectReference slice with
	// references to HelmRelease resources that must be ready before this HelmRelease
	// can be reconciled.
	DependsOn      []HelmReleaseSpecDependsOn     `pulumi:"dependsOn"`
	DriftDetection *HelmReleaseSpecDriftDetection `pulumi:"driftDetection"`
	Install        *HelmReleaseSpecInstall        `pulumi:"install"`
	// Interval at which to reconcile the Helm release.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval   *string                    `pulumi:"interval"`
	KubeConfig *HelmReleaseSpecKubeConfig `pulumi:"kubeConfig"`
	// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
	// Use '0' for an unlimited number of revisions; defaults to '10'.
	MaxHistory *int `pulumi:"maxHistory"`
	// PersistentClient tells the controller to use a persistent Kubernetes
	// client for this release. When enabled, the client will be reused for the
	// duration of the reconciliation, instead of being created and destroyed
	// for each (step of a) Helm action.
	//
	// This can improve performance, but may cause issues with some Helm charts
	// that for example do create Custom Resource Definitions during installation
	// outside Helm's CRD lifecycle hooks, which are then not observed to be
	// available by e.g. post-install hooks.
	//
	// If not set, it defaults to true.
	PersistentClient *bool `pulumi:"persistentClient"`
	// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
	// of their definition.
	PostRenderers []HelmReleaseSpecPostRenderers `pulumi:"postRenderers"`
	// ReleaseName used for the Helm release. Defaults to a composition of
	// '[TargetNamespace-]Name'.
	ReleaseName *string                  `pulumi:"releaseName"`
	Rollback    *HelmReleaseSpecRollback `pulumi:"rollback"`
	// The name of the Kubernetes service account to impersonate
	// when reconciling this HelmRelease.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// StorageNamespace used for the Helm storage.
	// Defaults to the namespace of the HelmRelease.
	StorageNamespace *string `pulumi:"storageNamespace"`
	// Suspend tells the controller to suspend reconciliation for this HelmRelease,
	// it does not apply to already started reconciliations. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// TargetNamespace to target when performing operations for the HelmRelease.
	// Defaults to the namespace of the HelmRelease.
	TargetNamespace *string              `pulumi:"targetNamespace"`
	Test            *HelmReleaseSpecTest `pulumi:"test"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
	// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
	Timeout   *string                   `pulumi:"timeout"`
	Uninstall *HelmReleaseSpecUninstall `pulumi:"uninstall"`
	Upgrade   *HelmReleaseSpecUpgrade   `pulumi:"upgrade"`
	// Values holds the values for this Helm release.
	Values map[string]interface{} `pulumi:"values"`
	// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
	// and information about how they should be merged.
	ValuesFrom []HelmReleaseSpecValuesFrom `pulumi:"valuesFrom"`
}

// HelmReleaseSpecInput is an input type that accepts HelmReleaseSpecArgs and HelmReleaseSpecOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInput` via:
//
//	HelmReleaseSpecArgs{...}
type HelmReleaseSpecInput interface {
	pulumi.Input

	ToHelmReleaseSpecOutput() HelmReleaseSpecOutput
	ToHelmReleaseSpecOutputWithContext(context.Context) HelmReleaseSpecOutput
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecArgs struct {
	Chart    HelmReleaseSpecChartPtrInput    `pulumi:"chart"`
	ChartRef HelmReleaseSpecChartRefPtrInput `pulumi:"chartRef"`
	// DependsOn may contain a meta.NamespacedObjectReference slice with
	// references to HelmRelease resources that must be ready before this HelmRelease
	// can be reconciled.
	DependsOn      HelmReleaseSpecDependsOnArrayInput    `pulumi:"dependsOn"`
	DriftDetection HelmReleaseSpecDriftDetectionPtrInput `pulumi:"driftDetection"`
	Install        HelmReleaseSpecInstallPtrInput        `pulumi:"install"`
	// Interval at which to reconcile the Helm release.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval   pulumi.StringPtrInput             `pulumi:"interval"`
	KubeConfig HelmReleaseSpecKubeConfigPtrInput `pulumi:"kubeConfig"`
	// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
	// Use '0' for an unlimited number of revisions; defaults to '10'.
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// PersistentClient tells the controller to use a persistent Kubernetes
	// client for this release. When enabled, the client will be reused for the
	// duration of the reconciliation, instead of being created and destroyed
	// for each (step of a) Helm action.
	//
	// This can improve performance, but may cause issues with some Helm charts
	// that for example do create Custom Resource Definitions during installation
	// outside Helm's CRD lifecycle hooks, which are then not observed to be
	// available by e.g. post-install hooks.
	//
	// If not set, it defaults to true.
	PersistentClient pulumi.BoolPtrInput `pulumi:"persistentClient"`
	// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
	// of their definition.
	PostRenderers HelmReleaseSpecPostRenderersArrayInput `pulumi:"postRenderers"`
	// ReleaseName used for the Helm release. Defaults to a composition of
	// '[TargetNamespace-]Name'.
	ReleaseName pulumi.StringPtrInput           `pulumi:"releaseName"`
	Rollback    HelmReleaseSpecRollbackPtrInput `pulumi:"rollback"`
	// The name of the Kubernetes service account to impersonate
	// when reconciling this HelmRelease.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// StorageNamespace used for the Helm storage.
	// Defaults to the namespace of the HelmRelease.
	StorageNamespace pulumi.StringPtrInput `pulumi:"storageNamespace"`
	// Suspend tells the controller to suspend reconciliation for this HelmRelease,
	// it does not apply to already started reconciliations. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// TargetNamespace to target when performing operations for the HelmRelease.
	// Defaults to the namespace of the HelmRelease.
	TargetNamespace pulumi.StringPtrInput       `pulumi:"targetNamespace"`
	Test            HelmReleaseSpecTestPtrInput `pulumi:"test"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
	// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
	Timeout   pulumi.StringPtrInput            `pulumi:"timeout"`
	Uninstall HelmReleaseSpecUninstallPtrInput `pulumi:"uninstall"`
	Upgrade   HelmReleaseSpecUpgradePtrInput   `pulumi:"upgrade"`
	// Values holds the values for this Helm release.
	Values pulumi.MapInput `pulumi:"values"`
	// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
	// and information about how they should be merged.
	ValuesFrom HelmReleaseSpecValuesFromArrayInput `pulumi:"valuesFrom"`
}

func (HelmReleaseSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpec)(nil)).Elem()
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecOutput() HelmReleaseSpecOutput {
	return i.ToHelmReleaseSpecOutputWithContext(context.Background())
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecOutputWithContext(ctx context.Context) HelmReleaseSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecOutput)
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return i.ToHelmReleaseSpecPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecArgs) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecOutput).ToHelmReleaseSpecPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPtrInput is an input type that accepts HelmReleaseSpecArgs, HelmReleaseSpecPtr and HelmReleaseSpecPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPtrInput` via:
//
//	        HelmReleaseSpecArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput
	ToHelmReleaseSpecPtrOutputWithContext(context.Context) HelmReleaseSpecPtrOutput
}

type helmReleaseSpecPtrType HelmReleaseSpecArgs

func HelmReleaseSpecPtr(v *HelmReleaseSpecArgs) HelmReleaseSpecPtrInput {
	return (*helmReleaseSpecPtrType)(v)
}

func (*helmReleaseSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpec)(nil)).Elem()
}

func (i *helmReleaseSpecPtrType) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return i.ToHelmReleaseSpecPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPtrType) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPtrOutput)
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpec)(nil)).Elem()
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecOutput() HelmReleaseSpecOutput {
	return o
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecOutputWithContext(ctx context.Context) HelmReleaseSpecOutput {
	return o
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return o.ToHelmReleaseSpecPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecOutput) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpec) *HelmReleaseSpec {
		return &v
	}).(HelmReleaseSpecPtrOutput)
}

func (o HelmReleaseSpecOutput) Chart() HelmReleaseSpecChartPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecChart { return v.Chart }).(HelmReleaseSpecChartPtrOutput)
}

func (o HelmReleaseSpecOutput) ChartRef() HelmReleaseSpecChartRefPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecChartRef { return v.ChartRef }).(HelmReleaseSpecChartRefPtrOutput)
}

// DependsOn may contain a meta.NamespacedObjectReference slice with
// references to HelmRelease resources that must be ready before this HelmRelease
// can be reconciled.
func (o HelmReleaseSpecOutput) DependsOn() HelmReleaseSpecDependsOnArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpec) []HelmReleaseSpecDependsOn { return v.DependsOn }).(HelmReleaseSpecDependsOnArrayOutput)
}

func (o HelmReleaseSpecOutput) DriftDetection() HelmReleaseSpecDriftDetectionPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecDriftDetection { return v.DriftDetection }).(HelmReleaseSpecDriftDetectionPtrOutput)
}

func (o HelmReleaseSpecOutput) Install() HelmReleaseSpecInstallPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecInstall { return v.Install }).(HelmReleaseSpecInstallPtrOutput)
}

// Interval at which to reconcile the Helm release.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmReleaseSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecOutput) KubeConfig() HelmReleaseSpecKubeConfigPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecKubeConfig { return v.KubeConfig }).(HelmReleaseSpecKubeConfigPtrOutput)
}

// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
// Use '0' for an unlimited number of revisions; defaults to '10'.
func (o HelmReleaseSpecOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// PersistentClient tells the controller to use a persistent Kubernetes
// client for this release. When enabled, the client will be reused for the
// duration of the reconciliation, instead of being created and destroyed
// for each (step of a) Helm action.
//
// This can improve performance, but may cause issues with some Helm charts
// that for example do create Custom Resource Definitions during installation
// outside Helm's CRD lifecycle hooks, which are then not observed to be
// available by e.g. post-install hooks.
//
// If not set, it defaults to true.
func (o HelmReleaseSpecOutput) PersistentClient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *bool { return v.PersistentClient }).(pulumi.BoolPtrOutput)
}

// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
// of their definition.
func (o HelmReleaseSpecOutput) PostRenderers() HelmReleaseSpecPostRenderersArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpec) []HelmReleaseSpecPostRenderers { return v.PostRenderers }).(HelmReleaseSpecPostRenderersArrayOutput)
}

// ReleaseName used for the Helm release. Defaults to a composition of
// '[TargetNamespace-]Name'.
func (o HelmReleaseSpecOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecOutput) Rollback() HelmReleaseSpecRollbackPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecRollback { return v.Rollback }).(HelmReleaseSpecRollbackPtrOutput)
}

// The name of the Kubernetes service account to impersonate
// when reconciling this HelmRelease.
func (o HelmReleaseSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// StorageNamespace used for the Helm storage.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.StorageNamespace }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend reconciliation for this HelmRelease,
// it does not apply to already started reconciliations. Defaults to false.
func (o HelmReleaseSpecOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// TargetNamespace to target when performing operations for the HelmRelease.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecOutput) Test() HelmReleaseSpecTestPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecTest { return v.Test }).(HelmReleaseSpecTestPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
func (o HelmReleaseSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecOutput) Uninstall() HelmReleaseSpecUninstallPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecUninstall { return v.Uninstall }).(HelmReleaseSpecUninstallPtrOutput)
}

func (o HelmReleaseSpecOutput) Upgrade() HelmReleaseSpecUpgradePtrOutput {
	return o.ApplyT(func(v HelmReleaseSpec) *HelmReleaseSpecUpgrade { return v.Upgrade }).(HelmReleaseSpecUpgradePtrOutput)
}

// Values holds the values for this Helm release.
func (o HelmReleaseSpecOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v HelmReleaseSpec) map[string]interface{} { return v.Values }).(pulumi.MapOutput)
}

// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
// and information about how they should be merged.
func (o HelmReleaseSpecOutput) ValuesFrom() HelmReleaseSpecValuesFromArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpec) []HelmReleaseSpecValuesFrom { return v.ValuesFrom }).(HelmReleaseSpecValuesFromArrayOutput)
}

type HelmReleaseSpecPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpec)(nil)).Elem()
}

func (o HelmReleaseSpecPtrOutput) ToHelmReleaseSpecPtrOutput() HelmReleaseSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecPtrOutput) ToHelmReleaseSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecPtrOutput) Elem() HelmReleaseSpecOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) HelmReleaseSpec {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpec
		return ret
	}).(HelmReleaseSpecOutput)
}

func (o HelmReleaseSpecPtrOutput) Chart() HelmReleaseSpecChartPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecChart {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(HelmReleaseSpecChartPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) ChartRef() HelmReleaseSpecChartRefPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecChartRef {
		if v == nil {
			return nil
		}
		return v.ChartRef
	}).(HelmReleaseSpecChartRefPtrOutput)
}

// DependsOn may contain a meta.NamespacedObjectReference slice with
// references to HelmRelease resources that must be ready before this HelmRelease
// can be reconciled.
func (o HelmReleaseSpecPtrOutput) DependsOn() HelmReleaseSpecDependsOnArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) []HelmReleaseSpecDependsOn {
		if v == nil {
			return nil
		}
		return v.DependsOn
	}).(HelmReleaseSpecDependsOnArrayOutput)
}

func (o HelmReleaseSpecPtrOutput) DriftDetection() HelmReleaseSpecDriftDetectionPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecDriftDetection {
		if v == nil {
			return nil
		}
		return v.DriftDetection
	}).(HelmReleaseSpecDriftDetectionPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) Install() HelmReleaseSpecInstallPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecInstall {
		if v == nil {
			return nil
		}
		return v.Install
	}).(HelmReleaseSpecInstallPtrOutput)
}

// Interval at which to reconcile the Helm release.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmReleaseSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) KubeConfig() HelmReleaseSpecKubeConfigPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecKubeConfig {
		if v == nil {
			return nil
		}
		return v.KubeConfig
	}).(HelmReleaseSpecKubeConfigPtrOutput)
}

// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
// Use '0' for an unlimited number of revisions; defaults to '10'.
func (o HelmReleaseSpecPtrOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *int {
		if v == nil {
			return nil
		}
		return v.MaxHistory
	}).(pulumi.IntPtrOutput)
}

// PersistentClient tells the controller to use a persistent Kubernetes
// client for this release. When enabled, the client will be reused for the
// duration of the reconciliation, instead of being created and destroyed
// for each (step of a) Helm action.
//
// This can improve performance, but may cause issues with some Helm charts
// that for example do create Custom Resource Definitions during installation
// outside Helm's CRD lifecycle hooks, which are then not observed to be
// available by e.g. post-install hooks.
//
// If not set, it defaults to true.
func (o HelmReleaseSpecPtrOutput) PersistentClient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PersistentClient
	}).(pulumi.BoolPtrOutput)
}

// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
// of their definition.
func (o HelmReleaseSpecPtrOutput) PostRenderers() HelmReleaseSpecPostRenderersArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) []HelmReleaseSpecPostRenderers {
		if v == nil {
			return nil
		}
		return v.PostRenderers
	}).(HelmReleaseSpecPostRenderersArrayOutput)
}

// ReleaseName used for the Helm release. Defaults to a composition of
// '[TargetNamespace-]Name'.
func (o HelmReleaseSpecPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) Rollback() HelmReleaseSpecRollbackPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecRollback {
		if v == nil {
			return nil
		}
		return v.Rollback
	}).(HelmReleaseSpecRollbackPtrOutput)
}

// The name of the Kubernetes service account to impersonate
// when reconciling this HelmRelease.
func (o HelmReleaseSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// StorageNamespace used for the Helm storage.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPtrOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageNamespace
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend reconciliation for this HelmRelease,
// it does not apply to already started reconciliations. Defaults to false.
func (o HelmReleaseSpecPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// TargetNamespace to target when performing operations for the HelmRelease.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) Test() HelmReleaseSpecTestPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecTest {
		if v == nil {
			return nil
		}
		return v.Test
	}).(HelmReleaseSpecTestPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
func (o HelmReleaseSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) Uninstall() HelmReleaseSpecUninstallPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecUninstall {
		if v == nil {
			return nil
		}
		return v.Uninstall
	}).(HelmReleaseSpecUninstallPtrOutput)
}

func (o HelmReleaseSpecPtrOutput) Upgrade() HelmReleaseSpecUpgradePtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) *HelmReleaseSpecUpgrade {
		if v == nil {
			return nil
		}
		return v.Upgrade
	}).(HelmReleaseSpecUpgradePtrOutput)
}

// Values holds the values for this Helm release.
func (o HelmReleaseSpecPtrOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.MapOutput)
}

// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
// and information about how they should be merged.
func (o HelmReleaseSpecPtrOutput) ValuesFrom() HelmReleaseSpecValuesFromArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpec) []HelmReleaseSpecValuesFrom {
		if v == nil {
			return nil
		}
		return v.ValuesFrom
	}).(HelmReleaseSpecValuesFromArrayOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created
// for this HelmRelease.
type HelmReleaseSpecChart struct {
	Metadata *HelmReleaseSpecChartMetadata `pulumi:"metadata"`
	Spec     *HelmReleaseSpecChartSpec     `pulumi:"spec"`
}

// HelmReleaseSpecChartInput is an input type that accepts HelmReleaseSpecChartArgs and HelmReleaseSpecChartOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartInput` via:
//
//	HelmReleaseSpecChartArgs{...}
type HelmReleaseSpecChartInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartOutput() HelmReleaseSpecChartOutput
	ToHelmReleaseSpecChartOutputWithContext(context.Context) HelmReleaseSpecChartOutput
}

// Chart defines the template of the v1beta2.HelmChart that should be created
// for this HelmRelease.
type HelmReleaseSpecChartArgs struct {
	Metadata HelmReleaseSpecChartMetadataPtrInput `pulumi:"metadata"`
	Spec     HelmReleaseSpecChartSpecPtrInput     `pulumi:"spec"`
}

func (HelmReleaseSpecChartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChart)(nil)).Elem()
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartOutput() HelmReleaseSpecChartOutput {
	return i.ToHelmReleaseSpecChartOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartOutputWithContext(ctx context.Context) HelmReleaseSpecChartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartOutput)
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return i.ToHelmReleaseSpecChartPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartArgs) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartOutput).ToHelmReleaseSpecChartPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartPtrInput is an input type that accepts HelmReleaseSpecChartArgs, HelmReleaseSpecChartPtr and HelmReleaseSpecChartPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartPtrInput` via:
//
//	        HelmReleaseSpecChartArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput
	ToHelmReleaseSpecChartPtrOutputWithContext(context.Context) HelmReleaseSpecChartPtrOutput
}

type helmReleaseSpecChartPtrType HelmReleaseSpecChartArgs

func HelmReleaseSpecChartPtr(v *HelmReleaseSpecChartArgs) HelmReleaseSpecChartPtrInput {
	return (*helmReleaseSpecChartPtrType)(v)
}

func (*helmReleaseSpecChartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChart)(nil)).Elem()
}

func (i *helmReleaseSpecChartPtrType) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return i.ToHelmReleaseSpecChartPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartPtrType) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartPtrOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created
// for this HelmRelease.
type HelmReleaseSpecChartOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChart)(nil)).Elem()
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartOutput() HelmReleaseSpecChartOutput {
	return o
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartOutputWithContext(ctx context.Context) HelmReleaseSpecChartOutput {
	return o
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return o.ToHelmReleaseSpecChartPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartOutput) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChart) *HelmReleaseSpecChart {
		return &v
	}).(HelmReleaseSpecChartPtrOutput)
}

func (o HelmReleaseSpecChartOutput) Metadata() HelmReleaseSpecChartMetadataPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChart) *HelmReleaseSpecChartMetadata { return v.Metadata }).(HelmReleaseSpecChartMetadataPtrOutput)
}

func (o HelmReleaseSpecChartOutput) Spec() HelmReleaseSpecChartSpecPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChart) *HelmReleaseSpecChartSpec { return v.Spec }).(HelmReleaseSpecChartSpecPtrOutput)
}

type HelmReleaseSpecChartPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChart)(nil)).Elem()
}

func (o HelmReleaseSpecChartPtrOutput) ToHelmReleaseSpecChartPtrOutput() HelmReleaseSpecChartPtrOutput {
	return o
}

func (o HelmReleaseSpecChartPtrOutput) ToHelmReleaseSpecChartPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPtrOutput {
	return o
}

func (o HelmReleaseSpecChartPtrOutput) Elem() HelmReleaseSpecChartOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChart) HelmReleaseSpecChart {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChart
		return ret
	}).(HelmReleaseSpecChartOutput)
}

func (o HelmReleaseSpecChartPtrOutput) Metadata() HelmReleaseSpecChartMetadataPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChart) *HelmReleaseSpecChartMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(HelmReleaseSpecChartMetadataPtrOutput)
}

func (o HelmReleaseSpecChartPtrOutput) Spec() HelmReleaseSpecChartSpecPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChart) *HelmReleaseSpecChartSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(HelmReleaseSpecChartSpecPtrOutput)
}

// ObjectMeta holds the template for metadata like labels and annotations.
type HelmReleaseSpecChartMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
}

// HelmReleaseSpecChartMetadataInput is an input type that accepts HelmReleaseSpecChartMetadataArgs and HelmReleaseSpecChartMetadataOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartMetadataInput` via:
//
//	HelmReleaseSpecChartMetadataArgs{...}
type HelmReleaseSpecChartMetadataInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartMetadataOutput() HelmReleaseSpecChartMetadataOutput
	ToHelmReleaseSpecChartMetadataOutputWithContext(context.Context) HelmReleaseSpecChartMetadataOutput
}

// ObjectMeta holds the template for metadata like labels and annotations.
type HelmReleaseSpecChartMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (HelmReleaseSpecChartMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartMetadata)(nil)).Elem()
}

func (i HelmReleaseSpecChartMetadataArgs) ToHelmReleaseSpecChartMetadataOutput() HelmReleaseSpecChartMetadataOutput {
	return i.ToHelmReleaseSpecChartMetadataOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartMetadataArgs) ToHelmReleaseSpecChartMetadataOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartMetadataOutput)
}

func (i HelmReleaseSpecChartMetadataArgs) ToHelmReleaseSpecChartMetadataPtrOutput() HelmReleaseSpecChartMetadataPtrOutput {
	return i.ToHelmReleaseSpecChartMetadataPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartMetadataArgs) ToHelmReleaseSpecChartMetadataPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartMetadataOutput).ToHelmReleaseSpecChartMetadataPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartMetadataPtrInput is an input type that accepts HelmReleaseSpecChartMetadataArgs, HelmReleaseSpecChartMetadataPtr and HelmReleaseSpecChartMetadataPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartMetadataPtrInput` via:
//
//	        HelmReleaseSpecChartMetadataArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartMetadataPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartMetadataPtrOutput() HelmReleaseSpecChartMetadataPtrOutput
	ToHelmReleaseSpecChartMetadataPtrOutputWithContext(context.Context) HelmReleaseSpecChartMetadataPtrOutput
}

type helmReleaseSpecChartMetadataPtrType HelmReleaseSpecChartMetadataArgs

func HelmReleaseSpecChartMetadataPtr(v *HelmReleaseSpecChartMetadataArgs) HelmReleaseSpecChartMetadataPtrInput {
	return (*helmReleaseSpecChartMetadataPtrType)(v)
}

func (*helmReleaseSpecChartMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartMetadata)(nil)).Elem()
}

func (i *helmReleaseSpecChartMetadataPtrType) ToHelmReleaseSpecChartMetadataPtrOutput() HelmReleaseSpecChartMetadataPtrOutput {
	return i.ToHelmReleaseSpecChartMetadataPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartMetadataPtrType) ToHelmReleaseSpecChartMetadataPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartMetadataPtrOutput)
}

// ObjectMeta holds the template for metadata like labels and annotations.
type HelmReleaseSpecChartMetadataOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartMetadata)(nil)).Elem()
}

func (o HelmReleaseSpecChartMetadataOutput) ToHelmReleaseSpecChartMetadataOutput() HelmReleaseSpecChartMetadataOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataOutput) ToHelmReleaseSpecChartMetadataOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataOutput) ToHelmReleaseSpecChartMetadataPtrOutput() HelmReleaseSpecChartMetadataPtrOutput {
	return o.ToHelmReleaseSpecChartMetadataPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartMetadataOutput) ToHelmReleaseSpecChartMetadataPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartMetadata) *HelmReleaseSpecChartMetadata {
		return &v
	}).(HelmReleaseSpecChartMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
func (o HelmReleaseSpecChartMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o HelmReleaseSpecChartMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type HelmReleaseSpecChartMetadataPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartMetadata)(nil)).Elem()
}

func (o HelmReleaseSpecChartMetadataPtrOutput) ToHelmReleaseSpecChartMetadataPtrOutput() HelmReleaseSpecChartMetadataPtrOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataPtrOutput) ToHelmReleaseSpecChartMetadataPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPtrOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataPtrOutput) Elem() HelmReleaseSpecChartMetadataOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartMetadata) HelmReleaseSpecChartMetadata {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartMetadata
		return ret
	}).(HelmReleaseSpecChartMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
func (o HelmReleaseSpecChartMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o HelmReleaseSpecChartMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// ObjectMeta holds the template for metadata like labels and annotations.
type HelmReleaseSpecChartMetadataPatch struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels map[string]string `pulumi:"labels"`
}

// HelmReleaseSpecChartMetadataPatchInput is an input type that accepts HelmReleaseSpecChartMetadataPatchArgs and HelmReleaseSpecChartMetadataPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartMetadataPatchInput` via:
//
//	HelmReleaseSpecChartMetadataPatchArgs{...}
type HelmReleaseSpecChartMetadataPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartMetadataPatchOutput() HelmReleaseSpecChartMetadataPatchOutput
	ToHelmReleaseSpecChartMetadataPatchOutputWithContext(context.Context) HelmReleaseSpecChartMetadataPatchOutput
}

// ObjectMeta holds the template for metadata like labels and annotations.
type HelmReleaseSpecChartMetadataPatchArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (HelmReleaseSpecChartMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartMetadataPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartMetadataPatchArgs) ToHelmReleaseSpecChartMetadataPatchOutput() HelmReleaseSpecChartMetadataPatchOutput {
	return i.ToHelmReleaseSpecChartMetadataPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartMetadataPatchArgs) ToHelmReleaseSpecChartMetadataPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartMetadataPatchOutput)
}

func (i HelmReleaseSpecChartMetadataPatchArgs) ToHelmReleaseSpecChartMetadataPatchPtrOutput() HelmReleaseSpecChartMetadataPatchPtrOutput {
	return i.ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartMetadataPatchArgs) ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartMetadataPatchOutput).ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartMetadataPatchPtrInput is an input type that accepts HelmReleaseSpecChartMetadataPatchArgs, HelmReleaseSpecChartMetadataPatchPtr and HelmReleaseSpecChartMetadataPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartMetadataPatchPtrInput` via:
//
//	        HelmReleaseSpecChartMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartMetadataPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartMetadataPatchPtrOutput() HelmReleaseSpecChartMetadataPatchPtrOutput
	ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartMetadataPatchPtrOutput
}

type helmReleaseSpecChartMetadataPatchPtrType HelmReleaseSpecChartMetadataPatchArgs

func HelmReleaseSpecChartMetadataPatchPtr(v *HelmReleaseSpecChartMetadataPatchArgs) HelmReleaseSpecChartMetadataPatchPtrInput {
	return (*helmReleaseSpecChartMetadataPatchPtrType)(v)
}

func (*helmReleaseSpecChartMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartMetadataPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartMetadataPatchPtrType) ToHelmReleaseSpecChartMetadataPatchPtrOutput() HelmReleaseSpecChartMetadataPatchPtrOutput {
	return i.ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartMetadataPatchPtrType) ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartMetadataPatchPtrOutput)
}

// ObjectMeta holds the template for metadata like labels and annotations.
type HelmReleaseSpecChartMetadataPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartMetadataPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartMetadataPatchOutput) ToHelmReleaseSpecChartMetadataPatchOutput() HelmReleaseSpecChartMetadataPatchOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataPatchOutput) ToHelmReleaseSpecChartMetadataPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPatchOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataPatchOutput) ToHelmReleaseSpecChartMetadataPatchPtrOutput() HelmReleaseSpecChartMetadataPatchPtrOutput {
	return o.ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartMetadataPatchOutput) ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartMetadataPatch) *HelmReleaseSpecChartMetadataPatch {
		return &v
	}).(HelmReleaseSpecChartMetadataPatchPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
func (o HelmReleaseSpecChartMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o HelmReleaseSpecChartMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type HelmReleaseSpecChartMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartMetadataPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartMetadataPatchPtrOutput) ToHelmReleaseSpecChartMetadataPatchPtrOutput() HelmReleaseSpecChartMetadataPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataPatchPtrOutput) ToHelmReleaseSpecChartMetadataPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartMetadataPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartMetadataPatchPtrOutput) Elem() HelmReleaseSpecChartMetadataPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartMetadataPatch) HelmReleaseSpecChartMetadataPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartMetadataPatch
		return ret
	}).(HelmReleaseSpecChartMetadataPatchOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
func (o HelmReleaseSpecChartMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o HelmReleaseSpecChartMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created
// for this HelmRelease.
type HelmReleaseSpecChartPatch struct {
	Metadata *HelmReleaseSpecChartMetadataPatch `pulumi:"metadata"`
	Spec     *HelmReleaseSpecChartSpecPatch     `pulumi:"spec"`
}

// HelmReleaseSpecChartPatchInput is an input type that accepts HelmReleaseSpecChartPatchArgs and HelmReleaseSpecChartPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartPatchInput` via:
//
//	HelmReleaseSpecChartPatchArgs{...}
type HelmReleaseSpecChartPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartPatchOutput() HelmReleaseSpecChartPatchOutput
	ToHelmReleaseSpecChartPatchOutputWithContext(context.Context) HelmReleaseSpecChartPatchOutput
}

// Chart defines the template of the v1beta2.HelmChart that should be created
// for this HelmRelease.
type HelmReleaseSpecChartPatchArgs struct {
	Metadata HelmReleaseSpecChartMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     HelmReleaseSpecChartSpecPatchPtrInput     `pulumi:"spec"`
}

func (HelmReleaseSpecChartPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartPatchArgs) ToHelmReleaseSpecChartPatchOutput() HelmReleaseSpecChartPatchOutput {
	return i.ToHelmReleaseSpecChartPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartPatchArgs) ToHelmReleaseSpecChartPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartPatchOutput)
}

func (i HelmReleaseSpecChartPatchArgs) ToHelmReleaseSpecChartPatchPtrOutput() HelmReleaseSpecChartPatchPtrOutput {
	return i.ToHelmReleaseSpecChartPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartPatchArgs) ToHelmReleaseSpecChartPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartPatchOutput).ToHelmReleaseSpecChartPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartPatchPtrInput is an input type that accepts HelmReleaseSpecChartPatchArgs, HelmReleaseSpecChartPatchPtr and HelmReleaseSpecChartPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartPatchPtrInput` via:
//
//	        HelmReleaseSpecChartPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartPatchPtrOutput() HelmReleaseSpecChartPatchPtrOutput
	ToHelmReleaseSpecChartPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartPatchPtrOutput
}

type helmReleaseSpecChartPatchPtrType HelmReleaseSpecChartPatchArgs

func HelmReleaseSpecChartPatchPtr(v *HelmReleaseSpecChartPatchArgs) HelmReleaseSpecChartPatchPtrInput {
	return (*helmReleaseSpecChartPatchPtrType)(v)
}

func (*helmReleaseSpecChartPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartPatchPtrType) ToHelmReleaseSpecChartPatchPtrOutput() HelmReleaseSpecChartPatchPtrOutput {
	return i.ToHelmReleaseSpecChartPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartPatchPtrType) ToHelmReleaseSpecChartPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartPatchPtrOutput)
}

// Chart defines the template of the v1beta2.HelmChart that should be created
// for this HelmRelease.
type HelmReleaseSpecChartPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartPatchOutput) ToHelmReleaseSpecChartPatchOutput() HelmReleaseSpecChartPatchOutput {
	return o
}

func (o HelmReleaseSpecChartPatchOutput) ToHelmReleaseSpecChartPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartPatchOutput {
	return o
}

func (o HelmReleaseSpecChartPatchOutput) ToHelmReleaseSpecChartPatchPtrOutput() HelmReleaseSpecChartPatchPtrOutput {
	return o.ToHelmReleaseSpecChartPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartPatchOutput) ToHelmReleaseSpecChartPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartPatch) *HelmReleaseSpecChartPatch {
		return &v
	}).(HelmReleaseSpecChartPatchPtrOutput)
}

func (o HelmReleaseSpecChartPatchOutput) Metadata() HelmReleaseSpecChartMetadataPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartPatch) *HelmReleaseSpecChartMetadataPatch { return v.Metadata }).(HelmReleaseSpecChartMetadataPatchPtrOutput)
}

func (o HelmReleaseSpecChartPatchOutput) Spec() HelmReleaseSpecChartSpecPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartPatch) *HelmReleaseSpecChartSpecPatch { return v.Spec }).(HelmReleaseSpecChartSpecPatchPtrOutput)
}

type HelmReleaseSpecChartPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartPatchPtrOutput) ToHelmReleaseSpecChartPatchPtrOutput() HelmReleaseSpecChartPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartPatchPtrOutput) ToHelmReleaseSpecChartPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartPatchPtrOutput) Elem() HelmReleaseSpecChartPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartPatch) HelmReleaseSpecChartPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartPatch
		return ret
	}).(HelmReleaseSpecChartPatchOutput)
}

func (o HelmReleaseSpecChartPatchPtrOutput) Metadata() HelmReleaseSpecChartMetadataPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartPatch) *HelmReleaseSpecChartMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(HelmReleaseSpecChartMetadataPatchPtrOutput)
}

func (o HelmReleaseSpecChartPatchPtrOutput) Spec() HelmReleaseSpecChartSpecPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartPatch) *HelmReleaseSpecChartSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(HelmReleaseSpecChartSpecPatchPtrOutput)
}

// ChartRef holds a reference to a source controller resource containing the
// Helm chart artifact.
//
// Note: this field is provisional to the v2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecChartRef struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes
	// resource object that contains the reference.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecChartRefInput is an input type that accepts HelmReleaseSpecChartRefArgs and HelmReleaseSpecChartRefOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartRefInput` via:
//
//	HelmReleaseSpecChartRefArgs{...}
type HelmReleaseSpecChartRefInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartRefOutput() HelmReleaseSpecChartRefOutput
	ToHelmReleaseSpecChartRefOutputWithContext(context.Context) HelmReleaseSpecChartRefOutput
}

// ChartRef holds a reference to a source controller resource containing the
// Helm chart artifact.
//
// Note: this field is provisional to the v2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecChartRefArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes
	// resource object that contains the reference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecChartRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartRef)(nil)).Elem()
}

func (i HelmReleaseSpecChartRefArgs) ToHelmReleaseSpecChartRefOutput() HelmReleaseSpecChartRefOutput {
	return i.ToHelmReleaseSpecChartRefOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartRefArgs) ToHelmReleaseSpecChartRefOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartRefOutput)
}

func (i HelmReleaseSpecChartRefArgs) ToHelmReleaseSpecChartRefPtrOutput() HelmReleaseSpecChartRefPtrOutput {
	return i.ToHelmReleaseSpecChartRefPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartRefArgs) ToHelmReleaseSpecChartRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartRefOutput).ToHelmReleaseSpecChartRefPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartRefPtrInput is an input type that accepts HelmReleaseSpecChartRefArgs, HelmReleaseSpecChartRefPtr and HelmReleaseSpecChartRefPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartRefPtrInput` via:
//
//	        HelmReleaseSpecChartRefArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartRefPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartRefPtrOutput() HelmReleaseSpecChartRefPtrOutput
	ToHelmReleaseSpecChartRefPtrOutputWithContext(context.Context) HelmReleaseSpecChartRefPtrOutput
}

type helmReleaseSpecChartRefPtrType HelmReleaseSpecChartRefArgs

func HelmReleaseSpecChartRefPtr(v *HelmReleaseSpecChartRefArgs) HelmReleaseSpecChartRefPtrInput {
	return (*helmReleaseSpecChartRefPtrType)(v)
}

func (*helmReleaseSpecChartRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartRef)(nil)).Elem()
}

func (i *helmReleaseSpecChartRefPtrType) ToHelmReleaseSpecChartRefPtrOutput() HelmReleaseSpecChartRefPtrOutput {
	return i.ToHelmReleaseSpecChartRefPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartRefPtrType) ToHelmReleaseSpecChartRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartRefPtrOutput)
}

// ChartRef holds a reference to a source controller resource containing the
// Helm chart artifact.
//
// Note: this field is provisional to the v2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecChartRefOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartRef)(nil)).Elem()
}

func (o HelmReleaseSpecChartRefOutput) ToHelmReleaseSpecChartRefOutput() HelmReleaseSpecChartRefOutput {
	return o
}

func (o HelmReleaseSpecChartRefOutput) ToHelmReleaseSpecChartRefOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefOutput {
	return o
}

func (o HelmReleaseSpecChartRefOutput) ToHelmReleaseSpecChartRefPtrOutput() HelmReleaseSpecChartRefPtrOutput {
	return o.ToHelmReleaseSpecChartRefPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartRefOutput) ToHelmReleaseSpecChartRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartRef) *HelmReleaseSpecChartRef {
		return &v
	}).(HelmReleaseSpecChartRefPtrOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes
// resource object that contains the reference.
func (o HelmReleaseSpecChartRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartRefPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartRef)(nil)).Elem()
}

func (o HelmReleaseSpecChartRefPtrOutput) ToHelmReleaseSpecChartRefPtrOutput() HelmReleaseSpecChartRefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartRefPtrOutput) ToHelmReleaseSpecChartRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartRefPtrOutput) Elem() HelmReleaseSpecChartRefOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRef) HelmReleaseSpecChartRef {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartRef
		return ret
	}).(HelmReleaseSpecChartRefOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes
// resource object that contains the reference.
func (o HelmReleaseSpecChartRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ChartRef holds a reference to a source controller resource containing the
// Helm chart artifact.
//
// Note: this field is provisional to the v2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecChartRefPatch struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes
	// resource object that contains the reference.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecChartRefPatchInput is an input type that accepts HelmReleaseSpecChartRefPatchArgs and HelmReleaseSpecChartRefPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartRefPatchInput` via:
//
//	HelmReleaseSpecChartRefPatchArgs{...}
type HelmReleaseSpecChartRefPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartRefPatchOutput() HelmReleaseSpecChartRefPatchOutput
	ToHelmReleaseSpecChartRefPatchOutputWithContext(context.Context) HelmReleaseSpecChartRefPatchOutput
}

// ChartRef holds a reference to a source controller resource containing the
// Helm chart artifact.
//
// Note: this field is provisional to the v2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecChartRefPatchArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, defaults to the namespace of the Kubernetes
	// resource object that contains the reference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecChartRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartRefPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartRefPatchArgs) ToHelmReleaseSpecChartRefPatchOutput() HelmReleaseSpecChartRefPatchOutput {
	return i.ToHelmReleaseSpecChartRefPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartRefPatchArgs) ToHelmReleaseSpecChartRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartRefPatchOutput)
}

func (i HelmReleaseSpecChartRefPatchArgs) ToHelmReleaseSpecChartRefPatchPtrOutput() HelmReleaseSpecChartRefPatchPtrOutput {
	return i.ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartRefPatchArgs) ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartRefPatchOutput).ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartRefPatchPtrInput is an input type that accepts HelmReleaseSpecChartRefPatchArgs, HelmReleaseSpecChartRefPatchPtr and HelmReleaseSpecChartRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartRefPatchPtrInput` via:
//
//	        HelmReleaseSpecChartRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartRefPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartRefPatchPtrOutput() HelmReleaseSpecChartRefPatchPtrOutput
	ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartRefPatchPtrOutput
}

type helmReleaseSpecChartRefPatchPtrType HelmReleaseSpecChartRefPatchArgs

func HelmReleaseSpecChartRefPatchPtr(v *HelmReleaseSpecChartRefPatchArgs) HelmReleaseSpecChartRefPatchPtrInput {
	return (*helmReleaseSpecChartRefPatchPtrType)(v)
}

func (*helmReleaseSpecChartRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartRefPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartRefPatchPtrType) ToHelmReleaseSpecChartRefPatchPtrOutput() HelmReleaseSpecChartRefPatchPtrOutput {
	return i.ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartRefPatchPtrType) ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartRefPatchPtrOutput)
}

// ChartRef holds a reference to a source controller resource containing the
// Helm chart artifact.
//
// Note: this field is provisional to the v2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecChartRefPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartRefPatchOutput) ToHelmReleaseSpecChartRefPatchOutput() HelmReleaseSpecChartRefPatchOutput {
	return o
}

func (o HelmReleaseSpecChartRefPatchOutput) ToHelmReleaseSpecChartRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPatchOutput {
	return o
}

func (o HelmReleaseSpecChartRefPatchOutput) ToHelmReleaseSpecChartRefPatchPtrOutput() HelmReleaseSpecChartRefPatchPtrOutput {
	return o.ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartRefPatchOutput) ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartRefPatch) *HelmReleaseSpecChartRefPatch {
		return &v
	}).(HelmReleaseSpecChartRefPatchPtrOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRefPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes
// resource object that contains the reference.
func (o HelmReleaseSpecChartRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartRefPatchPtrOutput) ToHelmReleaseSpecChartRefPatchPtrOutput() HelmReleaseSpecChartRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartRefPatchPtrOutput) ToHelmReleaseSpecChartRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartRefPatchPtrOutput) Elem() HelmReleaseSpecChartRefPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRefPatch) HelmReleaseSpecChartRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartRefPatch
		return ret
	}).(HelmReleaseSpecChartRefPatchOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent, defaults to the namespace of the Kubernetes
// resource object that contains the reference.
func (o HelmReleaseSpecChartRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpec struct {
	// The name or path the Helm chart is available at in the SourceRef.
	Chart *string `pulumi:"chart"`
	// Interval at which to check the v1beta2.Source for updates. Defaults to
	// 'HelmReleaseSpec.Interval'.
	Interval *string `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy *string                            `pulumi:"reconcileStrategy"`
	SourceRef         *HelmReleaseSpecChartSpecSourceRef `pulumi:"sourceRef"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile *string `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles []string                        `pulumi:"valuesFiles"`
	Verify      *HelmReleaseSpecChartSpecVerify `pulumi:"verify"`
	// Version semver expression, ignored for charts from v1beta2.GitRepository and
	// v1beta2.Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecChartSpecInput is an input type that accepts HelmReleaseSpecChartSpecArgs and HelmReleaseSpecChartSpecOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecInput` via:
//
//	HelmReleaseSpecChartSpecArgs{...}
type HelmReleaseSpecChartSpecInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecOutput() HelmReleaseSpecChartSpecOutput
	ToHelmReleaseSpecChartSpecOutputWithContext(context.Context) HelmReleaseSpecChartSpecOutput
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecArgs struct {
	// The name or path the Helm chart is available at in the SourceRef.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Interval at which to check the v1beta2.Source for updates. Defaults to
	// 'HelmReleaseSpec.Interval'.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput                     `pulumi:"reconcileStrategy"`
	SourceRef         HelmReleaseSpecChartSpecSourceRefPtrInput `pulumi:"sourceRef"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile pulumi.StringPtrInput `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput                `pulumi:"valuesFiles"`
	Verify      HelmReleaseSpecChartSpecVerifyPtrInput `pulumi:"verify"`
	// Version semver expression, ignored for charts from v1beta2.GitRepository and
	// v1beta2.Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecChartSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecOutput() HelmReleaseSpecChartSpecOutput {
	return i.ToHelmReleaseSpecChartSpecOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecOutput)
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return i.ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecArgs) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecOutput).ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecPtrInput is an input type that accepts HelmReleaseSpecChartSpecArgs, HelmReleaseSpecChartSpecPtr and HelmReleaseSpecChartSpecPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecPtrInput` via:
//
//	        HelmReleaseSpecChartSpecArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput
	ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecPtrOutput
}

type helmReleaseSpecChartSpecPtrType HelmReleaseSpecChartSpecArgs

func HelmReleaseSpecChartSpecPtr(v *HelmReleaseSpecChartSpecArgs) HelmReleaseSpecChartSpecPtrInput {
	return (*helmReleaseSpecChartSpecPtrType)(v)
}

func (*helmReleaseSpecChartSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecPtrType) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return i.ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecPtrType) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecOutput() HelmReleaseSpecChartSpecOutput {
	return o
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecOutput {
	return o
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return o.ToHelmReleaseSpecChartSpecPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecOutput) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpec {
		return &v
	}).(HelmReleaseSpecChartSpecPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmReleaseSpecChartSpecOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Interval at which to check the v1beta2.Source for updates. Defaults to
// 'HelmReleaseSpec.Interval'.
func (o HelmReleaseSpecChartSpecOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmReleaseSpecChartSpecOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecOutput) SourceRef() HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpecSourceRef { return v.SourceRef }).(HelmReleaseSpecChartSpecSourceRefPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmReleaseSpecChartSpecOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.ValuesFile }).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmReleaseSpecChartSpecOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

func (o HelmReleaseSpecChartSpecOutput) Verify() HelmReleaseSpecChartSpecVerifyPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpecVerify { return v.Verify }).(HelmReleaseSpecChartSpecVerifyPtrOutput)
}

// Version semver expression, ignored for charts from v1beta2.GitRepository and
// v1beta2.Bucket sources. Defaults to latest when omitted.
func (o HelmReleaseSpecChartSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpec)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecPtrOutput) ToHelmReleaseSpecChartSpecPtrOutput() HelmReleaseSpecChartSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPtrOutput) ToHelmReleaseSpecChartSpecPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPtrOutput) Elem() HelmReleaseSpecChartSpecOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) HelmReleaseSpecChartSpec {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpec
		return ret
	}).(HelmReleaseSpecChartSpecOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmReleaseSpecChartSpecPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Interval at which to check the v1beta2.Source for updates. Defaults to
// 'HelmReleaseSpec.Interval'.
func (o HelmReleaseSpecChartSpecPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecPtrOutput) SourceRef() HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpecSourceRef {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(HelmReleaseSpecChartSpecSourceRefPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFile
	}).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

func (o HelmReleaseSpecChartSpecPtrOutput) Verify() HelmReleaseSpecChartSpecVerifyPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *HelmReleaseSpecChartSpecVerify {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(HelmReleaseSpecChartSpecVerifyPtrOutput)
}

// Version semver expression, ignored for charts from v1beta2.GitRepository and
// v1beta2.Bucket sources. Defaults to latest when omitted.
func (o HelmReleaseSpecChartSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecPatch struct {
	// The name or path the Helm chart is available at in the SourceRef.
	Chart *string `pulumi:"chart"`
	// Interval at which to check the v1beta2.Source for updates. Defaults to
	// 'HelmReleaseSpec.Interval'.
	Interval *string `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy *string                                 `pulumi:"reconcileStrategy"`
	SourceRef         *HelmReleaseSpecChartSpecSourceRefPatch `pulumi:"sourceRef"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile *string `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles []string                             `pulumi:"valuesFiles"`
	Verify      *HelmReleaseSpecChartSpecVerifyPatch `pulumi:"verify"`
	// Version semver expression, ignored for charts from v1beta2.GitRepository and
	// v1beta2.Bucket sources. Defaults to latest when omitted.
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecChartSpecPatchInput is an input type that accepts HelmReleaseSpecChartSpecPatchArgs and HelmReleaseSpecChartSpecPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecPatchInput` via:
//
//	HelmReleaseSpecChartSpecPatchArgs{...}
type HelmReleaseSpecChartSpecPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecPatchOutput() HelmReleaseSpecChartSpecPatchOutput
	ToHelmReleaseSpecChartSpecPatchOutputWithContext(context.Context) HelmReleaseSpecChartSpecPatchOutput
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecPatchArgs struct {
	// The name or path the Helm chart is available at in the SourceRef.
	Chart pulumi.StringPtrInput `pulumi:"chart"`
	// Interval at which to check the v1beta2.Source for updates. Defaults to
	// 'HelmReleaseSpec.Interval'.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Determines what enables the creation of a new artifact. Valid values are
	// ('ChartVersion', 'Revision').
	// See the documentation of the values for an explanation on their behavior.
	// Defaults to ChartVersion when omitted.
	ReconcileStrategy pulumi.StringPtrInput                          `pulumi:"reconcileStrategy"`
	SourceRef         HelmReleaseSpecChartSpecSourceRefPatchPtrInput `pulumi:"sourceRef"`
	// Alternative values file to use as the default chart values, expected to
	// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
	// for backwards compatibility the file defined here is merged before the
	// ValuesFiles items. Ignored when omitted.
	ValuesFile pulumi.StringPtrInput `pulumi:"valuesFile"`
	// Alternative list of values files to use as the chart values (values.yaml
	// is not included by default), expected to be a relative path in the SourceRef.
	// Values files are merged in the order of this list with the last file overriding
	// the first. Ignored when omitted.
	ValuesFiles pulumi.StringArrayInput                     `pulumi:"valuesFiles"`
	Verify      HelmReleaseSpecChartSpecVerifyPatchPtrInput `pulumi:"verify"`
	// Version semver expression, ignored for charts from v1beta2.GitRepository and
	// v1beta2.Bucket sources. Defaults to latest when omitted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecChartSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecPatchArgs) ToHelmReleaseSpecChartSpecPatchOutput() HelmReleaseSpecChartSpecPatchOutput {
	return i.ToHelmReleaseSpecChartSpecPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecPatchArgs) ToHelmReleaseSpecChartSpecPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecPatchOutput)
}

func (i HelmReleaseSpecChartSpecPatchArgs) ToHelmReleaseSpecChartSpecPatchPtrOutput() HelmReleaseSpecChartSpecPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecPatchArgs) ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecPatchOutput).ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecPatchPtrInput is an input type that accepts HelmReleaseSpecChartSpecPatchArgs, HelmReleaseSpecChartSpecPatchPtr and HelmReleaseSpecChartSpecPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecPatchPtrInput` via:
//
//	        HelmReleaseSpecChartSpecPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecPatchPtrOutput() HelmReleaseSpecChartSpecPatchPtrOutput
	ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecPatchPtrOutput
}

type helmReleaseSpecChartSpecPatchPtrType HelmReleaseSpecChartSpecPatchArgs

func HelmReleaseSpecChartSpecPatchPtr(v *HelmReleaseSpecChartSpecPatchArgs) HelmReleaseSpecChartSpecPatchPtrInput {
	return (*helmReleaseSpecChartSpecPatchPtrType)(v)
}

func (*helmReleaseSpecChartSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecPatchPtrType) ToHelmReleaseSpecChartSpecPatchPtrOutput() HelmReleaseSpecChartSpecPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecPatchPtrType) ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecPatchPtrOutput)
}

// Spec holds the template for the v1beta2.HelmChartSpec for this HelmRelease.
type HelmReleaseSpecChartSpecPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecPatchOutput) ToHelmReleaseSpecChartSpecPatchOutput() HelmReleaseSpecChartSpecPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPatchOutput) ToHelmReleaseSpecChartSpecPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPatchOutput) ToHelmReleaseSpecChartSpecPatchPtrOutput() HelmReleaseSpecChartSpecPatchPtrOutput {
	return o.ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecPatchOutput) ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecPatch) *HelmReleaseSpecChartSpecPatch {
		return &v
	}).(HelmReleaseSpecChartSpecPatchPtrOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmReleaseSpecChartSpecPatchOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *string { return v.Chart }).(pulumi.StringPtrOutput)
}

// Interval at which to check the v1beta2.Source for updates. Defaults to
// 'HelmReleaseSpec.Interval'.
func (o HelmReleaseSpecChartSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmReleaseSpecChartSpecPatchOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *string { return v.ReconcileStrategy }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecPatchOutput) SourceRef() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *HelmReleaseSpecChartSpecSourceRefPatch { return v.SourceRef }).(HelmReleaseSpecChartSpecSourceRefPatchPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPatchOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *string { return v.ValuesFile }).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPatchOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) []string { return v.ValuesFiles }).(pulumi.StringArrayOutput)
}

func (o HelmReleaseSpecChartSpecPatchOutput) Verify() HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *HelmReleaseSpecChartSpecVerifyPatch { return v.Verify }).(HelmReleaseSpecChartSpecVerifyPatchPtrOutput)
}

// Version semver expression, ignored for charts from v1beta2.GitRepository and
// v1beta2.Bucket sources. Defaults to latest when omitted.
func (o HelmReleaseSpecChartSpecPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecPatchPtrOutput) ToHelmReleaseSpecChartSpecPatchPtrOutput() HelmReleaseSpecChartSpecPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPatchPtrOutput) ToHelmReleaseSpecChartSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecPatchPtrOutput) Elem() HelmReleaseSpecChartSpecPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) HelmReleaseSpecChartSpecPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecPatch
		return ret
	}).(HelmReleaseSpecChartSpecPatchOutput)
}

// The name or path the Helm chart is available at in the SourceRef.
func (o HelmReleaseSpecChartSpecPatchPtrOutput) Chart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(pulumi.StringPtrOutput)
}

// Interval at which to check the v1beta2.Source for updates. Defaults to
// 'HelmReleaseSpec.Interval'.
func (o HelmReleaseSpecChartSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Determines what enables the creation of a new artifact. Valid values are
// ('ChartVersion', 'Revision').
// See the documentation of the values for an explanation on their behavior.
// Defaults to ChartVersion when omitted.
func (o HelmReleaseSpecChartSpecPatchPtrOutput) ReconcileStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReconcileStrategy
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecPatchPtrOutput) SourceRef() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *HelmReleaseSpecChartSpecSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.SourceRef
	}).(HelmReleaseSpecChartSpecSourceRefPatchPtrOutput)
}

// Alternative values file to use as the default chart values, expected to
// be a relative path in the SourceRef. Deprecated in favor of ValuesFiles,
// for backwards compatibility the file defined here is merged before the
// ValuesFiles items. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPatchPtrOutput) ValuesFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ValuesFile
	}).(pulumi.StringPtrOutput)
}

// Alternative list of values files to use as the chart values (values.yaml
// is not included by default), expected to be a relative path in the SourceRef.
// Values files are merged in the order of this list with the last file overriding
// the first. Ignored when omitted.
func (o HelmReleaseSpecChartSpecPatchPtrOutput) ValuesFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.ValuesFiles
	}).(pulumi.StringArrayOutput)
}

func (o HelmReleaseSpecChartSpecPatchPtrOutput) Verify() HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *HelmReleaseSpecChartSpecVerifyPatch {
		if v == nil {
			return nil
		}
		return v.Verify
	}).(HelmReleaseSpecChartSpecVerifyPatchPtrOutput)
}

// Version semver expression, ignored for charts from v1beta2.GitRepository and
// v1beta2.Bucket sources. Defaults to latest when omitted.
func (o HelmReleaseSpecChartSpecPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceRef struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecChartSpecSourceRefInput is an input type that accepts HelmReleaseSpecChartSpecSourceRefArgs and HelmReleaseSpecChartSpecSourceRefOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecSourceRefInput` via:
//
//	HelmReleaseSpecChartSpecSourceRefArgs{...}
type HelmReleaseSpecChartSpecSourceRefInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecSourceRefOutput() HelmReleaseSpecChartSpecSourceRefOutput
	ToHelmReleaseSpecChartSpecSourceRefOutputWithContext(context.Context) HelmReleaseSpecChartSpecSourceRefOutput
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceRefArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecChartSpecSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRef)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecSourceRefArgs) ToHelmReleaseSpecChartSpecSourceRefOutput() HelmReleaseSpecChartSpecSourceRefOutput {
	return i.ToHelmReleaseSpecChartSpecSourceRefOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecSourceRefArgs) ToHelmReleaseSpecChartSpecSourceRefOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourceRefOutput)
}

func (i HelmReleaseSpecChartSpecSourceRefArgs) ToHelmReleaseSpecChartSpecSourceRefPtrOutput() HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return i.ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecSourceRefArgs) ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourceRefOutput).ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecSourceRefPtrInput is an input type that accepts HelmReleaseSpecChartSpecSourceRefArgs, HelmReleaseSpecChartSpecSourceRefPtr and HelmReleaseSpecChartSpecSourceRefPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecSourceRefPtrInput` via:
//
//	        HelmReleaseSpecChartSpecSourceRefArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecSourceRefPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecSourceRefPtrOutput() HelmReleaseSpecChartSpecSourceRefPtrOutput
	ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecSourceRefPtrOutput
}

type helmReleaseSpecChartSpecSourceRefPtrType HelmReleaseSpecChartSpecSourceRefArgs

func HelmReleaseSpecChartSpecSourceRefPtr(v *HelmReleaseSpecChartSpecSourceRefArgs) HelmReleaseSpecChartSpecSourceRefPtrInput {
	return (*helmReleaseSpecChartSpecSourceRefPtrType)(v)
}

func (*helmReleaseSpecChartSpecSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecSourceRef)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecSourceRefPtrType) ToHelmReleaseSpecChartSpecSourceRefPtrOutput() HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return i.ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecSourceRefPtrType) ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourceRefPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceRefOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRef)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecSourceRefOutput) ToHelmReleaseSpecChartSpecSourceRefOutput() HelmReleaseSpecChartSpecSourceRefOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefOutput) ToHelmReleaseSpecChartSpecSourceRefOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefOutput) ToHelmReleaseSpecChartSpecSourceRefPtrOutput() HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return o.ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecSourceRefOutput) ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecSourceRef) *HelmReleaseSpecChartSpecSourceRef {
		return &v
	}).(HelmReleaseSpecChartSpecSourceRefPtrOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartSpecSourceRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartSpecSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent.
func (o HelmReleaseSpecChartSpecSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecSourceRefPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecSourceRef)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) ToHelmReleaseSpecChartSpecSourceRefPtrOutput() HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) ToHelmReleaseSpecChartSpecSourceRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) Elem() HelmReleaseSpecChartSpecSourceRefOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRef) HelmReleaseSpecChartSpecSourceRef {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecSourceRef
		return ret
	}).(HelmReleaseSpecChartSpecSourceRefOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceRefPatch struct {
	// APIVersion of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind *string `pulumi:"kind"`
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecChartSpecSourceRefPatchInput is an input type that accepts HelmReleaseSpecChartSpecSourceRefPatchArgs and HelmReleaseSpecChartSpecSourceRefPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecSourceRefPatchInput` via:
//
//	HelmReleaseSpecChartSpecSourceRefPatchArgs{...}
type HelmReleaseSpecChartSpecSourceRefPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecSourceRefPatchOutput() HelmReleaseSpecChartSpecSourceRefPatchOutput
	ToHelmReleaseSpecChartSpecSourceRefPatchOutputWithContext(context.Context) HelmReleaseSpecChartSpecSourceRefPatchOutput
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceRefPatchArgs struct {
	// APIVersion of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind of the referent.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecChartSpecSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRefPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecSourceRefPatchArgs) ToHelmReleaseSpecChartSpecSourceRefPatchOutput() HelmReleaseSpecChartSpecSourceRefPatchOutput {
	return i.ToHelmReleaseSpecChartSpecSourceRefPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecSourceRefPatchArgs) ToHelmReleaseSpecChartSpecSourceRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourceRefPatchOutput)
}

func (i HelmReleaseSpecChartSpecSourceRefPatchArgs) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutput() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecSourceRefPatchArgs) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourceRefPatchOutput).ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecSourceRefPatchPtrInput is an input type that accepts HelmReleaseSpecChartSpecSourceRefPatchArgs, HelmReleaseSpecChartSpecSourceRefPatchPtr and HelmReleaseSpecChartSpecSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecSourceRefPatchPtrInput` via:
//
//	        HelmReleaseSpecChartSpecSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecSourceRefPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutput() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput
	ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecSourceRefPatchPtrOutput
}

type helmReleaseSpecChartSpecSourceRefPatchPtrType HelmReleaseSpecChartSpecSourceRefPatchArgs

func HelmReleaseSpecChartSpecSourceRefPatchPtr(v *HelmReleaseSpecChartSpecSourceRefPatchArgs) HelmReleaseSpecChartSpecSourceRefPatchPtrInput {
	return (*helmReleaseSpecChartSpecSourceRefPatchPtrType)(v)
}

func (*helmReleaseSpecChartSpecSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecSourceRefPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecSourceRefPatchPtrType) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutput() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecSourceRefPatchPtrType) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecSourceRefPatchPtrOutput)
}

// The name and namespace of the v1beta2.Source the chart is available at.
type HelmReleaseSpecChartSpecSourceRefPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) ToHelmReleaseSpecChartSpecSourceRefPatchOutput() HelmReleaseSpecChartSpecSourceRefPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) ToHelmReleaseSpecChartSpecSourceRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutput() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return o.ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecSourceRefPatch) *HelmReleaseSpecChartSpecSourceRefPatch {
		return &v
	}).(HelmReleaseSpecChartSpecSourceRefPatchPtrOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRefPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecSourceRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecSourceRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutput() HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) ToHelmReleaseSpecChartSpecSourceRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecSourceRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) Elem() HelmReleaseSpecChartSpecSourceRefPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRefPatch) HelmReleaseSpecChartSpecSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecSourceRefPatch
		return ret
	}).(HelmReleaseSpecChartSpecSourceRefPatchOutput)
}

// APIVersion of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the referent.
func (o HelmReleaseSpecChartSpecSourceRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported for OCI sources.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmReleaseSpecChartSpecVerify struct {
	// Provider specifies the technology used to sign the OCI Helm chart.
	Provider  *string                                  `pulumi:"provider"`
	SecretRef *HelmReleaseSpecChartSpecVerifySecretRef `pulumi:"secretRef"`
}

// HelmReleaseSpecChartSpecVerifyInput is an input type that accepts HelmReleaseSpecChartSpecVerifyArgs and HelmReleaseSpecChartSpecVerifyOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifyInput` via:
//
//	HelmReleaseSpecChartSpecVerifyArgs{...}
type HelmReleaseSpecChartSpecVerifyInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifyOutput() HelmReleaseSpecChartSpecVerifyOutput
	ToHelmReleaseSpecChartSpecVerifyOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifyOutput
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported for OCI sources.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmReleaseSpecChartSpecVerifyArgs struct {
	// Provider specifies the technology used to sign the OCI Helm chart.
	Provider  pulumi.StringPtrInput                           `pulumi:"provider"`
	SecretRef HelmReleaseSpecChartSpecVerifySecretRefPtrInput `pulumi:"secretRef"`
}

func (HelmReleaseSpecChartSpecVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerify)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecVerifyArgs) ToHelmReleaseSpecChartSpecVerifyOutput() HelmReleaseSpecChartSpecVerifyOutput {
	return i.ToHelmReleaseSpecChartSpecVerifyOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifyArgs) ToHelmReleaseSpecChartSpecVerifyOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifyOutput)
}

func (i HelmReleaseSpecChartSpecVerifyArgs) ToHelmReleaseSpecChartSpecVerifyPtrOutput() HelmReleaseSpecChartSpecVerifyPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifyArgs) ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifyOutput).ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecVerifyPtrInput is an input type that accepts HelmReleaseSpecChartSpecVerifyArgs, HelmReleaseSpecChartSpecVerifyPtr and HelmReleaseSpecChartSpecVerifyPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifyPtrInput` via:
//
//	        HelmReleaseSpecChartSpecVerifyArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecVerifyPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifyPtrOutput() HelmReleaseSpecChartSpecVerifyPtrOutput
	ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifyPtrOutput
}

type helmReleaseSpecChartSpecVerifyPtrType HelmReleaseSpecChartSpecVerifyArgs

func HelmReleaseSpecChartSpecVerifyPtr(v *HelmReleaseSpecChartSpecVerifyArgs) HelmReleaseSpecChartSpecVerifyPtrInput {
	return (*helmReleaseSpecChartSpecVerifyPtrType)(v)
}

func (*helmReleaseSpecChartSpecVerifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerify)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecVerifyPtrType) ToHelmReleaseSpecChartSpecVerifyPtrOutput() HelmReleaseSpecChartSpecVerifyPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecVerifyPtrType) ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifyPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported for OCI sources.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmReleaseSpecChartSpecVerifyOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerify)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifyOutput) ToHelmReleaseSpecChartSpecVerifyOutput() HelmReleaseSpecChartSpecVerifyOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyOutput) ToHelmReleaseSpecChartSpecVerifyOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyOutput) ToHelmReleaseSpecChartSpecVerifyPtrOutput() HelmReleaseSpecChartSpecVerifyPtrOutput {
	return o.ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecVerifyOutput) ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecVerify) *HelmReleaseSpecChartSpecVerify {
		return &v
	}).(HelmReleaseSpecChartSpecVerifyPtrOutput)
}

// Provider specifies the technology used to sign the OCI Helm chart.
func (o HelmReleaseSpecChartSpecVerifyOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecVerify) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecVerifyOutput) SecretRef() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecVerify) *HelmReleaseSpecChartSpecVerifySecretRef { return v.SecretRef }).(HelmReleaseSpecChartSpecVerifySecretRefPtrOutput)
}

type HelmReleaseSpecChartSpecVerifyPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerify)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifyPtrOutput) ToHelmReleaseSpecChartSpecVerifyPtrOutput() HelmReleaseSpecChartSpecVerifyPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyPtrOutput) ToHelmReleaseSpecChartSpecVerifyPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyPtrOutput) Elem() HelmReleaseSpecChartSpecVerifyOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerify) HelmReleaseSpecChartSpecVerify {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecVerify
		return ret
	}).(HelmReleaseSpecChartSpecVerifyOutput)
}

// Provider specifies the technology used to sign the OCI Helm chart.
func (o HelmReleaseSpecChartSpecVerifyPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerify) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecVerifyPtrOutput) SecretRef() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerify) *HelmReleaseSpecChartSpecVerifySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmReleaseSpecChartSpecVerifySecretRefPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported for OCI sources.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmReleaseSpecChartSpecVerifyPatch struct {
	// Provider specifies the technology used to sign the OCI Helm chart.
	Provider  *string                                       `pulumi:"provider"`
	SecretRef *HelmReleaseSpecChartSpecVerifySecretRefPatch `pulumi:"secretRef"`
}

// HelmReleaseSpecChartSpecVerifyPatchInput is an input type that accepts HelmReleaseSpecChartSpecVerifyPatchArgs and HelmReleaseSpecChartSpecVerifyPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifyPatchInput` via:
//
//	HelmReleaseSpecChartSpecVerifyPatchArgs{...}
type HelmReleaseSpecChartSpecVerifyPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifyPatchOutput() HelmReleaseSpecChartSpecVerifyPatchOutput
	ToHelmReleaseSpecChartSpecVerifyPatchOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifyPatchOutput
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported for OCI sources.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmReleaseSpecChartSpecVerifyPatchArgs struct {
	// Provider specifies the technology used to sign the OCI Helm chart.
	Provider  pulumi.StringPtrInput                                `pulumi:"provider"`
	SecretRef HelmReleaseSpecChartSpecVerifySecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (HelmReleaseSpecChartSpecVerifyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerifyPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecVerifyPatchArgs) ToHelmReleaseSpecChartSpecVerifyPatchOutput() HelmReleaseSpecChartSpecVerifyPatchOutput {
	return i.ToHelmReleaseSpecChartSpecVerifyPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifyPatchArgs) ToHelmReleaseSpecChartSpecVerifyPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifyPatchOutput)
}

func (i HelmReleaseSpecChartSpecVerifyPatchArgs) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutput() HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifyPatchArgs) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifyPatchOutput).ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecVerifyPatchPtrInput is an input type that accepts HelmReleaseSpecChartSpecVerifyPatchArgs, HelmReleaseSpecChartSpecVerifyPatchPtr and HelmReleaseSpecChartSpecVerifyPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifyPatchPtrInput` via:
//
//	        HelmReleaseSpecChartSpecVerifyPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecVerifyPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifyPatchPtrOutput() HelmReleaseSpecChartSpecVerifyPatchPtrOutput
	ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifyPatchPtrOutput
}

type helmReleaseSpecChartSpecVerifyPatchPtrType HelmReleaseSpecChartSpecVerifyPatchArgs

func HelmReleaseSpecChartSpecVerifyPatchPtr(v *HelmReleaseSpecChartSpecVerifyPatchArgs) HelmReleaseSpecChartSpecVerifyPatchPtrInput {
	return (*helmReleaseSpecChartSpecVerifyPatchPtrType)(v)
}

func (*helmReleaseSpecChartSpecVerifyPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerifyPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecVerifyPatchPtrType) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutput() HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecVerifyPatchPtrType) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifyPatchPtrOutput)
}

// Verify contains the secret name containing the trusted public keys
// used to verify the signature and specifies which provider to use to check
// whether OCI image is authentic.
// This field is only supported for OCI sources.
// Chart dependencies, which are not bundled in the umbrella chart artifact, are not verified.
type HelmReleaseSpecChartSpecVerifyPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerifyPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifyPatchOutput) ToHelmReleaseSpecChartSpecVerifyPatchOutput() HelmReleaseSpecChartSpecVerifyPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyPatchOutput) ToHelmReleaseSpecChartSpecVerifyPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyPatchOutput) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutput() HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return o.ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecVerifyPatchOutput) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecVerifyPatch) *HelmReleaseSpecChartSpecVerifyPatch {
		return &v
	}).(HelmReleaseSpecChartSpecVerifyPatchPtrOutput)
}

// Provider specifies the technology used to sign the OCI Helm chart.
func (o HelmReleaseSpecChartSpecVerifyPatchOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecVerifyPatch) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecVerifyPatchOutput) SecretRef() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecVerifyPatch) *HelmReleaseSpecChartSpecVerifySecretRefPatch {
		return v.SecretRef
	}).(HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput)
}

type HelmReleaseSpecChartSpecVerifyPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifyPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerifyPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifyPatchPtrOutput) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutput() HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyPatchPtrOutput) ToHelmReleaseSpecChartSpecVerifyPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifyPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifyPatchPtrOutput) Elem() HelmReleaseSpecChartSpecVerifyPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifyPatch) HelmReleaseSpecChartSpecVerifyPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecVerifyPatch
		return ret
	}).(HelmReleaseSpecChartSpecVerifyPatchOutput)
}

// Provider specifies the technology used to sign the OCI Helm chart.
func (o HelmReleaseSpecChartSpecVerifyPatchPtrOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifyPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provider
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecChartSpecVerifyPatchPtrOutput) SecretRef() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifyPatch) *HelmReleaseSpecChartSpecVerifySecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmReleaseSpecChartSpecVerifySecretRef struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmReleaseSpecChartSpecVerifySecretRefInput is an input type that accepts HelmReleaseSpecChartSpecVerifySecretRefArgs and HelmReleaseSpecChartSpecVerifySecretRefOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifySecretRefInput` via:
//
//	HelmReleaseSpecChartSpecVerifySecretRefArgs{...}
type HelmReleaseSpecChartSpecVerifySecretRefInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifySecretRefOutput() HelmReleaseSpecChartSpecVerifySecretRefOutput
	ToHelmReleaseSpecChartSpecVerifySecretRefOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifySecretRefOutput
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmReleaseSpecChartSpecVerifySecretRefArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmReleaseSpecChartSpecVerifySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRef)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecVerifySecretRefArgs) ToHelmReleaseSpecChartSpecVerifySecretRefOutput() HelmReleaseSpecChartSpecVerifySecretRefOutput {
	return i.ToHelmReleaseSpecChartSpecVerifySecretRefOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifySecretRefArgs) ToHelmReleaseSpecChartSpecVerifySecretRefOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifySecretRefOutput)
}

func (i HelmReleaseSpecChartSpecVerifySecretRefArgs) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifySecretRefArgs) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifySecretRefOutput).ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecVerifySecretRefPtrInput is an input type that accepts HelmReleaseSpecChartSpecVerifySecretRefArgs, HelmReleaseSpecChartSpecVerifySecretRefPtr and HelmReleaseSpecChartSpecVerifySecretRefPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifySecretRefPtrInput` via:
//
//	        HelmReleaseSpecChartSpecVerifySecretRefArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecVerifySecretRefPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput
	ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifySecretRefPtrOutput
}

type helmReleaseSpecChartSpecVerifySecretRefPtrType HelmReleaseSpecChartSpecVerifySecretRefArgs

func HelmReleaseSpecChartSpecVerifySecretRefPtr(v *HelmReleaseSpecChartSpecVerifySecretRefArgs) HelmReleaseSpecChartSpecVerifySecretRefPtrInput {
	return (*helmReleaseSpecChartSpecVerifySecretRefPtrType)(v)
}

func (*helmReleaseSpecChartSpecVerifySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerifySecretRef)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecVerifySecretRefPtrType) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecVerifySecretRefPtrType) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifySecretRefPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmReleaseSpecChartSpecVerifySecretRefOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRef)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifySecretRefOutput) ToHelmReleaseSpecChartSpecVerifySecretRefOutput() HelmReleaseSpecChartSpecVerifySecretRefOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefOutput) ToHelmReleaseSpecChartSpecVerifySecretRefOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return o.ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecVerifySecretRefOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecVerifySecretRef) *HelmReleaseSpecChartSpecVerifySecretRef {
		return &v
	}).(HelmReleaseSpecChartSpecVerifySecretRefPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecVerifySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecVerifySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecVerifySecretRefPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerifySecretRef)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPtrOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPtrOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPtrOutput) Elem() HelmReleaseSpecChartSpecVerifySecretRefOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifySecretRef) HelmReleaseSpecChartSpecVerifySecretRef {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecVerifySecretRef
		return ret
	}).(HelmReleaseSpecChartSpecVerifySecretRefOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecVerifySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmReleaseSpecChartSpecVerifySecretRefPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
}

// HelmReleaseSpecChartSpecVerifySecretRefPatchInput is an input type that accepts HelmReleaseSpecChartSpecVerifySecretRefPatchArgs and HelmReleaseSpecChartSpecVerifySecretRefPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifySecretRefPatchInput` via:
//
//	HelmReleaseSpecChartSpecVerifySecretRefPatchArgs{...}
type HelmReleaseSpecChartSpecVerifySecretRefPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchOutput
	ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchOutput
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmReleaseSpecChartSpecVerifySecretRefPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmReleaseSpecChartSpecVerifySecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (i HelmReleaseSpecChartSpecVerifySecretRefPatchArgs) ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchOutput {
	return i.ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifySecretRefPatchArgs) ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifySecretRefPatchOutput)
}

func (i HelmReleaseSpecChartSpecVerifySecretRefPatchArgs) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecChartSpecVerifySecretRefPatchArgs) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifySecretRefPatchOutput).ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecChartSpecVerifySecretRefPatchPtrInput is an input type that accepts HelmReleaseSpecChartSpecVerifySecretRefPatchArgs, HelmReleaseSpecChartSpecVerifySecretRefPatchPtr and HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecChartSpecVerifySecretRefPatchPtrInput` via:
//
//	        HelmReleaseSpecChartSpecVerifySecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecChartSpecVerifySecretRefPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput
	ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput
}

type helmReleaseSpecChartSpecVerifySecretRefPatchPtrType HelmReleaseSpecChartSpecVerifySecretRefPatchArgs

func HelmReleaseSpecChartSpecVerifySecretRefPatchPtr(v *HelmReleaseSpecChartSpecVerifySecretRefPatchArgs) HelmReleaseSpecChartSpecVerifySecretRefPatchPtrInput {
	return (*helmReleaseSpecChartSpecVerifySecretRefPatchPtrType)(v)
}

func (*helmReleaseSpecChartSpecVerifySecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (i *helmReleaseSpecChartSpecVerifySecretRefPatchPtrType) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return i.ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecChartSpecVerifySecretRefPatchPtrType) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput)
}

// SecretRef specifies the Kubernetes Secret containing the
// trusted public keys.
type HelmReleaseSpecChartSpecVerifySecretRefPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifySecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return o.ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecChartSpecVerifySecretRefPatch) *HelmReleaseSpecChartSpecVerifySecretRefPatch {
		return &v
	}).(HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecVerifySecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecChartSpecVerifySecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecChartSpecVerifySecretRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput() HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput) ToHelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput) Elem() HelmReleaseSpecChartSpecVerifySecretRefPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifySecretRefPatch) HelmReleaseSpecChartSpecVerifySecretRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecChartSpecVerifySecretRefPatch
		return ret
	}).(HelmReleaseSpecChartSpecVerifySecretRefPatchOutput)
}

// Name of the referent.
func (o HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecChartSpecVerifySecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any
// namespace.
type HelmReleaseSpecDependsOn struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecDependsOnInput is an input type that accepts HelmReleaseSpecDependsOnArgs and HelmReleaseSpecDependsOnOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDependsOnInput` via:
//
//	HelmReleaseSpecDependsOnArgs{...}
type HelmReleaseSpecDependsOnInput interface {
	pulumi.Input

	ToHelmReleaseSpecDependsOnOutput() HelmReleaseSpecDependsOnOutput
	ToHelmReleaseSpecDependsOnOutputWithContext(context.Context) HelmReleaseSpecDependsOnOutput
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any
// namespace.
type HelmReleaseSpecDependsOnArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecDependsOnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDependsOn)(nil)).Elem()
}

func (i HelmReleaseSpecDependsOnArgs) ToHelmReleaseSpecDependsOnOutput() HelmReleaseSpecDependsOnOutput {
	return i.ToHelmReleaseSpecDependsOnOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDependsOnArgs) ToHelmReleaseSpecDependsOnOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDependsOnOutput)
}

// HelmReleaseSpecDependsOnArrayInput is an input type that accepts HelmReleaseSpecDependsOnArray and HelmReleaseSpecDependsOnArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDependsOnArrayInput` via:
//
//	HelmReleaseSpecDependsOnArray{ HelmReleaseSpecDependsOnArgs{...} }
type HelmReleaseSpecDependsOnArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecDependsOnArrayOutput() HelmReleaseSpecDependsOnArrayOutput
	ToHelmReleaseSpecDependsOnArrayOutputWithContext(context.Context) HelmReleaseSpecDependsOnArrayOutput
}

type HelmReleaseSpecDependsOnArray []HelmReleaseSpecDependsOnInput

func (HelmReleaseSpecDependsOnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDependsOn)(nil)).Elem()
}

func (i HelmReleaseSpecDependsOnArray) ToHelmReleaseSpecDependsOnArrayOutput() HelmReleaseSpecDependsOnArrayOutput {
	return i.ToHelmReleaseSpecDependsOnArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDependsOnArray) ToHelmReleaseSpecDependsOnArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDependsOnArrayOutput)
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any
// namespace.
type HelmReleaseSpecDependsOnOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDependsOnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDependsOn)(nil)).Elem()
}

func (o HelmReleaseSpecDependsOnOutput) ToHelmReleaseSpecDependsOnOutput() HelmReleaseSpecDependsOnOutput {
	return o
}

func (o HelmReleaseSpecDependsOnOutput) ToHelmReleaseSpecDependsOnOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnOutput {
	return o
}

// Name of the referent.
func (o HelmReleaseSpecDependsOnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDependsOn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o HelmReleaseSpecDependsOnOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDependsOn) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDependsOnArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDependsOnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDependsOn)(nil)).Elem()
}

func (o HelmReleaseSpecDependsOnArrayOutput) ToHelmReleaseSpecDependsOnArrayOutput() HelmReleaseSpecDependsOnArrayOutput {
	return o
}

func (o HelmReleaseSpecDependsOnArrayOutput) ToHelmReleaseSpecDependsOnArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnArrayOutput {
	return o
}

func (o HelmReleaseSpecDependsOnArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecDependsOnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecDependsOn {
		return vs[0].([]HelmReleaseSpecDependsOn)[vs[1].(int)]
	}).(HelmReleaseSpecDependsOnOutput)
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any
// namespace.
type HelmReleaseSpecDependsOnPatch struct {
	// Name of the referent.
	Name *string `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace *string `pulumi:"namespace"`
}

// HelmReleaseSpecDependsOnPatchInput is an input type that accepts HelmReleaseSpecDependsOnPatchArgs and HelmReleaseSpecDependsOnPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDependsOnPatchInput` via:
//
//	HelmReleaseSpecDependsOnPatchArgs{...}
type HelmReleaseSpecDependsOnPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecDependsOnPatchOutput() HelmReleaseSpecDependsOnPatchOutput
	ToHelmReleaseSpecDependsOnPatchOutputWithContext(context.Context) HelmReleaseSpecDependsOnPatchOutput
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any
// namespace.
type HelmReleaseSpecDependsOnPatchArgs struct {
	// Name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the referent, when not specified it acts as LocalObjectReference.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (HelmReleaseSpecDependsOnPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDependsOnPatch)(nil)).Elem()
}

func (i HelmReleaseSpecDependsOnPatchArgs) ToHelmReleaseSpecDependsOnPatchOutput() HelmReleaseSpecDependsOnPatchOutput {
	return i.ToHelmReleaseSpecDependsOnPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDependsOnPatchArgs) ToHelmReleaseSpecDependsOnPatchOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDependsOnPatchOutput)
}

// HelmReleaseSpecDependsOnPatchArrayInput is an input type that accepts HelmReleaseSpecDependsOnPatchArray and HelmReleaseSpecDependsOnPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDependsOnPatchArrayInput` via:
//
//	HelmReleaseSpecDependsOnPatchArray{ HelmReleaseSpecDependsOnPatchArgs{...} }
type HelmReleaseSpecDependsOnPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecDependsOnPatchArrayOutput() HelmReleaseSpecDependsOnPatchArrayOutput
	ToHelmReleaseSpecDependsOnPatchArrayOutputWithContext(context.Context) HelmReleaseSpecDependsOnPatchArrayOutput
}

type HelmReleaseSpecDependsOnPatchArray []HelmReleaseSpecDependsOnPatchInput

func (HelmReleaseSpecDependsOnPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDependsOnPatch)(nil)).Elem()
}

func (i HelmReleaseSpecDependsOnPatchArray) ToHelmReleaseSpecDependsOnPatchArrayOutput() HelmReleaseSpecDependsOnPatchArrayOutput {
	return i.ToHelmReleaseSpecDependsOnPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDependsOnPatchArray) ToHelmReleaseSpecDependsOnPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDependsOnPatchArrayOutput)
}

// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource object in any
// namespace.
type HelmReleaseSpecDependsOnPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDependsOnPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDependsOnPatch)(nil)).Elem()
}

func (o HelmReleaseSpecDependsOnPatchOutput) ToHelmReleaseSpecDependsOnPatchOutput() HelmReleaseSpecDependsOnPatchOutput {
	return o
}

func (o HelmReleaseSpecDependsOnPatchOutput) ToHelmReleaseSpecDependsOnPatchOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnPatchOutput {
	return o
}

// Name of the referent.
func (o HelmReleaseSpecDependsOnPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDependsOnPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the referent, when not specified it acts as LocalObjectReference.
func (o HelmReleaseSpecDependsOnPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDependsOnPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDependsOnPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDependsOnPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDependsOnPatch)(nil)).Elem()
}

func (o HelmReleaseSpecDependsOnPatchArrayOutput) ToHelmReleaseSpecDependsOnPatchArrayOutput() HelmReleaseSpecDependsOnPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecDependsOnPatchArrayOutput) ToHelmReleaseSpecDependsOnPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDependsOnPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecDependsOnPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecDependsOnPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecDependsOnPatch {
		return vs[0].([]HelmReleaseSpecDependsOnPatch)[vs[1].(int)]
	}).(HelmReleaseSpecDependsOnPatchOutput)
}

// DriftDetection holds the configuration for detecting and handling
// differences between the manifest in the Helm storage and the resources
// currently existing in the cluster.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecDriftDetection struct {
	// Ignore contains a list of rules for specifying which changes to ignore
	// during diffing.
	Ignore []HelmReleaseSpecDriftDetectionIgnore `pulumi:"ignore"`
	// Mode defines how differences should be handled between the Helm manifest
	// and the manifest currently applied to the cluster.
	// If not explicitly set, it defaults to DiffModeDisabled.
	Mode *string `pulumi:"mode"`
}

// HelmReleaseSpecDriftDetectionInput is an input type that accepts HelmReleaseSpecDriftDetectionArgs and HelmReleaseSpecDriftDetectionOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionInput` via:
//
//	HelmReleaseSpecDriftDetectionArgs{...}
type HelmReleaseSpecDriftDetectionInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionOutput() HelmReleaseSpecDriftDetectionOutput
	ToHelmReleaseSpecDriftDetectionOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionOutput
}

// DriftDetection holds the configuration for detecting and handling
// differences between the manifest in the Helm storage and the resources
// currently existing in the cluster.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecDriftDetectionArgs struct {
	// Ignore contains a list of rules for specifying which changes to ignore
	// during diffing.
	Ignore HelmReleaseSpecDriftDetectionIgnoreArrayInput `pulumi:"ignore"`
	// Mode defines how differences should be handled between the Helm manifest
	// and the manifest currently applied to the cluster.
	// If not explicitly set, it defaults to DiffModeDisabled.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (HelmReleaseSpecDriftDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetection)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionArgs) ToHelmReleaseSpecDriftDetectionOutput() HelmReleaseSpecDriftDetectionOutput {
	return i.ToHelmReleaseSpecDriftDetectionOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionArgs) ToHelmReleaseSpecDriftDetectionOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionOutput)
}

func (i HelmReleaseSpecDriftDetectionArgs) ToHelmReleaseSpecDriftDetectionPtrOutput() HelmReleaseSpecDriftDetectionPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionArgs) ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionOutput).ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(ctx)
}

// HelmReleaseSpecDriftDetectionPtrInput is an input type that accepts HelmReleaseSpecDriftDetectionArgs, HelmReleaseSpecDriftDetectionPtr and HelmReleaseSpecDriftDetectionPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionPtrInput` via:
//
//	        HelmReleaseSpecDriftDetectionArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecDriftDetectionPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionPtrOutput() HelmReleaseSpecDriftDetectionPtrOutput
	ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionPtrOutput
}

type helmReleaseSpecDriftDetectionPtrType HelmReleaseSpecDriftDetectionArgs

func HelmReleaseSpecDriftDetectionPtr(v *HelmReleaseSpecDriftDetectionArgs) HelmReleaseSpecDriftDetectionPtrInput {
	return (*helmReleaseSpecDriftDetectionPtrType)(v)
}

func (*helmReleaseSpecDriftDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetection)(nil)).Elem()
}

func (i *helmReleaseSpecDriftDetectionPtrType) ToHelmReleaseSpecDriftDetectionPtrOutput() HelmReleaseSpecDriftDetectionPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecDriftDetectionPtrType) ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionPtrOutput)
}

// DriftDetection holds the configuration for detecting and handling
// differences between the manifest in the Helm storage and the resources
// currently existing in the cluster.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecDriftDetectionOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetection)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionOutput) ToHelmReleaseSpecDriftDetectionOutput() HelmReleaseSpecDriftDetectionOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionOutput) ToHelmReleaseSpecDriftDetectionOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionOutput) ToHelmReleaseSpecDriftDetectionPtrOutput() HelmReleaseSpecDriftDetectionPtrOutput {
	return o.ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecDriftDetectionOutput) ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecDriftDetection) *HelmReleaseSpecDriftDetection {
		return &v
	}).(HelmReleaseSpecDriftDetectionPtrOutput)
}

// Ignore contains a list of rules for specifying which changes to ignore
// during diffing.
func (o HelmReleaseSpecDriftDetectionOutput) Ignore() HelmReleaseSpecDriftDetectionIgnoreArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetection) []HelmReleaseSpecDriftDetectionIgnore { return v.Ignore }).(HelmReleaseSpecDriftDetectionIgnoreArrayOutput)
}

// Mode defines how differences should be handled between the Helm manifest
// and the manifest currently applied to the cluster.
// If not explicitly set, it defaults to DiffModeDisabled.
func (o HelmReleaseSpecDriftDetectionOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetection) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDriftDetectionPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetection)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionPtrOutput) ToHelmReleaseSpecDriftDetectionPtrOutput() HelmReleaseSpecDriftDetectionPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionPtrOutput) ToHelmReleaseSpecDriftDetectionPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionPtrOutput) Elem() HelmReleaseSpecDriftDetectionOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetection) HelmReleaseSpecDriftDetection {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecDriftDetection
		return ret
	}).(HelmReleaseSpecDriftDetectionOutput)
}

// Ignore contains a list of rules for specifying which changes to ignore
// during diffing.
func (o HelmReleaseSpecDriftDetectionPtrOutput) Ignore() HelmReleaseSpecDriftDetectionIgnoreArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetection) []HelmReleaseSpecDriftDetectionIgnore {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(HelmReleaseSpecDriftDetectionIgnoreArrayOutput)
}

// Mode defines how differences should be handled between the Helm manifest
// and the manifest currently applied to the cluster.
// If not explicitly set, it defaults to DiffModeDisabled.
func (o HelmReleaseSpecDriftDetectionPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetection) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// IgnoreRule defines a rule to selectively disregard specific changes during
// the drift detection process.
type HelmReleaseSpecDriftDetectionIgnore struct {
	// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from
	// consideration in a Kubernetes object.
	Paths  []string                                   `pulumi:"paths"`
	Target *HelmReleaseSpecDriftDetectionIgnoreTarget `pulumi:"target"`
}

// HelmReleaseSpecDriftDetectionIgnoreInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnoreArgs and HelmReleaseSpecDriftDetectionIgnoreOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnoreInput` via:
//
//	HelmReleaseSpecDriftDetectionIgnoreArgs{...}
type HelmReleaseSpecDriftDetectionIgnoreInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnoreOutput() HelmReleaseSpecDriftDetectionIgnoreOutput
	ToHelmReleaseSpecDriftDetectionIgnoreOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnoreOutput
}

// IgnoreRule defines a rule to selectively disregard specific changes during
// the drift detection process.
type HelmReleaseSpecDriftDetectionIgnoreArgs struct {
	// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from
	// consideration in a Kubernetes object.
	Paths  pulumi.StringArrayInput                           `pulumi:"paths"`
	Target HelmReleaseSpecDriftDetectionIgnoreTargetPtrInput `pulumi:"target"`
}

func (HelmReleaseSpecDriftDetectionIgnoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnore)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionIgnoreArgs) ToHelmReleaseSpecDriftDetectionIgnoreOutput() HelmReleaseSpecDriftDetectionIgnoreOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnoreArgs) ToHelmReleaseSpecDriftDetectionIgnoreOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreOutput)
}

// HelmReleaseSpecDriftDetectionIgnoreArrayInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnoreArray and HelmReleaseSpecDriftDetectionIgnoreArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnoreArrayInput` via:
//
//	HelmReleaseSpecDriftDetectionIgnoreArray{ HelmReleaseSpecDriftDetectionIgnoreArgs{...} }
type HelmReleaseSpecDriftDetectionIgnoreArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnoreArrayOutput() HelmReleaseSpecDriftDetectionIgnoreArrayOutput
	ToHelmReleaseSpecDriftDetectionIgnoreArrayOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnoreArrayOutput
}

type HelmReleaseSpecDriftDetectionIgnoreArray []HelmReleaseSpecDriftDetectionIgnoreInput

func (HelmReleaseSpecDriftDetectionIgnoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDriftDetectionIgnore)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionIgnoreArray) ToHelmReleaseSpecDriftDetectionIgnoreArrayOutput() HelmReleaseSpecDriftDetectionIgnoreArrayOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnoreArray) ToHelmReleaseSpecDriftDetectionIgnoreArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreArrayOutput)
}

// IgnoreRule defines a rule to selectively disregard specific changes during
// the drift detection process.
type HelmReleaseSpecDriftDetectionIgnoreOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnore)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnoreOutput) ToHelmReleaseSpecDriftDetectionIgnoreOutput() HelmReleaseSpecDriftDetectionIgnoreOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreOutput) ToHelmReleaseSpecDriftDetectionIgnoreOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreOutput {
	return o
}

// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from
// consideration in a Kubernetes object.
func (o HelmReleaseSpecDriftDetectionIgnoreOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnore) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

func (o HelmReleaseSpecDriftDetectionIgnoreOutput) Target() HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnore) *HelmReleaseSpecDriftDetectionIgnoreTarget {
		return v.Target
	}).(HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput)
}

type HelmReleaseSpecDriftDetectionIgnoreArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDriftDetectionIgnore)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnoreArrayOutput) ToHelmReleaseSpecDriftDetectionIgnoreArrayOutput() HelmReleaseSpecDriftDetectionIgnoreArrayOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreArrayOutput) ToHelmReleaseSpecDriftDetectionIgnoreArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreArrayOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecDriftDetectionIgnoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecDriftDetectionIgnore {
		return vs[0].([]HelmReleaseSpecDriftDetectionIgnore)[vs[1].(int)]
	}).(HelmReleaseSpecDriftDetectionIgnoreOutput)
}

// IgnoreRule defines a rule to selectively disregard specific changes during
// the drift detection process.
type HelmReleaseSpecDriftDetectionIgnorePatch struct {
	// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from
	// consideration in a Kubernetes object.
	Paths  []string                                        `pulumi:"paths"`
	Target *HelmReleaseSpecDriftDetectionIgnoreTargetPatch `pulumi:"target"`
}

// HelmReleaseSpecDriftDetectionIgnorePatchInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnorePatchArgs and HelmReleaseSpecDriftDetectionIgnorePatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnorePatchInput` via:
//
//	HelmReleaseSpecDriftDetectionIgnorePatchArgs{...}
type HelmReleaseSpecDriftDetectionIgnorePatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnorePatchOutput() HelmReleaseSpecDriftDetectionIgnorePatchOutput
	ToHelmReleaseSpecDriftDetectionIgnorePatchOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnorePatchOutput
}

// IgnoreRule defines a rule to selectively disregard specific changes during
// the drift detection process.
type HelmReleaseSpecDriftDetectionIgnorePatchArgs struct {
	// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from
	// consideration in a Kubernetes object.
	Paths  pulumi.StringArrayInput                                `pulumi:"paths"`
	Target HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrInput `pulumi:"target"`
}

func (HelmReleaseSpecDriftDetectionIgnorePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnorePatch)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionIgnorePatchArgs) ToHelmReleaseSpecDriftDetectionIgnorePatchOutput() HelmReleaseSpecDriftDetectionIgnorePatchOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnorePatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnorePatchArgs) ToHelmReleaseSpecDriftDetectionIgnorePatchOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnorePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnorePatchOutput)
}

// HelmReleaseSpecDriftDetectionIgnorePatchArrayInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnorePatchArray and HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnorePatchArrayInput` via:
//
//	HelmReleaseSpecDriftDetectionIgnorePatchArray{ HelmReleaseSpecDriftDetectionIgnorePatchArgs{...} }
type HelmReleaseSpecDriftDetectionIgnorePatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutput() HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput
	ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput
}

type HelmReleaseSpecDriftDetectionIgnorePatchArray []HelmReleaseSpecDriftDetectionIgnorePatchInput

func (HelmReleaseSpecDriftDetectionIgnorePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDriftDetectionIgnorePatch)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionIgnorePatchArray) ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutput() HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnorePatchArray) ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput)
}

// IgnoreRule defines a rule to selectively disregard specific changes during
// the drift detection process.
type HelmReleaseSpecDriftDetectionIgnorePatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnorePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnorePatch)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnorePatchOutput) ToHelmReleaseSpecDriftDetectionIgnorePatchOutput() HelmReleaseSpecDriftDetectionIgnorePatchOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnorePatchOutput) ToHelmReleaseSpecDriftDetectionIgnorePatchOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnorePatchOutput {
	return o
}

// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from
// consideration in a Kubernetes object.
func (o HelmReleaseSpecDriftDetectionIgnorePatchOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnorePatch) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

func (o HelmReleaseSpecDriftDetectionIgnorePatchOutput) Target() HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnorePatch) *HelmReleaseSpecDriftDetectionIgnoreTargetPatch {
		return v.Target
	}).(HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput)
}

type HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecDriftDetectionIgnorePatch)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput) ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutput() HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput) ToHelmReleaseSpecDriftDetectionIgnorePatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecDriftDetectionIgnorePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecDriftDetectionIgnorePatch {
		return vs[0].([]HelmReleaseSpecDriftDetectionIgnorePatch)[vs[1].(int)]
	}).(HelmReleaseSpecDriftDetectionIgnorePatchOutput)
}

// Target is a selector for specifying Kubernetes objects to which this
// rule applies.
// If Target is not set, the Paths will be ignored for all Kubernetes
// objects within the manifest of the Helm release.
type HelmReleaseSpecDriftDetectionIgnoreTarget struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecDriftDetectionIgnoreTargetInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnoreTargetArgs and HelmReleaseSpecDriftDetectionIgnoreTargetOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnoreTargetInput` via:
//
//	HelmReleaseSpecDriftDetectionIgnoreTargetArgs{...}
type HelmReleaseSpecDriftDetectionIgnoreTargetInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnoreTargetOutput() HelmReleaseSpecDriftDetectionIgnoreTargetOutput
	ToHelmReleaseSpecDriftDetectionIgnoreTargetOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetOutput
}

// Target is a selector for specifying Kubernetes objects to which this
// rule applies.
// If Target is not set, the Paths will be ignored for all Kubernetes
// objects within the manifest of the Helm release.
type HelmReleaseSpecDriftDetectionIgnoreTargetArgs struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecDriftDetectionIgnoreTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTarget)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetOutput() HelmReleaseSpecDriftDetectionIgnoreTargetOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreTargetOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreTargetOutput)
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreTargetOutput).ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(ctx)
}

// HelmReleaseSpecDriftDetectionIgnoreTargetPtrInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnoreTargetArgs, HelmReleaseSpecDriftDetectionIgnoreTargetPtr and HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnoreTargetPtrInput` via:
//
//	        HelmReleaseSpecDriftDetectionIgnoreTargetArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecDriftDetectionIgnoreTargetPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput
	ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput
}

type helmReleaseSpecDriftDetectionIgnoreTargetPtrType HelmReleaseSpecDriftDetectionIgnoreTargetArgs

func HelmReleaseSpecDriftDetectionIgnoreTargetPtr(v *HelmReleaseSpecDriftDetectionIgnoreTargetArgs) HelmReleaseSpecDriftDetectionIgnoreTargetPtrInput {
	return (*helmReleaseSpecDriftDetectionIgnoreTargetPtrType)(v)
}

func (*helmReleaseSpecDriftDetectionIgnoreTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetectionIgnoreTarget)(nil)).Elem()
}

func (i *helmReleaseSpecDriftDetectionIgnoreTargetPtrType) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecDriftDetectionIgnoreTargetPtrType) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput)
}

// Target is a selector for specifying Kubernetes objects to which this
// rule applies.
// If Target is not set, the Paths will be ignored for all Kubernetes
// objects within the manifest of the Helm release.
type HelmReleaseSpecDriftDetectionIgnoreTargetOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnoreTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTarget)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetOutput() HelmReleaseSpecDriftDetectionIgnoreTargetOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return o.ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecDriftDetectionIgnoreTarget) *HelmReleaseSpecDriftDetectionIgnoreTarget {
		return &v
	}).(HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.AnnotationSelector }).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTarget) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetectionIgnoreTarget)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) Elem() HelmReleaseSpecDriftDetectionIgnoreTargetOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) HelmReleaseSpecDriftDetectionIgnoreTarget {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecDriftDetectionIgnoreTarget
		return ret
	}).(HelmReleaseSpecDriftDetectionIgnoreTargetOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTarget) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Target is a selector for specifying Kubernetes objects to which this
// rule applies.
// If Target is not set, the Paths will be ignored for all Kubernetes
// objects within the manifest of the Helm release.
type HelmReleaseSpecDriftDetectionIgnoreTargetPatch struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecDriftDetectionIgnoreTargetPatchInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs and HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnoreTargetPatchInput` via:
//
//	HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs{...}
type HelmReleaseSpecDriftDetectionIgnoreTargetPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput
	ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput
}

// Target is a selector for specifying Kubernetes objects to which this
// rule applies.
// If Target is not set, the Paths will be ignored for all Kubernetes
// objects within the manifest of the Helm release.
type HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTargetPatch)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput)
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput).ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrInput is an input type that accepts HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs, HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtr and HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrInput` via:
//
//	        HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput
	ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput
}

type helmReleaseSpecDriftDetectionIgnoreTargetPatchPtrType HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs

func HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtr(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs) HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrInput {
	return (*helmReleaseSpecDriftDetectionIgnoreTargetPatchPtrType)(v)
}

func (*helmReleaseSpecDriftDetectionIgnoreTargetPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetectionIgnoreTargetPatch)(nil)).Elem()
}

func (i *helmReleaseSpecDriftDetectionIgnoreTargetPatchPtrType) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecDriftDetectionIgnoreTargetPatchPtrType) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput)
}

// Target is a selector for specifying Kubernetes objects to which this
// rule applies.
// If Target is not set, the Paths will be ignored for all Kubernetes
// objects within the manifest of the Helm release.
type HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTargetPatch)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return o.ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *HelmReleaseSpecDriftDetectionIgnoreTargetPatch {
		return &v
	}).(HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.AnnotationSelector }).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetectionIgnoreTargetPatch)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput() HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) ToHelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) Elem() HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) HelmReleaseSpecDriftDetectionIgnoreTargetPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecDriftDetectionIgnoreTargetPatch
		return ret
	}).(HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionIgnoreTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// DriftDetection holds the configuration for detecting and handling
// differences between the manifest in the Helm storage and the resources
// currently existing in the cluster.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecDriftDetectionPatch struct {
	// Ignore contains a list of rules for specifying which changes to ignore
	// during diffing.
	Ignore []HelmReleaseSpecDriftDetectionIgnorePatch `pulumi:"ignore"`
	// Mode defines how differences should be handled between the Helm manifest
	// and the manifest currently applied to the cluster.
	// If not explicitly set, it defaults to DiffModeDisabled.
	Mode *string `pulumi:"mode"`
}

// HelmReleaseSpecDriftDetectionPatchInput is an input type that accepts HelmReleaseSpecDriftDetectionPatchArgs and HelmReleaseSpecDriftDetectionPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionPatchInput` via:
//
//	HelmReleaseSpecDriftDetectionPatchArgs{...}
type HelmReleaseSpecDriftDetectionPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionPatchOutput() HelmReleaseSpecDriftDetectionPatchOutput
	ToHelmReleaseSpecDriftDetectionPatchOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionPatchOutput
}

// DriftDetection holds the configuration for detecting and handling
// differences between the manifest in the Helm storage and the resources
// currently existing in the cluster.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecDriftDetectionPatchArgs struct {
	// Ignore contains a list of rules for specifying which changes to ignore
	// during diffing.
	Ignore HelmReleaseSpecDriftDetectionIgnorePatchArrayInput `pulumi:"ignore"`
	// Mode defines how differences should be handled between the Helm manifest
	// and the manifest currently applied to the cluster.
	// If not explicitly set, it defaults to DiffModeDisabled.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (HelmReleaseSpecDriftDetectionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionPatch)(nil)).Elem()
}

func (i HelmReleaseSpecDriftDetectionPatchArgs) ToHelmReleaseSpecDriftDetectionPatchOutput() HelmReleaseSpecDriftDetectionPatchOutput {
	return i.ToHelmReleaseSpecDriftDetectionPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionPatchArgs) ToHelmReleaseSpecDriftDetectionPatchOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionPatchOutput)
}

func (i HelmReleaseSpecDriftDetectionPatchArgs) ToHelmReleaseSpecDriftDetectionPatchPtrOutput() HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecDriftDetectionPatchArgs) ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionPatchOutput).ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecDriftDetectionPatchPtrInput is an input type that accepts HelmReleaseSpecDriftDetectionPatchArgs, HelmReleaseSpecDriftDetectionPatchPtr and HelmReleaseSpecDriftDetectionPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecDriftDetectionPatchPtrInput` via:
//
//	        HelmReleaseSpecDriftDetectionPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecDriftDetectionPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecDriftDetectionPatchPtrOutput() HelmReleaseSpecDriftDetectionPatchPtrOutput
	ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(context.Context) HelmReleaseSpecDriftDetectionPatchPtrOutput
}

type helmReleaseSpecDriftDetectionPatchPtrType HelmReleaseSpecDriftDetectionPatchArgs

func HelmReleaseSpecDriftDetectionPatchPtr(v *HelmReleaseSpecDriftDetectionPatchArgs) HelmReleaseSpecDriftDetectionPatchPtrInput {
	return (*helmReleaseSpecDriftDetectionPatchPtrType)(v)
}

func (*helmReleaseSpecDriftDetectionPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetectionPatch)(nil)).Elem()
}

func (i *helmReleaseSpecDriftDetectionPatchPtrType) ToHelmReleaseSpecDriftDetectionPatchPtrOutput() HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return i.ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecDriftDetectionPatchPtrType) ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecDriftDetectionPatchPtrOutput)
}

// DriftDetection holds the configuration for detecting and handling
// differences between the manifest in the Helm storage and the resources
// currently existing in the cluster.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
type HelmReleaseSpecDriftDetectionPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecDriftDetectionPatch)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionPatchOutput) ToHelmReleaseSpecDriftDetectionPatchOutput() HelmReleaseSpecDriftDetectionPatchOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionPatchOutput) ToHelmReleaseSpecDriftDetectionPatchOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPatchOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionPatchOutput) ToHelmReleaseSpecDriftDetectionPatchPtrOutput() HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return o.ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecDriftDetectionPatchOutput) ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecDriftDetectionPatch) *HelmReleaseSpecDriftDetectionPatch {
		return &v
	}).(HelmReleaseSpecDriftDetectionPatchPtrOutput)
}

// Ignore contains a list of rules for specifying which changes to ignore
// during diffing.
func (o HelmReleaseSpecDriftDetectionPatchOutput) Ignore() HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionPatch) []HelmReleaseSpecDriftDetectionIgnorePatch { return v.Ignore }).(HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput)
}

// Mode defines how differences should be handled between the Helm manifest
// and the manifest currently applied to the cluster.
// If not explicitly set, it defaults to DiffModeDisabled.
func (o HelmReleaseSpecDriftDetectionPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecDriftDetectionPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecDriftDetectionPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecDriftDetectionPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecDriftDetectionPatch)(nil)).Elem()
}

func (o HelmReleaseSpecDriftDetectionPatchPtrOutput) ToHelmReleaseSpecDriftDetectionPatchPtrOutput() HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionPatchPtrOutput) ToHelmReleaseSpecDriftDetectionPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecDriftDetectionPatchPtrOutput) Elem() HelmReleaseSpecDriftDetectionPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionPatch) HelmReleaseSpecDriftDetectionPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecDriftDetectionPatch
		return ret
	}).(HelmReleaseSpecDriftDetectionPatchOutput)
}

// Ignore contains a list of rules for specifying which changes to ignore
// during diffing.
func (o HelmReleaseSpecDriftDetectionPatchPtrOutput) Ignore() HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionPatch) []HelmReleaseSpecDriftDetectionIgnorePatch {
		if v == nil {
			return nil
		}
		return v.Ignore
	}).(HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput)
}

// Mode defines how differences should be handled between the Helm manifest
// and the manifest currently applied to the cluster.
// If not explicitly set, it defaults to DiffModeDisabled.
func (o HelmReleaseSpecDriftDetectionPatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecDriftDetectionPatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstall struct {
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Create` and if omitted
	// CRDs are installed but not updated.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are applied (installed) during Helm install action.
	// With this option users can opt-in to CRD replace existing CRDs on Helm
	// install actions, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds *string `pulumi:"crds"`
	// CreateNamespace tells the Helm install action to create the
	// HelmReleaseSpec.TargetNamespace if it does not exist yet.
	// On uninstall, the namespace will not be garbage collected.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// DisableHooks prevents hooks from running during the Helm install action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm install action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation *bool `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// install has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// install has been performed.
	DisableWaitForJobs *bool                              `pulumi:"disableWaitForJobs"`
	Remediation        *HelmReleaseSpecInstallRemediation `pulumi:"remediation"`
	// Replace tells the Helm install action to re-use the 'ReleaseName', but only
	// if that name is a deleted release which remains in the history.
	Replace *bool `pulumi:"replace"`
	// SkipCRDs tells the Helm install action to not install any CRDs. By default,
	// CRDs are installed if not already present.
	//
	// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
	SkipCRDs *bool `pulumi:"skipCRDs"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm install action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecInstallInput is an input type that accepts HelmReleaseSpecInstallArgs and HelmReleaseSpecInstallOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallInput` via:
//
//	HelmReleaseSpecInstallArgs{...}
type HelmReleaseSpecInstallInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallOutput() HelmReleaseSpecInstallOutput
	ToHelmReleaseSpecInstallOutputWithContext(context.Context) HelmReleaseSpecInstallOutput
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallArgs struct {
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Create` and if omitted
	// CRDs are installed but not updated.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are applied (installed) during Helm install action.
	// With this option users can opt-in to CRD replace existing CRDs on Helm
	// install actions, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds pulumi.StringPtrInput `pulumi:"crds"`
	// CreateNamespace tells the Helm install action to create the
	// HelmReleaseSpec.TargetNamespace if it does not exist yet.
	// On uninstall, the namespace will not be garbage collected.
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// DisableHooks prevents hooks from running during the Helm install action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm install action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation pulumi.BoolPtrInput `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// install has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// install has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput                       `pulumi:"disableWaitForJobs"`
	Remediation        HelmReleaseSpecInstallRemediationPtrInput `pulumi:"remediation"`
	// Replace tells the Helm install action to re-use the 'ReleaseName', but only
	// if that name is a deleted release which remains in the history.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// SkipCRDs tells the Helm install action to not install any CRDs. By default,
	// CRDs are installed if not already present.
	//
	// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
	SkipCRDs pulumi.BoolPtrInput `pulumi:"skipCRDs"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm install action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecInstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstall)(nil)).Elem()
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallOutput() HelmReleaseSpecInstallOutput {
	return i.ToHelmReleaseSpecInstallOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallOutputWithContext(ctx context.Context) HelmReleaseSpecInstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallOutput)
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return i.ToHelmReleaseSpecInstallPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallArgs) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallOutput).ToHelmReleaseSpecInstallPtrOutputWithContext(ctx)
}

// HelmReleaseSpecInstallPtrInput is an input type that accepts HelmReleaseSpecInstallArgs, HelmReleaseSpecInstallPtr and HelmReleaseSpecInstallPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallPtrInput` via:
//
//	        HelmReleaseSpecInstallArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecInstallPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput
	ToHelmReleaseSpecInstallPtrOutputWithContext(context.Context) HelmReleaseSpecInstallPtrOutput
}

type helmReleaseSpecInstallPtrType HelmReleaseSpecInstallArgs

func HelmReleaseSpecInstallPtr(v *HelmReleaseSpecInstallArgs) HelmReleaseSpecInstallPtrInput {
	return (*helmReleaseSpecInstallPtrType)(v)
}

func (*helmReleaseSpecInstallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstall)(nil)).Elem()
}

func (i *helmReleaseSpecInstallPtrType) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return i.ToHelmReleaseSpecInstallPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecInstallPtrType) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallPtrOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstall)(nil)).Elem()
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallOutput() HelmReleaseSpecInstallOutput {
	return o
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallOutputWithContext(ctx context.Context) HelmReleaseSpecInstallOutput {
	return o
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return o.ToHelmReleaseSpecInstallPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecInstallOutput) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecInstall) *HelmReleaseSpecInstall {
		return &v
	}).(HelmReleaseSpecInstallPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Create` and if omitted
// CRDs are installed but not updated.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are applied (installed) during Helm install action.
// With this option users can opt-in to CRD replace existing CRDs on Helm
// install actions, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecInstallOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *string { return v.Crds }).(pulumi.StringPtrOutput)
}

// CreateNamespace tells the Helm install action to create the
// HelmReleaseSpec.TargetNamespace if it does not exist yet.
// On uninstall, the namespace will not be garbage collected.
func (o HelmReleaseSpecInstallOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm install action.
func (o HelmReleaseSpecInstallOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm install action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecInstallOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableOpenAPIValidation }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecInstallOutput) Remediation() HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *HelmReleaseSpecInstallRemediation { return v.Remediation }).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// Replace tells the Helm install action to re-use the 'ReleaseName', but only
// if that name is a deleted release which remains in the history.
func (o HelmReleaseSpecInstallOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// SkipCRDs tells the Helm install action to not install any CRDs. By default,
// CRDs are installed if not already present.
//
// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
func (o HelmReleaseSpecInstallOutput) SkipCRDs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *bool { return v.SkipCRDs }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm install action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecInstallOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstall) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecInstallPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstall)(nil)).Elem()
}

func (o HelmReleaseSpecInstallPtrOutput) ToHelmReleaseSpecInstallPtrOutput() HelmReleaseSpecInstallPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallPtrOutput) ToHelmReleaseSpecInstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallPtrOutput) Elem() HelmReleaseSpecInstallOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) HelmReleaseSpecInstall {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecInstall
		return ret
	}).(HelmReleaseSpecInstallOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Create` and if omitted
// CRDs are installed but not updated.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are applied (installed) during Helm install action.
// With this option users can opt-in to CRD replace existing CRDs on Helm
// install actions, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecInstallPtrOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *string {
		if v == nil {
			return nil
		}
		return v.Crds
	}).(pulumi.StringPtrOutput)
}

// CreateNamespace tells the Helm install action to create the
// HelmReleaseSpec.TargetNamespace if it does not exist yet.
// On uninstall, the namespace will not be garbage collected.
func (o HelmReleaseSpecInstallPtrOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.CreateNamespace
	}).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm install action.
func (o HelmReleaseSpecInstallPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm install action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecInstallPtrOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenAPIValidation
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecInstallPtrOutput) Remediation() HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *HelmReleaseSpecInstallRemediation {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// Replace tells the Helm install action to re-use the 'ReleaseName', but only
// if that name is a deleted release which remains in the history.
func (o HelmReleaseSpecInstallPtrOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

// SkipCRDs tells the Helm install action to not install any CRDs. By default,
// CRDs are installed if not already present.
//
// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
func (o HelmReleaseSpecInstallPtrOutput) SkipCRDs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCRDs
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm install action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecInstallPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstall) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallPatch struct {
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Create` and if omitted
	// CRDs are installed but not updated.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are applied (installed) during Helm install action.
	// With this option users can opt-in to CRD replace existing CRDs on Helm
	// install actions, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds *string `pulumi:"crds"`
	// CreateNamespace tells the Helm install action to create the
	// HelmReleaseSpec.TargetNamespace if it does not exist yet.
	// On uninstall, the namespace will not be garbage collected.
	CreateNamespace *bool `pulumi:"createNamespace"`
	// DisableHooks prevents hooks from running during the Helm install action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm install action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation *bool `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// install has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// install has been performed.
	DisableWaitForJobs *bool                                   `pulumi:"disableWaitForJobs"`
	Remediation        *HelmReleaseSpecInstallRemediationPatch `pulumi:"remediation"`
	// Replace tells the Helm install action to re-use the 'ReleaseName', but only
	// if that name is a deleted release which remains in the history.
	Replace *bool `pulumi:"replace"`
	// SkipCRDs tells the Helm install action to not install any CRDs. By default,
	// CRDs are installed if not already present.
	//
	// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
	SkipCRDs *bool `pulumi:"skipCRDs"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm install action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecInstallPatchInput is an input type that accepts HelmReleaseSpecInstallPatchArgs and HelmReleaseSpecInstallPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallPatchInput` via:
//
//	HelmReleaseSpecInstallPatchArgs{...}
type HelmReleaseSpecInstallPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallPatchOutput() HelmReleaseSpecInstallPatchOutput
	ToHelmReleaseSpecInstallPatchOutputWithContext(context.Context) HelmReleaseSpecInstallPatchOutput
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallPatchArgs struct {
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Create` and if omitted
	// CRDs are installed but not updated.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are applied (installed) during Helm install action.
	// With this option users can opt-in to CRD replace existing CRDs on Helm
	// install actions, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds pulumi.StringPtrInput `pulumi:"crds"`
	// CreateNamespace tells the Helm install action to create the
	// HelmReleaseSpec.TargetNamespace if it does not exist yet.
	// On uninstall, the namespace will not be garbage collected.
	CreateNamespace pulumi.BoolPtrInput `pulumi:"createNamespace"`
	// DisableHooks prevents hooks from running during the Helm install action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm install action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation pulumi.BoolPtrInput `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// install has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// install has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput                            `pulumi:"disableWaitForJobs"`
	Remediation        HelmReleaseSpecInstallRemediationPatchPtrInput `pulumi:"remediation"`
	// Replace tells the Helm install action to re-use the 'ReleaseName', but only
	// if that name is a deleted release which remains in the history.
	Replace pulumi.BoolPtrInput `pulumi:"replace"`
	// SkipCRDs tells the Helm install action to not install any CRDs. By default,
	// CRDs are installed if not already present.
	//
	// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
	SkipCRDs pulumi.BoolPtrInput `pulumi:"skipCRDs"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm install action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecInstallPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallPatch)(nil)).Elem()
}

func (i HelmReleaseSpecInstallPatchArgs) ToHelmReleaseSpecInstallPatchOutput() HelmReleaseSpecInstallPatchOutput {
	return i.ToHelmReleaseSpecInstallPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallPatchArgs) ToHelmReleaseSpecInstallPatchOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallPatchOutput)
}

func (i HelmReleaseSpecInstallPatchArgs) ToHelmReleaseSpecInstallPatchPtrOutput() HelmReleaseSpecInstallPatchPtrOutput {
	return i.ToHelmReleaseSpecInstallPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallPatchArgs) ToHelmReleaseSpecInstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallPatchOutput).ToHelmReleaseSpecInstallPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecInstallPatchPtrInput is an input type that accepts HelmReleaseSpecInstallPatchArgs, HelmReleaseSpecInstallPatchPtr and HelmReleaseSpecInstallPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallPatchPtrInput` via:
//
//	        HelmReleaseSpecInstallPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecInstallPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallPatchPtrOutput() HelmReleaseSpecInstallPatchPtrOutput
	ToHelmReleaseSpecInstallPatchPtrOutputWithContext(context.Context) HelmReleaseSpecInstallPatchPtrOutput
}

type helmReleaseSpecInstallPatchPtrType HelmReleaseSpecInstallPatchArgs

func HelmReleaseSpecInstallPatchPtr(v *HelmReleaseSpecInstallPatchArgs) HelmReleaseSpecInstallPatchPtrInput {
	return (*helmReleaseSpecInstallPatchPtrType)(v)
}

func (*helmReleaseSpecInstallPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallPatch)(nil)).Elem()
}

func (i *helmReleaseSpecInstallPatchPtrType) ToHelmReleaseSpecInstallPatchPtrOutput() HelmReleaseSpecInstallPatchPtrOutput {
	return i.ToHelmReleaseSpecInstallPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecInstallPatchPtrType) ToHelmReleaseSpecInstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallPatchPtrOutput)
}

// Install holds the configuration for Helm install actions for this HelmRelease.
type HelmReleaseSpecInstallPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallPatch)(nil)).Elem()
}

func (o HelmReleaseSpecInstallPatchOutput) ToHelmReleaseSpecInstallPatchOutput() HelmReleaseSpecInstallPatchOutput {
	return o
}

func (o HelmReleaseSpecInstallPatchOutput) ToHelmReleaseSpecInstallPatchOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPatchOutput {
	return o
}

func (o HelmReleaseSpecInstallPatchOutput) ToHelmReleaseSpecInstallPatchPtrOutput() HelmReleaseSpecInstallPatchPtrOutput {
	return o.ToHelmReleaseSpecInstallPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecInstallPatchOutput) ToHelmReleaseSpecInstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecInstallPatch) *HelmReleaseSpecInstallPatch {
		return &v
	}).(HelmReleaseSpecInstallPatchPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Create` and if omitted
// CRDs are installed but not updated.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are applied (installed) during Helm install action.
// With this option users can opt-in to CRD replace existing CRDs on Helm
// install actions, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecInstallPatchOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *string { return v.Crds }).(pulumi.StringPtrOutput)
}

// CreateNamespace tells the Helm install action to create the
// HelmReleaseSpec.TargetNamespace if it does not exist yet.
// On uninstall, the namespace will not be garbage collected.
func (o HelmReleaseSpecInstallPatchOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.CreateNamespace }).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm install action.
func (o HelmReleaseSpecInstallPatchOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm install action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecInstallPatchOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.DisableOpenAPIValidation }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallPatchOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallPatchOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecInstallPatchOutput) Remediation() HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *HelmReleaseSpecInstallRemediationPatch { return v.Remediation }).(HelmReleaseSpecInstallRemediationPatchPtrOutput)
}

// Replace tells the Helm install action to re-use the 'ReleaseName', but only
// if that name is a deleted release which remains in the history.
func (o HelmReleaseSpecInstallPatchOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

// SkipCRDs tells the Helm install action to not install any CRDs. By default,
// CRDs are installed if not already present.
//
// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
func (o HelmReleaseSpecInstallPatchOutput) SkipCRDs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *bool { return v.SkipCRDs }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm install action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecInstallPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecInstallPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallPatch)(nil)).Elem()
}

func (o HelmReleaseSpecInstallPatchPtrOutput) ToHelmReleaseSpecInstallPatchPtrOutput() HelmReleaseSpecInstallPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallPatchPtrOutput) ToHelmReleaseSpecInstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallPatchPtrOutput) Elem() HelmReleaseSpecInstallPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) HelmReleaseSpecInstallPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecInstallPatch
		return ret
	}).(HelmReleaseSpecInstallPatchOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Create` and if omitted
// CRDs are installed but not updated.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are applied (installed) during Helm install action.
// With this option users can opt-in to CRD replace existing CRDs on Helm
// install actions, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecInstallPatchPtrOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *string {
		if v == nil {
			return nil
		}
		return v.Crds
	}).(pulumi.StringPtrOutput)
}

// CreateNamespace tells the Helm install action to create the
// HelmReleaseSpec.TargetNamespace if it does not exist yet.
// On uninstall, the namespace will not be garbage collected.
func (o HelmReleaseSpecInstallPatchPtrOutput) CreateNamespace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.CreateNamespace
	}).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm install action.
func (o HelmReleaseSpecInstallPatchPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm install action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecInstallPatchPtrOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenAPIValidation
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallPatchPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// install has been performed.
func (o HelmReleaseSpecInstallPatchPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecInstallPatchPtrOutput) Remediation() HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *HelmReleaseSpecInstallRemediationPatch {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(HelmReleaseSpecInstallRemediationPatchPtrOutput)
}

// Replace tells the Helm install action to re-use the 'ReleaseName', but only
// if that name is a deleted release which remains in the history.
func (o HelmReleaseSpecInstallPatchPtrOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Replace
	}).(pulumi.BoolPtrOutput)
}

// SkipCRDs tells the Helm install action to not install any CRDs. By default,
// CRDs are installed if not already present.
//
// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
func (o HelmReleaseSpecInstallPatchPtrOutput) SkipCRDs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.SkipCRDs
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm install action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecInstallPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediation struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an install action but fail. Defaults to
	// 'Test.IgnoreFailures'.
	IgnoreTestFailures *bool `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false'.
	RemediateLastFailure *bool `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using an uninstall, is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries *int `pulumi:"retries"`
}

// HelmReleaseSpecInstallRemediationInput is an input type that accepts HelmReleaseSpecInstallRemediationArgs and HelmReleaseSpecInstallRemediationOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallRemediationInput` via:
//
//	HelmReleaseSpecInstallRemediationArgs{...}
type HelmReleaseSpecInstallRemediationInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallRemediationOutput() HelmReleaseSpecInstallRemediationOutput
	ToHelmReleaseSpecInstallRemediationOutputWithContext(context.Context) HelmReleaseSpecInstallRemediationOutput
}

// Remediation holds the remediation configuration for when the Helm install
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationArgs struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an install action but fail. Defaults to
	// 'Test.IgnoreFailures'.
	IgnoreTestFailures pulumi.BoolPtrInput `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false'.
	RemediateLastFailure pulumi.BoolPtrInput `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using an uninstall, is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
}

func (HelmReleaseSpecInstallRemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationOutput() HelmReleaseSpecInstallRemediationOutput {
	return i.ToHelmReleaseSpecInstallRemediationOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationOutput)
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return i.ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallRemediationArgs) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationOutput).ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx)
}

// HelmReleaseSpecInstallRemediationPtrInput is an input type that accepts HelmReleaseSpecInstallRemediationArgs, HelmReleaseSpecInstallRemediationPtr and HelmReleaseSpecInstallRemediationPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallRemediationPtrInput` via:
//
//	        HelmReleaseSpecInstallRemediationArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecInstallRemediationPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput
	ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Context) HelmReleaseSpecInstallRemediationPtrOutput
}

type helmReleaseSpecInstallRemediationPtrType HelmReleaseSpecInstallRemediationArgs

func HelmReleaseSpecInstallRemediationPtr(v *HelmReleaseSpecInstallRemediationArgs) HelmReleaseSpecInstallRemediationPtrInput {
	return (*helmReleaseSpecInstallRemediationPtrType)(v)
}

func (*helmReleaseSpecInstallRemediationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (i *helmReleaseSpecInstallRemediationPtrType) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return i.ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecInstallRemediationPtrType) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallRemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationOutput() HelmReleaseSpecInstallRemediationOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecInstallRemediationOutput) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecInstallRemediation) *HelmReleaseSpecInstallRemediation {
		return &v
	}).(HelmReleaseSpecInstallRemediationPtrOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an install action but fail. Defaults to
// 'Test.IgnoreFailures'.
func (o HelmReleaseSpecInstallRemediationOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediation) *bool { return v.IgnoreTestFailures }).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false'.
func (o HelmReleaseSpecInstallRemediationOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediation) *bool { return v.RemediateLastFailure }).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using an uninstall, is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecInstallRemediationOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediation) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

type HelmReleaseSpecInstallRemediationPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallRemediationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecInstallRemediationPtrOutput) ToHelmReleaseSpecInstallRemediationPtrOutput() HelmReleaseSpecInstallRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPtrOutput) ToHelmReleaseSpecInstallRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPtrOutput) Elem() HelmReleaseSpecInstallRemediationOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) HelmReleaseSpecInstallRemediation {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecInstallRemediation
		return ret
	}).(HelmReleaseSpecInstallRemediationOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an install action but fail. Defaults to
// 'Test.IgnoreFailures'.
func (o HelmReleaseSpecInstallRemediationPtrOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTestFailures
	}).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false'.
func (o HelmReleaseSpecInstallRemediationPtrOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.RemediateLastFailure
	}).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using an uninstall, is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecInstallRemediationPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediation) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationPatch struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an install action but fail. Defaults to
	// 'Test.IgnoreFailures'.
	IgnoreTestFailures *bool `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false'.
	RemediateLastFailure *bool `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using an uninstall, is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries *int `pulumi:"retries"`
}

// HelmReleaseSpecInstallRemediationPatchInput is an input type that accepts HelmReleaseSpecInstallRemediationPatchArgs and HelmReleaseSpecInstallRemediationPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallRemediationPatchInput` via:
//
//	HelmReleaseSpecInstallRemediationPatchArgs{...}
type HelmReleaseSpecInstallRemediationPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallRemediationPatchOutput() HelmReleaseSpecInstallRemediationPatchOutput
	ToHelmReleaseSpecInstallRemediationPatchOutputWithContext(context.Context) HelmReleaseSpecInstallRemediationPatchOutput
}

// Remediation holds the remediation configuration for when the Helm install
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationPatchArgs struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an install action but fail. Defaults to
	// 'Test.IgnoreFailures'.
	IgnoreTestFailures pulumi.BoolPtrInput `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false'.
	RemediateLastFailure pulumi.BoolPtrInput `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using an uninstall, is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
}

func (HelmReleaseSpecInstallRemediationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallRemediationPatch)(nil)).Elem()
}

func (i HelmReleaseSpecInstallRemediationPatchArgs) ToHelmReleaseSpecInstallRemediationPatchOutput() HelmReleaseSpecInstallRemediationPatchOutput {
	return i.ToHelmReleaseSpecInstallRemediationPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallRemediationPatchArgs) ToHelmReleaseSpecInstallRemediationPatchOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationPatchOutput)
}

func (i HelmReleaseSpecInstallRemediationPatchArgs) ToHelmReleaseSpecInstallRemediationPatchPtrOutput() HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return i.ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecInstallRemediationPatchArgs) ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationPatchOutput).ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecInstallRemediationPatchPtrInput is an input type that accepts HelmReleaseSpecInstallRemediationPatchArgs, HelmReleaseSpecInstallRemediationPatchPtr and HelmReleaseSpecInstallRemediationPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecInstallRemediationPatchPtrInput` via:
//
//	        HelmReleaseSpecInstallRemediationPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecInstallRemediationPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecInstallRemediationPatchPtrOutput() HelmReleaseSpecInstallRemediationPatchPtrOutput
	ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(context.Context) HelmReleaseSpecInstallRemediationPatchPtrOutput
}

type helmReleaseSpecInstallRemediationPatchPtrType HelmReleaseSpecInstallRemediationPatchArgs

func HelmReleaseSpecInstallRemediationPatchPtr(v *HelmReleaseSpecInstallRemediationPatchArgs) HelmReleaseSpecInstallRemediationPatchPtrInput {
	return (*helmReleaseSpecInstallRemediationPatchPtrType)(v)
}

func (*helmReleaseSpecInstallRemediationPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallRemediationPatch)(nil)).Elem()
}

func (i *helmReleaseSpecInstallRemediationPatchPtrType) ToHelmReleaseSpecInstallRemediationPatchPtrOutput() HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return i.ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecInstallRemediationPatchPtrType) ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecInstallRemediationPatchPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm install
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecInstallRemediationPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallRemediationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecInstallRemediationPatch)(nil)).Elem()
}

func (o HelmReleaseSpecInstallRemediationPatchOutput) ToHelmReleaseSpecInstallRemediationPatchOutput() HelmReleaseSpecInstallRemediationPatchOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPatchOutput) ToHelmReleaseSpecInstallRemediationPatchOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPatchOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPatchOutput) ToHelmReleaseSpecInstallRemediationPatchPtrOutput() HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return o.ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecInstallRemediationPatchOutput) ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecInstallRemediationPatch) *HelmReleaseSpecInstallRemediationPatch {
		return &v
	}).(HelmReleaseSpecInstallRemediationPatchPtrOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an install action but fail. Defaults to
// 'Test.IgnoreFailures'.
func (o HelmReleaseSpecInstallRemediationPatchOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediationPatch) *bool { return v.IgnoreTestFailures }).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false'.
func (o HelmReleaseSpecInstallRemediationPatchOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediationPatch) *bool { return v.RemediateLastFailure }).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using an uninstall, is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecInstallRemediationPatchOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecInstallRemediationPatch) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

type HelmReleaseSpecInstallRemediationPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecInstallRemediationPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecInstallRemediationPatch)(nil)).Elem()
}

func (o HelmReleaseSpecInstallRemediationPatchPtrOutput) ToHelmReleaseSpecInstallRemediationPatchPtrOutput() HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPatchPtrOutput) ToHelmReleaseSpecInstallRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecInstallRemediationPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecInstallRemediationPatchPtrOutput) Elem() HelmReleaseSpecInstallRemediationPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediationPatch) HelmReleaseSpecInstallRemediationPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecInstallRemediationPatch
		return ret
	}).(HelmReleaseSpecInstallRemediationPatchOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an install action but fail. Defaults to
// 'Test.IgnoreFailures'.
func (o HelmReleaseSpecInstallRemediationPatchPtrOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediationPatch) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTestFailures
	}).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false'.
func (o HelmReleaseSpecInstallRemediationPatchPtrOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediationPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RemediateLastFailure
	}).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using an uninstall, is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecInstallRemediationPatchPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecInstallRemediationPatch) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster.
// When used in combination with HelmReleaseSpec.ServiceAccountName,
// forces the controller to act on behalf of that Service Account at the
// target cluster.
// If the --default-service-account flag is set, its value will be used as
// a controller level fallback for when HelmReleaseSpec.ServiceAccountName
// is empty.
type HelmReleaseSpecKubeConfig struct {
	SecretRef *HelmReleaseSpecKubeConfigSecretRef `pulumi:"secretRef"`
}

// HelmReleaseSpecKubeConfigInput is an input type that accepts HelmReleaseSpecKubeConfigArgs and HelmReleaseSpecKubeConfigOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigInput` via:
//
//	HelmReleaseSpecKubeConfigArgs{...}
type HelmReleaseSpecKubeConfigInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigOutput() HelmReleaseSpecKubeConfigOutput
	ToHelmReleaseSpecKubeConfigOutputWithContext(context.Context) HelmReleaseSpecKubeConfigOutput
}

// KubeConfig for reconciling the HelmRelease on a remote cluster.
// When used in combination with HelmReleaseSpec.ServiceAccountName,
// forces the controller to act on behalf of that Service Account at the
// target cluster.
// If the --default-service-account flag is set, its value will be used as
// a controller level fallback for when HelmReleaseSpec.ServiceAccountName
// is empty.
type HelmReleaseSpecKubeConfigArgs struct {
	SecretRef HelmReleaseSpecKubeConfigSecretRefPtrInput `pulumi:"secretRef"`
}

func (HelmReleaseSpecKubeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfig)(nil)).Elem()
}

func (i HelmReleaseSpecKubeConfigArgs) ToHelmReleaseSpecKubeConfigOutput() HelmReleaseSpecKubeConfigOutput {
	return i.ToHelmReleaseSpecKubeConfigOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigArgs) ToHelmReleaseSpecKubeConfigOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigOutput)
}

func (i HelmReleaseSpecKubeConfigArgs) ToHelmReleaseSpecKubeConfigPtrOutput() HelmReleaseSpecKubeConfigPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigArgs) ToHelmReleaseSpecKubeConfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigOutput).ToHelmReleaseSpecKubeConfigPtrOutputWithContext(ctx)
}

// HelmReleaseSpecKubeConfigPtrInput is an input type that accepts HelmReleaseSpecKubeConfigArgs, HelmReleaseSpecKubeConfigPtr and HelmReleaseSpecKubeConfigPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigPtrInput` via:
//
//	        HelmReleaseSpecKubeConfigArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecKubeConfigPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigPtrOutput() HelmReleaseSpecKubeConfigPtrOutput
	ToHelmReleaseSpecKubeConfigPtrOutputWithContext(context.Context) HelmReleaseSpecKubeConfigPtrOutput
}

type helmReleaseSpecKubeConfigPtrType HelmReleaseSpecKubeConfigArgs

func HelmReleaseSpecKubeConfigPtr(v *HelmReleaseSpecKubeConfigArgs) HelmReleaseSpecKubeConfigPtrInput {
	return (*helmReleaseSpecKubeConfigPtrType)(v)
}

func (*helmReleaseSpecKubeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfig)(nil)).Elem()
}

func (i *helmReleaseSpecKubeConfigPtrType) ToHelmReleaseSpecKubeConfigPtrOutput() HelmReleaseSpecKubeConfigPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecKubeConfigPtrType) ToHelmReleaseSpecKubeConfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster.
// When used in combination with HelmReleaseSpec.ServiceAccountName,
// forces the controller to act on behalf of that Service Account at the
// target cluster.
// If the --default-service-account flag is set, its value will be used as
// a controller level fallback for when HelmReleaseSpec.ServiceAccountName
// is empty.
type HelmReleaseSpecKubeConfigOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfig)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigOutput) ToHelmReleaseSpecKubeConfigOutput() HelmReleaseSpecKubeConfigOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigOutput) ToHelmReleaseSpecKubeConfigOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigOutput) ToHelmReleaseSpecKubeConfigPtrOutput() HelmReleaseSpecKubeConfigPtrOutput {
	return o.ToHelmReleaseSpecKubeConfigPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecKubeConfigOutput) ToHelmReleaseSpecKubeConfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecKubeConfig) *HelmReleaseSpecKubeConfig {
		return &v
	}).(HelmReleaseSpecKubeConfigPtrOutput)
}

func (o HelmReleaseSpecKubeConfigOutput) SecretRef() HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeConfig) *HelmReleaseSpecKubeConfigSecretRef { return v.SecretRef }).(HelmReleaseSpecKubeConfigSecretRefPtrOutput)
}

type HelmReleaseSpecKubeConfigPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfig)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigPtrOutput) ToHelmReleaseSpecKubeConfigPtrOutput() HelmReleaseSpecKubeConfigPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigPtrOutput) ToHelmReleaseSpecKubeConfigPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigPtrOutput) Elem() HelmReleaseSpecKubeConfigOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfig) HelmReleaseSpecKubeConfig {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecKubeConfig
		return ret
	}).(HelmReleaseSpecKubeConfigOutput)
}

func (o HelmReleaseSpecKubeConfigPtrOutput) SecretRef() HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfig) *HelmReleaseSpecKubeConfigSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmReleaseSpecKubeConfigSecretRefPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster.
// When used in combination with HelmReleaseSpec.ServiceAccountName,
// forces the controller to act on behalf of that Service Account at the
// target cluster.
// If the --default-service-account flag is set, its value will be used as
// a controller level fallback for when HelmReleaseSpec.ServiceAccountName
// is empty.
type HelmReleaseSpecKubeConfigPatch struct {
	SecretRef *HelmReleaseSpecKubeConfigSecretRefPatch `pulumi:"secretRef"`
}

// HelmReleaseSpecKubeConfigPatchInput is an input type that accepts HelmReleaseSpecKubeConfigPatchArgs and HelmReleaseSpecKubeConfigPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigPatchInput` via:
//
//	HelmReleaseSpecKubeConfigPatchArgs{...}
type HelmReleaseSpecKubeConfigPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigPatchOutput() HelmReleaseSpecKubeConfigPatchOutput
	ToHelmReleaseSpecKubeConfigPatchOutputWithContext(context.Context) HelmReleaseSpecKubeConfigPatchOutput
}

// KubeConfig for reconciling the HelmRelease on a remote cluster.
// When used in combination with HelmReleaseSpec.ServiceAccountName,
// forces the controller to act on behalf of that Service Account at the
// target cluster.
// If the --default-service-account flag is set, its value will be used as
// a controller level fallback for when HelmReleaseSpec.ServiceAccountName
// is empty.
type HelmReleaseSpecKubeConfigPatchArgs struct {
	SecretRef HelmReleaseSpecKubeConfigSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (HelmReleaseSpecKubeConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfigPatch)(nil)).Elem()
}

func (i HelmReleaseSpecKubeConfigPatchArgs) ToHelmReleaseSpecKubeConfigPatchOutput() HelmReleaseSpecKubeConfigPatchOutput {
	return i.ToHelmReleaseSpecKubeConfigPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigPatchArgs) ToHelmReleaseSpecKubeConfigPatchOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigPatchOutput)
}

func (i HelmReleaseSpecKubeConfigPatchArgs) ToHelmReleaseSpecKubeConfigPatchPtrOutput() HelmReleaseSpecKubeConfigPatchPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigPatchArgs) ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigPatchOutput).ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecKubeConfigPatchPtrInput is an input type that accepts HelmReleaseSpecKubeConfigPatchArgs, HelmReleaseSpecKubeConfigPatchPtr and HelmReleaseSpecKubeConfigPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigPatchPtrInput` via:
//
//	        HelmReleaseSpecKubeConfigPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecKubeConfigPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigPatchPtrOutput() HelmReleaseSpecKubeConfigPatchPtrOutput
	ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(context.Context) HelmReleaseSpecKubeConfigPatchPtrOutput
}

type helmReleaseSpecKubeConfigPatchPtrType HelmReleaseSpecKubeConfigPatchArgs

func HelmReleaseSpecKubeConfigPatchPtr(v *HelmReleaseSpecKubeConfigPatchArgs) HelmReleaseSpecKubeConfigPatchPtrInput {
	return (*helmReleaseSpecKubeConfigPatchPtrType)(v)
}

func (*helmReleaseSpecKubeConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfigPatch)(nil)).Elem()
}

func (i *helmReleaseSpecKubeConfigPatchPtrType) ToHelmReleaseSpecKubeConfigPatchPtrOutput() HelmReleaseSpecKubeConfigPatchPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecKubeConfigPatchPtrType) ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigPatchPtrOutput)
}

// KubeConfig for reconciling the HelmRelease on a remote cluster.
// When used in combination with HelmReleaseSpec.ServiceAccountName,
// forces the controller to act on behalf of that Service Account at the
// target cluster.
// If the --default-service-account flag is set, its value will be used as
// a controller level fallback for when HelmReleaseSpec.ServiceAccountName
// is empty.
type HelmReleaseSpecKubeConfigPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfigPatch)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigPatchOutput) ToHelmReleaseSpecKubeConfigPatchOutput() HelmReleaseSpecKubeConfigPatchOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigPatchOutput) ToHelmReleaseSpecKubeConfigPatchOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPatchOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigPatchOutput) ToHelmReleaseSpecKubeConfigPatchPtrOutput() HelmReleaseSpecKubeConfigPatchPtrOutput {
	return o.ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecKubeConfigPatchOutput) ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecKubeConfigPatch) *HelmReleaseSpecKubeConfigPatch {
		return &v
	}).(HelmReleaseSpecKubeConfigPatchPtrOutput)
}

func (o HelmReleaseSpecKubeConfigPatchOutput) SecretRef() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeConfigPatch) *HelmReleaseSpecKubeConfigSecretRefPatch { return v.SecretRef }).(HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput)
}

type HelmReleaseSpecKubeConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfigPatch)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigPatchPtrOutput) ToHelmReleaseSpecKubeConfigPatchPtrOutput() HelmReleaseSpecKubeConfigPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigPatchPtrOutput) ToHelmReleaseSpecKubeConfigPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigPatchPtrOutput) Elem() HelmReleaseSpecKubeConfigPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigPatch) HelmReleaseSpecKubeConfigPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecKubeConfigPatch
		return ret
	}).(HelmReleaseSpecKubeConfigPatchOutput)
}

func (o HelmReleaseSpecKubeConfigPatchPtrOutput) SecretRef() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigPatch) *HelmReleaseSpecKubeConfigSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput)
}

// SecretRef holds the name of a secret that contains a key with
// the kubeconfig file as the value. If no key is set, the key will default
// to 'value'.
// It is recommended that the kubeconfig is self-contained, and the secret
// is regularly updated if credentials such as a cloud-access-token expire.
// Cloud specific `cmd-path` auth helpers will not function without adding
// binaries and credentials to the Pod that is responsible for reconciling
// Kubernetes resources.
type HelmReleaseSpecKubeConfigSecretRef struct {
	// Key in the Secret, when not specified an implementation-specific default key is used.
	Key *string `pulumi:"key"`
	// Name of the Secret.
	Name *string `pulumi:"name"`
}

// HelmReleaseSpecKubeConfigSecretRefInput is an input type that accepts HelmReleaseSpecKubeConfigSecretRefArgs and HelmReleaseSpecKubeConfigSecretRefOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigSecretRefInput` via:
//
//	HelmReleaseSpecKubeConfigSecretRefArgs{...}
type HelmReleaseSpecKubeConfigSecretRefInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigSecretRefOutput() HelmReleaseSpecKubeConfigSecretRefOutput
	ToHelmReleaseSpecKubeConfigSecretRefOutputWithContext(context.Context) HelmReleaseSpecKubeConfigSecretRefOutput
}

// SecretRef holds the name of a secret that contains a key with
// the kubeconfig file as the value. If no key is set, the key will default
// to 'value'.
// It is recommended that the kubeconfig is self-contained, and the secret
// is regularly updated if credentials such as a cloud-access-token expire.
// Cloud specific `cmd-path` auth helpers will not function without adding
// binaries and credentials to the Pod that is responsible for reconciling
// Kubernetes resources.
type HelmReleaseSpecKubeConfigSecretRefArgs struct {
	// Key in the Secret, when not specified an implementation-specific default key is used.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the Secret.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmReleaseSpecKubeConfigSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRef)(nil)).Elem()
}

func (i HelmReleaseSpecKubeConfigSecretRefArgs) ToHelmReleaseSpecKubeConfigSecretRefOutput() HelmReleaseSpecKubeConfigSecretRefOutput {
	return i.ToHelmReleaseSpecKubeConfigSecretRefOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigSecretRefArgs) ToHelmReleaseSpecKubeConfigSecretRefOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigSecretRefOutput)
}

func (i HelmReleaseSpecKubeConfigSecretRefArgs) ToHelmReleaseSpecKubeConfigSecretRefPtrOutput() HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigSecretRefArgs) ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigSecretRefOutput).ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(ctx)
}

// HelmReleaseSpecKubeConfigSecretRefPtrInput is an input type that accepts HelmReleaseSpecKubeConfigSecretRefArgs, HelmReleaseSpecKubeConfigSecretRefPtr and HelmReleaseSpecKubeConfigSecretRefPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigSecretRefPtrInput` via:
//
//	        HelmReleaseSpecKubeConfigSecretRefArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecKubeConfigSecretRefPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigSecretRefPtrOutput() HelmReleaseSpecKubeConfigSecretRefPtrOutput
	ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(context.Context) HelmReleaseSpecKubeConfigSecretRefPtrOutput
}

type helmReleaseSpecKubeConfigSecretRefPtrType HelmReleaseSpecKubeConfigSecretRefArgs

func HelmReleaseSpecKubeConfigSecretRefPtr(v *HelmReleaseSpecKubeConfigSecretRefArgs) HelmReleaseSpecKubeConfigSecretRefPtrInput {
	return (*helmReleaseSpecKubeConfigSecretRefPtrType)(v)
}

func (*helmReleaseSpecKubeConfigSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfigSecretRef)(nil)).Elem()
}

func (i *helmReleaseSpecKubeConfigSecretRefPtrType) ToHelmReleaseSpecKubeConfigSecretRefPtrOutput() HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecKubeConfigSecretRefPtrType) ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigSecretRefPtrOutput)
}

// SecretRef holds the name of a secret that contains a key with
// the kubeconfig file as the value. If no key is set, the key will default
// to 'value'.
// It is recommended that the kubeconfig is self-contained, and the secret
// is regularly updated if credentials such as a cloud-access-token expire.
// Cloud specific `cmd-path` auth helpers will not function without adding
// binaries and credentials to the Pod that is responsible for reconciling
// Kubernetes resources.
type HelmReleaseSpecKubeConfigSecretRefOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRef)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigSecretRefOutput) ToHelmReleaseSpecKubeConfigSecretRefOutput() HelmReleaseSpecKubeConfigSecretRefOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefOutput) ToHelmReleaseSpecKubeConfigSecretRefOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefOutput) ToHelmReleaseSpecKubeConfigSecretRefPtrOutput() HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return o.ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecKubeConfigSecretRefOutput) ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecKubeConfigSecretRef) *HelmReleaseSpecKubeConfigSecretRef {
		return &v
	}).(HelmReleaseSpecKubeConfigSecretRefPtrOutput)
}

// Key in the Secret, when not specified an implementation-specific default key is used.
func (o HelmReleaseSpecKubeConfigSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeConfigSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the Secret.
func (o HelmReleaseSpecKubeConfigSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeConfigSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecKubeConfigSecretRefPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfigSecretRef)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigSecretRefPtrOutput) ToHelmReleaseSpecKubeConfigSecretRefPtrOutput() HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefPtrOutput) ToHelmReleaseSpecKubeConfigSecretRefPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefPtrOutput) Elem() HelmReleaseSpecKubeConfigSecretRefOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigSecretRef) HelmReleaseSpecKubeConfigSecretRef {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecKubeConfigSecretRef
		return ret
	}).(HelmReleaseSpecKubeConfigSecretRefOutput)
}

// Key in the Secret, when not specified an implementation-specific default key is used.
func (o HelmReleaseSpecKubeConfigSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the Secret.
func (o HelmReleaseSpecKubeConfigSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// SecretRef holds the name of a secret that contains a key with
// the kubeconfig file as the value. If no key is set, the key will default
// to 'value'.
// It is recommended that the kubeconfig is self-contained, and the secret
// is regularly updated if credentials such as a cloud-access-token expire.
// Cloud specific `cmd-path` auth helpers will not function without adding
// binaries and credentials to the Pod that is responsible for reconciling
// Kubernetes resources.
type HelmReleaseSpecKubeConfigSecretRefPatch struct {
	// Key in the Secret, when not specified an implementation-specific default key is used.
	Key *string `pulumi:"key"`
	// Name of the Secret.
	Name *string `pulumi:"name"`
}

// HelmReleaseSpecKubeConfigSecretRefPatchInput is an input type that accepts HelmReleaseSpecKubeConfigSecretRefPatchArgs and HelmReleaseSpecKubeConfigSecretRefPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigSecretRefPatchInput` via:
//
//	HelmReleaseSpecKubeConfigSecretRefPatchArgs{...}
type HelmReleaseSpecKubeConfigSecretRefPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigSecretRefPatchOutput() HelmReleaseSpecKubeConfigSecretRefPatchOutput
	ToHelmReleaseSpecKubeConfigSecretRefPatchOutputWithContext(context.Context) HelmReleaseSpecKubeConfigSecretRefPatchOutput
}

// SecretRef holds the name of a secret that contains a key with
// the kubeconfig file as the value. If no key is set, the key will default
// to 'value'.
// It is recommended that the kubeconfig is self-contained, and the secret
// is regularly updated if credentials such as a cloud-access-token expire.
// Cloud specific `cmd-path` auth helpers will not function without adding
// binaries and credentials to the Pod that is responsible for reconciling
// Kubernetes resources.
type HelmReleaseSpecKubeConfigSecretRefPatchArgs struct {
	// Key in the Secret, when not specified an implementation-specific default key is used.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the Secret.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (HelmReleaseSpecKubeConfigSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRefPatch)(nil)).Elem()
}

func (i HelmReleaseSpecKubeConfigSecretRefPatchArgs) ToHelmReleaseSpecKubeConfigSecretRefPatchOutput() HelmReleaseSpecKubeConfigSecretRefPatchOutput {
	return i.ToHelmReleaseSpecKubeConfigSecretRefPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigSecretRefPatchArgs) ToHelmReleaseSpecKubeConfigSecretRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigSecretRefPatchOutput)
}

func (i HelmReleaseSpecKubeConfigSecretRefPatchArgs) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutput() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecKubeConfigSecretRefPatchArgs) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigSecretRefPatchOutput).ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecKubeConfigSecretRefPatchPtrInput is an input type that accepts HelmReleaseSpecKubeConfigSecretRefPatchArgs, HelmReleaseSpecKubeConfigSecretRefPatchPtr and HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecKubeConfigSecretRefPatchPtrInput` via:
//
//	        HelmReleaseSpecKubeConfigSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecKubeConfigSecretRefPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutput() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput
	ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(context.Context) HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput
}

type helmReleaseSpecKubeConfigSecretRefPatchPtrType HelmReleaseSpecKubeConfigSecretRefPatchArgs

func HelmReleaseSpecKubeConfigSecretRefPatchPtr(v *HelmReleaseSpecKubeConfigSecretRefPatchArgs) HelmReleaseSpecKubeConfigSecretRefPatchPtrInput {
	return (*helmReleaseSpecKubeConfigSecretRefPatchPtrType)(v)
}

func (*helmReleaseSpecKubeConfigSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfigSecretRefPatch)(nil)).Elem()
}

func (i *helmReleaseSpecKubeConfigSecretRefPatchPtrType) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutput() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return i.ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecKubeConfigSecretRefPatchPtrType) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput)
}

// SecretRef holds the name of a secret that contains a key with
// the kubeconfig file as the value. If no key is set, the key will default
// to 'value'.
// It is recommended that the kubeconfig is self-contained, and the secret
// is regularly updated if credentials such as a cloud-access-token expire.
// Cloud specific `cmd-path` auth helpers will not function without adding
// binaries and credentials to the Pod that is responsible for reconciling
// Kubernetes resources.
type HelmReleaseSpecKubeConfigSecretRefPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchOutput) ToHelmReleaseSpecKubeConfigSecretRefPatchOutput() HelmReleaseSpecKubeConfigSecretRefPatchOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchOutput) ToHelmReleaseSpecKubeConfigSecretRefPatchOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPatchOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchOutput) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutput() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return o.ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchOutput) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecKubeConfigSecretRefPatch) *HelmReleaseSpecKubeConfigSecretRefPatch {
		return &v
	}).(HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput)
}

// Key in the Secret, when not specified an implementation-specific default key is used.
func (o HelmReleaseSpecKubeConfigSecretRefPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeConfigSecretRefPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the Secret.
func (o HelmReleaseSpecKubeConfigSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecKubeConfigSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecKubeConfigSecretRefPatch)(nil)).Elem()
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutput() HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput) ToHelmReleaseSpecKubeConfigSecretRefPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput) Elem() HelmReleaseSpecKubeConfigSecretRefPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigSecretRefPatch) HelmReleaseSpecKubeConfigSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecKubeConfigSecretRefPatch
		return ret
	}).(HelmReleaseSpecKubeConfigSecretRefPatchOutput)
}

// Key in the Secret, when not specified an implementation-specific default key is used.
func (o HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the Secret.
func (o HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecKubeConfigSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecPatch struct {
	Chart    *HelmReleaseSpecChartPatch    `pulumi:"chart"`
	ChartRef *HelmReleaseSpecChartRefPatch `pulumi:"chartRef"`
	// DependsOn may contain a meta.NamespacedObjectReference slice with
	// references to HelmRelease resources that must be ready before this HelmRelease
	// can be reconciled.
	DependsOn      []HelmReleaseSpecDependsOnPatch     `pulumi:"dependsOn"`
	DriftDetection *HelmReleaseSpecDriftDetectionPatch `pulumi:"driftDetection"`
	Install        *HelmReleaseSpecInstallPatch        `pulumi:"install"`
	// Interval at which to reconcile the Helm release.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval   *string                         `pulumi:"interval"`
	KubeConfig *HelmReleaseSpecKubeConfigPatch `pulumi:"kubeConfig"`
	// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
	// Use '0' for an unlimited number of revisions; defaults to '10'.
	MaxHistory *int `pulumi:"maxHistory"`
	// PersistentClient tells the controller to use a persistent Kubernetes
	// client for this release. When enabled, the client will be reused for the
	// duration of the reconciliation, instead of being created and destroyed
	// for each (step of a) Helm action.
	//
	// This can improve performance, but may cause issues with some Helm charts
	// that for example do create Custom Resource Definitions during installation
	// outside Helm's CRD lifecycle hooks, which are then not observed to be
	// available by e.g. post-install hooks.
	//
	// If not set, it defaults to true.
	PersistentClient *bool `pulumi:"persistentClient"`
	// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
	// of their definition.
	PostRenderers []HelmReleaseSpecPostRenderersPatch `pulumi:"postRenderers"`
	// ReleaseName used for the Helm release. Defaults to a composition of
	// '[TargetNamespace-]Name'.
	ReleaseName *string                       `pulumi:"releaseName"`
	Rollback    *HelmReleaseSpecRollbackPatch `pulumi:"rollback"`
	// The name of the Kubernetes service account to impersonate
	// when reconciling this HelmRelease.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// StorageNamespace used for the Helm storage.
	// Defaults to the namespace of the HelmRelease.
	StorageNamespace *string `pulumi:"storageNamespace"`
	// Suspend tells the controller to suspend reconciliation for this HelmRelease,
	// it does not apply to already started reconciliations. Defaults to false.
	Suspend *bool `pulumi:"suspend"`
	// TargetNamespace to target when performing operations for the HelmRelease.
	// Defaults to the namespace of the HelmRelease.
	TargetNamespace *string                   `pulumi:"targetNamespace"`
	Test            *HelmReleaseSpecTestPatch `pulumi:"test"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
	// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
	Timeout   *string                        `pulumi:"timeout"`
	Uninstall *HelmReleaseSpecUninstallPatch `pulumi:"uninstall"`
	Upgrade   *HelmReleaseSpecUpgradePatch   `pulumi:"upgrade"`
	// Values holds the values for this Helm release.
	Values map[string]interface{} `pulumi:"values"`
	// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
	// and information about how they should be merged.
	ValuesFrom []HelmReleaseSpecValuesFromPatch `pulumi:"valuesFrom"`
}

// HelmReleaseSpecPatchInput is an input type that accepts HelmReleaseSpecPatchArgs and HelmReleaseSpecPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPatchInput` via:
//
//	HelmReleaseSpecPatchArgs{...}
type HelmReleaseSpecPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPatchOutput() HelmReleaseSpecPatchOutput
	ToHelmReleaseSpecPatchOutputWithContext(context.Context) HelmReleaseSpecPatchOutput
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecPatchArgs struct {
	Chart    HelmReleaseSpecChartPatchPtrInput    `pulumi:"chart"`
	ChartRef HelmReleaseSpecChartRefPatchPtrInput `pulumi:"chartRef"`
	// DependsOn may contain a meta.NamespacedObjectReference slice with
	// references to HelmRelease resources that must be ready before this HelmRelease
	// can be reconciled.
	DependsOn      HelmReleaseSpecDependsOnPatchArrayInput    `pulumi:"dependsOn"`
	DriftDetection HelmReleaseSpecDriftDetectionPatchPtrInput `pulumi:"driftDetection"`
	Install        HelmReleaseSpecInstallPatchPtrInput        `pulumi:"install"`
	// Interval at which to reconcile the Helm release.
	// This interval is approximate and may be subject to jitter to ensure
	// efficient use of resources.
	Interval   pulumi.StringPtrInput                  `pulumi:"interval"`
	KubeConfig HelmReleaseSpecKubeConfigPatchPtrInput `pulumi:"kubeConfig"`
	// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
	// Use '0' for an unlimited number of revisions; defaults to '10'.
	MaxHistory pulumi.IntPtrInput `pulumi:"maxHistory"`
	// PersistentClient tells the controller to use a persistent Kubernetes
	// client for this release. When enabled, the client will be reused for the
	// duration of the reconciliation, instead of being created and destroyed
	// for each (step of a) Helm action.
	//
	// This can improve performance, but may cause issues with some Helm charts
	// that for example do create Custom Resource Definitions during installation
	// outside Helm's CRD lifecycle hooks, which are then not observed to be
	// available by e.g. post-install hooks.
	//
	// If not set, it defaults to true.
	PersistentClient pulumi.BoolPtrInput `pulumi:"persistentClient"`
	// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
	// of their definition.
	PostRenderers HelmReleaseSpecPostRenderersPatchArrayInput `pulumi:"postRenderers"`
	// ReleaseName used for the Helm release. Defaults to a composition of
	// '[TargetNamespace-]Name'.
	ReleaseName pulumi.StringPtrInput                `pulumi:"releaseName"`
	Rollback    HelmReleaseSpecRollbackPatchPtrInput `pulumi:"rollback"`
	// The name of the Kubernetes service account to impersonate
	// when reconciling this HelmRelease.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// StorageNamespace used for the Helm storage.
	// Defaults to the namespace of the HelmRelease.
	StorageNamespace pulumi.StringPtrInput `pulumi:"storageNamespace"`
	// Suspend tells the controller to suspend reconciliation for this HelmRelease,
	// it does not apply to already started reconciliations. Defaults to false.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
	// TargetNamespace to target when performing operations for the HelmRelease.
	// Defaults to the namespace of the HelmRelease.
	TargetNamespace pulumi.StringPtrInput            `pulumi:"targetNamespace"`
	Test            HelmReleaseSpecTestPatchPtrInput `pulumi:"test"`
	// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
	// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
	Timeout   pulumi.StringPtrInput                 `pulumi:"timeout"`
	Uninstall HelmReleaseSpecUninstallPatchPtrInput `pulumi:"uninstall"`
	Upgrade   HelmReleaseSpecUpgradePatchPtrInput   `pulumi:"upgrade"`
	// Values holds the values for this Helm release.
	Values pulumi.MapInput `pulumi:"values"`
	// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
	// and information about how they should be merged.
	ValuesFrom HelmReleaseSpecValuesFromPatchArrayInput `pulumi:"valuesFrom"`
}

func (HelmReleaseSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPatchArgs) ToHelmReleaseSpecPatchOutput() HelmReleaseSpecPatchOutput {
	return i.ToHelmReleaseSpecPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPatchArgs) ToHelmReleaseSpecPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPatchOutput)
}

func (i HelmReleaseSpecPatchArgs) ToHelmReleaseSpecPatchPtrOutput() HelmReleaseSpecPatchPtrOutput {
	return i.ToHelmReleaseSpecPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPatchArgs) ToHelmReleaseSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPatchOutput).ToHelmReleaseSpecPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPatchPtrInput is an input type that accepts HelmReleaseSpecPatchArgs, HelmReleaseSpecPatchPtr and HelmReleaseSpecPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPatchPtrInput` via:
//
//	        HelmReleaseSpecPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPatchPtrOutput() HelmReleaseSpecPatchPtrOutput
	ToHelmReleaseSpecPatchPtrOutputWithContext(context.Context) HelmReleaseSpecPatchPtrOutput
}

type helmReleaseSpecPatchPtrType HelmReleaseSpecPatchArgs

func HelmReleaseSpecPatchPtr(v *HelmReleaseSpecPatchArgs) HelmReleaseSpecPatchPtrInput {
	return (*helmReleaseSpecPatchPtrType)(v)
}

func (*helmReleaseSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPatch)(nil)).Elem()
}

func (i *helmReleaseSpecPatchPtrType) ToHelmReleaseSpecPatchPtrOutput() HelmReleaseSpecPatchPtrOutput {
	return i.ToHelmReleaseSpecPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPatchPtrType) ToHelmReleaseSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPatchPtrOutput)
}

// HelmReleaseSpec defines the desired state of a Helm release.
type HelmReleaseSpecPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPatchOutput) ToHelmReleaseSpecPatchOutput() HelmReleaseSpecPatchOutput {
	return o
}

func (o HelmReleaseSpecPatchOutput) ToHelmReleaseSpecPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPatchOutput {
	return o
}

func (o HelmReleaseSpecPatchOutput) ToHelmReleaseSpecPatchPtrOutput() HelmReleaseSpecPatchPtrOutput {
	return o.ToHelmReleaseSpecPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPatchOutput) ToHelmReleaseSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPatch) *HelmReleaseSpecPatch {
		return &v
	}).(HelmReleaseSpecPatchPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) Chart() HelmReleaseSpecChartPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecChartPatch { return v.Chart }).(HelmReleaseSpecChartPatchPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) ChartRef() HelmReleaseSpecChartRefPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecChartRefPatch { return v.ChartRef }).(HelmReleaseSpecChartRefPatchPtrOutput)
}

// DependsOn may contain a meta.NamespacedObjectReference slice with
// references to HelmRelease resources that must be ready before this HelmRelease
// can be reconciled.
func (o HelmReleaseSpecPatchOutput) DependsOn() HelmReleaseSpecDependsOnPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) []HelmReleaseSpecDependsOnPatch { return v.DependsOn }).(HelmReleaseSpecDependsOnPatchArrayOutput)
}

func (o HelmReleaseSpecPatchOutput) DriftDetection() HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecDriftDetectionPatch { return v.DriftDetection }).(HelmReleaseSpecDriftDetectionPatchPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) Install() HelmReleaseSpecInstallPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecInstallPatch { return v.Install }).(HelmReleaseSpecInstallPatchPtrOutput)
}

// Interval at which to reconcile the Helm release.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmReleaseSpecPatchOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) KubeConfig() HelmReleaseSpecKubeConfigPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecKubeConfigPatch { return v.KubeConfig }).(HelmReleaseSpecKubeConfigPatchPtrOutput)
}

// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
// Use '0' for an unlimited number of revisions; defaults to '10'.
func (o HelmReleaseSpecPatchOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *int { return v.MaxHistory }).(pulumi.IntPtrOutput)
}

// PersistentClient tells the controller to use a persistent Kubernetes
// client for this release. When enabled, the client will be reused for the
// duration of the reconciliation, instead of being created and destroyed
// for each (step of a) Helm action.
//
// This can improve performance, but may cause issues with some Helm charts
// that for example do create Custom Resource Definitions during installation
// outside Helm's CRD lifecycle hooks, which are then not observed to be
// available by e.g. post-install hooks.
//
// If not set, it defaults to true.
func (o HelmReleaseSpecPatchOutput) PersistentClient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *bool { return v.PersistentClient }).(pulumi.BoolPtrOutput)
}

// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
// of their definition.
func (o HelmReleaseSpecPatchOutput) PostRenderers() HelmReleaseSpecPostRenderersPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) []HelmReleaseSpecPostRenderersPatch { return v.PostRenderers }).(HelmReleaseSpecPostRenderersPatchArrayOutput)
}

// ReleaseName used for the Helm release. Defaults to a composition of
// '[TargetNamespace-]Name'.
func (o HelmReleaseSpecPatchOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *string { return v.ReleaseName }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) Rollback() HelmReleaseSpecRollbackPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecRollbackPatch { return v.Rollback }).(HelmReleaseSpecRollbackPatchPtrOutput)
}

// The name of the Kubernetes service account to impersonate
// when reconciling this HelmRelease.
func (o HelmReleaseSpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// StorageNamespace used for the Helm storage.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPatchOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *string { return v.StorageNamespace }).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend reconciliation for this HelmRelease,
// it does not apply to already started reconciliations. Defaults to false.
func (o HelmReleaseSpecPatchOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

// TargetNamespace to target when performing operations for the HelmRelease.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPatchOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) Test() HelmReleaseSpecTestPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecTestPatch { return v.Test }).(HelmReleaseSpecTestPatchPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
func (o HelmReleaseSpecPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) Uninstall() HelmReleaseSpecUninstallPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecUninstallPatch { return v.Uninstall }).(HelmReleaseSpecUninstallPatchPtrOutput)
}

func (o HelmReleaseSpecPatchOutput) Upgrade() HelmReleaseSpecUpgradePatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) *HelmReleaseSpecUpgradePatch { return v.Upgrade }).(HelmReleaseSpecUpgradePatchPtrOutput)
}

// Values holds the values for this Helm release.
func (o HelmReleaseSpecPatchOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) map[string]interface{} { return v.Values }).(pulumi.MapOutput)
}

// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
// and information about how they should be merged.
func (o HelmReleaseSpecPatchOutput) ValuesFrom() HelmReleaseSpecValuesFromPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPatch) []HelmReleaseSpecValuesFromPatch { return v.ValuesFrom }).(HelmReleaseSpecValuesFromPatchArrayOutput)
}

type HelmReleaseSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPatchPtrOutput) ToHelmReleaseSpecPatchPtrOutput() HelmReleaseSpecPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecPatchPtrOutput) ToHelmReleaseSpecPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecPatchPtrOutput) Elem() HelmReleaseSpecPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) HelmReleaseSpecPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPatch
		return ret
	}).(HelmReleaseSpecPatchOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) Chart() HelmReleaseSpecChartPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecChartPatch {
		if v == nil {
			return nil
		}
		return v.Chart
	}).(HelmReleaseSpecChartPatchPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) ChartRef() HelmReleaseSpecChartRefPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecChartRefPatch {
		if v == nil {
			return nil
		}
		return v.ChartRef
	}).(HelmReleaseSpecChartRefPatchPtrOutput)
}

// DependsOn may contain a meta.NamespacedObjectReference slice with
// references to HelmRelease resources that must be ready before this HelmRelease
// can be reconciled.
func (o HelmReleaseSpecPatchPtrOutput) DependsOn() HelmReleaseSpecDependsOnPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) []HelmReleaseSpecDependsOnPatch {
		if v == nil {
			return nil
		}
		return v.DependsOn
	}).(HelmReleaseSpecDependsOnPatchArrayOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) DriftDetection() HelmReleaseSpecDriftDetectionPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecDriftDetectionPatch {
		if v == nil {
			return nil
		}
		return v.DriftDetection
	}).(HelmReleaseSpecDriftDetectionPatchPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) Install() HelmReleaseSpecInstallPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecInstallPatch {
		if v == nil {
			return nil
		}
		return v.Install
	}).(HelmReleaseSpecInstallPatchPtrOutput)
}

// Interval at which to reconcile the Helm release.
// This interval is approximate and may be subject to jitter to ensure
// efficient use of resources.
func (o HelmReleaseSpecPatchPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) KubeConfig() HelmReleaseSpecKubeConfigPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecKubeConfigPatch {
		if v == nil {
			return nil
		}
		return v.KubeConfig
	}).(HelmReleaseSpecKubeConfigPatchPtrOutput)
}

// MaxHistory is the number of revisions saved by Helm for this HelmRelease.
// Use '0' for an unlimited number of revisions; defaults to '10'.
func (o HelmReleaseSpecPatchPtrOutput) MaxHistory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MaxHistory
	}).(pulumi.IntPtrOutput)
}

// PersistentClient tells the controller to use a persistent Kubernetes
// client for this release. When enabled, the client will be reused for the
// duration of the reconciliation, instead of being created and destroyed
// for each (step of a) Helm action.
//
// This can improve performance, but may cause issues with some Helm charts
// that for example do create Custom Resource Definitions during installation
// outside Helm's CRD lifecycle hooks, which are then not observed to be
// available by e.g. post-install hooks.
//
// If not set, it defaults to true.
func (o HelmReleaseSpecPatchPtrOutput) PersistentClient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PersistentClient
	}).(pulumi.BoolPtrOutput)
}

// PostRenderers holds an array of Helm PostRenderers, which will be applied in order
// of their definition.
func (o HelmReleaseSpecPatchPtrOutput) PostRenderers() HelmReleaseSpecPostRenderersPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) []HelmReleaseSpecPostRenderersPatch {
		if v == nil {
			return nil
		}
		return v.PostRenderers
	}).(HelmReleaseSpecPostRenderersPatchArrayOutput)
}

// ReleaseName used for the Helm release. Defaults to a composition of
// '[TargetNamespace-]Name'.
func (o HelmReleaseSpecPatchPtrOutput) ReleaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseName
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) Rollback() HelmReleaseSpecRollbackPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecRollbackPatch {
		if v == nil {
			return nil
		}
		return v.Rollback
	}).(HelmReleaseSpecRollbackPatchPtrOutput)
}

// The name of the Kubernetes service account to impersonate
// when reconciling this HelmRelease.
func (o HelmReleaseSpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// StorageNamespace used for the Helm storage.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPatchPtrOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageNamespace
	}).(pulumi.StringPtrOutput)
}

// Suspend tells the controller to suspend reconciliation for this HelmRelease,
// it does not apply to already started reconciliations. Defaults to false.
func (o HelmReleaseSpecPatchPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// TargetNamespace to target when performing operations for the HelmRelease.
// Defaults to the namespace of the HelmRelease.
func (o HelmReleaseSpecPatchPtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) Test() HelmReleaseSpecTestPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecTestPatch {
		if v == nil {
			return nil
		}
		return v.Test
	}).(HelmReleaseSpecTestPatchPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like Jobs
// for hooks) during the performance of a Helm action. Defaults to '5m0s'.
func (o HelmReleaseSpecPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) Uninstall() HelmReleaseSpecUninstallPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecUninstallPatch {
		if v == nil {
			return nil
		}
		return v.Uninstall
	}).(HelmReleaseSpecUninstallPatchPtrOutput)
}

func (o HelmReleaseSpecPatchPtrOutput) Upgrade() HelmReleaseSpecUpgradePatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) *HelmReleaseSpecUpgradePatch {
		if v == nil {
			return nil
		}
		return v.Upgrade
	}).(HelmReleaseSpecUpgradePatchPtrOutput)
}

// Values holds the values for this Helm release.
func (o HelmReleaseSpecPatchPtrOutput) Values() pulumi.MapOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.MapOutput)
}

// ValuesFrom holds references to resources containing Helm values for this HelmRelease,
// and information about how they should be merged.
func (o HelmReleaseSpecPatchPtrOutput) ValuesFrom() HelmReleaseSpecValuesFromPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPatch) []HelmReleaseSpecValuesFromPatch {
		if v == nil {
			return nil
		}
		return v.ValuesFrom
	}).(HelmReleaseSpecValuesFromPatchArrayOutput)
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostRenderers struct {
	Kustomize *HelmReleaseSpecPostRenderersKustomize `pulumi:"kustomize"`
}

// HelmReleaseSpecPostRenderersInput is an input type that accepts HelmReleaseSpecPostRenderersArgs and HelmReleaseSpecPostRenderersOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersInput` via:
//
//	HelmReleaseSpecPostRenderersArgs{...}
type HelmReleaseSpecPostRenderersInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersOutput() HelmReleaseSpecPostRenderersOutput
	ToHelmReleaseSpecPostRenderersOutputWithContext(context.Context) HelmReleaseSpecPostRenderersOutput
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostRenderersArgs struct {
	Kustomize HelmReleaseSpecPostRenderersKustomizePtrInput `pulumi:"kustomize"`
}

func (HelmReleaseSpecPostRenderersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderers)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersArgs) ToHelmReleaseSpecPostRenderersOutput() HelmReleaseSpecPostRenderersOutput {
	return i.ToHelmReleaseSpecPostRenderersOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersArgs) ToHelmReleaseSpecPostRenderersOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersOutput)
}

// HelmReleaseSpecPostRenderersArrayInput is an input type that accepts HelmReleaseSpecPostRenderersArray and HelmReleaseSpecPostRenderersArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersArrayInput` via:
//
//	HelmReleaseSpecPostRenderersArray{ HelmReleaseSpecPostRenderersArgs{...} }
type HelmReleaseSpecPostRenderersArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersArrayOutput() HelmReleaseSpecPostRenderersArrayOutput
	ToHelmReleaseSpecPostRenderersArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersArrayOutput
}

type HelmReleaseSpecPostRenderersArray []HelmReleaseSpecPostRenderersInput

func (HelmReleaseSpecPostRenderersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderers)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersArray) ToHelmReleaseSpecPostRenderersArrayOutput() HelmReleaseSpecPostRenderersArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersArray) ToHelmReleaseSpecPostRenderersArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersArrayOutput)
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostRenderersOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderers)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersOutput) ToHelmReleaseSpecPostRenderersOutput() HelmReleaseSpecPostRenderersOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersOutput) ToHelmReleaseSpecPostRenderersOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersOutput) Kustomize() HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderers) *HelmReleaseSpecPostRenderersKustomize { return v.Kustomize }).(HelmReleaseSpecPostRenderersKustomizePtrOutput)
}

type HelmReleaseSpecPostRenderersArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderers)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersArrayOutput) ToHelmReleaseSpecPostRenderersArrayOutput() HelmReleaseSpecPostRenderersArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersArrayOutput) ToHelmReleaseSpecPostRenderersArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderers {
		return vs[0].([]HelmReleaseSpecPostRenderers)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersOutput)
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostRenderersKustomize struct {
	// Images is a list of (image name, new name, new tag or digest)
	// for changing image names, tags or digests. This can also be achieved with a
	// patch, but this operator is simpler to specify.
	Images []HelmReleaseSpecPostRenderersKustomizeImages `pulumi:"images"`
	// Strategic merge and JSON patches, defined as inline YAML objects,
	// capable of targeting objects based on kind, label and annotation selectors.
	Patches []HelmReleaseSpecPostRenderersKustomizePatches `pulumi:"patches"`
	// JSON 6902 patches, defined as inline YAML objects.
	PatchesJson6902 []HelmReleaseSpecPostRenderersKustomizePatchesJson6902 `pulumi:"patchesJson6902"`
	// Strategic merge patches, defined as inline YAML objects.
	PatchesStrategicMerge []map[string]interface{} `pulumi:"patchesStrategicMerge"`
}

// HelmReleaseSpecPostRenderersKustomizeInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizeArgs and HelmReleaseSpecPostRenderersKustomizeOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizeInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizeArgs{...}
type HelmReleaseSpecPostRenderersKustomizeInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizeOutput() HelmReleaseSpecPostRenderersKustomizeOutput
	ToHelmReleaseSpecPostRenderersKustomizeOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizeOutput
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostRenderersKustomizeArgs struct {
	// Images is a list of (image name, new name, new tag or digest)
	// for changing image names, tags or digests. This can also be achieved with a
	// patch, but this operator is simpler to specify.
	Images HelmReleaseSpecPostRenderersKustomizeImagesArrayInput `pulumi:"images"`
	// Strategic merge and JSON patches, defined as inline YAML objects,
	// capable of targeting objects based on kind, label and annotation selectors.
	Patches HelmReleaseSpecPostRenderersKustomizePatchesArrayInput `pulumi:"patches"`
	// JSON 6902 patches, defined as inline YAML objects.
	PatchesJson6902 HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayInput `pulumi:"patchesJson6902"`
	// Strategic merge patches, defined as inline YAML objects.
	PatchesStrategicMerge pulumi.MapArrayInput `pulumi:"patchesStrategicMerge"`
}

func (HelmReleaseSpecPostRenderersKustomizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomize)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizeArgs) ToHelmReleaseSpecPostRenderersKustomizeOutput() HelmReleaseSpecPostRenderersKustomizeOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizeOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizeArgs) ToHelmReleaseSpecPostRenderersKustomizeOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizeOutput)
}

func (i HelmReleaseSpecPostRenderersKustomizeArgs) ToHelmReleaseSpecPostRenderersKustomizePtrOutput() HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizeArgs) ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizeOutput).ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostRenderersKustomizePtrInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizeArgs, HelmReleaseSpecPostRenderersKustomizePtr and HelmReleaseSpecPostRenderersKustomizePtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePtrInput` via:
//
//	        HelmReleaseSpecPostRenderersKustomizeArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPostRenderersKustomizePtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePtrOutput() HelmReleaseSpecPostRenderersKustomizePtrOutput
	ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePtrOutput
}

type helmReleaseSpecPostRenderersKustomizePtrType HelmReleaseSpecPostRenderersKustomizeArgs

func HelmReleaseSpecPostRenderersKustomizePtr(v *HelmReleaseSpecPostRenderersKustomizeArgs) HelmReleaseSpecPostRenderersKustomizePtrInput {
	return (*helmReleaseSpecPostRenderersKustomizePtrType)(v)
}

func (*helmReleaseSpecPostRenderersKustomizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomize)(nil)).Elem()
}

func (i *helmReleaseSpecPostRenderersKustomizePtrType) ToHelmReleaseSpecPostRenderersKustomizePtrOutput() HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostRenderersKustomizePtrType) ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePtrOutput)
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostRenderersKustomizeOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomize)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizeOutput) ToHelmReleaseSpecPostRenderersKustomizeOutput() HelmReleaseSpecPostRenderersKustomizeOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeOutput) ToHelmReleaseSpecPostRenderersKustomizeOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeOutput) ToHelmReleaseSpecPostRenderersKustomizePtrOutput() HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return o.ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostRenderersKustomizeOutput) ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostRenderersKustomize) *HelmReleaseSpecPostRenderersKustomize {
		return &v
	}).(HelmReleaseSpecPostRenderersKustomizePtrOutput)
}

// Images is a list of (image name, new name, new tag or digest)
// for changing image names, tags or digests. This can also be achieved with a
// patch, but this operator is simpler to specify.
func (o HelmReleaseSpecPostRenderersKustomizeOutput) Images() HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomize) []HelmReleaseSpecPostRenderersKustomizeImages {
		return v.Images
	}).(HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput)
}

// Strategic merge and JSON patches, defined as inline YAML objects,
// capable of targeting objects based on kind, label and annotation selectors.
func (o HelmReleaseSpecPostRenderersKustomizeOutput) Patches() HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomize) []HelmReleaseSpecPostRenderersKustomizePatches {
		return v.Patches
	}).(HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput)
}

// JSON 6902 patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizeOutput) PatchesJson6902() HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomize) []HelmReleaseSpecPostRenderersKustomizePatchesJson6902 {
		return v.PatchesJson6902
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput)
}

// Strategic merge patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizeOutput) PatchesStrategicMerge() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomize) []map[string]interface{} { return v.PatchesStrategicMerge }).(pulumi.MapArrayOutput)
}

type HelmReleaseSpecPostRenderersKustomizePtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomize)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) ToHelmReleaseSpecPostRenderersKustomizePtrOutput() HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) ToHelmReleaseSpecPostRenderersKustomizePtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) Elem() HelmReleaseSpecPostRenderersKustomizeOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomize) HelmReleaseSpecPostRenderersKustomize {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostRenderersKustomize
		return ret
	}).(HelmReleaseSpecPostRenderersKustomizeOutput)
}

// Images is a list of (image name, new name, new tag or digest)
// for changing image names, tags or digests. This can also be achieved with a
// patch, but this operator is simpler to specify.
func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) Images() HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomize) []HelmReleaseSpecPostRenderersKustomizeImages {
		if v == nil {
			return nil
		}
		return v.Images
	}).(HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput)
}

// Strategic merge and JSON patches, defined as inline YAML objects,
// capable of targeting objects based on kind, label and annotation selectors.
func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) Patches() HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomize) []HelmReleaseSpecPostRenderersKustomizePatches {
		if v == nil {
			return nil
		}
		return v.Patches
	}).(HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput)
}

// JSON 6902 patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) PatchesJson6902() HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomize) []HelmReleaseSpecPostRenderersKustomizePatchesJson6902 {
		if v == nil {
			return nil
		}
		return v.PatchesJson6902
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput)
}

// Strategic merge patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizePtrOutput) PatchesStrategicMerge() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomize) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PatchesStrategicMerge
	}).(pulumi.MapArrayOutput)
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostRenderersKustomizeImages struct {
	// Digest is the value used to replace the original image tag.
	// If digest is present NewTag value is ignored.
	Digest *string `pulumi:"digest"`
	// Name is a tag-less image name.
	Name *string `pulumi:"name"`
	// NewName is the value used to replace the original name.
	NewName *string `pulumi:"newName"`
	// NewTag is the value used to replace the original tag.
	NewTag *string `pulumi:"newTag"`
}

// HelmReleaseSpecPostRenderersKustomizeImagesInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizeImagesArgs and HelmReleaseSpecPostRenderersKustomizeImagesOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizeImagesInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizeImagesArgs{...}
type HelmReleaseSpecPostRenderersKustomizeImagesInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizeImagesOutput() HelmReleaseSpecPostRenderersKustomizeImagesOutput
	ToHelmReleaseSpecPostRenderersKustomizeImagesOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizeImagesOutput
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostRenderersKustomizeImagesArgs struct {
	// Digest is the value used to replace the original image tag.
	// If digest is present NewTag value is ignored.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is a tag-less image name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NewName is the value used to replace the original name.
	NewName pulumi.StringPtrInput `pulumi:"newName"`
	// NewTag is the value used to replace the original tag.
	NewTag pulumi.StringPtrInput `pulumi:"newTag"`
}

func (HelmReleaseSpecPostRenderersKustomizeImagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImages)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesArgs) ToHelmReleaseSpecPostRenderersKustomizeImagesOutput() HelmReleaseSpecPostRenderersKustomizeImagesOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizeImagesOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesArgs) ToHelmReleaseSpecPostRenderersKustomizeImagesOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizeImagesOutput)
}

// HelmReleaseSpecPostRenderersKustomizeImagesArrayInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizeImagesArray and HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizeImagesArrayInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizeImagesArray{ HelmReleaseSpecPostRenderersKustomizeImagesArgs{...} }
type HelmReleaseSpecPostRenderersKustomizeImagesArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutput() HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput
	ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput
}

type HelmReleaseSpecPostRenderersKustomizeImagesArray []HelmReleaseSpecPostRenderersKustomizeImagesInput

func (HelmReleaseSpecPostRenderersKustomizeImagesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizeImages)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesArray) ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutput() HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesArray) ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput)
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostRenderersKustomizeImagesOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizeImagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImages)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesOutput() HelmReleaseSpecPostRenderersKustomizeImagesOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesOutput {
	return o
}

// Digest is the value used to replace the original image tag.
// If digest is present NewTag value is ignored.
func (o HelmReleaseSpecPostRenderersKustomizeImagesOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImages) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is a tag-less image name.
func (o HelmReleaseSpecPostRenderersKustomizeImagesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImages) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NewName is the value used to replace the original name.
func (o HelmReleaseSpecPostRenderersKustomizeImagesOutput) NewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImages) *string { return v.NewName }).(pulumi.StringPtrOutput)
}

// NewTag is the value used to replace the original tag.
func (o HelmReleaseSpecPostRenderersKustomizeImagesOutput) NewTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImages) *string { return v.NewTag }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizeImages)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutput() HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersKustomizeImagesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersKustomizeImages {
		return vs[0].([]HelmReleaseSpecPostRenderersKustomizeImages)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersKustomizeImagesOutput)
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostRenderersKustomizeImagesPatch struct {
	// Digest is the value used to replace the original image tag.
	// If digest is present NewTag value is ignored.
	Digest *string `pulumi:"digest"`
	// Name is a tag-less image name.
	Name *string `pulumi:"name"`
	// NewName is the value used to replace the original name.
	NewName *string `pulumi:"newName"`
	// NewTag is the value used to replace the original tag.
	NewTag *string `pulumi:"newTag"`
}

// HelmReleaseSpecPostRenderersKustomizeImagesPatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs and HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizeImagesPatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizeImagesPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutput() HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput
	ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs struct {
	// Digest is the value used to replace the original image tag.
	// If digest is present NewTag value is ignored.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// Name is a tag-less image name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// NewName is the value used to replace the original name.
	NewName pulumi.StringPtrInput `pulumi:"newName"`
	// NewTag is the value used to replace the original tag.
	NewTag pulumi.StringPtrInput `pulumi:"newTag"`
}

func (HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImagesPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutput() HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput)
}

// HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizeImagesPatchArray and HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizeImagesPatchArray{ HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs{...} }
type HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput() HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput
	ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput
}

type HelmReleaseSpecPostRenderersKustomizeImagesPatchArray []HelmReleaseSpecPostRenderersKustomizeImagesPatchInput

func (HelmReleaseSpecPostRenderersKustomizeImagesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizeImagesPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesPatchArray) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput() HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizeImagesPatchArray) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput)
}

// Image contains an image name, a new name, a new tag or digest, which will replace the original name and tag.
type HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImagesPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutput() HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput {
	return o
}

// Digest is the value used to replace the original image tag.
// If digest is present NewTag value is ignored.
func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImagesPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// Name is a tag-less image name.
func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImagesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// NewName is the value used to replace the original name.
func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) NewName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImagesPatch) *string { return v.NewName }).(pulumi.StringPtrOutput)
}

// NewTag is the value used to replace the original tag.
func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput) NewTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizeImagesPatch) *string { return v.NewTag }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizeImagesPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput() HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput) ToHelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersKustomizeImagesPatch {
		return vs[0].([]HelmReleaseSpecPostRenderersKustomizeImagesPatch)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput)
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostRenderersKustomizePatch struct {
	// Images is a list of (image name, new name, new tag or digest)
	// for changing image names, tags or digests. This can also be achieved with a
	// patch, but this operator is simpler to specify.
	Images []HelmReleaseSpecPostRenderersKustomizeImagesPatch `pulumi:"images"`
	// Strategic merge and JSON patches, defined as inline YAML objects,
	// capable of targeting objects based on kind, label and annotation selectors.
	Patches []HelmReleaseSpecPostRenderersKustomizePatchesPatch `pulumi:"patches"`
	// JSON 6902 patches, defined as inline YAML objects.
	PatchesJson6902 []HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch `pulumi:"patchesJson6902"`
	// Strategic merge patches, defined as inline YAML objects.
	PatchesStrategicMerge []map[string]interface{} `pulumi:"patchesStrategicMerge"`
}

// HelmReleaseSpecPostRenderersKustomizePatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchArgs and HelmReleaseSpecPostRenderersKustomizePatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchOutput() HelmReleaseSpecPostRenderersKustomizePatchOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchOutput
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostRenderersKustomizePatchArgs struct {
	// Images is a list of (image name, new name, new tag or digest)
	// for changing image names, tags or digests. This can also be achieved with a
	// patch, but this operator is simpler to specify.
	Images HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayInput `pulumi:"images"`
	// Strategic merge and JSON patches, defined as inline YAML objects,
	// capable of targeting objects based on kind, label and annotation selectors.
	Patches HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayInput `pulumi:"patches"`
	// JSON 6902 patches, defined as inline YAML objects.
	PatchesJson6902 HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayInput `pulumi:"patchesJson6902"`
	// Strategic merge patches, defined as inline YAML objects.
	PatchesStrategicMerge pulumi.MapArrayInput `pulumi:"patchesStrategicMerge"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchOutput() HelmReleaseSpecPostRenderersKustomizePatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchOutput)
}

func (i HelmReleaseSpecPostRenderersKustomizePatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchOutput).ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostRenderersKustomizePatchPtrInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchArgs, HelmReleaseSpecPostRenderersKustomizePatchPtr and HelmReleaseSpecPostRenderersKustomizePatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchPtrInput` via:
//
//	        HelmReleaseSpecPostRenderersKustomizePatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPostRenderersKustomizePatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchPtrOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchPtrOutput
}

type helmReleaseSpecPostRenderersKustomizePatchPtrType HelmReleaseSpecPostRenderersKustomizePatchArgs

func HelmReleaseSpecPostRenderersKustomizePatchPtr(v *HelmReleaseSpecPostRenderersKustomizePatchArgs) HelmReleaseSpecPostRenderersKustomizePatchPtrInput {
	return (*helmReleaseSpecPostRenderersKustomizePatchPtrType)(v)
}

func (*helmReleaseSpecPostRenderersKustomizePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatch)(nil)).Elem()
}

func (i *helmReleaseSpecPostRenderersKustomizePatchPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostRenderersKustomizePatchPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchPtrOutput)
}

// Kustomization to apply as PostRenderer.
type HelmReleaseSpecPostRenderersKustomizePatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchOutput() HelmReleaseSpecPostRenderersKustomizePatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return o.ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostRenderersKustomizePatch) *HelmReleaseSpecPostRenderersKustomizePatch {
		return &v
	}).(HelmReleaseSpecPostRenderersKustomizePatchPtrOutput)
}

// Images is a list of (image name, new name, new tag or digest)
// for changing image names, tags or digests. This can also be achieved with a
// patch, but this operator is simpler to specify.
func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) Images() HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatch) []HelmReleaseSpecPostRenderersKustomizeImagesPatch {
		return v.Images
	}).(HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput)
}

// Strategic merge and JSON patches, defined as inline YAML objects,
// capable of targeting objects based on kind, label and annotation selectors.
func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) Patches() HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatch) []HelmReleaseSpecPostRenderersKustomizePatchesPatch {
		return v.Patches
	}).(HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput)
}

// JSON 6902 patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) PatchesJson6902() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatch) []HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch {
		return v.PatchesJson6902
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput)
}

// Strategic merge patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchOutput) PatchesStrategicMerge() pulumi.MapArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatch) []map[string]interface{} {
		return v.PatchesStrategicMerge
	}).(pulumi.MapArrayOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) Elem() HelmReleaseSpecPostRenderersKustomizePatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatch) HelmReleaseSpecPostRenderersKustomizePatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostRenderersKustomizePatch
		return ret
	}).(HelmReleaseSpecPostRenderersKustomizePatchOutput)
}

// Images is a list of (image name, new name, new tag or digest)
// for changing image names, tags or digests. This can also be achieved with a
// patch, but this operator is simpler to specify.
func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) Images() HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatch) []HelmReleaseSpecPostRenderersKustomizeImagesPatch {
		if v == nil {
			return nil
		}
		return v.Images
	}).(HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput)
}

// Strategic merge and JSON patches, defined as inline YAML objects,
// capable of targeting objects based on kind, label and annotation selectors.
func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) Patches() HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatch) []HelmReleaseSpecPostRenderersKustomizePatchesPatch {
		if v == nil {
			return nil
		}
		return v.Patches
	}).(HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput)
}

// JSON 6902 patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) PatchesJson6902() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatch) []HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch {
		if v == nil {
			return nil
		}
		return v.PatchesJson6902
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput)
}

// Strategic merge patches, defined as inline YAML objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchPtrOutput) PatchesStrategicMerge() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatch) []map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PatchesStrategicMerge
	}).(pulumi.MapArrayOutput)
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should
// be applied to.
type HelmReleaseSpecPostRenderersKustomizePatches struct {
	// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
	// an array of operation objects.
	Patch  *string                                             `pulumi:"patch"`
	Target *HelmReleaseSpecPostRenderersKustomizePatchesTarget `pulumi:"target"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesArgs and HelmReleaseSpecPostRenderersKustomizePatchesOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesOutput() HelmReleaseSpecPostRenderersKustomizePatchesOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesOutput
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should
// be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesArgs struct {
	// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
	// an array of operation objects.
	Patch  pulumi.StringPtrInput                                      `pulumi:"patch"`
	Target HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrInput `pulumi:"target"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatches)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesOutput() HelmReleaseSpecPostRenderersKustomizePatchesOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesOutput)
}

// HelmReleaseSpecPostRenderersKustomizePatchesArrayInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesArray and HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesArrayInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesArray{ HelmReleaseSpecPostRenderersKustomizePatchesArgs{...} }
type HelmReleaseSpecPostRenderersKustomizePatchesArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput
}

type HelmReleaseSpecPostRenderersKustomizePatchesArray []HelmReleaseSpecPostRenderersKustomizePatchesInput

func (HelmReleaseSpecPostRenderersKustomizePatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatches)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesArray) ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesArray) ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput)
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should
// be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatches)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesOutput() HelmReleaseSpecPostRenderersKustomizePatchesOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesOutput {
	return o
}

// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
// an array of operation objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchesOutput) Patch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatches) *string { return v.Patch }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesOutput) Target() HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatches) *HelmReleaseSpecPostRenderersKustomizePatchesTarget {
		return v.Target
	}).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatches)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersKustomizePatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersKustomizePatches {
		return vs[0].([]HelmReleaseSpecPostRenderersKustomizePatches)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersKustomizePatchesOutput)
}

// JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902 struct {
	// Patch contains the JSON6902 patch document with an array of operation objects.
	Patch  []HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch `pulumi:"patch"`
	Target *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target `pulumi:"target"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902Input is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args and HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902Input` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args{...}
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902Input interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902Output() HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902OutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output
}

// JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args struct {
	// Patch contains the JSON6902 patch document with an array of operation objects.
	Patch  HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayInput `pulumi:"patch"`
	Target HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrInput  `pulumi:"target"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902Output() HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902OutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902OutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output)
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array and HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array{ HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args{...} }
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput
}

type HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array []HelmReleaseSpecPostRenderersKustomizePatchesJson6902Input

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatchesJson6902)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput)
}

// JSON6902Patch contains a JSON6902 patch and the target the patch should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902Output() HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902OutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output {
	return o
}

// Patch contains the JSON6902 patch document with an array of operation objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output) Patch() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902) []HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch {
		return v.Patch
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput)
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output) Target() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902) *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target {
		return v.Target
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatchesJson6902)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersKustomizePatchesJson6902 {
		return vs[0].([]HelmReleaseSpecPostRenderersKustomizePatchesJson6902)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output)
}

// JSON6902 is a JSON6902 operation object.
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch struct {
	// From contains a JSON-pointer value that references a location within the target document where the operation is
	// performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	From *string `pulumi:"from"`
	// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
	// "test".
	// https://datatracker.ietf.org/doc/html/rfc6902#section-4
	Op *string `pulumi:"op"`
	// Path contains the JSON-pointer value that references a location within the target document where the operation
	// is performed. The meaning of the value depends on the value of Op.
	Path *string `pulumi:"path"`
	// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
	// account by all operations.
	Value map[string]interface{} `pulumi:"value"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs and HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput
}

// JSON6902 is a JSON6902 operation object.
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs struct {
	// From contains a JSON-pointer value that references a location within the target document where the operation is
	// performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	From pulumi.StringPtrInput `pulumi:"from"`
	// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
	// "test".
	// https://datatracker.ietf.org/doc/html/rfc6902#section-4
	Op pulumi.StringPtrInput `pulumi:"op"`
	// Path contains the JSON-pointer value that references a location within the target document where the operation
	// is performed. The meaning of the value depends on the value of Op.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
	// account by all operations.
	Value pulumi.MapInput `pulumi:"value"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput)
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray and HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray{ HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs{...} }
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput
}

type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray []HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchInput

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput)
}

// JSON6902 is a JSON6902 operation object.
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput {
	return o
}

// From contains a JSON-pointer value that references a location within the target document where the operation is
// performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch) *string { return v.From }).(pulumi.StringPtrOutput)
}

// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
// "test".
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// Path contains the JSON-pointer value that references a location within the target document where the operation
// is performed. The meaning of the value depends on the value of Op.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
// account by all operations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch) map[string]interface{} {
		return v.Value
	}).(pulumi.MapOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch {
		return vs[0].([]HelmReleaseSpecPostRenderersKustomizePatchesJson6902Patch)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput)
}

// JSON6902 is a JSON6902 operation object.
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch struct {
	// From contains a JSON-pointer value that references a location within the target document where the operation is
	// performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	From *string `pulumi:"from"`
	// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
	// "test".
	// https://datatracker.ietf.org/doc/html/rfc6902#section-4
	Op *string `pulumi:"op"`
	// Path contains the JSON-pointer value that references a location within the target document where the operation
	// is performed. The meaning of the value depends on the value of Op.
	Path *string `pulumi:"path"`
	// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
	// account by all operations.
	Value map[string]interface{} `pulumi:"value"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs and HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput
}

// JSON6902 is a JSON6902 operation object.
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs struct {
	// From contains a JSON-pointer value that references a location within the target document where the operation is
	// performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
	From pulumi.StringPtrInput `pulumi:"from"`
	// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
	// "test".
	// https://datatracker.ietf.org/doc/html/rfc6902#section-4
	Op pulumi.StringPtrInput `pulumi:"op"`
	// Path contains the JSON-pointer value that references a location within the target document where the operation
	// is performed. The meaning of the value depends on the value of Op.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
	// account by all operations.
	Value pulumi.MapInput `pulumi:"value"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput)
}

// JSON6902 is a JSON6902 operation object.
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput {
	return o
}

// From contains a JSON-pointer value that references a location within the target document where the operation is
// performed. The meaning of the value depends on the value of Op, and is NOT taken into account by all operations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch) *string { return v.From }).(pulumi.StringPtrOutput)
}

// Op indicates the operation to perform. Its value MUST be one of "add", "remove", "replace", "move", "copy", or
// "test".
// https://datatracker.ietf.org/doc/html/rfc6902#section-4
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// Path contains the JSON-pointer value that references a location within the target document where the operation
// is performed. The meaning of the value depends on the value of Op.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Value contains a valid JSON structure. The meaning of the value depends on the value of Op, and is NOT taken into
// account by all operations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput) Value() pulumi.MapOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatch) map[string]interface{} {
		return v.Value
	}).(pulumi.MapOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs and HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput)
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput).ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs, HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtr and HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrInput` via:
//
//	        HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput
}

type helmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrType HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs

func HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtr(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrInput {
	return (*helmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrType)(v)
}

func (*helmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target)(nil)).Elem()
}

func (i *helmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return o.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target {
		return &v
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) Elem() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target
		return ret
	}).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesJson6902Target) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs and HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput {
	return o
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string {
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string {
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should
// be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesPatch struct {
	// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
	// an array of operation objects.
	Patch  *string                                                  `pulumi:"patch"`
	Target *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch `pulumi:"target"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesPatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs and HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesPatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should
// be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs struct {
	// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
	// an array of operation objects.
	Patch  pulumi.StringPtrInput                                           `pulumi:"patch"`
	Target HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrInput `pulumi:"target"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput)
}

// HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesPatchArray and HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesPatchArray{ HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs{...} }
type HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput
}

type HelmReleaseSpecPostRenderersKustomizePatchesPatchArray []HelmReleaseSpecPostRenderersKustomizePatchesPatchInput

func (HelmReleaseSpecPostRenderersKustomizePatchesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatchesPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesPatchArray) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesPatchArray) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput)
}

// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should
// be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput {
	return o
}

// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with
// an array of operation objects.
func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput) Patch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesPatch) *string { return v.Patch }).(pulumi.StringPtrOutput)
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput) Target() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesPatch) *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch {
		return v.Target
	}).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersKustomizePatchesPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput() HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersKustomizePatchesPatch {
		return vs[0].([]HelmReleaseSpecPostRenderersKustomizePatchesPatch)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesTarget struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesTargetInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs and HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesTargetInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesTargetInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTarget)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput)
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput).ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs, HelmReleaseSpecPostRenderersKustomizePatchesTargetPtr and HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrInput` via:
//
//	        HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput
}

type helmReleaseSpecPostRenderersKustomizePatchesTargetPtrType HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs

func HelmReleaseSpecPostRenderersKustomizePatchesTargetPtr(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs) HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrInput {
	return (*helmReleaseSpecPostRenderersKustomizePatchesTargetPtrType)(v)
}

func (*helmReleaseSpecPostRenderersKustomizePatchesTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatchesTarget)(nil)).Elem()
}

func (i *helmReleaseSpecPostRenderersKustomizePatchesTargetPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostRenderersKustomizePatchesTargetPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTarget)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return o.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *HelmReleaseSpecPostRenderersKustomizePatchesTarget {
		return &v
	}).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.AnnotationSelector }).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatchesTarget)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) Elem() HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) HelmReleaseSpecPostRenderersKustomizePatchesTarget {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostRenderersKustomizePatchesTarget
		return ret
	}).(HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTarget) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector *string `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group *string `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind *string `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector *string `pulumi:"labelSelector"`
	// Name to match resources with.
	Name *string `pulumi:"name"`
	// Namespace to select resources from.
	Namespace *string `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version *string `pulumi:"version"`
}

// HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs and HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchInput` via:
//
//	HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs{...}
type HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs struct {
	// AnnotationSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource annotations.
	AnnotationSelector pulumi.StringPtrInput `pulumi:"annotationSelector"`
	// Group is the API group to select resources from.
	// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind of the API Group to select resources from.
	// Together with Group and Version it is capable of unambiguously
	// identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// LabelSelector is a string that follows the label selection expression
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
	// It matches with the resource labels.
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// Name to match resources with.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace to select resources from.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Version of the API Group to select resources from.
	// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
	// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput)
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput).ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrInput is an input type that accepts HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs, HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtr and HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrInput` via:
//
//	        HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput
	ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput
}

type helmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrType HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs

func HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtr(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrInput {
	return (*helmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrType)(v)
}

func (*helmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch)(nil)).Elem()
}

func (i *helmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return i.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrType) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput)
}

// Target points to the resources that the patch document should be applied to.
type HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return o.ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch {
		return &v
	}).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.AnnotationSelector }).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) ToHelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) Elem() HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch
		return ret
	}).(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput)
}

// AnnotationSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource annotations.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) AnnotationSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationSelector
	}).(pulumi.StringPtrOutput)
}

// Group is the API group to select resources from.
// Together with Version and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind of the API Group to select resources from.
// Together with Group and Version it is capable of unambiguously
// identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// LabelSelector is a string that follows the label selection expression
// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api
// It matches with the resource labels.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(pulumi.StringPtrOutput)
}

// Name to match resources with.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace to select resources from.
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Version of the API Group to select resources from.
// Together with Group and Kind it is capable of unambiguously identifying and/or selecting resources.
// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
func (o HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecPostRenderersKustomizePatchesTargetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostRenderersPatch struct {
	Kustomize *HelmReleaseSpecPostRenderersKustomizePatch `pulumi:"kustomize"`
}

// HelmReleaseSpecPostRenderersPatchInput is an input type that accepts HelmReleaseSpecPostRenderersPatchArgs and HelmReleaseSpecPostRenderersPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersPatchInput` via:
//
//	HelmReleaseSpecPostRenderersPatchArgs{...}
type HelmReleaseSpecPostRenderersPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersPatchOutput() HelmReleaseSpecPostRenderersPatchOutput
	ToHelmReleaseSpecPostRenderersPatchOutputWithContext(context.Context) HelmReleaseSpecPostRenderersPatchOutput
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostRenderersPatchArgs struct {
	Kustomize HelmReleaseSpecPostRenderersKustomizePatchPtrInput `pulumi:"kustomize"`
}

func (HelmReleaseSpecPostRenderersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersPatchArgs) ToHelmReleaseSpecPostRenderersPatchOutput() HelmReleaseSpecPostRenderersPatchOutput {
	return i.ToHelmReleaseSpecPostRenderersPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersPatchArgs) ToHelmReleaseSpecPostRenderersPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersPatchOutput)
}

// HelmReleaseSpecPostRenderersPatchArrayInput is an input type that accepts HelmReleaseSpecPostRenderersPatchArray and HelmReleaseSpecPostRenderersPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecPostRenderersPatchArrayInput` via:
//
//	HelmReleaseSpecPostRenderersPatchArray{ HelmReleaseSpecPostRenderersPatchArgs{...} }
type HelmReleaseSpecPostRenderersPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecPostRenderersPatchArrayOutput() HelmReleaseSpecPostRenderersPatchArrayOutput
	ToHelmReleaseSpecPostRenderersPatchArrayOutputWithContext(context.Context) HelmReleaseSpecPostRenderersPatchArrayOutput
}

type HelmReleaseSpecPostRenderersPatchArray []HelmReleaseSpecPostRenderersPatchInput

func (HelmReleaseSpecPostRenderersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersPatch)(nil)).Elem()
}

func (i HelmReleaseSpecPostRenderersPatchArray) ToHelmReleaseSpecPostRenderersPatchArrayOutput() HelmReleaseSpecPostRenderersPatchArrayOutput {
	return i.ToHelmReleaseSpecPostRenderersPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecPostRenderersPatchArray) ToHelmReleaseSpecPostRenderersPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecPostRenderersPatchArrayOutput)
}

// PostRenderer contains a Helm PostRenderer specification.
type HelmReleaseSpecPostRenderersPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecPostRenderersPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersPatchOutput) ToHelmReleaseSpecPostRenderersPatchOutput() HelmReleaseSpecPostRenderersPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersPatchOutput) ToHelmReleaseSpecPostRenderersPatchOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersPatchOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersPatchOutput) Kustomize() HelmReleaseSpecPostRenderersKustomizePatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecPostRenderersPatch) *HelmReleaseSpecPostRenderersKustomizePatch {
		return v.Kustomize
	}).(HelmReleaseSpecPostRenderersKustomizePatchPtrOutput)
}

type HelmReleaseSpecPostRenderersPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecPostRenderersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecPostRenderersPatch)(nil)).Elem()
}

func (o HelmReleaseSpecPostRenderersPatchArrayOutput) ToHelmReleaseSpecPostRenderersPatchArrayOutput() HelmReleaseSpecPostRenderersPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersPatchArrayOutput) ToHelmReleaseSpecPostRenderersPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecPostRenderersPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecPostRenderersPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecPostRenderersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecPostRenderersPatch {
		return vs[0].([]HelmReleaseSpecPostRenderersPatch)[vs[1].(int)]
	}).(HelmReleaseSpecPostRenderersPatchOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollback struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// rollback action when it fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// rollback has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// rollback has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force *bool `pulumi:"force"`
	// Recreate performs pod restarts for the resource if applicable.
	Recreate *bool `pulumi:"recreate"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecRollbackInput is an input type that accepts HelmReleaseSpecRollbackArgs and HelmReleaseSpecRollbackOutput values.
// You can construct a concrete instance of `HelmReleaseSpecRollbackInput` via:
//
//	HelmReleaseSpecRollbackArgs{...}
type HelmReleaseSpecRollbackInput interface {
	pulumi.Input

	ToHelmReleaseSpecRollbackOutput() HelmReleaseSpecRollbackOutput
	ToHelmReleaseSpecRollbackOutputWithContext(context.Context) HelmReleaseSpecRollbackOutput
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackArgs struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// rollback action when it fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// rollback has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// rollback has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// Recreate performs pod restarts for the resource if applicable.
	Recreate pulumi.BoolPtrInput `pulumi:"recreate"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecRollbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecRollback)(nil)).Elem()
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackOutput() HelmReleaseSpecRollbackOutput {
	return i.ToHelmReleaseSpecRollbackOutputWithContext(context.Background())
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackOutput)
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return i.ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecRollbackArgs) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackOutput).ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx)
}

// HelmReleaseSpecRollbackPtrInput is an input type that accepts HelmReleaseSpecRollbackArgs, HelmReleaseSpecRollbackPtr and HelmReleaseSpecRollbackPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecRollbackPtrInput` via:
//
//	        HelmReleaseSpecRollbackArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecRollbackPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput
	ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Context) HelmReleaseSpecRollbackPtrOutput
}

type helmReleaseSpecRollbackPtrType HelmReleaseSpecRollbackArgs

func HelmReleaseSpecRollbackPtr(v *HelmReleaseSpecRollbackArgs) HelmReleaseSpecRollbackPtrInput {
	return (*helmReleaseSpecRollbackPtrType)(v)
}

func (*helmReleaseSpecRollbackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecRollback)(nil)).Elem()
}

func (i *helmReleaseSpecRollbackPtrType) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return i.ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecRollbackPtrType) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecRollbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecRollback)(nil)).Elem()
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackOutput() HelmReleaseSpecRollbackOutput {
	return o
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackOutput {
	return o
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return o.ToHelmReleaseSpecRollbackPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecRollbackOutput) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecRollback) *HelmReleaseSpecRollback {
		return &v
	}).(HelmReleaseSpecRollbackPtrOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// rollback action when it fails.
func (o HelmReleaseSpecRollbackOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecRollbackOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecRollbackOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// Recreate performs pod restarts for the resource if applicable.
func (o HelmReleaseSpecRollbackOutput) Recreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *bool { return v.Recreate }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecRollbackOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollback) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecRollbackPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecRollbackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecRollback)(nil)).Elem()
}

func (o HelmReleaseSpecRollbackPtrOutput) ToHelmReleaseSpecRollbackPtrOutput() HelmReleaseSpecRollbackPtrOutput {
	return o
}

func (o HelmReleaseSpecRollbackPtrOutput) ToHelmReleaseSpecRollbackPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPtrOutput {
	return o
}

func (o HelmReleaseSpecRollbackPtrOutput) Elem() HelmReleaseSpecRollbackOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) HelmReleaseSpecRollback {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecRollback
		return ret
	}).(HelmReleaseSpecRollbackOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// rollback action when it fails.
func (o HelmReleaseSpecRollbackPtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecRollbackPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecRollbackPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Recreate performs pod restarts for the resource if applicable.
func (o HelmReleaseSpecRollbackPtrOutput) Recreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *bool {
		if v == nil {
			return nil
		}
		return v.Recreate
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecRollbackPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollback) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackPatch struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// rollback action when it fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// rollback has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// rollback has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force *bool `pulumi:"force"`
	// Recreate performs pod restarts for the resource if applicable.
	Recreate *bool `pulumi:"recreate"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecRollbackPatchInput is an input type that accepts HelmReleaseSpecRollbackPatchArgs and HelmReleaseSpecRollbackPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecRollbackPatchInput` via:
//
//	HelmReleaseSpecRollbackPatchArgs{...}
type HelmReleaseSpecRollbackPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecRollbackPatchOutput() HelmReleaseSpecRollbackPatchOutput
	ToHelmReleaseSpecRollbackPatchOutputWithContext(context.Context) HelmReleaseSpecRollbackPatchOutput
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackPatchArgs struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// rollback action when it fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// rollback has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// rollback has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// Recreate performs pod restarts for the resource if applicable.
	Recreate pulumi.BoolPtrInput `pulumi:"recreate"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecRollbackPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecRollbackPatch)(nil)).Elem()
}

func (i HelmReleaseSpecRollbackPatchArgs) ToHelmReleaseSpecRollbackPatchOutput() HelmReleaseSpecRollbackPatchOutput {
	return i.ToHelmReleaseSpecRollbackPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecRollbackPatchArgs) ToHelmReleaseSpecRollbackPatchOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackPatchOutput)
}

func (i HelmReleaseSpecRollbackPatchArgs) ToHelmReleaseSpecRollbackPatchPtrOutput() HelmReleaseSpecRollbackPatchPtrOutput {
	return i.ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecRollbackPatchArgs) ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackPatchOutput).ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecRollbackPatchPtrInput is an input type that accepts HelmReleaseSpecRollbackPatchArgs, HelmReleaseSpecRollbackPatchPtr and HelmReleaseSpecRollbackPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecRollbackPatchPtrInput` via:
//
//	        HelmReleaseSpecRollbackPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecRollbackPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecRollbackPatchPtrOutput() HelmReleaseSpecRollbackPatchPtrOutput
	ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(context.Context) HelmReleaseSpecRollbackPatchPtrOutput
}

type helmReleaseSpecRollbackPatchPtrType HelmReleaseSpecRollbackPatchArgs

func HelmReleaseSpecRollbackPatchPtr(v *HelmReleaseSpecRollbackPatchArgs) HelmReleaseSpecRollbackPatchPtrInput {
	return (*helmReleaseSpecRollbackPatchPtrType)(v)
}

func (*helmReleaseSpecRollbackPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecRollbackPatch)(nil)).Elem()
}

func (i *helmReleaseSpecRollbackPatchPtrType) ToHelmReleaseSpecRollbackPatchPtrOutput() HelmReleaseSpecRollbackPatchPtrOutput {
	return i.ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecRollbackPatchPtrType) ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecRollbackPatchPtrOutput)
}

// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
type HelmReleaseSpecRollbackPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecRollbackPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecRollbackPatch)(nil)).Elem()
}

func (o HelmReleaseSpecRollbackPatchOutput) ToHelmReleaseSpecRollbackPatchOutput() HelmReleaseSpecRollbackPatchOutput {
	return o
}

func (o HelmReleaseSpecRollbackPatchOutput) ToHelmReleaseSpecRollbackPatchOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPatchOutput {
	return o
}

func (o HelmReleaseSpecRollbackPatchOutput) ToHelmReleaseSpecRollbackPatchPtrOutput() HelmReleaseSpecRollbackPatchPtrOutput {
	return o.ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecRollbackPatchOutput) ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecRollbackPatch) *HelmReleaseSpecRollbackPatch {
		return &v
	}).(HelmReleaseSpecRollbackPatchPtrOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// rollback action when it fails.
func (o HelmReleaseSpecRollbackPatchOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecRollbackPatchOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackPatchOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackPatchOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecRollbackPatchOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// Recreate performs pod restarts for the resource if applicable.
func (o HelmReleaseSpecRollbackPatchOutput) Recreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *bool { return v.Recreate }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecRollbackPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecRollbackPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecRollbackPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecRollbackPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecRollbackPatch)(nil)).Elem()
}

func (o HelmReleaseSpecRollbackPatchPtrOutput) ToHelmReleaseSpecRollbackPatchPtrOutput() HelmReleaseSpecRollbackPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecRollbackPatchPtrOutput) ToHelmReleaseSpecRollbackPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecRollbackPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecRollbackPatchPtrOutput) Elem() HelmReleaseSpecRollbackPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) HelmReleaseSpecRollbackPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecRollbackPatch
		return ret
	}).(HelmReleaseSpecRollbackPatchOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// rollback action when it fails.
func (o HelmReleaseSpecRollbackPatchPtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecRollbackPatchPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackPatchPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// rollback has been performed.
func (o HelmReleaseSpecRollbackPatchPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecRollbackPatchPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// Recreate performs pod restarts for the resource if applicable.
func (o HelmReleaseSpecRollbackPatchPtrOutput) Recreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Recreate
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm rollback action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecRollbackPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecRollbackPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTest struct {
	// Enable enables Helm test actions for this HelmRelease after an Helm install
	// or upgrade action has been performed.
	Enable *bool `pulumi:"enable"`
	// IgnoreFailures tells the controller to skip remediation when the Helm tests
	// are run but fail. Can be overwritten for tests run after install or upgrade
	// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
	IgnoreFailures *bool `pulumi:"ignoreFailures"`
	// Timeout is the time to wait for any individual Kubernetes operation during
	// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecTestInput is an input type that accepts HelmReleaseSpecTestArgs and HelmReleaseSpecTestOutput values.
// You can construct a concrete instance of `HelmReleaseSpecTestInput` via:
//
//	HelmReleaseSpecTestArgs{...}
type HelmReleaseSpecTestInput interface {
	pulumi.Input

	ToHelmReleaseSpecTestOutput() HelmReleaseSpecTestOutput
	ToHelmReleaseSpecTestOutputWithContext(context.Context) HelmReleaseSpecTestOutput
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestArgs struct {
	// Enable enables Helm test actions for this HelmRelease after an Helm install
	// or upgrade action has been performed.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// IgnoreFailures tells the controller to skip remediation when the Helm tests
	// are run but fail. Can be overwritten for tests run after install or upgrade
	// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
	IgnoreFailures pulumi.BoolPtrInput `pulumi:"ignoreFailures"`
	// Timeout is the time to wait for any individual Kubernetes operation during
	// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecTest)(nil)).Elem()
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestOutput() HelmReleaseSpecTestOutput {
	return i.ToHelmReleaseSpecTestOutputWithContext(context.Background())
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestOutputWithContext(ctx context.Context) HelmReleaseSpecTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestOutput)
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return i.ToHelmReleaseSpecTestPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecTestArgs) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestOutput).ToHelmReleaseSpecTestPtrOutputWithContext(ctx)
}

// HelmReleaseSpecTestPtrInput is an input type that accepts HelmReleaseSpecTestArgs, HelmReleaseSpecTestPtr and HelmReleaseSpecTestPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecTestPtrInput` via:
//
//	        HelmReleaseSpecTestArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecTestPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput
	ToHelmReleaseSpecTestPtrOutputWithContext(context.Context) HelmReleaseSpecTestPtrOutput
}

type helmReleaseSpecTestPtrType HelmReleaseSpecTestArgs

func HelmReleaseSpecTestPtr(v *HelmReleaseSpecTestArgs) HelmReleaseSpecTestPtrInput {
	return (*helmReleaseSpecTestPtrType)(v)
}

func (*helmReleaseSpecTestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecTest)(nil)).Elem()
}

func (i *helmReleaseSpecTestPtrType) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return i.ToHelmReleaseSpecTestPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecTestPtrType) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecTest)(nil)).Elem()
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestOutput() HelmReleaseSpecTestOutput {
	return o
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestOutputWithContext(ctx context.Context) HelmReleaseSpecTestOutput {
	return o
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return o.ToHelmReleaseSpecTestPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecTestOutput) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecTest) *HelmReleaseSpecTest {
		return &v
	}).(HelmReleaseSpecTestPtrOutput)
}

// Enable enables Helm test actions for this HelmRelease after an Helm install
// or upgrade action has been performed.
func (o HelmReleaseSpecTestOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTest) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// IgnoreFailures tells the controller to skip remediation when the Helm tests
// are run but fail. Can be overwritten for tests run after install or upgrade
// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
func (o HelmReleaseSpecTestOutput) IgnoreFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTest) *bool { return v.IgnoreFailures }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation during
// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecTestOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTest) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecTestPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecTestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecTest)(nil)).Elem()
}

func (o HelmReleaseSpecTestPtrOutput) ToHelmReleaseSpecTestPtrOutput() HelmReleaseSpecTestPtrOutput {
	return o
}

func (o HelmReleaseSpecTestPtrOutput) ToHelmReleaseSpecTestPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPtrOutput {
	return o
}

func (o HelmReleaseSpecTestPtrOutput) Elem() HelmReleaseSpecTestOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) HelmReleaseSpecTest {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecTest
		return ret
	}).(HelmReleaseSpecTestOutput)
}

// Enable enables Helm test actions for this HelmRelease after an Helm install
// or upgrade action has been performed.
func (o HelmReleaseSpecTestPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// IgnoreFailures tells the controller to skip remediation when the Helm tests
// are run but fail. Can be overwritten for tests run after install or upgrade
// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
func (o HelmReleaseSpecTestPtrOutput) IgnoreFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreFailures
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation during
// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecTestPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTest) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestPatch struct {
	// Enable enables Helm test actions for this HelmRelease after an Helm install
	// or upgrade action has been performed.
	Enable *bool `pulumi:"enable"`
	// IgnoreFailures tells the controller to skip remediation when the Helm tests
	// are run but fail. Can be overwritten for tests run after install or upgrade
	// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
	IgnoreFailures *bool `pulumi:"ignoreFailures"`
	// Timeout is the time to wait for any individual Kubernetes operation during
	// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecTestPatchInput is an input type that accepts HelmReleaseSpecTestPatchArgs and HelmReleaseSpecTestPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecTestPatchInput` via:
//
//	HelmReleaseSpecTestPatchArgs{...}
type HelmReleaseSpecTestPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecTestPatchOutput() HelmReleaseSpecTestPatchOutput
	ToHelmReleaseSpecTestPatchOutputWithContext(context.Context) HelmReleaseSpecTestPatchOutput
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestPatchArgs struct {
	// Enable enables Helm test actions for this HelmRelease after an Helm install
	// or upgrade action has been performed.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// IgnoreFailures tells the controller to skip remediation when the Helm tests
	// are run but fail. Can be overwritten for tests run after install or upgrade
	// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
	IgnoreFailures pulumi.BoolPtrInput `pulumi:"ignoreFailures"`
	// Timeout is the time to wait for any individual Kubernetes operation during
	// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecTestPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecTestPatch)(nil)).Elem()
}

func (i HelmReleaseSpecTestPatchArgs) ToHelmReleaseSpecTestPatchOutput() HelmReleaseSpecTestPatchOutput {
	return i.ToHelmReleaseSpecTestPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecTestPatchArgs) ToHelmReleaseSpecTestPatchOutputWithContext(ctx context.Context) HelmReleaseSpecTestPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestPatchOutput)
}

func (i HelmReleaseSpecTestPatchArgs) ToHelmReleaseSpecTestPatchPtrOutput() HelmReleaseSpecTestPatchPtrOutput {
	return i.ToHelmReleaseSpecTestPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecTestPatchArgs) ToHelmReleaseSpecTestPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestPatchOutput).ToHelmReleaseSpecTestPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecTestPatchPtrInput is an input type that accepts HelmReleaseSpecTestPatchArgs, HelmReleaseSpecTestPatchPtr and HelmReleaseSpecTestPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecTestPatchPtrInput` via:
//
//	        HelmReleaseSpecTestPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecTestPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecTestPatchPtrOutput() HelmReleaseSpecTestPatchPtrOutput
	ToHelmReleaseSpecTestPatchPtrOutputWithContext(context.Context) HelmReleaseSpecTestPatchPtrOutput
}

type helmReleaseSpecTestPatchPtrType HelmReleaseSpecTestPatchArgs

func HelmReleaseSpecTestPatchPtr(v *HelmReleaseSpecTestPatchArgs) HelmReleaseSpecTestPatchPtrInput {
	return (*helmReleaseSpecTestPatchPtrType)(v)
}

func (*helmReleaseSpecTestPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecTestPatch)(nil)).Elem()
}

func (i *helmReleaseSpecTestPatchPtrType) ToHelmReleaseSpecTestPatchPtrOutput() HelmReleaseSpecTestPatchPtrOutput {
	return i.ToHelmReleaseSpecTestPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecTestPatchPtrType) ToHelmReleaseSpecTestPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecTestPatchPtrOutput)
}

// Test holds the configuration for Helm test actions for this HelmRelease.
type HelmReleaseSpecTestPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecTestPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecTestPatch)(nil)).Elem()
}

func (o HelmReleaseSpecTestPatchOutput) ToHelmReleaseSpecTestPatchOutput() HelmReleaseSpecTestPatchOutput {
	return o
}

func (o HelmReleaseSpecTestPatchOutput) ToHelmReleaseSpecTestPatchOutputWithContext(ctx context.Context) HelmReleaseSpecTestPatchOutput {
	return o
}

func (o HelmReleaseSpecTestPatchOutput) ToHelmReleaseSpecTestPatchPtrOutput() HelmReleaseSpecTestPatchPtrOutput {
	return o.ToHelmReleaseSpecTestPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecTestPatchOutput) ToHelmReleaseSpecTestPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecTestPatch) *HelmReleaseSpecTestPatch {
		return &v
	}).(HelmReleaseSpecTestPatchPtrOutput)
}

// Enable enables Helm test actions for this HelmRelease after an Helm install
// or upgrade action has been performed.
func (o HelmReleaseSpecTestPatchOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTestPatch) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// IgnoreFailures tells the controller to skip remediation when the Helm tests
// are run but fail. Can be overwritten for tests run after install or upgrade
// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
func (o HelmReleaseSpecTestPatchOutput) IgnoreFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTestPatch) *bool { return v.IgnoreFailures }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation during
// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecTestPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecTestPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecTestPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecTestPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecTestPatch)(nil)).Elem()
}

func (o HelmReleaseSpecTestPatchPtrOutput) ToHelmReleaseSpecTestPatchPtrOutput() HelmReleaseSpecTestPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecTestPatchPtrOutput) ToHelmReleaseSpecTestPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecTestPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecTestPatchPtrOutput) Elem() HelmReleaseSpecTestPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTestPatch) HelmReleaseSpecTestPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecTestPatch
		return ret
	}).(HelmReleaseSpecTestPatchOutput)
}

// Enable enables Helm test actions for this HelmRelease after an Helm install
// or upgrade action has been performed.
func (o HelmReleaseSpecTestPatchPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTestPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// IgnoreFailures tells the controller to skip remediation when the Helm tests
// are run but fail. Can be overwritten for tests run after install or upgrade
// actions in 'Install.IgnoreTestFailures' and 'Upgrade.IgnoreTestFailures'.
func (o HelmReleaseSpecTestPatchPtrOutput) IgnoreFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTestPatch) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreFailures
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation during
// the performance of a Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecTestPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecTestPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstall struct {
	// DeletionPropagation specifies the deletion propagation policy when
	// a Helm uninstall is performed.
	DeletionPropagation *string `pulumi:"deletionPropagation"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableWait disables waiting for all the resources to be deleted after
	// a Helm uninstall is performed.
	DisableWait *bool `pulumi:"disableWait"`
	// KeepHistory tells Helm to remove all associated resources and mark the
	// release as deleted, but retain the release history.
	KeepHistory *bool `pulumi:"keepHistory"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
	// to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecUninstallInput is an input type that accepts HelmReleaseSpecUninstallArgs and HelmReleaseSpecUninstallOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUninstallInput` via:
//
//	HelmReleaseSpecUninstallArgs{...}
type HelmReleaseSpecUninstallInput interface {
	pulumi.Input

	ToHelmReleaseSpecUninstallOutput() HelmReleaseSpecUninstallOutput
	ToHelmReleaseSpecUninstallOutputWithContext(context.Context) HelmReleaseSpecUninstallOutput
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallArgs struct {
	// DeletionPropagation specifies the deletion propagation policy when
	// a Helm uninstall is performed.
	DeletionPropagation pulumi.StringPtrInput `pulumi:"deletionPropagation"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableWait disables waiting for all the resources to be deleted after
	// a Helm uninstall is performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// KeepHistory tells Helm to remove all associated resources and mark the
	// release as deleted, but retain the release history.
	KeepHistory pulumi.BoolPtrInput `pulumi:"keepHistory"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
	// to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecUninstallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUninstall)(nil)).Elem()
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallOutput() HelmReleaseSpecUninstallOutput {
	return i.ToHelmReleaseSpecUninstallOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallOutput)
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return i.ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUninstallArgs) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallOutput).ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUninstallPtrInput is an input type that accepts HelmReleaseSpecUninstallArgs, HelmReleaseSpecUninstallPtr and HelmReleaseSpecUninstallPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUninstallPtrInput` via:
//
//	        HelmReleaseSpecUninstallArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecUninstallPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput
	ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Context) HelmReleaseSpecUninstallPtrOutput
}

type helmReleaseSpecUninstallPtrType HelmReleaseSpecUninstallArgs

func HelmReleaseSpecUninstallPtr(v *HelmReleaseSpecUninstallArgs) HelmReleaseSpecUninstallPtrInput {
	return (*helmReleaseSpecUninstallPtrType)(v)
}

func (*helmReleaseSpecUninstallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUninstall)(nil)).Elem()
}

func (i *helmReleaseSpecUninstallPtrType) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return i.ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUninstallPtrType) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUninstallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUninstall)(nil)).Elem()
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallOutput() HelmReleaseSpecUninstallOutput {
	return o
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallOutput {
	return o
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return o.ToHelmReleaseSpecUninstallPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUninstallOutput) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUninstall) *HelmReleaseSpecUninstall {
		return &v
	}).(HelmReleaseSpecUninstallPtrOutput)
}

// DeletionPropagation specifies the deletion propagation policy when
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallOutput) DeletionPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *string { return v.DeletionPropagation }).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecUninstallOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableWait disables waiting for all the resources to be deleted after
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// KeepHistory tells Helm to remove all associated resources and mark the
// release as deleted, but retain the release history.
func (o HelmReleaseSpecUninstallOutput) KeepHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *bool { return v.KeepHistory }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
// to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUninstallOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstall) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUninstallPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUninstallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUninstall)(nil)).Elem()
}

func (o HelmReleaseSpecUninstallPtrOutput) ToHelmReleaseSpecUninstallPtrOutput() HelmReleaseSpecUninstallPtrOutput {
	return o
}

func (o HelmReleaseSpecUninstallPtrOutput) ToHelmReleaseSpecUninstallPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPtrOutput {
	return o
}

func (o HelmReleaseSpecUninstallPtrOutput) Elem() HelmReleaseSpecUninstallOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) HelmReleaseSpecUninstall {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUninstall
		return ret
	}).(HelmReleaseSpecUninstallOutput)
}

// DeletionPropagation specifies the deletion propagation policy when
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPtrOutput) DeletionPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *string {
		if v == nil {
			return nil
		}
		return v.DeletionPropagation
	}).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecUninstallPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables waiting for all the resources to be deleted after
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// KeepHistory tells Helm to remove all associated resources and mark the
// release as deleted, but retain the release history.
func (o HelmReleaseSpecUninstallPtrOutput) KeepHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *bool {
		if v == nil {
			return nil
		}
		return v.KeepHistory
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
// to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUninstallPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstall) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallPatch struct {
	// DeletionPropagation specifies the deletion propagation policy when
	// a Helm uninstall is performed.
	DeletionPropagation *string `pulumi:"deletionPropagation"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableWait disables waiting for all the resources to be deleted after
	// a Helm uninstall is performed.
	DisableWait *bool `pulumi:"disableWait"`
	// KeepHistory tells Helm to remove all associated resources and mark the
	// release as deleted, but retain the release history.
	KeepHistory *bool `pulumi:"keepHistory"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
	// to 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecUninstallPatchInput is an input type that accepts HelmReleaseSpecUninstallPatchArgs and HelmReleaseSpecUninstallPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUninstallPatchInput` via:
//
//	HelmReleaseSpecUninstallPatchArgs{...}
type HelmReleaseSpecUninstallPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecUninstallPatchOutput() HelmReleaseSpecUninstallPatchOutput
	ToHelmReleaseSpecUninstallPatchOutputWithContext(context.Context) HelmReleaseSpecUninstallPatchOutput
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallPatchArgs struct {
	// DeletionPropagation specifies the deletion propagation policy when
	// a Helm uninstall is performed.
	DeletionPropagation pulumi.StringPtrInput `pulumi:"deletionPropagation"`
	// DisableHooks prevents hooks from running during the Helm rollback action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableWait disables waiting for all the resources to be deleted after
	// a Helm uninstall is performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// KeepHistory tells Helm to remove all associated resources and mark the
	// release as deleted, but retain the release history.
	KeepHistory pulumi.BoolPtrInput `pulumi:"keepHistory"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
	// to 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecUninstallPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUninstallPatch)(nil)).Elem()
}

func (i HelmReleaseSpecUninstallPatchArgs) ToHelmReleaseSpecUninstallPatchOutput() HelmReleaseSpecUninstallPatchOutput {
	return i.ToHelmReleaseSpecUninstallPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUninstallPatchArgs) ToHelmReleaseSpecUninstallPatchOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallPatchOutput)
}

func (i HelmReleaseSpecUninstallPatchArgs) ToHelmReleaseSpecUninstallPatchPtrOutput() HelmReleaseSpecUninstallPatchPtrOutput {
	return i.ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUninstallPatchArgs) ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallPatchOutput).ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUninstallPatchPtrInput is an input type that accepts HelmReleaseSpecUninstallPatchArgs, HelmReleaseSpecUninstallPatchPtr and HelmReleaseSpecUninstallPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUninstallPatchPtrInput` via:
//
//	        HelmReleaseSpecUninstallPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecUninstallPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUninstallPatchPtrOutput() HelmReleaseSpecUninstallPatchPtrOutput
	ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(context.Context) HelmReleaseSpecUninstallPatchPtrOutput
}

type helmReleaseSpecUninstallPatchPtrType HelmReleaseSpecUninstallPatchArgs

func HelmReleaseSpecUninstallPatchPtr(v *HelmReleaseSpecUninstallPatchArgs) HelmReleaseSpecUninstallPatchPtrInput {
	return (*helmReleaseSpecUninstallPatchPtrType)(v)
}

func (*helmReleaseSpecUninstallPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUninstallPatch)(nil)).Elem()
}

func (i *helmReleaseSpecUninstallPatchPtrType) ToHelmReleaseSpecUninstallPatchPtrOutput() HelmReleaseSpecUninstallPatchPtrOutput {
	return i.ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUninstallPatchPtrType) ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUninstallPatchPtrOutput)
}

// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
type HelmReleaseSpecUninstallPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUninstallPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUninstallPatch)(nil)).Elem()
}

func (o HelmReleaseSpecUninstallPatchOutput) ToHelmReleaseSpecUninstallPatchOutput() HelmReleaseSpecUninstallPatchOutput {
	return o
}

func (o HelmReleaseSpecUninstallPatchOutput) ToHelmReleaseSpecUninstallPatchOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPatchOutput {
	return o
}

func (o HelmReleaseSpecUninstallPatchOutput) ToHelmReleaseSpecUninstallPatchPtrOutput() HelmReleaseSpecUninstallPatchPtrOutput {
	return o.ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUninstallPatchOutput) ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUninstallPatch) *HelmReleaseSpecUninstallPatch {
		return &v
	}).(HelmReleaseSpecUninstallPatchPtrOutput)
}

// DeletionPropagation specifies the deletion propagation policy when
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPatchOutput) DeletionPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstallPatch) *string { return v.DeletionPropagation }).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecUninstallPatchOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstallPatch) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableWait disables waiting for all the resources to be deleted after
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPatchOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstallPatch) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// KeepHistory tells Helm to remove all associated resources and mark the
// release as deleted, but retain the release history.
func (o HelmReleaseSpecUninstallPatchOutput) KeepHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstallPatch) *bool { return v.KeepHistory }).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
// to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUninstallPatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUninstallPatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUninstallPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUninstallPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUninstallPatch)(nil)).Elem()
}

func (o HelmReleaseSpecUninstallPatchPtrOutput) ToHelmReleaseSpecUninstallPatchPtrOutput() HelmReleaseSpecUninstallPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecUninstallPatchPtrOutput) ToHelmReleaseSpecUninstallPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUninstallPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecUninstallPatchPtrOutput) Elem() HelmReleaseSpecUninstallPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstallPatch) HelmReleaseSpecUninstallPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUninstallPatch
		return ret
	}).(HelmReleaseSpecUninstallPatchOutput)
}

// DeletionPropagation specifies the deletion propagation policy when
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPatchPtrOutput) DeletionPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstallPatch) *string {
		if v == nil {
			return nil
		}
		return v.DeletionPropagation
	}).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm rollback action.
func (o HelmReleaseSpecUninstallPatchPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables waiting for all the resources to be deleted after
// a Helm uninstall is performed.
func (o HelmReleaseSpecUninstallPatchPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// KeepHistory tells Helm to remove all associated resources and mark the
// release as deleted, but retain the release history.
func (o HelmReleaseSpecUninstallPatchPtrOutput) KeepHistory() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstallPatch) *bool {
		if v == nil {
			return nil
		}
		return v.KeepHistory
	}).(pulumi.BoolPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm uninstall action. Defaults
// to 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUninstallPatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUninstallPatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgrade struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// upgrade action when it fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Skip` and if omitted
	// CRDs are neither installed nor upgraded.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are not applied during Helm upgrade action. With this
	// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds *string `pulumi:"crds"`
	// DisableHooks prevents hooks from running during the Helm upgrade action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm upgrade action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation *bool `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// upgrade has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// upgrade has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force *bool `pulumi:"force"`
	// PreserveValues will make Helm reuse the last release's values and merge in
	// overrides from 'Values'. Setting this flag makes the HelmRelease
	// non-declarative.
	PreserveValues *bool                              `pulumi:"preserveValues"`
	Remediation    *HelmReleaseSpecUpgradeRemediation `pulumi:"remediation"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecUpgradeInput is an input type that accepts HelmReleaseSpecUpgradeArgs and HelmReleaseSpecUpgradeOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeInput` via:
//
//	HelmReleaseSpecUpgradeArgs{...}
type HelmReleaseSpecUpgradeInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeOutput() HelmReleaseSpecUpgradeOutput
	ToHelmReleaseSpecUpgradeOutputWithContext(context.Context) HelmReleaseSpecUpgradeOutput
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradeArgs struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// upgrade action when it fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Skip` and if omitted
	// CRDs are neither installed nor upgraded.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are not applied during Helm upgrade action. With this
	// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds pulumi.StringPtrInput `pulumi:"crds"`
	// DisableHooks prevents hooks from running during the Helm upgrade action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm upgrade action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation pulumi.BoolPtrInput `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// upgrade has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// upgrade has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// PreserveValues will make Helm reuse the last release's values and merge in
	// overrides from 'Values'. Setting this flag makes the HelmRelease
	// non-declarative.
	PreserveValues pulumi.BoolPtrInput                       `pulumi:"preserveValues"`
	Remediation    HelmReleaseSpecUpgradeRemediationPtrInput `pulumi:"remediation"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradeOutput() HelmReleaseSpecUpgradeOutput {
	return i.ToHelmReleaseSpecUpgradeOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradeOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeOutput)
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return i.ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeArgs) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeOutput).ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx)
}

// HelmReleaseSpecUpgradePtrInput is an input type that accepts HelmReleaseSpecUpgradeArgs, HelmReleaseSpecUpgradePtr and HelmReleaseSpecUpgradePtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradePtrInput` via:
//
//	        HelmReleaseSpecUpgradeArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecUpgradePtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput
	ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Context) HelmReleaseSpecUpgradePtrOutput
}

type helmReleaseSpecUpgradePtrType HelmReleaseSpecUpgradeArgs

func HelmReleaseSpecUpgradePtr(v *HelmReleaseSpecUpgradeArgs) HelmReleaseSpecUpgradePtrInput {
	return (*helmReleaseSpecUpgradePtrType)(v)
}

func (*helmReleaseSpecUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (i *helmReleaseSpecUpgradePtrType) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return i.ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUpgradePtrType) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradePtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradeOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradeOutput() HelmReleaseSpecUpgradeOutput {
	return o
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradeOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeOutput {
	return o
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return o.ToHelmReleaseSpecUpgradePtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUpgradeOutput) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUpgrade) *HelmReleaseSpecUpgrade {
		return &v
	}).(HelmReleaseSpecUpgradePtrOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// upgrade action when it fails.
func (o HelmReleaseSpecUpgradeOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Skip` and if omitted
// CRDs are neither installed nor upgraded.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are not applied during Helm upgrade action. With this
// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecUpgradeOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *string { return v.Crds }).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm upgrade action.
func (o HelmReleaseSpecUpgradeOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm upgrade action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecUpgradeOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableOpenAPIValidation }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradeOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradeOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecUpgradeOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// PreserveValues will make Helm reuse the last release's values and merge in
// overrides from 'Values'. Setting this flag makes the HelmRelease
// non-declarative.
func (o HelmReleaseSpecUpgradeOutput) PreserveValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *bool { return v.PreserveValues }).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecUpgradeOutput) Remediation() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *HelmReleaseSpecUpgradeRemediation { return v.Remediation }).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUpgradeOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgrade) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUpgradePtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgrade)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradePtrOutput) ToHelmReleaseSpecUpgradePtrOutput() HelmReleaseSpecUpgradePtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradePtrOutput) ToHelmReleaseSpecUpgradePtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradePtrOutput) Elem() HelmReleaseSpecUpgradeOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) HelmReleaseSpecUpgrade {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUpgrade
		return ret
	}).(HelmReleaseSpecUpgradeOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// upgrade action when it fails.
func (o HelmReleaseSpecUpgradePtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Skip` and if omitted
// CRDs are neither installed nor upgraded.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are not applied during Helm upgrade action. With this
// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecUpgradePtrOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.Crds
	}).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm upgrade action.
func (o HelmReleaseSpecUpgradePtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm upgrade action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecUpgradePtrOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenAPIValidation
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradePtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradePtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecUpgradePtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// PreserveValues will make Helm reuse the last release's values and merge in
// overrides from 'Values'. Setting this flag makes the HelmRelease
// non-declarative.
func (o HelmReleaseSpecUpgradePtrOutput) PreserveValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveValues
	}).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecUpgradePtrOutput) Remediation() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *HelmReleaseSpecUpgradeRemediation {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUpgradePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradePatch struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// upgrade action when it fails.
	CleanupOnFail *bool `pulumi:"cleanupOnFail"`
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Skip` and if omitted
	// CRDs are neither installed nor upgraded.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are not applied during Helm upgrade action. With this
	// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds *string `pulumi:"crds"`
	// DisableHooks prevents hooks from running during the Helm upgrade action.
	DisableHooks *bool `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm upgrade action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation *bool `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// upgrade has been performed.
	DisableWait *bool `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// upgrade has been performed.
	DisableWaitForJobs *bool `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force *bool `pulumi:"force"`
	// PreserveValues will make Helm reuse the last release's values and merge in
	// overrides from 'Values'. Setting this flag makes the HelmRelease
	// non-declarative.
	PreserveValues *bool                                   `pulumi:"preserveValues"`
	Remediation    *HelmReleaseSpecUpgradeRemediationPatch `pulumi:"remediation"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout *string `pulumi:"timeout"`
}

// HelmReleaseSpecUpgradePatchInput is an input type that accepts HelmReleaseSpecUpgradePatchArgs and HelmReleaseSpecUpgradePatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradePatchInput` via:
//
//	HelmReleaseSpecUpgradePatchArgs{...}
type HelmReleaseSpecUpgradePatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradePatchOutput() HelmReleaseSpecUpgradePatchOutput
	ToHelmReleaseSpecUpgradePatchOutputWithContext(context.Context) HelmReleaseSpecUpgradePatchOutput
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradePatchArgs struct {
	// CleanupOnFail allows deletion of new resources created during the Helm
	// upgrade action when it fails.
	CleanupOnFail pulumi.BoolPtrInput `pulumi:"cleanupOnFail"`
	// CRDs upgrade CRDs from the Helm Chart's crds directory according
	// to the CRD upgrade policy provided here. Valid values are `Skip`,
	// `Create` or `CreateReplace`. Default is `Skip` and if omitted
	// CRDs are neither installed nor upgraded.
	//
	// Skip: do neither install nor replace (update) any CRDs.
	//
	// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
	//
	// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
	// but not deleted.
	//
	// By default, CRDs are not applied during Helm upgrade action. With this
	// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
	// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
	Crds pulumi.StringPtrInput `pulumi:"crds"`
	// DisableHooks prevents hooks from running during the Helm upgrade action.
	DisableHooks pulumi.BoolPtrInput `pulumi:"disableHooks"`
	// DisableOpenAPIValidation prevents the Helm upgrade action from validating
	// rendered templates against the Kubernetes OpenAPI Schema.
	DisableOpenAPIValidation pulumi.BoolPtrInput `pulumi:"disableOpenAPIValidation"`
	// DisableWait disables the waiting for resources to be ready after a Helm
	// upgrade has been performed.
	DisableWait pulumi.BoolPtrInput `pulumi:"disableWait"`
	// DisableWaitForJobs disables waiting for jobs to complete after a Helm
	// upgrade has been performed.
	DisableWaitForJobs pulumi.BoolPtrInput `pulumi:"disableWaitForJobs"`
	// Force forces resource updates through a replacement strategy.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// PreserveValues will make Helm reuse the last release's values and merge in
	// overrides from 'Values'. Setting this flag makes the HelmRelease
	// non-declarative.
	PreserveValues pulumi.BoolPtrInput                            `pulumi:"preserveValues"`
	Remediation    HelmReleaseSpecUpgradeRemediationPatchPtrInput `pulumi:"remediation"`
	// Timeout is the time to wait for any individual Kubernetes operation (like
	// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
	// 'HelmReleaseSpec.Timeout'.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (HelmReleaseSpecUpgradePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradePatch)(nil)).Elem()
}

func (i HelmReleaseSpecUpgradePatchArgs) ToHelmReleaseSpecUpgradePatchOutput() HelmReleaseSpecUpgradePatchOutput {
	return i.ToHelmReleaseSpecUpgradePatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradePatchArgs) ToHelmReleaseSpecUpgradePatchOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradePatchOutput)
}

func (i HelmReleaseSpecUpgradePatchArgs) ToHelmReleaseSpecUpgradePatchPtrOutput() HelmReleaseSpecUpgradePatchPtrOutput {
	return i.ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradePatchArgs) ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradePatchOutput).ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUpgradePatchPtrInput is an input type that accepts HelmReleaseSpecUpgradePatchArgs, HelmReleaseSpecUpgradePatchPtr and HelmReleaseSpecUpgradePatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradePatchPtrInput` via:
//
//	        HelmReleaseSpecUpgradePatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecUpgradePatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradePatchPtrOutput() HelmReleaseSpecUpgradePatchPtrOutput
	ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(context.Context) HelmReleaseSpecUpgradePatchPtrOutput
}

type helmReleaseSpecUpgradePatchPtrType HelmReleaseSpecUpgradePatchArgs

func HelmReleaseSpecUpgradePatchPtr(v *HelmReleaseSpecUpgradePatchArgs) HelmReleaseSpecUpgradePatchPtrInput {
	return (*helmReleaseSpecUpgradePatchPtrType)(v)
}

func (*helmReleaseSpecUpgradePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradePatch)(nil)).Elem()
}

func (i *helmReleaseSpecUpgradePatchPtrType) ToHelmReleaseSpecUpgradePatchPtrOutput() HelmReleaseSpecUpgradePatchPtrOutput {
	return i.ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUpgradePatchPtrType) ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradePatchPtrOutput)
}

// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
type HelmReleaseSpecUpgradePatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradePatch)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradePatchOutput) ToHelmReleaseSpecUpgradePatchOutput() HelmReleaseSpecUpgradePatchOutput {
	return o
}

func (o HelmReleaseSpecUpgradePatchOutput) ToHelmReleaseSpecUpgradePatchOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePatchOutput {
	return o
}

func (o HelmReleaseSpecUpgradePatchOutput) ToHelmReleaseSpecUpgradePatchPtrOutput() HelmReleaseSpecUpgradePatchPtrOutput {
	return o.ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUpgradePatchOutput) ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUpgradePatch) *HelmReleaseSpecUpgradePatch {
		return &v
	}).(HelmReleaseSpecUpgradePatchPtrOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// upgrade action when it fails.
func (o HelmReleaseSpecUpgradePatchOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.CleanupOnFail }).(pulumi.BoolPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Skip` and if omitted
// CRDs are neither installed nor upgraded.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are not applied during Helm upgrade action. With this
// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecUpgradePatchOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *string { return v.Crds }).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm upgrade action.
func (o HelmReleaseSpecUpgradePatchOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.DisableHooks }).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm upgrade action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecUpgradePatchOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.DisableOpenAPIValidation }).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradePatchOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.DisableWait }).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradePatchOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.DisableWaitForJobs }).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecUpgradePatchOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// PreserveValues will make Helm reuse the last release's values and merge in
// overrides from 'Values'. Setting this flag makes the HelmRelease
// non-declarative.
func (o HelmReleaseSpecUpgradePatchOutput) PreserveValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *bool { return v.PreserveValues }).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecUpgradePatchOutput) Remediation() HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *HelmReleaseSpecUpgradeRemediationPatch { return v.Remediation }).(HelmReleaseSpecUpgradeRemediationPatchPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUpgradePatchOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradePatch) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUpgradePatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradePatch)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradePatchPtrOutput) ToHelmReleaseSpecUpgradePatchPtrOutput() HelmReleaseSpecUpgradePatchPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradePatchPtrOutput) ToHelmReleaseSpecUpgradePatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradePatchPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradePatchPtrOutput) Elem() HelmReleaseSpecUpgradePatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) HelmReleaseSpecUpgradePatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUpgradePatch
		return ret
	}).(HelmReleaseSpecUpgradePatchOutput)
}

// CleanupOnFail allows deletion of new resources created during the Helm
// upgrade action when it fails.
func (o HelmReleaseSpecUpgradePatchPtrOutput) CleanupOnFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.CleanupOnFail
	}).(pulumi.BoolPtrOutput)
}

// CRDs upgrade CRDs from the Helm Chart's crds directory according
// to the CRD upgrade policy provided here. Valid values are `Skip`,
// `Create` or `CreateReplace`. Default is `Skip` and if omitted
// CRDs are neither installed nor upgraded.
//
// Skip: do neither install nor replace (update) any CRDs.
//
// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
//
// CreateReplace: new CRDs are created, existing CRDs are updated (replaced)
// but not deleted.
//
// By default, CRDs are not applied during Helm upgrade action. With this
// option users can opt-in to CRD upgrade, which is not (yet) natively supported by Helm.
// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
func (o HelmReleaseSpecUpgradePatchPtrOutput) Crds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *string {
		if v == nil {
			return nil
		}
		return v.Crds
	}).(pulumi.StringPtrOutput)
}

// DisableHooks prevents hooks from running during the Helm upgrade action.
func (o HelmReleaseSpecUpgradePatchPtrOutput) DisableHooks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableHooks
	}).(pulumi.BoolPtrOutput)
}

// DisableOpenAPIValidation prevents the Helm upgrade action from validating
// rendered templates against the Kubernetes OpenAPI Schema.
func (o HelmReleaseSpecUpgradePatchPtrOutput) DisableOpenAPIValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableOpenAPIValidation
	}).(pulumi.BoolPtrOutput)
}

// DisableWait disables the waiting for resources to be ready after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradePatchPtrOutput) DisableWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWait
	}).(pulumi.BoolPtrOutput)
}

// DisableWaitForJobs disables waiting for jobs to complete after a Helm
// upgrade has been performed.
func (o HelmReleaseSpecUpgradePatchPtrOutput) DisableWaitForJobs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWaitForJobs
	}).(pulumi.BoolPtrOutput)
}

// Force forces resource updates through a replacement strategy.
func (o HelmReleaseSpecUpgradePatchPtrOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Force
	}).(pulumi.BoolPtrOutput)
}

// PreserveValues will make Helm reuse the last release's values and merge in
// overrides from 'Values'. Setting this flag makes the HelmRelease
// non-declarative.
func (o HelmReleaseSpecUpgradePatchPtrOutput) PreserveValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveValues
	}).(pulumi.BoolPtrOutput)
}

func (o HelmReleaseSpecUpgradePatchPtrOutput) Remediation() HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *HelmReleaseSpecUpgradeRemediationPatch {
		if v == nil {
			return nil
		}
		return v.Remediation
	}).(HelmReleaseSpecUpgradeRemediationPatchPtrOutput)
}

// Timeout is the time to wait for any individual Kubernetes operation (like
// Jobs for hooks) during the performance of a Helm upgrade action. Defaults to
// 'HelmReleaseSpec.Timeout'.
func (o HelmReleaseSpecUpgradePatchPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradePatch) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediation struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an upgrade action but fail.
	// Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures *bool `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
	RemediateLastFailure *bool `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using 'Strategy', is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries *int `pulumi:"retries"`
	// Strategy to use for failure remediation. Defaults to 'rollback'.
	Strategy *string `pulumi:"strategy"`
}

// HelmReleaseSpecUpgradeRemediationInput is an input type that accepts HelmReleaseSpecUpgradeRemediationArgs and HelmReleaseSpecUpgradeRemediationOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeRemediationInput` via:
//
//	HelmReleaseSpecUpgradeRemediationArgs{...}
type HelmReleaseSpecUpgradeRemediationInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeRemediationOutput() HelmReleaseSpecUpgradeRemediationOutput
	ToHelmReleaseSpecUpgradeRemediationOutputWithContext(context.Context) HelmReleaseSpecUpgradeRemediationOutput
}

// Remediation holds the remediation configuration for when the Helm upgrade
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationArgs struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an upgrade action but fail.
	// Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures pulumi.BoolPtrInput `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
	RemediateLastFailure pulumi.BoolPtrInput `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using 'Strategy', is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Strategy to use for failure remediation. Defaults to 'rollback'.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (HelmReleaseSpecUpgradeRemediationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationOutput() HelmReleaseSpecUpgradeRemediationOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationOutput)
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeRemediationArgs) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationOutput).ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUpgradeRemediationPtrInput is an input type that accepts HelmReleaseSpecUpgradeRemediationArgs, HelmReleaseSpecUpgradeRemediationPtr and HelmReleaseSpecUpgradeRemediationPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeRemediationPtrInput` via:
//
//	        HelmReleaseSpecUpgradeRemediationArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecUpgradeRemediationPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput
	ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput
}

type helmReleaseSpecUpgradeRemediationPtrType HelmReleaseSpecUpgradeRemediationArgs

func HelmReleaseSpecUpgradeRemediationPtr(v *HelmReleaseSpecUpgradeRemediationArgs) HelmReleaseSpecUpgradeRemediationPtrInput {
	return (*helmReleaseSpecUpgradeRemediationPtrType)(v)
}

func (*helmReleaseSpecUpgradeRemediationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (i *helmReleaseSpecUpgradeRemediationPtrType) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUpgradeRemediationPtrType) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeRemediationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationOutput() HelmReleaseSpecUpgradeRemediationOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUpgradeRemediationOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUpgradeRemediation) *HelmReleaseSpecUpgradeRemediation {
		return &v
	}).(HelmReleaseSpecUpgradeRemediationPtrOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an upgrade action but fail.
// Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecUpgradeRemediationOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *bool { return v.IgnoreTestFailures }).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
func (o HelmReleaseSpecUpgradeRemediationOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *bool { return v.RemediateLastFailure }).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using 'Strategy', is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecUpgradeRemediationOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Strategy to use for failure remediation. Defaults to 'rollback'.
func (o HelmReleaseSpecUpgradeRemediationOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediation) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUpgradeRemediationPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeRemediationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradeRemediation)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeRemediationPtrOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutput() HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPtrOutput) ToHelmReleaseSpecUpgradeRemediationPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPtrOutput) Elem() HelmReleaseSpecUpgradeRemediationOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) HelmReleaseSpecUpgradeRemediation {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUpgradeRemediation
		return ret
	}).(HelmReleaseSpecUpgradeRemediationOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an upgrade action but fail.
// Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTestFailures
	}).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *bool {
		if v == nil {
			return nil
		}
		return v.RemediateLastFailure
	}).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using 'Strategy', is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// Strategy to use for failure remediation. Defaults to 'rollback'.
func (o HelmReleaseSpecUpgradeRemediationPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediation) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationPatch struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an upgrade action but fail.
	// Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures *bool `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
	RemediateLastFailure *bool `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using 'Strategy', is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries *int `pulumi:"retries"`
	// Strategy to use for failure remediation. Defaults to 'rollback'.
	Strategy *string `pulumi:"strategy"`
}

// HelmReleaseSpecUpgradeRemediationPatchInput is an input type that accepts HelmReleaseSpecUpgradeRemediationPatchArgs and HelmReleaseSpecUpgradeRemediationPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeRemediationPatchInput` via:
//
//	HelmReleaseSpecUpgradeRemediationPatchArgs{...}
type HelmReleaseSpecUpgradeRemediationPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeRemediationPatchOutput() HelmReleaseSpecUpgradeRemediationPatchOutput
	ToHelmReleaseSpecUpgradeRemediationPatchOutputWithContext(context.Context) HelmReleaseSpecUpgradeRemediationPatchOutput
}

// Remediation holds the remediation configuration for when the Helm upgrade
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationPatchArgs struct {
	// IgnoreTestFailures tells the controller to skip remediation when the Helm
	// tests are run after an upgrade action but fail.
	// Defaults to 'Test.IgnoreFailures'.
	IgnoreTestFailures pulumi.BoolPtrInput `pulumi:"ignoreTestFailures"`
	// RemediateLastFailure tells the controller to remediate the last failure, when
	// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
	RemediateLastFailure pulumi.BoolPtrInput `pulumi:"remediateLastFailure"`
	// Retries is the number of retries that should be attempted on failures before
	// bailing. Remediation, using 'Strategy', is performed between each attempt.
	// Defaults to '0', a negative integer equals to unlimited retries.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Strategy to use for failure remediation. Defaults to 'rollback'.
	Strategy pulumi.StringPtrInput `pulumi:"strategy"`
}

func (HelmReleaseSpecUpgradeRemediationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationPatch)(nil)).Elem()
}

func (i HelmReleaseSpecUpgradeRemediationPatchArgs) ToHelmReleaseSpecUpgradeRemediationPatchOutput() HelmReleaseSpecUpgradeRemediationPatchOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeRemediationPatchArgs) ToHelmReleaseSpecUpgradeRemediationPatchOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationPatchOutput)
}

func (i HelmReleaseSpecUpgradeRemediationPatchArgs) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutput() HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseSpecUpgradeRemediationPatchArgs) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationPatchOutput).ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(ctx)
}

// HelmReleaseSpecUpgradeRemediationPatchPtrInput is an input type that accepts HelmReleaseSpecUpgradeRemediationPatchArgs, HelmReleaseSpecUpgradeRemediationPatchPtr and HelmReleaseSpecUpgradeRemediationPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseSpecUpgradeRemediationPatchPtrInput` via:
//
//	        HelmReleaseSpecUpgradeRemediationPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseSpecUpgradeRemediationPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseSpecUpgradeRemediationPatchPtrOutput() HelmReleaseSpecUpgradeRemediationPatchPtrOutput
	ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(context.Context) HelmReleaseSpecUpgradeRemediationPatchPtrOutput
}

type helmReleaseSpecUpgradeRemediationPatchPtrType HelmReleaseSpecUpgradeRemediationPatchArgs

func HelmReleaseSpecUpgradeRemediationPatchPtr(v *HelmReleaseSpecUpgradeRemediationPatchArgs) HelmReleaseSpecUpgradeRemediationPatchPtrInput {
	return (*helmReleaseSpecUpgradeRemediationPatchPtrType)(v)
}

func (*helmReleaseSpecUpgradeRemediationPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradeRemediationPatch)(nil)).Elem()
}

func (i *helmReleaseSpecUpgradeRemediationPatchPtrType) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutput() HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return i.ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseSpecUpgradeRemediationPatchPtrType) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecUpgradeRemediationPatchPtrOutput)
}

// Remediation holds the remediation configuration for when the Helm upgrade
// action for the HelmRelease fails. The default is to not perform any action.
type HelmReleaseSpecUpgradeRemediationPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeRemediationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationPatch)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeRemediationPatchOutput) ToHelmReleaseSpecUpgradeRemediationPatchOutput() HelmReleaseSpecUpgradeRemediationPatchOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPatchOutput) ToHelmReleaseSpecUpgradeRemediationPatchOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPatchOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPatchOutput) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutput() HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return o.ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseSpecUpgradeRemediationPatchOutput) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseSpecUpgradeRemediationPatch) *HelmReleaseSpecUpgradeRemediationPatch {
		return &v
	}).(HelmReleaseSpecUpgradeRemediationPatchPtrOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an upgrade action but fail.
// Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecUpgradeRemediationPatchOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediationPatch) *bool { return v.IgnoreTestFailures }).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
func (o HelmReleaseSpecUpgradeRemediationPatchOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediationPatch) *bool { return v.RemediateLastFailure }).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using 'Strategy', is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecUpgradeRemediationPatchOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediationPatch) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Strategy to use for failure remediation. Defaults to 'rollback'.
func (o HelmReleaseSpecUpgradeRemediationPatchOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecUpgradeRemediationPatch) *string { return v.Strategy }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecUpgradeRemediationPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecUpgradeRemediationPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseSpecUpgradeRemediationPatch)(nil)).Elem()
}

func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutput() HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) ToHelmReleaseSpecUpgradeRemediationPatchPtrOutputWithContext(ctx context.Context) HelmReleaseSpecUpgradeRemediationPatchPtrOutput {
	return o
}

func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) Elem() HelmReleaseSpecUpgradeRemediationPatchOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediationPatch) HelmReleaseSpecUpgradeRemediationPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseSpecUpgradeRemediationPatch
		return ret
	}).(HelmReleaseSpecUpgradeRemediationPatchOutput)
}

// IgnoreTestFailures tells the controller to skip remediation when the Helm
// tests are run after an upgrade action but fail.
// Defaults to 'Test.IgnoreFailures'.
func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) IgnoreTestFailures() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediationPatch) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreTestFailures
	}).(pulumi.BoolPtrOutput)
}

// RemediateLastFailure tells the controller to remediate the last failure, when
// no retries remain. Defaults to 'false' unless 'Retries' is greater than 0.
func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) RemediateLastFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediationPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RemediateLastFailure
	}).(pulumi.BoolPtrOutput)
}

// Retries is the number of retries that should be attempted on failures before
// bailing. Remediation, using 'Strategy', is performed between each attempt.
// Defaults to '0', a negative integer equals to unlimited retries.
func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediationPatch) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// Strategy to use for failure remediation. Defaults to 'rollback'.
func (o HelmReleaseSpecUpgradeRemediationPatchPtrOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseSpecUpgradeRemediationPatch) *string {
		if v == nil {
			return nil
		}
		return v.Strategy
	}).(pulumi.StringPtrOutput)
}

// ValuesReference contains a reference to a resource containing Helm values,
// and optionally the key they can be found at.
type HelmReleaseSpecValuesFrom struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind *string `pulumi:"kind"`
	// Name of the values referent. Should reside in the same namespace as the
	// referring resource.
	Name *string `pulumi:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error
	// for the values reference is ignored, but any ValuesKey, TargetPath or
	// transient error will still result in a reconciliation failure.
	Optional *bool `pulumi:"optional"`
	// TargetPath is the YAML dot notation path the value should be merged at. When
	// set, the ValuesKey is expected to be a single flat value. Defaults to 'None',
	// which results in the values getting merged at the root.
	TargetPath *string `pulumi:"targetPath"`
	// ValuesKey is the data key where the values.yaml or a specific value can be
	// found at. Defaults to 'values.yaml'.
	// When set, must be a valid Data Key, consisting of alphanumeric characters,
	// '-', '_' or '.'.
	ValuesKey *string `pulumi:"valuesKey"`
}

// HelmReleaseSpecValuesFromInput is an input type that accepts HelmReleaseSpecValuesFromArgs and HelmReleaseSpecValuesFromOutput values.
// You can construct a concrete instance of `HelmReleaseSpecValuesFromInput` via:
//
//	HelmReleaseSpecValuesFromArgs{...}
type HelmReleaseSpecValuesFromInput interface {
	pulumi.Input

	ToHelmReleaseSpecValuesFromOutput() HelmReleaseSpecValuesFromOutput
	ToHelmReleaseSpecValuesFromOutputWithContext(context.Context) HelmReleaseSpecValuesFromOutput
}

// ValuesReference contains a reference to a resource containing Helm values,
// and optionally the key they can be found at.
type HelmReleaseSpecValuesFromArgs struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the values referent. Should reside in the same namespace as the
	// referring resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error
	// for the values reference is ignored, but any ValuesKey, TargetPath or
	// transient error will still result in a reconciliation failure.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// TargetPath is the YAML dot notation path the value should be merged at. When
	// set, the ValuesKey is expected to be a single flat value. Defaults to 'None',
	// which results in the values getting merged at the root.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
	// ValuesKey is the data key where the values.yaml or a specific value can be
	// found at. Defaults to 'values.yaml'.
	// When set, must be a valid Data Key, consisting of alphanumeric characters,
	// '-', '_' or '.'.
	ValuesKey pulumi.StringPtrInput `pulumi:"valuesKey"`
}

func (HelmReleaseSpecValuesFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecValuesFrom)(nil)).Elem()
}

func (i HelmReleaseSpecValuesFromArgs) ToHelmReleaseSpecValuesFromOutput() HelmReleaseSpecValuesFromOutput {
	return i.ToHelmReleaseSpecValuesFromOutputWithContext(context.Background())
}

func (i HelmReleaseSpecValuesFromArgs) ToHelmReleaseSpecValuesFromOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecValuesFromOutput)
}

// HelmReleaseSpecValuesFromArrayInput is an input type that accepts HelmReleaseSpecValuesFromArray and HelmReleaseSpecValuesFromArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecValuesFromArrayInput` via:
//
//	HelmReleaseSpecValuesFromArray{ HelmReleaseSpecValuesFromArgs{...} }
type HelmReleaseSpecValuesFromArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecValuesFromArrayOutput() HelmReleaseSpecValuesFromArrayOutput
	ToHelmReleaseSpecValuesFromArrayOutputWithContext(context.Context) HelmReleaseSpecValuesFromArrayOutput
}

type HelmReleaseSpecValuesFromArray []HelmReleaseSpecValuesFromInput

func (HelmReleaseSpecValuesFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecValuesFrom)(nil)).Elem()
}

func (i HelmReleaseSpecValuesFromArray) ToHelmReleaseSpecValuesFromArrayOutput() HelmReleaseSpecValuesFromArrayOutput {
	return i.ToHelmReleaseSpecValuesFromArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecValuesFromArray) ToHelmReleaseSpecValuesFromArrayOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecValuesFromArrayOutput)
}

// ValuesReference contains a reference to a resource containing Helm values,
// and optionally the key they can be found at.
type HelmReleaseSpecValuesFromOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecValuesFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecValuesFrom)(nil)).Elem()
}

func (o HelmReleaseSpecValuesFromOutput) ToHelmReleaseSpecValuesFromOutput() HelmReleaseSpecValuesFromOutput {
	return o
}

func (o HelmReleaseSpecValuesFromOutput) ToHelmReleaseSpecValuesFromOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromOutput {
	return o
}

// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
func (o HelmReleaseSpecValuesFromOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFrom) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the values referent. Should reside in the same namespace as the
// referring resource.
func (o HelmReleaseSpecValuesFromOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFrom) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional marks this ValuesReference as optional. When set, a not found error
// for the values reference is ignored, but any ValuesKey, TargetPath or
// transient error will still result in a reconciliation failure.
func (o HelmReleaseSpecValuesFromOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFrom) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// TargetPath is the YAML dot notation path the value should be merged at. When
// set, the ValuesKey is expected to be a single flat value. Defaults to 'None',
// which results in the values getting merged at the root.
func (o HelmReleaseSpecValuesFromOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFrom) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

// ValuesKey is the data key where the values.yaml or a specific value can be
// found at. Defaults to 'values.yaml'.
// When set, must be a valid Data Key, consisting of alphanumeric characters,
// '-', '_' or '.'.
func (o HelmReleaseSpecValuesFromOutput) ValuesKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFrom) *string { return v.ValuesKey }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecValuesFromArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecValuesFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecValuesFrom)(nil)).Elem()
}

func (o HelmReleaseSpecValuesFromArrayOutput) ToHelmReleaseSpecValuesFromArrayOutput() HelmReleaseSpecValuesFromArrayOutput {
	return o
}

func (o HelmReleaseSpecValuesFromArrayOutput) ToHelmReleaseSpecValuesFromArrayOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromArrayOutput {
	return o
}

func (o HelmReleaseSpecValuesFromArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecValuesFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecValuesFrom {
		return vs[0].([]HelmReleaseSpecValuesFrom)[vs[1].(int)]
	}).(HelmReleaseSpecValuesFromOutput)
}

// ValuesReference contains a reference to a resource containing Helm values,
// and optionally the key they can be found at.
type HelmReleaseSpecValuesFromPatch struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind *string `pulumi:"kind"`
	// Name of the values referent. Should reside in the same namespace as the
	// referring resource.
	Name *string `pulumi:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error
	// for the values reference is ignored, but any ValuesKey, TargetPath or
	// transient error will still result in a reconciliation failure.
	Optional *bool `pulumi:"optional"`
	// TargetPath is the YAML dot notation path the value should be merged at. When
	// set, the ValuesKey is expected to be a single flat value. Defaults to 'None',
	// which results in the values getting merged at the root.
	TargetPath *string `pulumi:"targetPath"`
	// ValuesKey is the data key where the values.yaml or a specific value can be
	// found at. Defaults to 'values.yaml'.
	// When set, must be a valid Data Key, consisting of alphanumeric characters,
	// '-', '_' or '.'.
	ValuesKey *string `pulumi:"valuesKey"`
}

// HelmReleaseSpecValuesFromPatchInput is an input type that accepts HelmReleaseSpecValuesFromPatchArgs and HelmReleaseSpecValuesFromPatchOutput values.
// You can construct a concrete instance of `HelmReleaseSpecValuesFromPatchInput` via:
//
//	HelmReleaseSpecValuesFromPatchArgs{...}
type HelmReleaseSpecValuesFromPatchInput interface {
	pulumi.Input

	ToHelmReleaseSpecValuesFromPatchOutput() HelmReleaseSpecValuesFromPatchOutput
	ToHelmReleaseSpecValuesFromPatchOutputWithContext(context.Context) HelmReleaseSpecValuesFromPatchOutput
}

// ValuesReference contains a reference to a resource containing Helm values,
// and optionally the key they can be found at.
type HelmReleaseSpecValuesFromPatchArgs struct {
	// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the values referent. Should reside in the same namespace as the
	// referring resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional marks this ValuesReference as optional. When set, a not found error
	// for the values reference is ignored, but any ValuesKey, TargetPath or
	// transient error will still result in a reconciliation failure.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// TargetPath is the YAML dot notation path the value should be merged at. When
	// set, the ValuesKey is expected to be a single flat value. Defaults to 'None',
	// which results in the values getting merged at the root.
	TargetPath pulumi.StringPtrInput `pulumi:"targetPath"`
	// ValuesKey is the data key where the values.yaml or a specific value can be
	// found at. Defaults to 'values.yaml'.
	// When set, must be a valid Data Key, consisting of alphanumeric characters,
	// '-', '_' or '.'.
	ValuesKey pulumi.StringPtrInput `pulumi:"valuesKey"`
}

func (HelmReleaseSpecValuesFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecValuesFromPatch)(nil)).Elem()
}

func (i HelmReleaseSpecValuesFromPatchArgs) ToHelmReleaseSpecValuesFromPatchOutput() HelmReleaseSpecValuesFromPatchOutput {
	return i.ToHelmReleaseSpecValuesFromPatchOutputWithContext(context.Background())
}

func (i HelmReleaseSpecValuesFromPatchArgs) ToHelmReleaseSpecValuesFromPatchOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecValuesFromPatchOutput)
}

// HelmReleaseSpecValuesFromPatchArrayInput is an input type that accepts HelmReleaseSpecValuesFromPatchArray and HelmReleaseSpecValuesFromPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseSpecValuesFromPatchArrayInput` via:
//
//	HelmReleaseSpecValuesFromPatchArray{ HelmReleaseSpecValuesFromPatchArgs{...} }
type HelmReleaseSpecValuesFromPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseSpecValuesFromPatchArrayOutput() HelmReleaseSpecValuesFromPatchArrayOutput
	ToHelmReleaseSpecValuesFromPatchArrayOutputWithContext(context.Context) HelmReleaseSpecValuesFromPatchArrayOutput
}

type HelmReleaseSpecValuesFromPatchArray []HelmReleaseSpecValuesFromPatchInput

func (HelmReleaseSpecValuesFromPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecValuesFromPatch)(nil)).Elem()
}

func (i HelmReleaseSpecValuesFromPatchArray) ToHelmReleaseSpecValuesFromPatchArrayOutput() HelmReleaseSpecValuesFromPatchArrayOutput {
	return i.ToHelmReleaseSpecValuesFromPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseSpecValuesFromPatchArray) ToHelmReleaseSpecValuesFromPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseSpecValuesFromPatchArrayOutput)
}

// ValuesReference contains a reference to a resource containing Helm values,
// and optionally the key they can be found at.
type HelmReleaseSpecValuesFromPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecValuesFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseSpecValuesFromPatch)(nil)).Elem()
}

func (o HelmReleaseSpecValuesFromPatchOutput) ToHelmReleaseSpecValuesFromPatchOutput() HelmReleaseSpecValuesFromPatchOutput {
	return o
}

func (o HelmReleaseSpecValuesFromPatchOutput) ToHelmReleaseSpecValuesFromPatchOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromPatchOutput {
	return o
}

// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
func (o HelmReleaseSpecValuesFromPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFromPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the values referent. Should reside in the same namespace as the
// referring resource.
func (o HelmReleaseSpecValuesFromPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFromPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional marks this ValuesReference as optional. When set, a not found error
// for the values reference is ignored, but any ValuesKey, TargetPath or
// transient error will still result in a reconciliation failure.
func (o HelmReleaseSpecValuesFromPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFromPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// TargetPath is the YAML dot notation path the value should be merged at. When
// set, the ValuesKey is expected to be a single flat value. Defaults to 'None',
// which results in the values getting merged at the root.
func (o HelmReleaseSpecValuesFromPatchOutput) TargetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFromPatch) *string { return v.TargetPath }).(pulumi.StringPtrOutput)
}

// ValuesKey is the data key where the values.yaml or a specific value can be
// found at. Defaults to 'values.yaml'.
// When set, must be a valid Data Key, consisting of alphanumeric characters,
// '-', '_' or '.'.
func (o HelmReleaseSpecValuesFromPatchOutput) ValuesKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseSpecValuesFromPatch) *string { return v.ValuesKey }).(pulumi.StringPtrOutput)
}

type HelmReleaseSpecValuesFromPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseSpecValuesFromPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseSpecValuesFromPatch)(nil)).Elem()
}

func (o HelmReleaseSpecValuesFromPatchArrayOutput) ToHelmReleaseSpecValuesFromPatchArrayOutput() HelmReleaseSpecValuesFromPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecValuesFromPatchArrayOutput) ToHelmReleaseSpecValuesFromPatchArrayOutputWithContext(ctx context.Context) HelmReleaseSpecValuesFromPatchArrayOutput {
	return o
}

func (o HelmReleaseSpecValuesFromPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseSpecValuesFromPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseSpecValuesFromPatch {
		return vs[0].([]HelmReleaseSpecValuesFromPatch)[vs[1].(int)]
	}).(HelmReleaseSpecValuesFromPatchOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatus struct {
	// Conditions holds the conditions for the HelmRelease.
	Conditions []HelmReleaseStatusConditions `pulumi:"conditions"`
	// Failures is the reconciliation failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	Failures *int `pulumi:"failures"`
	// HelmChart is the namespaced name of the HelmChart resource created by
	// the controller for the HelmRelease.
	HelmChart *string `pulumi:"helmChart"`
	// History holds the history of Helm releases performed for this HelmRelease
	// up to the last successfully completed release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	History []HelmReleaseStatusHistory `pulumi:"history"`
	// InstallFailures is the install failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	InstallFailures *int `pulumi:"installFailures"`
	// LastAppliedRevision is the revision of the last successfully applied source.
	LastAppliedRevision *string `pulumi:"lastAppliedRevision"`
	// LastAttemptedConfigDigest is the digest for the config (better known as
	// "values") of the last reconciliation attempt.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedConfigDigest *string `pulumi:"lastAttemptedConfigDigest"`
	// LastAttemptedGeneration is the last generation the controller attempted
	// to reconcile.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedGeneration *int `pulumi:"lastAttemptedGeneration"`
	// LastAttemptedReleaseAction is the last release action performed for this
	// HelmRelease. It is used to determine the active remediation strategy.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedReleaseAction *string `pulumi:"lastAttemptedReleaseAction"`
	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	LastAttemptedRevision *string `pulumi:"lastAttemptedRevision"`
	// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
	// reconciliation attempt.
	LastAttemptedValuesChecksum *string `pulumi:"lastAttemptedValuesChecksum"`
	// LastHandledForceAt holds the value of the most recent force request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledForceAt *string `pulumi:"lastHandledForceAt"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// LastHandledResetAt holds the value of the most recent reset request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledResetAt *string `pulumi:"lastHandledResetAt"`
	// LastReleaseRevision is the revision of the last successful Helm release.
	LastReleaseRevision *int `pulumi:"lastReleaseRevision"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedPostRenderersDigest is the digest for the post-renderers of
	// the last successful reconciliation attempt.
	ObservedPostRenderersDigest *string `pulumi:"observedPostRenderersDigest"`
	// StorageNamespace is the namespace of the Helm release storage for the
	// current release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	StorageNamespace *string `pulumi:"storageNamespace"`
	// UpgradeFailures is the upgrade failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	UpgradeFailures *int `pulumi:"upgradeFailures"`
}

// HelmReleaseStatusInput is an input type that accepts HelmReleaseStatusArgs and HelmReleaseStatusOutput values.
// You can construct a concrete instance of `HelmReleaseStatusInput` via:
//
//	HelmReleaseStatusArgs{...}
type HelmReleaseStatusInput interface {
	pulumi.Input

	ToHelmReleaseStatusOutput() HelmReleaseStatusOutput
	ToHelmReleaseStatusOutputWithContext(context.Context) HelmReleaseStatusOutput
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusArgs struct {
	// Conditions holds the conditions for the HelmRelease.
	Conditions HelmReleaseStatusConditionsArrayInput `pulumi:"conditions"`
	// Failures is the reconciliation failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	Failures pulumi.IntPtrInput `pulumi:"failures"`
	// HelmChart is the namespaced name of the HelmChart resource created by
	// the controller for the HelmRelease.
	HelmChart pulumi.StringPtrInput `pulumi:"helmChart"`
	// History holds the history of Helm releases performed for this HelmRelease
	// up to the last successfully completed release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	History HelmReleaseStatusHistoryArrayInput `pulumi:"history"`
	// InstallFailures is the install failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	InstallFailures pulumi.IntPtrInput `pulumi:"installFailures"`
	// LastAppliedRevision is the revision of the last successfully applied source.
	LastAppliedRevision pulumi.StringPtrInput `pulumi:"lastAppliedRevision"`
	// LastAttemptedConfigDigest is the digest for the config (better known as
	// "values") of the last reconciliation attempt.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedConfigDigest pulumi.StringPtrInput `pulumi:"lastAttemptedConfigDigest"`
	// LastAttemptedGeneration is the last generation the controller attempted
	// to reconcile.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedGeneration pulumi.IntPtrInput `pulumi:"lastAttemptedGeneration"`
	// LastAttemptedReleaseAction is the last release action performed for this
	// HelmRelease. It is used to determine the active remediation strategy.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedReleaseAction pulumi.StringPtrInput `pulumi:"lastAttemptedReleaseAction"`
	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	LastAttemptedRevision pulumi.StringPtrInput `pulumi:"lastAttemptedRevision"`
	// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
	// reconciliation attempt.
	LastAttemptedValuesChecksum pulumi.StringPtrInput `pulumi:"lastAttemptedValuesChecksum"`
	// LastHandledForceAt holds the value of the most recent force request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledForceAt pulumi.StringPtrInput `pulumi:"lastHandledForceAt"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// LastHandledResetAt holds the value of the most recent reset request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledResetAt pulumi.StringPtrInput `pulumi:"lastHandledResetAt"`
	// LastReleaseRevision is the revision of the last successful Helm release.
	LastReleaseRevision pulumi.IntPtrInput `pulumi:"lastReleaseRevision"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedPostRenderersDigest is the digest for the post-renderers of
	// the last successful reconciliation attempt.
	ObservedPostRenderersDigest pulumi.StringPtrInput `pulumi:"observedPostRenderersDigest"`
	// StorageNamespace is the namespace of the Helm release storage for the
	// current release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	StorageNamespace pulumi.StringPtrInput `pulumi:"storageNamespace"`
	// UpgradeFailures is the upgrade failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	UpgradeFailures pulumi.IntPtrInput `pulumi:"upgradeFailures"`
}

func (HelmReleaseStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatus)(nil)).Elem()
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusOutput() HelmReleaseStatusOutput {
	return i.ToHelmReleaseStatusOutputWithContext(context.Background())
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusOutputWithContext(ctx context.Context) HelmReleaseStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusOutput)
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return i.ToHelmReleaseStatusPtrOutputWithContext(context.Background())
}

func (i HelmReleaseStatusArgs) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusOutput).ToHelmReleaseStatusPtrOutputWithContext(ctx)
}

// HelmReleaseStatusPtrInput is an input type that accepts HelmReleaseStatusArgs, HelmReleaseStatusPtr and HelmReleaseStatusPtrOutput values.
// You can construct a concrete instance of `HelmReleaseStatusPtrInput` via:
//
//	        HelmReleaseStatusArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseStatusPtrInput interface {
	pulumi.Input

	ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput
	ToHelmReleaseStatusPtrOutputWithContext(context.Context) HelmReleaseStatusPtrOutput
}

type helmReleaseStatusPtrType HelmReleaseStatusArgs

func HelmReleaseStatusPtr(v *HelmReleaseStatusArgs) HelmReleaseStatusPtrInput {
	return (*helmReleaseStatusPtrType)(v)
}

func (*helmReleaseStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseStatus)(nil)).Elem()
}

func (i *helmReleaseStatusPtrType) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return i.ToHelmReleaseStatusPtrOutputWithContext(context.Background())
}

func (i *helmReleaseStatusPtrType) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusPtrOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatus)(nil)).Elem()
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusOutput() HelmReleaseStatusOutput {
	return o
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusOutputWithContext(ctx context.Context) HelmReleaseStatusOutput {
	return o
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return o.ToHelmReleaseStatusPtrOutputWithContext(context.Background())
}

func (o HelmReleaseStatusOutput) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseStatus) *HelmReleaseStatus {
		return &v
	}).(HelmReleaseStatusPtrOutput)
}

// Conditions holds the conditions for the HelmRelease.
func (o HelmReleaseStatusOutput) Conditions() HelmReleaseStatusConditionsArrayOutput {
	return o.ApplyT(func(v HelmReleaseStatus) []HelmReleaseStatusConditions { return v.Conditions }).(HelmReleaseStatusConditionsArrayOutput)
}

// Failures is the reconciliation failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusOutput) Failures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.Failures }).(pulumi.IntPtrOutput)
}

// HelmChart is the namespaced name of the HelmChart resource created by
// the controller for the HelmRelease.
func (o HelmReleaseStatusOutput) HelmChart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.HelmChart }).(pulumi.StringPtrOutput)
}

// History holds the history of Helm releases performed for this HelmRelease
// up to the last successfully completed release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) History() HelmReleaseStatusHistoryArrayOutput {
	return o.ApplyT(func(v HelmReleaseStatus) []HelmReleaseStatusHistory { return v.History }).(HelmReleaseStatusHistoryArrayOutput)
}

// InstallFailures is the install failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusOutput) InstallFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.InstallFailures }).(pulumi.IntPtrOutput)
}

// LastAppliedRevision is the revision of the last successfully applied source.
func (o HelmReleaseStatusOutput) LastAppliedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAppliedRevision }).(pulumi.StringPtrOutput)
}

// LastAttemptedConfigDigest is the digest for the config (better known as
// "values") of the last reconciliation attempt.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) LastAttemptedConfigDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAttemptedConfigDigest }).(pulumi.StringPtrOutput)
}

// LastAttemptedGeneration is the last generation the controller attempted
// to reconcile.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) LastAttemptedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.LastAttemptedGeneration }).(pulumi.IntPtrOutput)
}

// LastAttemptedReleaseAction is the last release action performed for this
// HelmRelease. It is used to determine the active remediation strategy.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) LastAttemptedReleaseAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAttemptedReleaseAction }).(pulumi.StringPtrOutput)
}

// LastAttemptedRevision is the revision of the last reconciliation attempt.
func (o HelmReleaseStatusOutput) LastAttemptedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAttemptedRevision }).(pulumi.StringPtrOutput)
}

// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
// reconciliation attempt.
func (o HelmReleaseStatusOutput) LastAttemptedValuesChecksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastAttemptedValuesChecksum }).(pulumi.StringPtrOutput)
}

// LastHandledForceAt holds the value of the most recent force request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) LastHandledForceAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastHandledForceAt }).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmReleaseStatusOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// LastHandledResetAt holds the value of the most recent reset request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) LastHandledResetAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.LastHandledResetAt }).(pulumi.StringPtrOutput)
}

// LastReleaseRevision is the revision of the last successful Helm release.
func (o HelmReleaseStatusOutput) LastReleaseRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.LastReleaseRevision }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmReleaseStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedPostRenderersDigest is the digest for the post-renderers of
// the last successful reconciliation attempt.
func (o HelmReleaseStatusOutput) ObservedPostRenderersDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.ObservedPostRenderersDigest }).(pulumi.StringPtrOutput)
}

// StorageNamespace is the namespace of the Helm release storage for the
// current release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *string { return v.StorageNamespace }).(pulumi.StringPtrOutput)
}

// UpgradeFailures is the upgrade failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusOutput) UpgradeFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatus) *int { return v.UpgradeFailures }).(pulumi.IntPtrOutput)
}

type HelmReleaseStatusPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseStatus)(nil)).Elem()
}

func (o HelmReleaseStatusPtrOutput) ToHelmReleaseStatusPtrOutput() HelmReleaseStatusPtrOutput {
	return o
}

func (o HelmReleaseStatusPtrOutput) ToHelmReleaseStatusPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPtrOutput {
	return o
}

func (o HelmReleaseStatusPtrOutput) Elem() HelmReleaseStatusOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) HelmReleaseStatus {
		if v != nil {
			return *v
		}
		var ret HelmReleaseStatus
		return ret
	}).(HelmReleaseStatusOutput)
}

// Conditions holds the conditions for the HelmRelease.
func (o HelmReleaseStatusPtrOutput) Conditions() HelmReleaseStatusConditionsArrayOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) []HelmReleaseStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmReleaseStatusConditionsArrayOutput)
}

// Failures is the reconciliation failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPtrOutput) Failures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.Failures
	}).(pulumi.IntPtrOutput)
}

// HelmChart is the namespaced name of the HelmChart resource created by
// the controller for the HelmRelease.
func (o HelmReleaseStatusPtrOutput) HelmChart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.HelmChart
	}).(pulumi.StringPtrOutput)
}

// History holds the history of Helm releases performed for this HelmRelease
// up to the last successfully completed release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) History() HelmReleaseStatusHistoryArrayOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) []HelmReleaseStatusHistory {
		if v == nil {
			return nil
		}
		return v.History
	}).(HelmReleaseStatusHistoryArrayOutput)
}

// InstallFailures is the install failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPtrOutput) InstallFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.InstallFailures
	}).(pulumi.IntPtrOutput)
}

// LastAppliedRevision is the revision of the last successfully applied source.
func (o HelmReleaseStatusPtrOutput) LastAppliedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAppliedRevision
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedConfigDigest is the digest for the config (better known as
// "values") of the last reconciliation attempt.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) LastAttemptedConfigDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedConfigDigest
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedGeneration is the last generation the controller attempted
// to reconcile.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) LastAttemptedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.LastAttemptedGeneration
	}).(pulumi.IntPtrOutput)
}

// LastAttemptedReleaseAction is the last release action performed for this
// HelmRelease. It is used to determine the active remediation strategy.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) LastAttemptedReleaseAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedReleaseAction
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedRevision is the revision of the last reconciliation attempt.
func (o HelmReleaseStatusPtrOutput) LastAttemptedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedRevision
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
// reconciliation attempt.
func (o HelmReleaseStatusPtrOutput) LastAttemptedValuesChecksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedValuesChecksum
	}).(pulumi.StringPtrOutput)
}

// LastHandledForceAt holds the value of the most recent force request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) LastHandledForceAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledForceAt
	}).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmReleaseStatusPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// LastHandledResetAt holds the value of the most recent reset request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) LastHandledResetAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledResetAt
	}).(pulumi.StringPtrOutput)
}

// LastReleaseRevision is the revision of the last successful Helm release.
func (o HelmReleaseStatusPtrOutput) LastReleaseRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.LastReleaseRevision
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmReleaseStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedPostRenderersDigest is the digest for the post-renderers of
// the last successful reconciliation attempt.
func (o HelmReleaseStatusPtrOutput) ObservedPostRenderersDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.ObservedPostRenderersDigest
	}).(pulumi.StringPtrOutput)
}

// StorageNamespace is the namespace of the Helm release storage for the
// current release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPtrOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *string {
		if v == nil {
			return nil
		}
		return v.StorageNamespace
	}).(pulumi.StringPtrOutput)
}

// UpgradeFailures is the upgrade failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPtrOutput) UpgradeFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpgradeFailures
	}).(pulumi.IntPtrOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmReleaseStatusConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmReleaseStatusConditionsInput is an input type that accepts HelmReleaseStatusConditionsArgs and HelmReleaseStatusConditionsOutput values.
// You can construct a concrete instance of `HelmReleaseStatusConditionsInput` via:
//
//	HelmReleaseStatusConditionsArgs{...}
type HelmReleaseStatusConditionsInput interface {
	pulumi.Input

	ToHelmReleaseStatusConditionsOutput() HelmReleaseStatusConditionsOutput
	ToHelmReleaseStatusConditionsOutputWithContext(context.Context) HelmReleaseStatusConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmReleaseStatusConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmReleaseStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusConditions)(nil)).Elem()
}

func (i HelmReleaseStatusConditionsArgs) ToHelmReleaseStatusConditionsOutput() HelmReleaseStatusConditionsOutput {
	return i.ToHelmReleaseStatusConditionsOutputWithContext(context.Background())
}

func (i HelmReleaseStatusConditionsArgs) ToHelmReleaseStatusConditionsOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusConditionsOutput)
}

// HelmReleaseStatusConditionsArrayInput is an input type that accepts HelmReleaseStatusConditionsArray and HelmReleaseStatusConditionsArrayOutput values.
// You can construct a concrete instance of `HelmReleaseStatusConditionsArrayInput` via:
//
//	HelmReleaseStatusConditionsArray{ HelmReleaseStatusConditionsArgs{...} }
type HelmReleaseStatusConditionsArrayInput interface {
	pulumi.Input

	ToHelmReleaseStatusConditionsArrayOutput() HelmReleaseStatusConditionsArrayOutput
	ToHelmReleaseStatusConditionsArrayOutputWithContext(context.Context) HelmReleaseStatusConditionsArrayOutput
}

type HelmReleaseStatusConditionsArray []HelmReleaseStatusConditionsInput

func (HelmReleaseStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusConditions)(nil)).Elem()
}

func (i HelmReleaseStatusConditionsArray) ToHelmReleaseStatusConditionsArrayOutput() HelmReleaseStatusConditionsArrayOutput {
	return i.ToHelmReleaseStatusConditionsArrayOutputWithContext(context.Background())
}

func (i HelmReleaseStatusConditionsArray) ToHelmReleaseStatusConditionsArrayOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmReleaseStatusConditionsOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusConditions)(nil)).Elem()
}

func (o HelmReleaseStatusConditionsOutput) ToHelmReleaseStatusConditionsOutput() HelmReleaseStatusConditionsOutput {
	return o
}

func (o HelmReleaseStatusConditionsOutput) ToHelmReleaseStatusConditionsOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmReleaseStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmReleaseStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmReleaseStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmReleaseStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmReleaseStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmReleaseStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmReleaseStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusConditions)(nil)).Elem()
}

func (o HelmReleaseStatusConditionsArrayOutput) ToHelmReleaseStatusConditionsArrayOutput() HelmReleaseStatusConditionsArrayOutput {
	return o
}

func (o HelmReleaseStatusConditionsArrayOutput) ToHelmReleaseStatusConditionsArrayOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsArrayOutput {
	return o
}

func (o HelmReleaseStatusConditionsArrayOutput) Index(i pulumi.IntInput) HelmReleaseStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseStatusConditions {
		return vs[0].([]HelmReleaseStatusConditions)[vs[1].(int)]
	}).(HelmReleaseStatusConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmReleaseStatusConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type *string `pulumi:"type"`
}

// HelmReleaseStatusConditionsPatchInput is an input type that accepts HelmReleaseStatusConditionsPatchArgs and HelmReleaseStatusConditionsPatchOutput values.
// You can construct a concrete instance of `HelmReleaseStatusConditionsPatchInput` via:
//
//	HelmReleaseStatusConditionsPatchArgs{...}
type HelmReleaseStatusConditionsPatchInput interface {
	pulumi.Input

	ToHelmReleaseStatusConditionsPatchOutput() HelmReleaseStatusConditionsPatchOutput
	ToHelmReleaseStatusConditionsPatchOutputWithContext(context.Context) HelmReleaseStatusConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmReleaseStatusConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (HelmReleaseStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusConditionsPatch)(nil)).Elem()
}

func (i HelmReleaseStatusConditionsPatchArgs) ToHelmReleaseStatusConditionsPatchOutput() HelmReleaseStatusConditionsPatchOutput {
	return i.ToHelmReleaseStatusConditionsPatchOutputWithContext(context.Background())
}

func (i HelmReleaseStatusConditionsPatchArgs) ToHelmReleaseStatusConditionsPatchOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusConditionsPatchOutput)
}

// HelmReleaseStatusConditionsPatchArrayInput is an input type that accepts HelmReleaseStatusConditionsPatchArray and HelmReleaseStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseStatusConditionsPatchArrayInput` via:
//
//	HelmReleaseStatusConditionsPatchArray{ HelmReleaseStatusConditionsPatchArgs{...} }
type HelmReleaseStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseStatusConditionsPatchArrayOutput() HelmReleaseStatusConditionsPatchArrayOutput
	ToHelmReleaseStatusConditionsPatchArrayOutputWithContext(context.Context) HelmReleaseStatusConditionsPatchArrayOutput
}

type HelmReleaseStatusConditionsPatchArray []HelmReleaseStatusConditionsPatchInput

func (HelmReleaseStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusConditionsPatch)(nil)).Elem()
}

func (i HelmReleaseStatusConditionsPatchArray) ToHelmReleaseStatusConditionsPatchArrayOutput() HelmReleaseStatusConditionsPatchArrayOutput {
	return i.ToHelmReleaseStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseStatusConditionsPatchArray) ToHelmReleaseStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
type HelmReleaseStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusConditionsPatch)(nil)).Elem()
}

func (o HelmReleaseStatusConditionsPatchOutput) ToHelmReleaseStatusConditionsPatchOutput() HelmReleaseStatusConditionsPatchOutput {
	return o
}

func (o HelmReleaseStatusConditionsPatchOutput) ToHelmReleaseStatusConditionsPatchOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o HelmReleaseStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o HelmReleaseStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o HelmReleaseStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o HelmReleaseStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o HelmReleaseStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
func (o HelmReleaseStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type HelmReleaseStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusConditionsPatch)(nil)).Elem()
}

func (o HelmReleaseStatusConditionsPatchArrayOutput) ToHelmReleaseStatusConditionsPatchArrayOutput() HelmReleaseStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmReleaseStatusConditionsPatchArrayOutput) ToHelmReleaseStatusConditionsPatchArrayOutputWithContext(ctx context.Context) HelmReleaseStatusConditionsPatchArrayOutput {
	return o
}

func (o HelmReleaseStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseStatusConditionsPatch {
		return vs[0].([]HelmReleaseStatusConditionsPatch)[vs[1].(int)]
	}).(HelmReleaseStatusConditionsPatchOutput)
}

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
type HelmReleaseStatusHistory struct {
	// APIVersion is the API version of the Snapshot.
	// Provisional: when the calculation method of the Digest field is changed,
	// this field will be used to distinguish between the old and new methods.
	ApiVersion *string `pulumi:"apiVersion"`
	// AppVersion is the chart app version of the release object in storage.
	AppVersion *string `pulumi:"appVersion"`
	// ChartName is the chart name of the release object in storage.
	ChartName *string `pulumi:"chartName"`
	// ChartVersion is the chart version of the release object in
	// storage.
	ChartVersion *string `pulumi:"chartVersion"`
	// ConfigDigest is the checksum of the config (better known as
	// "values") of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	ConfigDigest *string `pulumi:"configDigest"`
	// Deleted is when the release was deleted.
	Deleted *string `pulumi:"deleted"`
	// Digest is the checksum of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	Digest *string `pulumi:"digest"`
	// FirstDeployed is when the release was first deployed.
	FirstDeployed *string `pulumi:"firstDeployed"`
	// LastDeployed is when the release was last deployed.
	LastDeployed *string `pulumi:"lastDeployed"`
	// Name is the name of the release.
	Name *string `pulumi:"name"`
	// Namespace is the namespace the release is deployed to.
	Namespace *string `pulumi:"namespace"`
	// OCIDigest is the digest of the OCI artifact associated with the release.
	OciDigest *string `pulumi:"ociDigest"`
	// Status is the current state of the release.
	Status *string `pulumi:"status"`
	// TestHooks is the list of test hooks for the release as observed to be
	// run by the controller.
	TestHooks map[string]map[string]string `pulumi:"testHooks"`
	// Version is the version of the release object in storage.
	Version *int `pulumi:"version"`
}

// HelmReleaseStatusHistoryInput is an input type that accepts HelmReleaseStatusHistoryArgs and HelmReleaseStatusHistoryOutput values.
// You can construct a concrete instance of `HelmReleaseStatusHistoryInput` via:
//
//	HelmReleaseStatusHistoryArgs{...}
type HelmReleaseStatusHistoryInput interface {
	pulumi.Input

	ToHelmReleaseStatusHistoryOutput() HelmReleaseStatusHistoryOutput
	ToHelmReleaseStatusHistoryOutputWithContext(context.Context) HelmReleaseStatusHistoryOutput
}

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
type HelmReleaseStatusHistoryArgs struct {
	// APIVersion is the API version of the Snapshot.
	// Provisional: when the calculation method of the Digest field is changed,
	// this field will be used to distinguish between the old and new methods.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// AppVersion is the chart app version of the release object in storage.
	AppVersion pulumi.StringPtrInput `pulumi:"appVersion"`
	// ChartName is the chart name of the release object in storage.
	ChartName pulumi.StringPtrInput `pulumi:"chartName"`
	// ChartVersion is the chart version of the release object in
	// storage.
	ChartVersion pulumi.StringPtrInput `pulumi:"chartVersion"`
	// ConfigDigest is the checksum of the config (better known as
	// "values") of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	ConfigDigest pulumi.StringPtrInput `pulumi:"configDigest"`
	// Deleted is when the release was deleted.
	Deleted pulumi.StringPtrInput `pulumi:"deleted"`
	// Digest is the checksum of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// FirstDeployed is when the release was first deployed.
	FirstDeployed pulumi.StringPtrInput `pulumi:"firstDeployed"`
	// LastDeployed is when the release was last deployed.
	LastDeployed pulumi.StringPtrInput `pulumi:"lastDeployed"`
	// Name is the name of the release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace the release is deployed to.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// OCIDigest is the digest of the OCI artifact associated with the release.
	OciDigest pulumi.StringPtrInput `pulumi:"ociDigest"`
	// Status is the current state of the release.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// TestHooks is the list of test hooks for the release as observed to be
	// run by the controller.
	TestHooks pulumi.StringMapMapInput `pulumi:"testHooks"`
	// Version is the version of the release object in storage.
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (HelmReleaseStatusHistoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusHistory)(nil)).Elem()
}

func (i HelmReleaseStatusHistoryArgs) ToHelmReleaseStatusHistoryOutput() HelmReleaseStatusHistoryOutput {
	return i.ToHelmReleaseStatusHistoryOutputWithContext(context.Background())
}

func (i HelmReleaseStatusHistoryArgs) ToHelmReleaseStatusHistoryOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusHistoryOutput)
}

// HelmReleaseStatusHistoryArrayInput is an input type that accepts HelmReleaseStatusHistoryArray and HelmReleaseStatusHistoryArrayOutput values.
// You can construct a concrete instance of `HelmReleaseStatusHistoryArrayInput` via:
//
//	HelmReleaseStatusHistoryArray{ HelmReleaseStatusHistoryArgs{...} }
type HelmReleaseStatusHistoryArrayInput interface {
	pulumi.Input

	ToHelmReleaseStatusHistoryArrayOutput() HelmReleaseStatusHistoryArrayOutput
	ToHelmReleaseStatusHistoryArrayOutputWithContext(context.Context) HelmReleaseStatusHistoryArrayOutput
}

type HelmReleaseStatusHistoryArray []HelmReleaseStatusHistoryInput

func (HelmReleaseStatusHistoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusHistory)(nil)).Elem()
}

func (i HelmReleaseStatusHistoryArray) ToHelmReleaseStatusHistoryArrayOutput() HelmReleaseStatusHistoryArrayOutput {
	return i.ToHelmReleaseStatusHistoryArrayOutputWithContext(context.Background())
}

func (i HelmReleaseStatusHistoryArray) ToHelmReleaseStatusHistoryArrayOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusHistoryArrayOutput)
}

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
type HelmReleaseStatusHistoryOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusHistoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusHistory)(nil)).Elem()
}

func (o HelmReleaseStatusHistoryOutput) ToHelmReleaseStatusHistoryOutput() HelmReleaseStatusHistoryOutput {
	return o
}

func (o HelmReleaseStatusHistoryOutput) ToHelmReleaseStatusHistoryOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryOutput {
	return o
}

// APIVersion is the API version of the Snapshot.
// Provisional: when the calculation method of the Digest field is changed,
// this field will be used to distinguish between the old and new methods.
func (o HelmReleaseStatusHistoryOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// AppVersion is the chart app version of the release object in storage.
func (o HelmReleaseStatusHistoryOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.AppVersion }).(pulumi.StringPtrOutput)
}

// ChartName is the chart name of the release object in storage.
func (o HelmReleaseStatusHistoryOutput) ChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.ChartName }).(pulumi.StringPtrOutput)
}

// ChartVersion is the chart version of the release object in
// storage.
func (o HelmReleaseStatusHistoryOutput) ChartVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.ChartVersion }).(pulumi.StringPtrOutput)
}

// ConfigDigest is the checksum of the config (better known as
// "values") of the release object in storage.
// It has the format of `<algo>:<checksum>`.
func (o HelmReleaseStatusHistoryOutput) ConfigDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.ConfigDigest }).(pulumi.StringPtrOutput)
}

// Deleted is when the release was deleted.
func (o HelmReleaseStatusHistoryOutput) Deleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.Deleted }).(pulumi.StringPtrOutput)
}

// Digest is the checksum of the release object in storage.
// It has the format of `<algo>:<checksum>`.
func (o HelmReleaseStatusHistoryOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// FirstDeployed is when the release was first deployed.
func (o HelmReleaseStatusHistoryOutput) FirstDeployed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.FirstDeployed }).(pulumi.StringPtrOutput)
}

// LastDeployed is when the release was last deployed.
func (o HelmReleaseStatusHistoryOutput) LastDeployed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.LastDeployed }).(pulumi.StringPtrOutput)
}

// Name is the name of the release.
func (o HelmReleaseStatusHistoryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace the release is deployed to.
func (o HelmReleaseStatusHistoryOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// OCIDigest is the digest of the OCI artifact associated with the release.
func (o HelmReleaseStatusHistoryOutput) OciDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.OciDigest }).(pulumi.StringPtrOutput)
}

// Status is the current state of the release.
func (o HelmReleaseStatusHistoryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// TestHooks is the list of test hooks for the release as observed to be
// run by the controller.
func (o HelmReleaseStatusHistoryOutput) TestHooks() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) map[string]map[string]string { return v.TestHooks }).(pulumi.StringMapMapOutput)
}

// Version is the version of the release object in storage.
func (o HelmReleaseStatusHistoryOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistory) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type HelmReleaseStatusHistoryArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusHistoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusHistory)(nil)).Elem()
}

func (o HelmReleaseStatusHistoryArrayOutput) ToHelmReleaseStatusHistoryArrayOutput() HelmReleaseStatusHistoryArrayOutput {
	return o
}

func (o HelmReleaseStatusHistoryArrayOutput) ToHelmReleaseStatusHistoryArrayOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryArrayOutput {
	return o
}

func (o HelmReleaseStatusHistoryArrayOutput) Index(i pulumi.IntInput) HelmReleaseStatusHistoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseStatusHistory {
		return vs[0].([]HelmReleaseStatusHistory)[vs[1].(int)]
	}).(HelmReleaseStatusHistoryOutput)
}

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
type HelmReleaseStatusHistoryPatch struct {
	// APIVersion is the API version of the Snapshot.
	// Provisional: when the calculation method of the Digest field is changed,
	// this field will be used to distinguish between the old and new methods.
	ApiVersion *string `pulumi:"apiVersion"`
	// AppVersion is the chart app version of the release object in storage.
	AppVersion *string `pulumi:"appVersion"`
	// ChartName is the chart name of the release object in storage.
	ChartName *string `pulumi:"chartName"`
	// ChartVersion is the chart version of the release object in
	// storage.
	ChartVersion *string `pulumi:"chartVersion"`
	// ConfigDigest is the checksum of the config (better known as
	// "values") of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	ConfigDigest *string `pulumi:"configDigest"`
	// Deleted is when the release was deleted.
	Deleted *string `pulumi:"deleted"`
	// Digest is the checksum of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	Digest *string `pulumi:"digest"`
	// FirstDeployed is when the release was first deployed.
	FirstDeployed *string `pulumi:"firstDeployed"`
	// LastDeployed is when the release was last deployed.
	LastDeployed *string `pulumi:"lastDeployed"`
	// Name is the name of the release.
	Name *string `pulumi:"name"`
	// Namespace is the namespace the release is deployed to.
	Namespace *string `pulumi:"namespace"`
	// OCIDigest is the digest of the OCI artifact associated with the release.
	OciDigest *string `pulumi:"ociDigest"`
	// Status is the current state of the release.
	Status *string `pulumi:"status"`
	// TestHooks is the list of test hooks for the release as observed to be
	// run by the controller.
	TestHooks map[string]map[string]string `pulumi:"testHooks"`
	// Version is the version of the release object in storage.
	Version *int `pulumi:"version"`
}

// HelmReleaseStatusHistoryPatchInput is an input type that accepts HelmReleaseStatusHistoryPatchArgs and HelmReleaseStatusHistoryPatchOutput values.
// You can construct a concrete instance of `HelmReleaseStatusHistoryPatchInput` via:
//
//	HelmReleaseStatusHistoryPatchArgs{...}
type HelmReleaseStatusHistoryPatchInput interface {
	pulumi.Input

	ToHelmReleaseStatusHistoryPatchOutput() HelmReleaseStatusHistoryPatchOutput
	ToHelmReleaseStatusHistoryPatchOutputWithContext(context.Context) HelmReleaseStatusHistoryPatchOutput
}

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
type HelmReleaseStatusHistoryPatchArgs struct {
	// APIVersion is the API version of the Snapshot.
	// Provisional: when the calculation method of the Digest field is changed,
	// this field will be used to distinguish between the old and new methods.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// AppVersion is the chart app version of the release object in storage.
	AppVersion pulumi.StringPtrInput `pulumi:"appVersion"`
	// ChartName is the chart name of the release object in storage.
	ChartName pulumi.StringPtrInput `pulumi:"chartName"`
	// ChartVersion is the chart version of the release object in
	// storage.
	ChartVersion pulumi.StringPtrInput `pulumi:"chartVersion"`
	// ConfigDigest is the checksum of the config (better known as
	// "values") of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	ConfigDigest pulumi.StringPtrInput `pulumi:"configDigest"`
	// Deleted is when the release was deleted.
	Deleted pulumi.StringPtrInput `pulumi:"deleted"`
	// Digest is the checksum of the release object in storage.
	// It has the format of `<algo>:<checksum>`.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// FirstDeployed is when the release was first deployed.
	FirstDeployed pulumi.StringPtrInput `pulumi:"firstDeployed"`
	// LastDeployed is when the release was last deployed.
	LastDeployed pulumi.StringPtrInput `pulumi:"lastDeployed"`
	// Name is the name of the release.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace the release is deployed to.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// OCIDigest is the digest of the OCI artifact associated with the release.
	OciDigest pulumi.StringPtrInput `pulumi:"ociDigest"`
	// Status is the current state of the release.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// TestHooks is the list of test hooks for the release as observed to be
	// run by the controller.
	TestHooks pulumi.StringMapMapInput `pulumi:"testHooks"`
	// Version is the version of the release object in storage.
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (HelmReleaseStatusHistoryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusHistoryPatch)(nil)).Elem()
}

func (i HelmReleaseStatusHistoryPatchArgs) ToHelmReleaseStatusHistoryPatchOutput() HelmReleaseStatusHistoryPatchOutput {
	return i.ToHelmReleaseStatusHistoryPatchOutputWithContext(context.Background())
}

func (i HelmReleaseStatusHistoryPatchArgs) ToHelmReleaseStatusHistoryPatchOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusHistoryPatchOutput)
}

// HelmReleaseStatusHistoryPatchArrayInput is an input type that accepts HelmReleaseStatusHistoryPatchArray and HelmReleaseStatusHistoryPatchArrayOutput values.
// You can construct a concrete instance of `HelmReleaseStatusHistoryPatchArrayInput` via:
//
//	HelmReleaseStatusHistoryPatchArray{ HelmReleaseStatusHistoryPatchArgs{...} }
type HelmReleaseStatusHistoryPatchArrayInput interface {
	pulumi.Input

	ToHelmReleaseStatusHistoryPatchArrayOutput() HelmReleaseStatusHistoryPatchArrayOutput
	ToHelmReleaseStatusHistoryPatchArrayOutputWithContext(context.Context) HelmReleaseStatusHistoryPatchArrayOutput
}

type HelmReleaseStatusHistoryPatchArray []HelmReleaseStatusHistoryPatchInput

func (HelmReleaseStatusHistoryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusHistoryPatch)(nil)).Elem()
}

func (i HelmReleaseStatusHistoryPatchArray) ToHelmReleaseStatusHistoryPatchArrayOutput() HelmReleaseStatusHistoryPatchArrayOutput {
	return i.ToHelmReleaseStatusHistoryPatchArrayOutputWithContext(context.Background())
}

func (i HelmReleaseStatusHistoryPatchArray) ToHelmReleaseStatusHistoryPatchArrayOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusHistoryPatchArrayOutput)
}

// Snapshot captures a point-in-time copy of the status information for a Helm release,
// as managed by the controller.
type HelmReleaseStatusHistoryPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusHistoryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusHistoryPatch)(nil)).Elem()
}

func (o HelmReleaseStatusHistoryPatchOutput) ToHelmReleaseStatusHistoryPatchOutput() HelmReleaseStatusHistoryPatchOutput {
	return o
}

func (o HelmReleaseStatusHistoryPatchOutput) ToHelmReleaseStatusHistoryPatchOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryPatchOutput {
	return o
}

// APIVersion is the API version of the Snapshot.
// Provisional: when the calculation method of the Digest field is changed,
// this field will be used to distinguish between the old and new methods.
func (o HelmReleaseStatusHistoryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// AppVersion is the chart app version of the release object in storage.
func (o HelmReleaseStatusHistoryPatchOutput) AppVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.AppVersion }).(pulumi.StringPtrOutput)
}

// ChartName is the chart name of the release object in storage.
func (o HelmReleaseStatusHistoryPatchOutput) ChartName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.ChartName }).(pulumi.StringPtrOutput)
}

// ChartVersion is the chart version of the release object in
// storage.
func (o HelmReleaseStatusHistoryPatchOutput) ChartVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.ChartVersion }).(pulumi.StringPtrOutput)
}

// ConfigDigest is the checksum of the config (better known as
// "values") of the release object in storage.
// It has the format of `<algo>:<checksum>`.
func (o HelmReleaseStatusHistoryPatchOutput) ConfigDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.ConfigDigest }).(pulumi.StringPtrOutput)
}

// Deleted is when the release was deleted.
func (o HelmReleaseStatusHistoryPatchOutput) Deleted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.Deleted }).(pulumi.StringPtrOutput)
}

// Digest is the checksum of the release object in storage.
// It has the format of `<algo>:<checksum>`.
func (o HelmReleaseStatusHistoryPatchOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// FirstDeployed is when the release was first deployed.
func (o HelmReleaseStatusHistoryPatchOutput) FirstDeployed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.FirstDeployed }).(pulumi.StringPtrOutput)
}

// LastDeployed is when the release was last deployed.
func (o HelmReleaseStatusHistoryPatchOutput) LastDeployed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.LastDeployed }).(pulumi.StringPtrOutput)
}

// Name is the name of the release.
func (o HelmReleaseStatusHistoryPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace the release is deployed to.
func (o HelmReleaseStatusHistoryPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// OCIDigest is the digest of the OCI artifact associated with the release.
func (o HelmReleaseStatusHistoryPatchOutput) OciDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.OciDigest }).(pulumi.StringPtrOutput)
}

// Status is the current state of the release.
func (o HelmReleaseStatusHistoryPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// TestHooks is the list of test hooks for the release as observed to be
// run by the controller.
func (o HelmReleaseStatusHistoryPatchOutput) TestHooks() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) map[string]map[string]string { return v.TestHooks }).(pulumi.StringMapMapOutput)
}

// Version is the version of the release object in storage.
func (o HelmReleaseStatusHistoryPatchOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusHistoryPatch) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type HelmReleaseStatusHistoryPatchArrayOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusHistoryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HelmReleaseStatusHistoryPatch)(nil)).Elem()
}

func (o HelmReleaseStatusHistoryPatchArrayOutput) ToHelmReleaseStatusHistoryPatchArrayOutput() HelmReleaseStatusHistoryPatchArrayOutput {
	return o
}

func (o HelmReleaseStatusHistoryPatchArrayOutput) ToHelmReleaseStatusHistoryPatchArrayOutputWithContext(ctx context.Context) HelmReleaseStatusHistoryPatchArrayOutput {
	return o
}

func (o HelmReleaseStatusHistoryPatchArrayOutput) Index(i pulumi.IntInput) HelmReleaseStatusHistoryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HelmReleaseStatusHistoryPatch {
		return vs[0].([]HelmReleaseStatusHistoryPatch)[vs[1].(int)]
	}).(HelmReleaseStatusHistoryPatchOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusPatch struct {
	// Conditions holds the conditions for the HelmRelease.
	Conditions []HelmReleaseStatusConditionsPatch `pulumi:"conditions"`
	// Failures is the reconciliation failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	Failures *int `pulumi:"failures"`
	// HelmChart is the namespaced name of the HelmChart resource created by
	// the controller for the HelmRelease.
	HelmChart *string `pulumi:"helmChart"`
	// History holds the history of Helm releases performed for this HelmRelease
	// up to the last successfully completed release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	History []HelmReleaseStatusHistoryPatch `pulumi:"history"`
	// InstallFailures is the install failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	InstallFailures *int `pulumi:"installFailures"`
	// LastAppliedRevision is the revision of the last successfully applied source.
	LastAppliedRevision *string `pulumi:"lastAppliedRevision"`
	// LastAttemptedConfigDigest is the digest for the config (better known as
	// "values") of the last reconciliation attempt.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedConfigDigest *string `pulumi:"lastAttemptedConfigDigest"`
	// LastAttemptedGeneration is the last generation the controller attempted
	// to reconcile.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedGeneration *int `pulumi:"lastAttemptedGeneration"`
	// LastAttemptedReleaseAction is the last release action performed for this
	// HelmRelease. It is used to determine the active remediation strategy.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedReleaseAction *string `pulumi:"lastAttemptedReleaseAction"`
	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	LastAttemptedRevision *string `pulumi:"lastAttemptedRevision"`
	// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
	// reconciliation attempt.
	LastAttemptedValuesChecksum *string `pulumi:"lastAttemptedValuesChecksum"`
	// LastHandledForceAt holds the value of the most recent force request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledForceAt *string `pulumi:"lastHandledForceAt"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt *string `pulumi:"lastHandledReconcileAt"`
	// LastHandledResetAt holds the value of the most recent reset request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledResetAt *string `pulumi:"lastHandledResetAt"`
	// LastReleaseRevision is the revision of the last successful Helm release.
	LastReleaseRevision *int `pulumi:"lastReleaseRevision"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ObservedPostRenderersDigest is the digest for the post-renderers of
	// the last successful reconciliation attempt.
	ObservedPostRenderersDigest *string `pulumi:"observedPostRenderersDigest"`
	// StorageNamespace is the namespace of the Helm release storage for the
	// current release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	StorageNamespace *string `pulumi:"storageNamespace"`
	// UpgradeFailures is the upgrade failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	UpgradeFailures *int `pulumi:"upgradeFailures"`
}

// HelmReleaseStatusPatchInput is an input type that accepts HelmReleaseStatusPatchArgs and HelmReleaseStatusPatchOutput values.
// You can construct a concrete instance of `HelmReleaseStatusPatchInput` via:
//
//	HelmReleaseStatusPatchArgs{...}
type HelmReleaseStatusPatchInput interface {
	pulumi.Input

	ToHelmReleaseStatusPatchOutput() HelmReleaseStatusPatchOutput
	ToHelmReleaseStatusPatchOutputWithContext(context.Context) HelmReleaseStatusPatchOutput
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusPatchArgs struct {
	// Conditions holds the conditions for the HelmRelease.
	Conditions HelmReleaseStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// Failures is the reconciliation failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	Failures pulumi.IntPtrInput `pulumi:"failures"`
	// HelmChart is the namespaced name of the HelmChart resource created by
	// the controller for the HelmRelease.
	HelmChart pulumi.StringPtrInput `pulumi:"helmChart"`
	// History holds the history of Helm releases performed for this HelmRelease
	// up to the last successfully completed release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	History HelmReleaseStatusHistoryPatchArrayInput `pulumi:"history"`
	// InstallFailures is the install failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	InstallFailures pulumi.IntPtrInput `pulumi:"installFailures"`
	// LastAppliedRevision is the revision of the last successfully applied source.
	LastAppliedRevision pulumi.StringPtrInput `pulumi:"lastAppliedRevision"`
	// LastAttemptedConfigDigest is the digest for the config (better known as
	// "values") of the last reconciliation attempt.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedConfigDigest pulumi.StringPtrInput `pulumi:"lastAttemptedConfigDigest"`
	// LastAttemptedGeneration is the last generation the controller attempted
	// to reconcile.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedGeneration pulumi.IntPtrInput `pulumi:"lastAttemptedGeneration"`
	// LastAttemptedReleaseAction is the last release action performed for this
	// HelmRelease. It is used to determine the active remediation strategy.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastAttemptedReleaseAction pulumi.StringPtrInput `pulumi:"lastAttemptedReleaseAction"`
	// LastAttemptedRevision is the revision of the last reconciliation attempt.
	LastAttemptedRevision pulumi.StringPtrInput `pulumi:"lastAttemptedRevision"`
	// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
	// reconciliation attempt.
	LastAttemptedValuesChecksum pulumi.StringPtrInput `pulumi:"lastAttemptedValuesChecksum"`
	// LastHandledForceAt holds the value of the most recent force request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledForceAt pulumi.StringPtrInput `pulumi:"lastHandledForceAt"`
	// LastHandledReconcileAt holds the value of the most recent
	// reconcile request value, so a change of the annotation value
	// can be detected.
	LastHandledReconcileAt pulumi.StringPtrInput `pulumi:"lastHandledReconcileAt"`
	// LastHandledResetAt holds the value of the most recent reset request
	// value, so a change of the annotation value can be detected.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	LastHandledResetAt pulumi.StringPtrInput `pulumi:"lastHandledResetAt"`
	// LastReleaseRevision is the revision of the last successful Helm release.
	LastReleaseRevision pulumi.IntPtrInput `pulumi:"lastReleaseRevision"`
	// ObservedGeneration is the last observed generation.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ObservedPostRenderersDigest is the digest for the post-renderers of
	// the last successful reconciliation attempt.
	ObservedPostRenderersDigest pulumi.StringPtrInput `pulumi:"observedPostRenderersDigest"`
	// StorageNamespace is the namespace of the Helm release storage for the
	// current release.
	//
	// Note: this field is provisional to the v2beta2 API, and not actively used
	// by v2beta1 HelmReleases.
	StorageNamespace pulumi.StringPtrInput `pulumi:"storageNamespace"`
	// UpgradeFailures is the upgrade failure count against the latest desired
	// state. It is reset after a successful reconciliation.
	UpgradeFailures pulumi.IntPtrInput `pulumi:"upgradeFailures"`
}

func (HelmReleaseStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusPatch)(nil)).Elem()
}

func (i HelmReleaseStatusPatchArgs) ToHelmReleaseStatusPatchOutput() HelmReleaseStatusPatchOutput {
	return i.ToHelmReleaseStatusPatchOutputWithContext(context.Background())
}

func (i HelmReleaseStatusPatchArgs) ToHelmReleaseStatusPatchOutputWithContext(ctx context.Context) HelmReleaseStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusPatchOutput)
}

func (i HelmReleaseStatusPatchArgs) ToHelmReleaseStatusPatchPtrOutput() HelmReleaseStatusPatchPtrOutput {
	return i.ToHelmReleaseStatusPatchPtrOutputWithContext(context.Background())
}

func (i HelmReleaseStatusPatchArgs) ToHelmReleaseStatusPatchPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusPatchOutput).ToHelmReleaseStatusPatchPtrOutputWithContext(ctx)
}

// HelmReleaseStatusPatchPtrInput is an input type that accepts HelmReleaseStatusPatchArgs, HelmReleaseStatusPatchPtr and HelmReleaseStatusPatchPtrOutput values.
// You can construct a concrete instance of `HelmReleaseStatusPatchPtrInput` via:
//
//	        HelmReleaseStatusPatchArgs{...}
//
//	or:
//
//	        nil
type HelmReleaseStatusPatchPtrInput interface {
	pulumi.Input

	ToHelmReleaseStatusPatchPtrOutput() HelmReleaseStatusPatchPtrOutput
	ToHelmReleaseStatusPatchPtrOutputWithContext(context.Context) HelmReleaseStatusPatchPtrOutput
}

type helmReleaseStatusPatchPtrType HelmReleaseStatusPatchArgs

func HelmReleaseStatusPatchPtr(v *HelmReleaseStatusPatchArgs) HelmReleaseStatusPatchPtrInput {
	return (*helmReleaseStatusPatchPtrType)(v)
}

func (*helmReleaseStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseStatusPatch)(nil)).Elem()
}

func (i *helmReleaseStatusPatchPtrType) ToHelmReleaseStatusPatchPtrOutput() HelmReleaseStatusPatchPtrOutput {
	return i.ToHelmReleaseStatusPatchPtrOutputWithContext(context.Background())
}

func (i *helmReleaseStatusPatchPtrType) ToHelmReleaseStatusPatchPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmReleaseStatusPatchPtrOutput)
}

// HelmReleaseStatus defines the observed state of a HelmRelease.
type HelmReleaseStatusPatchOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleaseStatusPatch)(nil)).Elem()
}

func (o HelmReleaseStatusPatchOutput) ToHelmReleaseStatusPatchOutput() HelmReleaseStatusPatchOutput {
	return o
}

func (o HelmReleaseStatusPatchOutput) ToHelmReleaseStatusPatchOutputWithContext(ctx context.Context) HelmReleaseStatusPatchOutput {
	return o
}

func (o HelmReleaseStatusPatchOutput) ToHelmReleaseStatusPatchPtrOutput() HelmReleaseStatusPatchPtrOutput {
	return o.ToHelmReleaseStatusPatchPtrOutputWithContext(context.Background())
}

func (o HelmReleaseStatusPatchOutput) ToHelmReleaseStatusPatchPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmReleaseStatusPatch) *HelmReleaseStatusPatch {
		return &v
	}).(HelmReleaseStatusPatchPtrOutput)
}

// Conditions holds the conditions for the HelmRelease.
func (o HelmReleaseStatusPatchOutput) Conditions() HelmReleaseStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) []HelmReleaseStatusConditionsPatch { return v.Conditions }).(HelmReleaseStatusConditionsPatchArrayOutput)
}

// Failures is the reconciliation failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPatchOutput) Failures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *int { return v.Failures }).(pulumi.IntPtrOutput)
}

// HelmChart is the namespaced name of the HelmChart resource created by
// the controller for the HelmRelease.
func (o HelmReleaseStatusPatchOutput) HelmChart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.HelmChart }).(pulumi.StringPtrOutput)
}

// History holds the history of Helm releases performed for this HelmRelease
// up to the last successfully completed release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) History() HelmReleaseStatusHistoryPatchArrayOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) []HelmReleaseStatusHistoryPatch { return v.History }).(HelmReleaseStatusHistoryPatchArrayOutput)
}

// InstallFailures is the install failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPatchOutput) InstallFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *int { return v.InstallFailures }).(pulumi.IntPtrOutput)
}

// LastAppliedRevision is the revision of the last successfully applied source.
func (o HelmReleaseStatusPatchOutput) LastAppliedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastAppliedRevision }).(pulumi.StringPtrOutput)
}

// LastAttemptedConfigDigest is the digest for the config (better known as
// "values") of the last reconciliation attempt.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) LastAttemptedConfigDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastAttemptedConfigDigest }).(pulumi.StringPtrOutput)
}

// LastAttemptedGeneration is the last generation the controller attempted
// to reconcile.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) LastAttemptedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *int { return v.LastAttemptedGeneration }).(pulumi.IntPtrOutput)
}

// LastAttemptedReleaseAction is the last release action performed for this
// HelmRelease. It is used to determine the active remediation strategy.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) LastAttemptedReleaseAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastAttemptedReleaseAction }).(pulumi.StringPtrOutput)
}

// LastAttemptedRevision is the revision of the last reconciliation attempt.
func (o HelmReleaseStatusPatchOutput) LastAttemptedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastAttemptedRevision }).(pulumi.StringPtrOutput)
}

// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
// reconciliation attempt.
func (o HelmReleaseStatusPatchOutput) LastAttemptedValuesChecksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastAttemptedValuesChecksum }).(pulumi.StringPtrOutput)
}

// LastHandledForceAt holds the value of the most recent force request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) LastHandledForceAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastHandledForceAt }).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmReleaseStatusPatchOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastHandledReconcileAt }).(pulumi.StringPtrOutput)
}

// LastHandledResetAt holds the value of the most recent reset request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) LastHandledResetAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.LastHandledResetAt }).(pulumi.StringPtrOutput)
}

// LastReleaseRevision is the revision of the last successful Helm release.
func (o HelmReleaseStatusPatchOutput) LastReleaseRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *int { return v.LastReleaseRevision }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmReleaseStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ObservedPostRenderersDigest is the digest for the post-renderers of
// the last successful reconciliation attempt.
func (o HelmReleaseStatusPatchOutput) ObservedPostRenderersDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.ObservedPostRenderersDigest }).(pulumi.StringPtrOutput)
}

// StorageNamespace is the namespace of the Helm release storage for the
// current release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *string { return v.StorageNamespace }).(pulumi.StringPtrOutput)
}

// UpgradeFailures is the upgrade failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPatchOutput) UpgradeFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HelmReleaseStatusPatch) *int { return v.UpgradeFailures }).(pulumi.IntPtrOutput)
}

type HelmReleaseStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (HelmReleaseStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleaseStatusPatch)(nil)).Elem()
}

func (o HelmReleaseStatusPatchPtrOutput) ToHelmReleaseStatusPatchPtrOutput() HelmReleaseStatusPatchPtrOutput {
	return o
}

func (o HelmReleaseStatusPatchPtrOutput) ToHelmReleaseStatusPatchPtrOutputWithContext(ctx context.Context) HelmReleaseStatusPatchPtrOutput {
	return o
}

func (o HelmReleaseStatusPatchPtrOutput) Elem() HelmReleaseStatusPatchOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) HelmReleaseStatusPatch {
		if v != nil {
			return *v
		}
		var ret HelmReleaseStatusPatch
		return ret
	}).(HelmReleaseStatusPatchOutput)
}

// Conditions holds the conditions for the HelmRelease.
func (o HelmReleaseStatusPatchPtrOutput) Conditions() HelmReleaseStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) []HelmReleaseStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(HelmReleaseStatusConditionsPatchArrayOutput)
}

// Failures is the reconciliation failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPatchPtrOutput) Failures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Failures
	}).(pulumi.IntPtrOutput)
}

// HelmChart is the namespaced name of the HelmChart resource created by
// the controller for the HelmRelease.
func (o HelmReleaseStatusPatchPtrOutput) HelmChart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.HelmChart
	}).(pulumi.StringPtrOutput)
}

// History holds the history of Helm releases performed for this HelmRelease
// up to the last successfully completed release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) History() HelmReleaseStatusHistoryPatchArrayOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) []HelmReleaseStatusHistoryPatch {
		if v == nil {
			return nil
		}
		return v.History
	}).(HelmReleaseStatusHistoryPatchArrayOutput)
}

// InstallFailures is the install failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPatchPtrOutput) InstallFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.InstallFailures
	}).(pulumi.IntPtrOutput)
}

// LastAppliedRevision is the revision of the last successfully applied source.
func (o HelmReleaseStatusPatchPtrOutput) LastAppliedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastAppliedRevision
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedConfigDigest is the digest for the config (better known as
// "values") of the last reconciliation attempt.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) LastAttemptedConfigDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedConfigDigest
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedGeneration is the last generation the controller attempted
// to reconcile.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) LastAttemptedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.LastAttemptedGeneration
	}).(pulumi.IntPtrOutput)
}

// LastAttemptedReleaseAction is the last release action performed for this
// HelmRelease. It is used to determine the active remediation strategy.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) LastAttemptedReleaseAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedReleaseAction
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedRevision is the revision of the last reconciliation attempt.
func (o HelmReleaseStatusPatchPtrOutput) LastAttemptedRevision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedRevision
	}).(pulumi.StringPtrOutput)
}

// LastAttemptedValuesChecksum is the SHA1 checksum of the values of the last
// reconciliation attempt.
func (o HelmReleaseStatusPatchPtrOutput) LastAttemptedValuesChecksum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastAttemptedValuesChecksum
	}).(pulumi.StringPtrOutput)
}

// LastHandledForceAt holds the value of the most recent force request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) LastHandledForceAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledForceAt
	}).(pulumi.StringPtrOutput)
}

// LastHandledReconcileAt holds the value of the most recent
// reconcile request value, so a change of the annotation value
// can be detected.
func (o HelmReleaseStatusPatchPtrOutput) LastHandledReconcileAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledReconcileAt
	}).(pulumi.StringPtrOutput)
}

// LastHandledResetAt holds the value of the most recent reset request
// value, so a change of the annotation value can be detected.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) LastHandledResetAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.LastHandledResetAt
	}).(pulumi.StringPtrOutput)
}

// LastReleaseRevision is the revision of the last successful Helm release.
func (o HelmReleaseStatusPatchPtrOutput) LastReleaseRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.LastReleaseRevision
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the last observed generation.
func (o HelmReleaseStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ObservedPostRenderersDigest is the digest for the post-renderers of
// the last successful reconciliation attempt.
func (o HelmReleaseStatusPatchPtrOutput) ObservedPostRenderersDigest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObservedPostRenderersDigest
	}).(pulumi.StringPtrOutput)
}

// StorageNamespace is the namespace of the Helm release storage for the
// current release.
//
// Note: this field is provisional to the v2beta2 API, and not actively used
// by v2beta1 HelmReleases.
func (o HelmReleaseStatusPatchPtrOutput) StorageNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageNamespace
	}).(pulumi.StringPtrOutput)
}

// UpgradeFailures is the upgrade failure count against the latest desired
// state. It is reset after a successful reconciliation.
func (o HelmReleaseStatusPatchPtrOutput) UpgradeFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HelmReleaseStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.UpgradeFailures
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseTypeInput)(nil)).Elem(), HelmReleaseTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseTypeArrayInput)(nil)).Elem(), HelmReleaseTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseListTypeInput)(nil)).Elem(), HelmReleaseListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleasePatchTypeInput)(nil)).Elem(), HelmReleasePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInput)(nil)).Elem(), HelmReleaseSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPtrInput)(nil)).Elem(), HelmReleaseSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartInput)(nil)).Elem(), HelmReleaseSpecChartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartPtrInput)(nil)).Elem(), HelmReleaseSpecChartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartMetadataInput)(nil)).Elem(), HelmReleaseSpecChartMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartMetadataPtrInput)(nil)).Elem(), HelmReleaseSpecChartMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartMetadataPatchInput)(nil)).Elem(), HelmReleaseSpecChartMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartMetadataPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartPatchInput)(nil)).Elem(), HelmReleaseSpecChartPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartRefInput)(nil)).Elem(), HelmReleaseSpecChartRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartRefPtrInput)(nil)).Elem(), HelmReleaseSpecChartRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartRefPatchInput)(nil)).Elem(), HelmReleaseSpecChartRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartRefPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecInput)(nil)).Elem(), HelmReleaseSpecChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecPatchInput)(nil)).Elem(), HelmReleaseSpecChartSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRefInput)(nil)).Elem(), HelmReleaseSpecChartSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRefPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRefPatchInput)(nil)).Elem(), HelmReleaseSpecChartSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecSourceRefPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifyInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifyPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifyPatchInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifyPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRefInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRefPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRefPatchInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecChartSpecVerifySecretRefPatchPtrInput)(nil)).Elem(), HelmReleaseSpecChartSpecVerifySecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDependsOnInput)(nil)).Elem(), HelmReleaseSpecDependsOnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDependsOnArrayInput)(nil)).Elem(), HelmReleaseSpecDependsOnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDependsOnPatchInput)(nil)).Elem(), HelmReleaseSpecDependsOnPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDependsOnPatchArrayInput)(nil)).Elem(), HelmReleaseSpecDependsOnPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionPtrInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreArrayInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnorePatchInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnorePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnorePatchArrayInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnorePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTargetInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnoreTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTargetPtrInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnoreTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTargetPatchInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionIgnoreTargetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionPatchInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecDriftDetectionPatchPtrInput)(nil)).Elem(), HelmReleaseSpecDriftDetectionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallInput)(nil)).Elem(), HelmReleaseSpecInstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallPtrInput)(nil)).Elem(), HelmReleaseSpecInstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallPatchInput)(nil)).Elem(), HelmReleaseSpecInstallPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallPatchPtrInput)(nil)).Elem(), HelmReleaseSpecInstallPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallRemediationInput)(nil)).Elem(), HelmReleaseSpecInstallRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallRemediationPtrInput)(nil)).Elem(), HelmReleaseSpecInstallRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallRemediationPatchInput)(nil)).Elem(), HelmReleaseSpecInstallRemediationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecInstallRemediationPatchPtrInput)(nil)).Elem(), HelmReleaseSpecInstallRemediationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigInput)(nil)).Elem(), HelmReleaseSpecKubeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigPtrInput)(nil)).Elem(), HelmReleaseSpecKubeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigPatchInput)(nil)).Elem(), HelmReleaseSpecKubeConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigPatchPtrInput)(nil)).Elem(), HelmReleaseSpecKubeConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRefInput)(nil)).Elem(), HelmReleaseSpecKubeConfigSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRefPtrInput)(nil)).Elem(), HelmReleaseSpecKubeConfigSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRefPatchInput)(nil)).Elem(), HelmReleaseSpecKubeConfigSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecKubeConfigSecretRefPatchPtrInput)(nil)).Elem(), HelmReleaseSpecKubeConfigSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPatchInput)(nil)).Elem(), HelmReleaseSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPatchPtrInput)(nil)).Elem(), HelmReleaseSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersInput)(nil)).Elem(), HelmReleaseSpecPostRenderersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePtrInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImagesInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizeImagesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImagesArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizeImagesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImagesPatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizeImagesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizeImagesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchPtrInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902Input)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesPatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTargetInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrInput)(nil)).Elem(), HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersPatchInput)(nil)).Elem(), HelmReleaseSpecPostRenderersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecPostRenderersPatchArrayInput)(nil)).Elem(), HelmReleaseSpecPostRenderersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecRollbackInput)(nil)).Elem(), HelmReleaseSpecRollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecRollbackPtrInput)(nil)).Elem(), HelmReleaseSpecRollbackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecRollbackPatchInput)(nil)).Elem(), HelmReleaseSpecRollbackPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecRollbackPatchPtrInput)(nil)).Elem(), HelmReleaseSpecRollbackPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecTestInput)(nil)).Elem(), HelmReleaseSpecTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecTestPtrInput)(nil)).Elem(), HelmReleaseSpecTestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecTestPatchInput)(nil)).Elem(), HelmReleaseSpecTestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecTestPatchPtrInput)(nil)).Elem(), HelmReleaseSpecTestPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUninstallInput)(nil)).Elem(), HelmReleaseSpecUninstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUninstallPtrInput)(nil)).Elem(), HelmReleaseSpecUninstallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUninstallPatchInput)(nil)).Elem(), HelmReleaseSpecUninstallPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUninstallPatchPtrInput)(nil)).Elem(), HelmReleaseSpecUninstallPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeInput)(nil)).Elem(), HelmReleaseSpecUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradePtrInput)(nil)).Elem(), HelmReleaseSpecUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradePatchInput)(nil)).Elem(), HelmReleaseSpecUpgradePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradePatchPtrInput)(nil)).Elem(), HelmReleaseSpecUpgradePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationInput)(nil)).Elem(), HelmReleaseSpecUpgradeRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationPtrInput)(nil)).Elem(), HelmReleaseSpecUpgradeRemediationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationPatchInput)(nil)).Elem(), HelmReleaseSpecUpgradeRemediationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecUpgradeRemediationPatchPtrInput)(nil)).Elem(), HelmReleaseSpecUpgradeRemediationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecValuesFromInput)(nil)).Elem(), HelmReleaseSpecValuesFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecValuesFromArrayInput)(nil)).Elem(), HelmReleaseSpecValuesFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecValuesFromPatchInput)(nil)).Elem(), HelmReleaseSpecValuesFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseSpecValuesFromPatchArrayInput)(nil)).Elem(), HelmReleaseSpecValuesFromPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusInput)(nil)).Elem(), HelmReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusPtrInput)(nil)).Elem(), HelmReleaseStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusConditionsInput)(nil)).Elem(), HelmReleaseStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusConditionsArrayInput)(nil)).Elem(), HelmReleaseStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusConditionsPatchInput)(nil)).Elem(), HelmReleaseStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusConditionsPatchArrayInput)(nil)).Elem(), HelmReleaseStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusHistoryInput)(nil)).Elem(), HelmReleaseStatusHistoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusHistoryArrayInput)(nil)).Elem(), HelmReleaseStatusHistoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusHistoryPatchInput)(nil)).Elem(), HelmReleaseStatusHistoryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusHistoryPatchArrayInput)(nil)).Elem(), HelmReleaseStatusHistoryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusPatchInput)(nil)).Elem(), HelmReleaseStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HelmReleaseStatusPatchPtrInput)(nil)).Elem(), HelmReleaseStatusPatchArgs{})
	pulumi.RegisterOutputType(HelmReleaseTypeOutput{})
	pulumi.RegisterOutputType(HelmReleaseTypeArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseListTypeOutput{})
	pulumi.RegisterOutputType(HelmReleasePatchTypeOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartMetadataOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartMetadataPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartMetadataPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartRefOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartRefPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartRefPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecSourceRefOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecSourceRefPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecSourceRefPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifyOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifyPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifyPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifyPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifySecretRefOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifySecretRefPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifySecretRefPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecChartSpecVerifySecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDependsOnOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDependsOnArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDependsOnPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDependsOnPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnoreOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnoreArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnorePatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnorePatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnoreTargetOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnoreTargetPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnoreTargetPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionIgnoreTargetPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecDriftDetectionPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallRemediationOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallRemediationPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallRemediationPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecInstallRemediationPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigSecretRefOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigSecretRefPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigSecretRefPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecKubeConfigSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizeOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizeImagesOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizeImagesArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizeImagesPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizeImagesPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902Output{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902ArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902PatchPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesJson6902TargetPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesTargetOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesTargetPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersKustomizePatchesTargetPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecPostRenderersPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecRollbackOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecRollbackPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecRollbackPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecRollbackPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecTestOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecTestPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecTestPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecTestPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUninstallOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUninstallPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUninstallPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUninstallPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradePtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradePatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradePatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeRemediationOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeRemediationPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeRemediationPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecUpgradeRemediationPatchPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecValuesFromOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecValuesFromArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecValuesFromPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseSpecValuesFromPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusPtrOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusConditionsOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusHistoryOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusHistoryArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusHistoryPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusHistoryPatchArrayOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusPatchOutput{})
	pulumi.RegisterOutputType(HelmReleaseStatusPatchPtrOutput{})
}
