// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// BackendTLSPolicy provides a way to configure how a Gateway
// connects to a Backend via TLS.
type BackendTLSPolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput      `pulumi:"metadata"`
	Spec     BackendTLSPolicySpecPatchPtrOutput   `pulumi:"spec"`
	Status   BackendTLSPolicyStatusPatchPtrOutput `pulumi:"status"`
}

// NewBackendTLSPolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewBackendTLSPolicyPatch(ctx *pulumi.Context,
	name string, args *BackendTLSPolicyPatchArgs, opts ...pulumi.ResourceOption) (*BackendTLSPolicyPatch, error) {
	if args == nil {
		args = &BackendTLSPolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha3")
	args.Kind = pulumi.StringPtr("BackendTLSPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BackendTLSPolicyPatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha3:BackendTLSPolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendTLSPolicyPatch gets an existing BackendTLSPolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendTLSPolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendTLSPolicyPatchState, opts ...pulumi.ResourceOption) (*BackendTLSPolicyPatch, error) {
	var resource BackendTLSPolicyPatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha3:BackendTLSPolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendTLSPolicyPatch resources.
type backendTLSPolicyPatchState struct {
}

type BackendTLSPolicyPatchState struct {
}

func (BackendTLSPolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendTLSPolicyPatchState)(nil)).Elem()
}

type backendTLSPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch    `pulumi:"metadata"`
	Spec     *BackendTLSPolicySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a BackendTLSPolicyPatch resource.
type BackendTLSPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     BackendTLSPolicySpecPatchPtrInput
}

func (BackendTLSPolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendTLSPolicyPatchArgs)(nil)).Elem()
}

type BackendTLSPolicyPatchInput interface {
	pulumi.Input

	ToBackendTLSPolicyPatchOutput() BackendTLSPolicyPatchOutput
	ToBackendTLSPolicyPatchOutputWithContext(ctx context.Context) BackendTLSPolicyPatchOutput
}

func (*BackendTLSPolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTLSPolicyPatch)(nil)).Elem()
}

func (i *BackendTLSPolicyPatch) ToBackendTLSPolicyPatchOutput() BackendTLSPolicyPatchOutput {
	return i.ToBackendTLSPolicyPatchOutputWithContext(context.Background())
}

func (i *BackendTLSPolicyPatch) ToBackendTLSPolicyPatchOutputWithContext(ctx context.Context) BackendTLSPolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyPatchOutput)
}

// BackendTLSPolicyPatchArrayInput is an input type that accepts BackendTLSPolicyPatchArray and BackendTLSPolicyPatchArrayOutput values.
// You can construct a concrete instance of `BackendTLSPolicyPatchArrayInput` via:
//
//	BackendTLSPolicyPatchArray{ BackendTLSPolicyPatchArgs{...} }
type BackendTLSPolicyPatchArrayInput interface {
	pulumi.Input

	ToBackendTLSPolicyPatchArrayOutput() BackendTLSPolicyPatchArrayOutput
	ToBackendTLSPolicyPatchArrayOutputWithContext(context.Context) BackendTLSPolicyPatchArrayOutput
}

type BackendTLSPolicyPatchArray []BackendTLSPolicyPatchInput

func (BackendTLSPolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendTLSPolicyPatch)(nil)).Elem()
}

func (i BackendTLSPolicyPatchArray) ToBackendTLSPolicyPatchArrayOutput() BackendTLSPolicyPatchArrayOutput {
	return i.ToBackendTLSPolicyPatchArrayOutputWithContext(context.Background())
}

func (i BackendTLSPolicyPatchArray) ToBackendTLSPolicyPatchArrayOutputWithContext(ctx context.Context) BackendTLSPolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyPatchArrayOutput)
}

// BackendTLSPolicyPatchMapInput is an input type that accepts BackendTLSPolicyPatchMap and BackendTLSPolicyPatchMapOutput values.
// You can construct a concrete instance of `BackendTLSPolicyPatchMapInput` via:
//
//	BackendTLSPolicyPatchMap{ "key": BackendTLSPolicyPatchArgs{...} }
type BackendTLSPolicyPatchMapInput interface {
	pulumi.Input

	ToBackendTLSPolicyPatchMapOutput() BackendTLSPolicyPatchMapOutput
	ToBackendTLSPolicyPatchMapOutputWithContext(context.Context) BackendTLSPolicyPatchMapOutput
}

type BackendTLSPolicyPatchMap map[string]BackendTLSPolicyPatchInput

func (BackendTLSPolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendTLSPolicyPatch)(nil)).Elem()
}

func (i BackendTLSPolicyPatchMap) ToBackendTLSPolicyPatchMapOutput() BackendTLSPolicyPatchMapOutput {
	return i.ToBackendTLSPolicyPatchMapOutputWithContext(context.Background())
}

func (i BackendTLSPolicyPatchMap) ToBackendTLSPolicyPatchMapOutputWithContext(ctx context.Context) BackendTLSPolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyPatchMapOutput)
}

type BackendTLSPolicyPatchOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTLSPolicyPatch)(nil)).Elem()
}

func (o BackendTLSPolicyPatchOutput) ToBackendTLSPolicyPatchOutput() BackendTLSPolicyPatchOutput {
	return o
}

func (o BackendTLSPolicyPatchOutput) ToBackendTLSPolicyPatchOutputWithContext(ctx context.Context) BackendTLSPolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BackendTLSPolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BackendTLSPolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BackendTLSPolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o BackendTLSPolicyPatchOutput) Spec() BackendTLSPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicyPatch) BackendTLSPolicySpecPatchPtrOutput { return v.Spec }).(BackendTLSPolicySpecPatchPtrOutput)
}

func (o BackendTLSPolicyPatchOutput) Status() BackendTLSPolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicyPatch) BackendTLSPolicyStatusPatchPtrOutput { return v.Status }).(BackendTLSPolicyStatusPatchPtrOutput)
}

type BackendTLSPolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendTLSPolicyPatch)(nil)).Elem()
}

func (o BackendTLSPolicyPatchArrayOutput) ToBackendTLSPolicyPatchArrayOutput() BackendTLSPolicyPatchArrayOutput {
	return o
}

func (o BackendTLSPolicyPatchArrayOutput) ToBackendTLSPolicyPatchArrayOutputWithContext(ctx context.Context) BackendTLSPolicyPatchArrayOutput {
	return o
}

func (o BackendTLSPolicyPatchArrayOutput) Index(i pulumi.IntInput) BackendTLSPolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendTLSPolicyPatch {
		return vs[0].([]*BackendTLSPolicyPatch)[vs[1].(int)]
	}).(BackendTLSPolicyPatchOutput)
}

type BackendTLSPolicyPatchMapOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendTLSPolicyPatch)(nil)).Elem()
}

func (o BackendTLSPolicyPatchMapOutput) ToBackendTLSPolicyPatchMapOutput() BackendTLSPolicyPatchMapOutput {
	return o
}

func (o BackendTLSPolicyPatchMapOutput) ToBackendTLSPolicyPatchMapOutputWithContext(ctx context.Context) BackendTLSPolicyPatchMapOutput {
	return o
}

func (o BackendTLSPolicyPatchMapOutput) MapIndex(k pulumi.StringInput) BackendTLSPolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendTLSPolicyPatch {
		return vs[0].(map[string]*BackendTLSPolicyPatch)[vs[1].(string)]
	}).(BackendTLSPolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyPatchInput)(nil)).Elem(), &BackendTLSPolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyPatchArrayInput)(nil)).Elem(), BackendTLSPolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyPatchMapInput)(nil)).Elem(), BackendTLSPolicyPatchMap{})
	pulumi.RegisterOutputType(BackendTLSPolicyPatchOutput{})
	pulumi.RegisterOutputType(BackendTLSPolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(BackendTLSPolicyPatchMapOutput{})
}
