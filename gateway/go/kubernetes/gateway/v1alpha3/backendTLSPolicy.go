// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BackendTLSPolicy provides a way to configure how a Gateway
// connects to a Backend via TLS.
type BackendTLSPolicy struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput         `pulumi:"metadata"`
	Spec     BackendTLSPolicySpecOutput      `pulumi:"spec"`
	Status   BackendTLSPolicyStatusPtrOutput `pulumi:"status"`
}

// NewBackendTLSPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackendTLSPolicy(ctx *pulumi.Context,
	name string, args *BackendTLSPolicyArgs, opts ...pulumi.ResourceOption) (*BackendTLSPolicy, error) {
	if args == nil {
		args = &BackendTLSPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha3")
	args.Kind = pulumi.StringPtr("BackendTLSPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BackendTLSPolicy
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha3:BackendTLSPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackendTLSPolicy gets an existing BackendTLSPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackendTLSPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackendTLSPolicyState, opts ...pulumi.ResourceOption) (*BackendTLSPolicy, error) {
	var resource BackendTLSPolicy
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha3:BackendTLSPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackendTLSPolicy resources.
type backendTLSPolicyState struct {
}

type BackendTLSPolicyState struct {
}

func (BackendTLSPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backendTLSPolicyState)(nil)).Elem()
}

type backendTLSPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta    `pulumi:"metadata"`
	Spec     *BackendTLSPolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a BackendTLSPolicy resource.
type BackendTLSPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     BackendTLSPolicySpecPtrInput
}

func (BackendTLSPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backendTLSPolicyArgs)(nil)).Elem()
}

type BackendTLSPolicyInput interface {
	pulumi.Input

	ToBackendTLSPolicyOutput() BackendTLSPolicyOutput
	ToBackendTLSPolicyOutputWithContext(ctx context.Context) BackendTLSPolicyOutput
}

func (*BackendTLSPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTLSPolicy)(nil)).Elem()
}

func (i *BackendTLSPolicy) ToBackendTLSPolicyOutput() BackendTLSPolicyOutput {
	return i.ToBackendTLSPolicyOutputWithContext(context.Background())
}

func (i *BackendTLSPolicy) ToBackendTLSPolicyOutputWithContext(ctx context.Context) BackendTLSPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyOutput)
}

// BackendTLSPolicyArrayInput is an input type that accepts BackendTLSPolicyArray and BackendTLSPolicyArrayOutput values.
// You can construct a concrete instance of `BackendTLSPolicyArrayInput` via:
//
//	BackendTLSPolicyArray{ BackendTLSPolicyArgs{...} }
type BackendTLSPolicyArrayInput interface {
	pulumi.Input

	ToBackendTLSPolicyArrayOutput() BackendTLSPolicyArrayOutput
	ToBackendTLSPolicyArrayOutputWithContext(context.Context) BackendTLSPolicyArrayOutput
}

type BackendTLSPolicyArray []BackendTLSPolicyInput

func (BackendTLSPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendTLSPolicy)(nil)).Elem()
}

func (i BackendTLSPolicyArray) ToBackendTLSPolicyArrayOutput() BackendTLSPolicyArrayOutput {
	return i.ToBackendTLSPolicyArrayOutputWithContext(context.Background())
}

func (i BackendTLSPolicyArray) ToBackendTLSPolicyArrayOutputWithContext(ctx context.Context) BackendTLSPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyArrayOutput)
}

// BackendTLSPolicyMapInput is an input type that accepts BackendTLSPolicyMap and BackendTLSPolicyMapOutput values.
// You can construct a concrete instance of `BackendTLSPolicyMapInput` via:
//
//	BackendTLSPolicyMap{ "key": BackendTLSPolicyArgs{...} }
type BackendTLSPolicyMapInput interface {
	pulumi.Input

	ToBackendTLSPolicyMapOutput() BackendTLSPolicyMapOutput
	ToBackendTLSPolicyMapOutputWithContext(context.Context) BackendTLSPolicyMapOutput
}

type BackendTLSPolicyMap map[string]BackendTLSPolicyInput

func (BackendTLSPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendTLSPolicy)(nil)).Elem()
}

func (i BackendTLSPolicyMap) ToBackendTLSPolicyMapOutput() BackendTLSPolicyMapOutput {
	return i.ToBackendTLSPolicyMapOutputWithContext(context.Background())
}

func (i BackendTLSPolicyMap) ToBackendTLSPolicyMapOutputWithContext(ctx context.Context) BackendTLSPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackendTLSPolicyMapOutput)
}

type BackendTLSPolicyOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackendTLSPolicy)(nil)).Elem()
}

func (o BackendTLSPolicyOutput) ToBackendTLSPolicyOutput() BackendTLSPolicyOutput {
	return o
}

func (o BackendTLSPolicyOutput) ToBackendTLSPolicyOutputWithContext(ctx context.Context) BackendTLSPolicyOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BackendTLSPolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BackendTLSPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BackendTLSPolicyOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o BackendTLSPolicyOutput) Spec() BackendTLSPolicySpecOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) BackendTLSPolicySpecOutput { return v.Spec }).(BackendTLSPolicySpecOutput)
}

func (o BackendTLSPolicyOutput) Status() BackendTLSPolicyStatusPtrOutput {
	return o.ApplyT(func(v *BackendTLSPolicy) BackendTLSPolicyStatusPtrOutput { return v.Status }).(BackendTLSPolicyStatusPtrOutput)
}

type BackendTLSPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackendTLSPolicy)(nil)).Elem()
}

func (o BackendTLSPolicyArrayOutput) ToBackendTLSPolicyArrayOutput() BackendTLSPolicyArrayOutput {
	return o
}

func (o BackendTLSPolicyArrayOutput) ToBackendTLSPolicyArrayOutputWithContext(ctx context.Context) BackendTLSPolicyArrayOutput {
	return o
}

func (o BackendTLSPolicyArrayOutput) Index(i pulumi.IntInput) BackendTLSPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackendTLSPolicy {
		return vs[0].([]*BackendTLSPolicy)[vs[1].(int)]
	}).(BackendTLSPolicyOutput)
}

type BackendTLSPolicyMapOutput struct{ *pulumi.OutputState }

func (BackendTLSPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackendTLSPolicy)(nil)).Elem()
}

func (o BackendTLSPolicyMapOutput) ToBackendTLSPolicyMapOutput() BackendTLSPolicyMapOutput {
	return o
}

func (o BackendTLSPolicyMapOutput) ToBackendTLSPolicyMapOutputWithContext(ctx context.Context) BackendTLSPolicyMapOutput {
	return o
}

func (o BackendTLSPolicyMapOutput) MapIndex(k pulumi.StringInput) BackendTLSPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackendTLSPolicy {
		return vs[0].(map[string]*BackendTLSPolicy)[vs[1].(string)]
	}).(BackendTLSPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyInput)(nil)).Elem(), &BackendTLSPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyArrayInput)(nil)).Elem(), BackendTLSPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackendTLSPolicyMapInput)(nil)).Elem(), BackendTLSPolicyMap{})
	pulumi.RegisterOutputType(BackendTLSPolicyOutput{})
	pulumi.RegisterOutputType(BackendTLSPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackendTLSPolicyMapOutput{})
}
