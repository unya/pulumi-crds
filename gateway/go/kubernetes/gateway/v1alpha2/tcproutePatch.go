// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// TCPRoute provides a way to route TCP requests. When combined with a Gateway
// listener, it can be used to forward connections on the port specified by the
// listener to a set of backends specified by the TCPRoute.
type TCPRoutePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     TCPRouteSpecPatchPtrOutput      `pulumi:"spec"`
	Status   TCPRouteStatusPatchPtrOutput    `pulumi:"status"`
}

// NewTCPRoutePatch registers a new resource with the given unique name, arguments, and options.
func NewTCPRoutePatch(ctx *pulumi.Context,
	name string, args *TCPRoutePatchArgs, opts ...pulumi.ResourceOption) (*TCPRoutePatch, error) {
	if args == nil {
		args = &TCPRoutePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("TCPRoute")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TCPRoutePatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TCPRoutePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTCPRoutePatch gets an existing TCPRoutePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTCPRoutePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TCPRoutePatchState, opts ...pulumi.ResourceOption) (*TCPRoutePatch, error) {
	var resource TCPRoutePatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TCPRoutePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TCPRoutePatch resources.
type tcproutePatchState struct {
}

type TCPRoutePatchState struct {
}

func (TCPRoutePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcproutePatchState)(nil)).Elem()
}

type tcproutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *TCPRouteSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a TCPRoutePatch resource.
type TCPRoutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     TCPRouteSpecPatchPtrInput
}

func (TCPRoutePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcproutePatchArgs)(nil)).Elem()
}

type TCPRoutePatchInput interface {
	pulumi.Input

	ToTCPRoutePatchOutput() TCPRoutePatchOutput
	ToTCPRoutePatchOutputWithContext(ctx context.Context) TCPRoutePatchOutput
}

func (*TCPRoutePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPRoutePatch)(nil)).Elem()
}

func (i *TCPRoutePatch) ToTCPRoutePatchOutput() TCPRoutePatchOutput {
	return i.ToTCPRoutePatchOutputWithContext(context.Background())
}

func (i *TCPRoutePatch) ToTCPRoutePatchOutputWithContext(ctx context.Context) TCPRoutePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPRoutePatchOutput)
}

// TCPRoutePatchArrayInput is an input type that accepts TCPRoutePatchArray and TCPRoutePatchArrayOutput values.
// You can construct a concrete instance of `TCPRoutePatchArrayInput` via:
//
//	TCPRoutePatchArray{ TCPRoutePatchArgs{...} }
type TCPRoutePatchArrayInput interface {
	pulumi.Input

	ToTCPRoutePatchArrayOutput() TCPRoutePatchArrayOutput
	ToTCPRoutePatchArrayOutputWithContext(context.Context) TCPRoutePatchArrayOutput
}

type TCPRoutePatchArray []TCPRoutePatchInput

func (TCPRoutePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TCPRoutePatch)(nil)).Elem()
}

func (i TCPRoutePatchArray) ToTCPRoutePatchArrayOutput() TCPRoutePatchArrayOutput {
	return i.ToTCPRoutePatchArrayOutputWithContext(context.Background())
}

func (i TCPRoutePatchArray) ToTCPRoutePatchArrayOutputWithContext(ctx context.Context) TCPRoutePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPRoutePatchArrayOutput)
}

// TCPRoutePatchMapInput is an input type that accepts TCPRoutePatchMap and TCPRoutePatchMapOutput values.
// You can construct a concrete instance of `TCPRoutePatchMapInput` via:
//
//	TCPRoutePatchMap{ "key": TCPRoutePatchArgs{...} }
type TCPRoutePatchMapInput interface {
	pulumi.Input

	ToTCPRoutePatchMapOutput() TCPRoutePatchMapOutput
	ToTCPRoutePatchMapOutputWithContext(context.Context) TCPRoutePatchMapOutput
}

type TCPRoutePatchMap map[string]TCPRoutePatchInput

func (TCPRoutePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TCPRoutePatch)(nil)).Elem()
}

func (i TCPRoutePatchMap) ToTCPRoutePatchMapOutput() TCPRoutePatchMapOutput {
	return i.ToTCPRoutePatchMapOutputWithContext(context.Background())
}

func (i TCPRoutePatchMap) ToTCPRoutePatchMapOutputWithContext(ctx context.Context) TCPRoutePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TCPRoutePatchMapOutput)
}

type TCPRoutePatchOutput struct{ *pulumi.OutputState }

func (TCPRoutePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TCPRoutePatch)(nil)).Elem()
}

func (o TCPRoutePatchOutput) ToTCPRoutePatchOutput() TCPRoutePatchOutput {
	return o
}

func (o TCPRoutePatchOutput) ToTCPRoutePatchOutputWithContext(ctx context.Context) TCPRoutePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TCPRoutePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPRoutePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TCPRoutePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TCPRoutePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TCPRoutePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *TCPRoutePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o TCPRoutePatchOutput) Spec() TCPRouteSpecPatchPtrOutput {
	return o.ApplyT(func(v *TCPRoutePatch) TCPRouteSpecPatchPtrOutput { return v.Spec }).(TCPRouteSpecPatchPtrOutput)
}

func (o TCPRoutePatchOutput) Status() TCPRouteStatusPatchPtrOutput {
	return o.ApplyT(func(v *TCPRoutePatch) TCPRouteStatusPatchPtrOutput { return v.Status }).(TCPRouteStatusPatchPtrOutput)
}

type TCPRoutePatchArrayOutput struct{ *pulumi.OutputState }

func (TCPRoutePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TCPRoutePatch)(nil)).Elem()
}

func (o TCPRoutePatchArrayOutput) ToTCPRoutePatchArrayOutput() TCPRoutePatchArrayOutput {
	return o
}

func (o TCPRoutePatchArrayOutput) ToTCPRoutePatchArrayOutputWithContext(ctx context.Context) TCPRoutePatchArrayOutput {
	return o
}

func (o TCPRoutePatchArrayOutput) Index(i pulumi.IntInput) TCPRoutePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TCPRoutePatch {
		return vs[0].([]*TCPRoutePatch)[vs[1].(int)]
	}).(TCPRoutePatchOutput)
}

type TCPRoutePatchMapOutput struct{ *pulumi.OutputState }

func (TCPRoutePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TCPRoutePatch)(nil)).Elem()
}

func (o TCPRoutePatchMapOutput) ToTCPRoutePatchMapOutput() TCPRoutePatchMapOutput {
	return o
}

func (o TCPRoutePatchMapOutput) ToTCPRoutePatchMapOutputWithContext(ctx context.Context) TCPRoutePatchMapOutput {
	return o
}

func (o TCPRoutePatchMapOutput) MapIndex(k pulumi.StringInput) TCPRoutePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TCPRoutePatch {
		return vs[0].(map[string]*TCPRoutePatch)[vs[1].(string)]
	}).(TCPRoutePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TCPRoutePatchInput)(nil)).Elem(), &TCPRoutePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPRoutePatchArrayInput)(nil)).Elem(), TCPRoutePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TCPRoutePatchMapInput)(nil)).Elem(), TCPRoutePatchMap{})
	pulumi.RegisterOutputType(TCPRoutePatchOutput{})
	pulumi.RegisterOutputType(TCPRoutePatchArrayOutput{})
	pulumi.RegisterOutputType(TCPRoutePatchMapOutput{})
}
