// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The TLSRoute resource is similar to TCPRoute, but can be configured
// to match against TLS-specific metadata. This allows more flexibility
// in matching streams for a given TLS listener.
//
// If you need to forward traffic to a single target for a TLS listener, you
// could choose to use a TCPRoute with a TLS listener.
type TLSRoutePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     TLSRouteSpecPatchPtrOutput      `pulumi:"spec"`
	Status   TLSRouteStatusPatchPtrOutput    `pulumi:"status"`
}

// NewTLSRoutePatch registers a new resource with the given unique name, arguments, and options.
func NewTLSRoutePatch(ctx *pulumi.Context,
	name string, args *TLSRoutePatchArgs, opts ...pulumi.ResourceOption) (*TLSRoutePatch, error) {
	if args == nil {
		args = &TLSRoutePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("TLSRoute")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TLSRoutePatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TLSRoutePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTLSRoutePatch gets an existing TLSRoutePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTLSRoutePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TLSRoutePatchState, opts ...pulumi.ResourceOption) (*TLSRoutePatch, error) {
	var resource TLSRoutePatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:TLSRoutePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TLSRoutePatch resources.
type tlsroutePatchState struct {
}

type TLSRoutePatchState struct {
}

func (TLSRoutePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsroutePatchState)(nil)).Elem()
}

type tlsroutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *TLSRouteSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a TLSRoutePatch resource.
type TLSRoutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     TLSRouteSpecPatchPtrInput
}

func (TLSRoutePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsroutePatchArgs)(nil)).Elem()
}

type TLSRoutePatchInput interface {
	pulumi.Input

	ToTLSRoutePatchOutput() TLSRoutePatchOutput
	ToTLSRoutePatchOutputWithContext(ctx context.Context) TLSRoutePatchOutput
}

func (*TLSRoutePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSRoutePatch)(nil)).Elem()
}

func (i *TLSRoutePatch) ToTLSRoutePatchOutput() TLSRoutePatchOutput {
	return i.ToTLSRoutePatchOutputWithContext(context.Background())
}

func (i *TLSRoutePatch) ToTLSRoutePatchOutputWithContext(ctx context.Context) TLSRoutePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSRoutePatchOutput)
}

// TLSRoutePatchArrayInput is an input type that accepts TLSRoutePatchArray and TLSRoutePatchArrayOutput values.
// You can construct a concrete instance of `TLSRoutePatchArrayInput` via:
//
//	TLSRoutePatchArray{ TLSRoutePatchArgs{...} }
type TLSRoutePatchArrayInput interface {
	pulumi.Input

	ToTLSRoutePatchArrayOutput() TLSRoutePatchArrayOutput
	ToTLSRoutePatchArrayOutputWithContext(context.Context) TLSRoutePatchArrayOutput
}

type TLSRoutePatchArray []TLSRoutePatchInput

func (TLSRoutePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TLSRoutePatch)(nil)).Elem()
}

func (i TLSRoutePatchArray) ToTLSRoutePatchArrayOutput() TLSRoutePatchArrayOutput {
	return i.ToTLSRoutePatchArrayOutputWithContext(context.Background())
}

func (i TLSRoutePatchArray) ToTLSRoutePatchArrayOutputWithContext(ctx context.Context) TLSRoutePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSRoutePatchArrayOutput)
}

// TLSRoutePatchMapInput is an input type that accepts TLSRoutePatchMap and TLSRoutePatchMapOutput values.
// You can construct a concrete instance of `TLSRoutePatchMapInput` via:
//
//	TLSRoutePatchMap{ "key": TLSRoutePatchArgs{...} }
type TLSRoutePatchMapInput interface {
	pulumi.Input

	ToTLSRoutePatchMapOutput() TLSRoutePatchMapOutput
	ToTLSRoutePatchMapOutputWithContext(context.Context) TLSRoutePatchMapOutput
}

type TLSRoutePatchMap map[string]TLSRoutePatchInput

func (TLSRoutePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TLSRoutePatch)(nil)).Elem()
}

func (i TLSRoutePatchMap) ToTLSRoutePatchMapOutput() TLSRoutePatchMapOutput {
	return i.ToTLSRoutePatchMapOutputWithContext(context.Background())
}

func (i TLSRoutePatchMap) ToTLSRoutePatchMapOutputWithContext(ctx context.Context) TLSRoutePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TLSRoutePatchMapOutput)
}

type TLSRoutePatchOutput struct{ *pulumi.OutputState }

func (TLSRoutePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TLSRoutePatch)(nil)).Elem()
}

func (o TLSRoutePatchOutput) ToTLSRoutePatchOutput() TLSRoutePatchOutput {
	return o
}

func (o TLSRoutePatchOutput) ToTLSRoutePatchOutputWithContext(ctx context.Context) TLSRoutePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TLSRoutePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSRoutePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TLSRoutePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TLSRoutePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TLSRoutePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *TLSRoutePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o TLSRoutePatchOutput) Spec() TLSRouteSpecPatchPtrOutput {
	return o.ApplyT(func(v *TLSRoutePatch) TLSRouteSpecPatchPtrOutput { return v.Spec }).(TLSRouteSpecPatchPtrOutput)
}

func (o TLSRoutePatchOutput) Status() TLSRouteStatusPatchPtrOutput {
	return o.ApplyT(func(v *TLSRoutePatch) TLSRouteStatusPatchPtrOutput { return v.Status }).(TLSRouteStatusPatchPtrOutput)
}

type TLSRoutePatchArrayOutput struct{ *pulumi.OutputState }

func (TLSRoutePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TLSRoutePatch)(nil)).Elem()
}

func (o TLSRoutePatchArrayOutput) ToTLSRoutePatchArrayOutput() TLSRoutePatchArrayOutput {
	return o
}

func (o TLSRoutePatchArrayOutput) ToTLSRoutePatchArrayOutputWithContext(ctx context.Context) TLSRoutePatchArrayOutput {
	return o
}

func (o TLSRoutePatchArrayOutput) Index(i pulumi.IntInput) TLSRoutePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TLSRoutePatch {
		return vs[0].([]*TLSRoutePatch)[vs[1].(int)]
	}).(TLSRoutePatchOutput)
}

type TLSRoutePatchMapOutput struct{ *pulumi.OutputState }

func (TLSRoutePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TLSRoutePatch)(nil)).Elem()
}

func (o TLSRoutePatchMapOutput) ToTLSRoutePatchMapOutput() TLSRoutePatchMapOutput {
	return o
}

func (o TLSRoutePatchMapOutput) ToTLSRoutePatchMapOutputWithContext(ctx context.Context) TLSRoutePatchMapOutput {
	return o
}

func (o TLSRoutePatchMapOutput) MapIndex(k pulumi.StringInput) TLSRoutePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TLSRoutePatch {
		return vs[0].(map[string]*TLSRoutePatch)[vs[1].(string)]
	}).(TLSRoutePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TLSRoutePatchInput)(nil)).Elem(), &TLSRoutePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*TLSRoutePatchArrayInput)(nil)).Elem(), TLSRoutePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TLSRoutePatchMapInput)(nil)).Elem(), TLSRoutePatchMap{})
	pulumi.RegisterOutputType(TLSRoutePatchOutput{})
	pulumi.RegisterOutputType(TLSRoutePatchArrayOutput{})
	pulumi.RegisterOutputType(TLSRoutePatchMapOutput{})
}
