// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// UDPRoute provides a way to route UDP traffic. When combined with a Gateway
// listener, it can be used to forward traffic on the port specified by the
// listener to a set of backends specified by the UDPRoute.
type UDPRoutePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     UDPRouteSpecPatchPtrOutput      `pulumi:"spec"`
	Status   UDPRouteStatusPatchPtrOutput    `pulumi:"status"`
}

// NewUDPRoutePatch registers a new resource with the given unique name, arguments, and options.
func NewUDPRoutePatch(ctx *pulumi.Context,
	name string, args *UDPRoutePatchArgs, opts ...pulumi.ResourceOption) (*UDPRoutePatch, error) {
	if args == nil {
		args = &UDPRoutePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1alpha2")
	args.Kind = pulumi.StringPtr("UDPRoute")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource UDPRoutePatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1alpha2:UDPRoutePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUDPRoutePatch gets an existing UDPRoutePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUDPRoutePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UDPRoutePatchState, opts ...pulumi.ResourceOption) (*UDPRoutePatch, error) {
	var resource UDPRoutePatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1alpha2:UDPRoutePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UDPRoutePatch resources.
type udproutePatchState struct {
}

type UDPRoutePatchState struct {
}

func (UDPRoutePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*udproutePatchState)(nil)).Elem()
}

type udproutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *UDPRouteSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a UDPRoutePatch resource.
type UDPRoutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     UDPRouteSpecPatchPtrInput
}

func (UDPRoutePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*udproutePatchArgs)(nil)).Elem()
}

type UDPRoutePatchInput interface {
	pulumi.Input

	ToUDPRoutePatchOutput() UDPRoutePatchOutput
	ToUDPRoutePatchOutputWithContext(ctx context.Context) UDPRoutePatchOutput
}

func (*UDPRoutePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**UDPRoutePatch)(nil)).Elem()
}

func (i *UDPRoutePatch) ToUDPRoutePatchOutput() UDPRoutePatchOutput {
	return i.ToUDPRoutePatchOutputWithContext(context.Background())
}

func (i *UDPRoutePatch) ToUDPRoutePatchOutputWithContext(ctx context.Context) UDPRoutePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UDPRoutePatchOutput)
}

// UDPRoutePatchArrayInput is an input type that accepts UDPRoutePatchArray and UDPRoutePatchArrayOutput values.
// You can construct a concrete instance of `UDPRoutePatchArrayInput` via:
//
//	UDPRoutePatchArray{ UDPRoutePatchArgs{...} }
type UDPRoutePatchArrayInput interface {
	pulumi.Input

	ToUDPRoutePatchArrayOutput() UDPRoutePatchArrayOutput
	ToUDPRoutePatchArrayOutputWithContext(context.Context) UDPRoutePatchArrayOutput
}

type UDPRoutePatchArray []UDPRoutePatchInput

func (UDPRoutePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UDPRoutePatch)(nil)).Elem()
}

func (i UDPRoutePatchArray) ToUDPRoutePatchArrayOutput() UDPRoutePatchArrayOutput {
	return i.ToUDPRoutePatchArrayOutputWithContext(context.Background())
}

func (i UDPRoutePatchArray) ToUDPRoutePatchArrayOutputWithContext(ctx context.Context) UDPRoutePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UDPRoutePatchArrayOutput)
}

// UDPRoutePatchMapInput is an input type that accepts UDPRoutePatchMap and UDPRoutePatchMapOutput values.
// You can construct a concrete instance of `UDPRoutePatchMapInput` via:
//
//	UDPRoutePatchMap{ "key": UDPRoutePatchArgs{...} }
type UDPRoutePatchMapInput interface {
	pulumi.Input

	ToUDPRoutePatchMapOutput() UDPRoutePatchMapOutput
	ToUDPRoutePatchMapOutputWithContext(context.Context) UDPRoutePatchMapOutput
}

type UDPRoutePatchMap map[string]UDPRoutePatchInput

func (UDPRoutePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UDPRoutePatch)(nil)).Elem()
}

func (i UDPRoutePatchMap) ToUDPRoutePatchMapOutput() UDPRoutePatchMapOutput {
	return i.ToUDPRoutePatchMapOutputWithContext(context.Background())
}

func (i UDPRoutePatchMap) ToUDPRoutePatchMapOutputWithContext(ctx context.Context) UDPRoutePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UDPRoutePatchMapOutput)
}

type UDPRoutePatchOutput struct{ *pulumi.OutputState }

func (UDPRoutePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UDPRoutePatch)(nil)).Elem()
}

func (o UDPRoutePatchOutput) ToUDPRoutePatchOutput() UDPRoutePatchOutput {
	return o
}

func (o UDPRoutePatchOutput) ToUDPRoutePatchOutputWithContext(ctx context.Context) UDPRoutePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o UDPRoutePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UDPRoutePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o UDPRoutePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UDPRoutePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o UDPRoutePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *UDPRoutePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o UDPRoutePatchOutput) Spec() UDPRouteSpecPatchPtrOutput {
	return o.ApplyT(func(v *UDPRoutePatch) UDPRouteSpecPatchPtrOutput { return v.Spec }).(UDPRouteSpecPatchPtrOutput)
}

func (o UDPRoutePatchOutput) Status() UDPRouteStatusPatchPtrOutput {
	return o.ApplyT(func(v *UDPRoutePatch) UDPRouteStatusPatchPtrOutput { return v.Status }).(UDPRouteStatusPatchPtrOutput)
}

type UDPRoutePatchArrayOutput struct{ *pulumi.OutputState }

func (UDPRoutePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UDPRoutePatch)(nil)).Elem()
}

func (o UDPRoutePatchArrayOutput) ToUDPRoutePatchArrayOutput() UDPRoutePatchArrayOutput {
	return o
}

func (o UDPRoutePatchArrayOutput) ToUDPRoutePatchArrayOutputWithContext(ctx context.Context) UDPRoutePatchArrayOutput {
	return o
}

func (o UDPRoutePatchArrayOutput) Index(i pulumi.IntInput) UDPRoutePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UDPRoutePatch {
		return vs[0].([]*UDPRoutePatch)[vs[1].(int)]
	}).(UDPRoutePatchOutput)
}

type UDPRoutePatchMapOutput struct{ *pulumi.OutputState }

func (UDPRoutePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UDPRoutePatch)(nil)).Elem()
}

func (o UDPRoutePatchMapOutput) ToUDPRoutePatchMapOutput() UDPRoutePatchMapOutput {
	return o
}

func (o UDPRoutePatchMapOutput) ToUDPRoutePatchMapOutputWithContext(ctx context.Context) UDPRoutePatchMapOutput {
	return o
}

func (o UDPRoutePatchMapOutput) MapIndex(k pulumi.StringInput) UDPRoutePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UDPRoutePatch {
		return vs[0].(map[string]*UDPRoutePatch)[vs[1].(string)]
	}).(UDPRoutePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UDPRoutePatchInput)(nil)).Elem(), &UDPRoutePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*UDPRoutePatchArrayInput)(nil)).Elem(), UDPRoutePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UDPRoutePatchMapInput)(nil)).Elem(), UDPRoutePatchMap{})
	pulumi.RegisterOutputType(UDPRoutePatchOutput{})
	pulumi.RegisterOutputType(UDPRoutePatchArrayOutput{})
	pulumi.RegisterOutputType(UDPRoutePatchMapOutput{})
}
