// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// XBackendTrafficPolicy defines the configuration for how traffic to a
// target backend should be handled.
type XBackendTrafficPolicy struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput              `pulumi:"metadata"`
	Spec     XBackendTrafficPolicySpecOutput      `pulumi:"spec"`
	Status   XBackendTrafficPolicyStatusPtrOutput `pulumi:"status"`
}

// NewXBackendTrafficPolicy registers a new resource with the given unique name, arguments, and options.
func NewXBackendTrafficPolicy(ctx *pulumi.Context,
	name string, args *XBackendTrafficPolicyArgs, opts ...pulumi.ResourceOption) (*XBackendTrafficPolicy, error) {
	if args == nil {
		args = &XBackendTrafficPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.x-k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("XBackendTrafficPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource XBackendTrafficPolicy
	err := ctx.RegisterResource("kubernetes:gateway.networking.x-k8s.io/v1alpha1:XBackendTrafficPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetXBackendTrafficPolicy gets an existing XBackendTrafficPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetXBackendTrafficPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *XBackendTrafficPolicyState, opts ...pulumi.ResourceOption) (*XBackendTrafficPolicy, error) {
	var resource XBackendTrafficPolicy
	err := ctx.ReadResource("kubernetes:gateway.networking.x-k8s.io/v1alpha1:XBackendTrafficPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering XBackendTrafficPolicy resources.
type xbackendTrafficPolicyState struct {
}

type XBackendTrafficPolicyState struct {
}

func (XBackendTrafficPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*xbackendTrafficPolicyState)(nil)).Elem()
}

type xbackendTrafficPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta         `pulumi:"metadata"`
	Spec     *XBackendTrafficPolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a XBackendTrafficPolicy resource.
type XBackendTrafficPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     XBackendTrafficPolicySpecPtrInput
}

func (XBackendTrafficPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*xbackendTrafficPolicyArgs)(nil)).Elem()
}

type XBackendTrafficPolicyInput interface {
	pulumi.Input

	ToXBackendTrafficPolicyOutput() XBackendTrafficPolicyOutput
	ToXBackendTrafficPolicyOutputWithContext(ctx context.Context) XBackendTrafficPolicyOutput
}

func (*XBackendTrafficPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**XBackendTrafficPolicy)(nil)).Elem()
}

func (i *XBackendTrafficPolicy) ToXBackendTrafficPolicyOutput() XBackendTrafficPolicyOutput {
	return i.ToXBackendTrafficPolicyOutputWithContext(context.Background())
}

func (i *XBackendTrafficPolicy) ToXBackendTrafficPolicyOutputWithContext(ctx context.Context) XBackendTrafficPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XBackendTrafficPolicyOutput)
}

// XBackendTrafficPolicyArrayInput is an input type that accepts XBackendTrafficPolicyArray and XBackendTrafficPolicyArrayOutput values.
// You can construct a concrete instance of `XBackendTrafficPolicyArrayInput` via:
//
//	XBackendTrafficPolicyArray{ XBackendTrafficPolicyArgs{...} }
type XBackendTrafficPolicyArrayInput interface {
	pulumi.Input

	ToXBackendTrafficPolicyArrayOutput() XBackendTrafficPolicyArrayOutput
	ToXBackendTrafficPolicyArrayOutputWithContext(context.Context) XBackendTrafficPolicyArrayOutput
}

type XBackendTrafficPolicyArray []XBackendTrafficPolicyInput

func (XBackendTrafficPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XBackendTrafficPolicy)(nil)).Elem()
}

func (i XBackendTrafficPolicyArray) ToXBackendTrafficPolicyArrayOutput() XBackendTrafficPolicyArrayOutput {
	return i.ToXBackendTrafficPolicyArrayOutputWithContext(context.Background())
}

func (i XBackendTrafficPolicyArray) ToXBackendTrafficPolicyArrayOutputWithContext(ctx context.Context) XBackendTrafficPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XBackendTrafficPolicyArrayOutput)
}

// XBackendTrafficPolicyMapInput is an input type that accepts XBackendTrafficPolicyMap and XBackendTrafficPolicyMapOutput values.
// You can construct a concrete instance of `XBackendTrafficPolicyMapInput` via:
//
//	XBackendTrafficPolicyMap{ "key": XBackendTrafficPolicyArgs{...} }
type XBackendTrafficPolicyMapInput interface {
	pulumi.Input

	ToXBackendTrafficPolicyMapOutput() XBackendTrafficPolicyMapOutput
	ToXBackendTrafficPolicyMapOutputWithContext(context.Context) XBackendTrafficPolicyMapOutput
}

type XBackendTrafficPolicyMap map[string]XBackendTrafficPolicyInput

func (XBackendTrafficPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XBackendTrafficPolicy)(nil)).Elem()
}

func (i XBackendTrafficPolicyMap) ToXBackendTrafficPolicyMapOutput() XBackendTrafficPolicyMapOutput {
	return i.ToXBackendTrafficPolicyMapOutputWithContext(context.Background())
}

func (i XBackendTrafficPolicyMap) ToXBackendTrafficPolicyMapOutputWithContext(ctx context.Context) XBackendTrafficPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XBackendTrafficPolicyMapOutput)
}

type XBackendTrafficPolicyOutput struct{ *pulumi.OutputState }

func (XBackendTrafficPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XBackendTrafficPolicy)(nil)).Elem()
}

func (o XBackendTrafficPolicyOutput) ToXBackendTrafficPolicyOutput() XBackendTrafficPolicyOutput {
	return o
}

func (o XBackendTrafficPolicyOutput) ToXBackendTrafficPolicyOutputWithContext(ctx context.Context) XBackendTrafficPolicyOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o XBackendTrafficPolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o XBackendTrafficPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o XBackendTrafficPolicyOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicy) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o XBackendTrafficPolicyOutput) Spec() XBackendTrafficPolicySpecOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicy) XBackendTrafficPolicySpecOutput { return v.Spec }).(XBackendTrafficPolicySpecOutput)
}

func (o XBackendTrafficPolicyOutput) Status() XBackendTrafficPolicyStatusPtrOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicy) XBackendTrafficPolicyStatusPtrOutput { return v.Status }).(XBackendTrafficPolicyStatusPtrOutput)
}

type XBackendTrafficPolicyArrayOutput struct{ *pulumi.OutputState }

func (XBackendTrafficPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XBackendTrafficPolicy)(nil)).Elem()
}

func (o XBackendTrafficPolicyArrayOutput) ToXBackendTrafficPolicyArrayOutput() XBackendTrafficPolicyArrayOutput {
	return o
}

func (o XBackendTrafficPolicyArrayOutput) ToXBackendTrafficPolicyArrayOutputWithContext(ctx context.Context) XBackendTrafficPolicyArrayOutput {
	return o
}

func (o XBackendTrafficPolicyArrayOutput) Index(i pulumi.IntInput) XBackendTrafficPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *XBackendTrafficPolicy {
		return vs[0].([]*XBackendTrafficPolicy)[vs[1].(int)]
	}).(XBackendTrafficPolicyOutput)
}

type XBackendTrafficPolicyMapOutput struct{ *pulumi.OutputState }

func (XBackendTrafficPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XBackendTrafficPolicy)(nil)).Elem()
}

func (o XBackendTrafficPolicyMapOutput) ToXBackendTrafficPolicyMapOutput() XBackendTrafficPolicyMapOutput {
	return o
}

func (o XBackendTrafficPolicyMapOutput) ToXBackendTrafficPolicyMapOutputWithContext(ctx context.Context) XBackendTrafficPolicyMapOutput {
	return o
}

func (o XBackendTrafficPolicyMapOutput) MapIndex(k pulumi.StringInput) XBackendTrafficPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *XBackendTrafficPolicy {
		return vs[0].(map[string]*XBackendTrafficPolicy)[vs[1].(string)]
	}).(XBackendTrafficPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*XBackendTrafficPolicyInput)(nil)).Elem(), &XBackendTrafficPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*XBackendTrafficPolicyArrayInput)(nil)).Elem(), XBackendTrafficPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XBackendTrafficPolicyMapInput)(nil)).Elem(), XBackendTrafficPolicyMap{})
	pulumi.RegisterOutputType(XBackendTrafficPolicyOutput{})
	pulumi.RegisterOutputType(XBackendTrafficPolicyArrayOutput{})
	pulumi.RegisterOutputType(XBackendTrafficPolicyMapOutput{})
}
