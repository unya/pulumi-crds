// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// XBackendTrafficPolicy defines the configuration for how traffic to a
// target backend should be handled.
type XBackendTrafficPolicyPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput           `pulumi:"metadata"`
	Spec     XBackendTrafficPolicySpecPatchPtrOutput   `pulumi:"spec"`
	Status   XBackendTrafficPolicyStatusPatchPtrOutput `pulumi:"status"`
}

// NewXBackendTrafficPolicyPatch registers a new resource with the given unique name, arguments, and options.
func NewXBackendTrafficPolicyPatch(ctx *pulumi.Context,
	name string, args *XBackendTrafficPolicyPatchArgs, opts ...pulumi.ResourceOption) (*XBackendTrafficPolicyPatch, error) {
	if args == nil {
		args = &XBackendTrafficPolicyPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.x-k8s.io/v1alpha1")
	args.Kind = pulumi.StringPtr("XBackendTrafficPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource XBackendTrafficPolicyPatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.x-k8s.io/v1alpha1:XBackendTrafficPolicyPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetXBackendTrafficPolicyPatch gets an existing XBackendTrafficPolicyPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetXBackendTrafficPolicyPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *XBackendTrafficPolicyPatchState, opts ...pulumi.ResourceOption) (*XBackendTrafficPolicyPatch, error) {
	var resource XBackendTrafficPolicyPatch
	err := ctx.ReadResource("kubernetes:gateway.networking.x-k8s.io/v1alpha1:XBackendTrafficPolicyPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering XBackendTrafficPolicyPatch resources.
type xbackendTrafficPolicyPatchState struct {
}

type XBackendTrafficPolicyPatchState struct {
}

func (XBackendTrafficPolicyPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*xbackendTrafficPolicyPatchState)(nil)).Elem()
}

type xbackendTrafficPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch         `pulumi:"metadata"`
	Spec     *XBackendTrafficPolicySpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a XBackendTrafficPolicyPatch resource.
type XBackendTrafficPolicyPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     XBackendTrafficPolicySpecPatchPtrInput
}

func (XBackendTrafficPolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*xbackendTrafficPolicyPatchArgs)(nil)).Elem()
}

type XBackendTrafficPolicyPatchInput interface {
	pulumi.Input

	ToXBackendTrafficPolicyPatchOutput() XBackendTrafficPolicyPatchOutput
	ToXBackendTrafficPolicyPatchOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchOutput
}

func (*XBackendTrafficPolicyPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**XBackendTrafficPolicyPatch)(nil)).Elem()
}

func (i *XBackendTrafficPolicyPatch) ToXBackendTrafficPolicyPatchOutput() XBackendTrafficPolicyPatchOutput {
	return i.ToXBackendTrafficPolicyPatchOutputWithContext(context.Background())
}

func (i *XBackendTrafficPolicyPatch) ToXBackendTrafficPolicyPatchOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XBackendTrafficPolicyPatchOutput)
}

// XBackendTrafficPolicyPatchArrayInput is an input type that accepts XBackendTrafficPolicyPatchArray and XBackendTrafficPolicyPatchArrayOutput values.
// You can construct a concrete instance of `XBackendTrafficPolicyPatchArrayInput` via:
//
//	XBackendTrafficPolicyPatchArray{ XBackendTrafficPolicyPatchArgs{...} }
type XBackendTrafficPolicyPatchArrayInput interface {
	pulumi.Input

	ToXBackendTrafficPolicyPatchArrayOutput() XBackendTrafficPolicyPatchArrayOutput
	ToXBackendTrafficPolicyPatchArrayOutputWithContext(context.Context) XBackendTrafficPolicyPatchArrayOutput
}

type XBackendTrafficPolicyPatchArray []XBackendTrafficPolicyPatchInput

func (XBackendTrafficPolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XBackendTrafficPolicyPatch)(nil)).Elem()
}

func (i XBackendTrafficPolicyPatchArray) ToXBackendTrafficPolicyPatchArrayOutput() XBackendTrafficPolicyPatchArrayOutput {
	return i.ToXBackendTrafficPolicyPatchArrayOutputWithContext(context.Background())
}

func (i XBackendTrafficPolicyPatchArray) ToXBackendTrafficPolicyPatchArrayOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XBackendTrafficPolicyPatchArrayOutput)
}

// XBackendTrafficPolicyPatchMapInput is an input type that accepts XBackendTrafficPolicyPatchMap and XBackendTrafficPolicyPatchMapOutput values.
// You can construct a concrete instance of `XBackendTrafficPolicyPatchMapInput` via:
//
//	XBackendTrafficPolicyPatchMap{ "key": XBackendTrafficPolicyPatchArgs{...} }
type XBackendTrafficPolicyPatchMapInput interface {
	pulumi.Input

	ToXBackendTrafficPolicyPatchMapOutput() XBackendTrafficPolicyPatchMapOutput
	ToXBackendTrafficPolicyPatchMapOutputWithContext(context.Context) XBackendTrafficPolicyPatchMapOutput
}

type XBackendTrafficPolicyPatchMap map[string]XBackendTrafficPolicyPatchInput

func (XBackendTrafficPolicyPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XBackendTrafficPolicyPatch)(nil)).Elem()
}

func (i XBackendTrafficPolicyPatchMap) ToXBackendTrafficPolicyPatchMapOutput() XBackendTrafficPolicyPatchMapOutput {
	return i.ToXBackendTrafficPolicyPatchMapOutputWithContext(context.Background())
}

func (i XBackendTrafficPolicyPatchMap) ToXBackendTrafficPolicyPatchMapOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(XBackendTrafficPolicyPatchMapOutput)
}

type XBackendTrafficPolicyPatchOutput struct{ *pulumi.OutputState }

func (XBackendTrafficPolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XBackendTrafficPolicyPatch)(nil)).Elem()
}

func (o XBackendTrafficPolicyPatchOutput) ToXBackendTrafficPolicyPatchOutput() XBackendTrafficPolicyPatchOutput {
	return o
}

func (o XBackendTrafficPolicyPatchOutput) ToXBackendTrafficPolicyPatchOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o XBackendTrafficPolicyPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicyPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o XBackendTrafficPolicyPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicyPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o XBackendTrafficPolicyPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicyPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o XBackendTrafficPolicyPatchOutput) Spec() XBackendTrafficPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicyPatch) XBackendTrafficPolicySpecPatchPtrOutput { return v.Spec }).(XBackendTrafficPolicySpecPatchPtrOutput)
}

func (o XBackendTrafficPolicyPatchOutput) Status() XBackendTrafficPolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v *XBackendTrafficPolicyPatch) XBackendTrafficPolicyStatusPatchPtrOutput { return v.Status }).(XBackendTrafficPolicyStatusPatchPtrOutput)
}

type XBackendTrafficPolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (XBackendTrafficPolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*XBackendTrafficPolicyPatch)(nil)).Elem()
}

func (o XBackendTrafficPolicyPatchArrayOutput) ToXBackendTrafficPolicyPatchArrayOutput() XBackendTrafficPolicyPatchArrayOutput {
	return o
}

func (o XBackendTrafficPolicyPatchArrayOutput) ToXBackendTrafficPolicyPatchArrayOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchArrayOutput {
	return o
}

func (o XBackendTrafficPolicyPatchArrayOutput) Index(i pulumi.IntInput) XBackendTrafficPolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *XBackendTrafficPolicyPatch {
		return vs[0].([]*XBackendTrafficPolicyPatch)[vs[1].(int)]
	}).(XBackendTrafficPolicyPatchOutput)
}

type XBackendTrafficPolicyPatchMapOutput struct{ *pulumi.OutputState }

func (XBackendTrafficPolicyPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*XBackendTrafficPolicyPatch)(nil)).Elem()
}

func (o XBackendTrafficPolicyPatchMapOutput) ToXBackendTrafficPolicyPatchMapOutput() XBackendTrafficPolicyPatchMapOutput {
	return o
}

func (o XBackendTrafficPolicyPatchMapOutput) ToXBackendTrafficPolicyPatchMapOutputWithContext(ctx context.Context) XBackendTrafficPolicyPatchMapOutput {
	return o
}

func (o XBackendTrafficPolicyPatchMapOutput) MapIndex(k pulumi.StringInput) XBackendTrafficPolicyPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *XBackendTrafficPolicyPatch {
		return vs[0].(map[string]*XBackendTrafficPolicyPatch)[vs[1].(string)]
	}).(XBackendTrafficPolicyPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*XBackendTrafficPolicyPatchInput)(nil)).Elem(), &XBackendTrafficPolicyPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*XBackendTrafficPolicyPatchArrayInput)(nil)).Elem(), XBackendTrafficPolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*XBackendTrafficPolicyPatchMapInput)(nil)).Elem(), XBackendTrafficPolicyPatchMap{})
	pulumi.RegisterOutputType(XBackendTrafficPolicyPatchOutput{})
	pulumi.RegisterOutputType(XBackendTrafficPolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(XBackendTrafficPolicyPatchMapOutput{})
}
